	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\.IfxHssl_Hssl.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.src ..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c'

	
$TC162
	.sdecl	'.zrodata.IfxPort..1.cnt',data,rom
	.sect	'.zrodata.IfxPort..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	-268192512
	.sdecl	'.zrodata.IfxPort..2.cnt',data,rom
	.sect	'.zrodata.IfxPort..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268192256
	.sdecl	'.zrodata.IfxPort..3.cnt',data,rom
	.sect	'.zrodata.IfxPort..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268192768
	.sdecl	'.zrodata.IfxHssl_Hssl..4.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268192352
	.sdecl	'.zrodata.IfxHssl_Hssl..5.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268192348
	.sdecl	'.zrodata.IfxHssl_Hssl..6.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..6.cnt'
	.align	2
.6.cnt:	.type	object
	.size	.6.cnt,4
	.word	-268192091
	.sdecl	'.zrodata.IfxHssl_Hssl..7.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..7.cnt'
	.align	2
.7.cnt:	.type	object
	.size	.7.cnt,4
	.word	-268192343
	.sdecl	'.zrodata.IfxHssl_Hssl..8.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..8.cnt'
	.align	2
.8.cnt:	.type	object
	.size	.8.cnt,4
	.word	-268434332
	.sdecl	'.zrodata.IfxHssl_Hssl..9.cnt',data,rom
	.sect	'.zrodata.IfxHssl_Hssl..9.cnt'
	.align	2
.9.cnt:	.type	object
	.size	.9.cnt,4
	.word	459008
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_checkErrors',code,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_checkErrors'
	.align	2
	
	.global	IfxHssl_Hssl_checkErrors

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     2   * \file IfxHssl_Hssl.c
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     4   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     7   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    10   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    15   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    17   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    24   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    31   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    39   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    41   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    42  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    44  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    45  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    46  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    47  #include "IfxHssl_Hssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    48  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    50  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    52  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    53  void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl)
; Function IfxHssl_Hssl_checkErrors
.L87:
IfxHssl_Hssl_checkErrors:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    54  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    55      Ifx_HSSL *hsslSFR = hssl->hssl; /* pointer to HSSL registers */
	ld.a	a15,[a4]
.L374:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    56  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    57      /* store the errors in the structure */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    58      if (hsslSFR->MFLAGS.B.NACK != 0)
	ld.bu	d15,[a15]24
	and	d15,#15
.L676:
	jeq	d15,#0,.L2
.L677:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    59      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    60          hssl->errorFlags.notAcknowledgeError = 1;
	ld.bu	d15,[a4]4
.L678:
	or	d15,#1
	st.b	[a4]4,d15
.L2:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    61      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    62  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    63      if (hsslSFR->MFLAGS.B.TTE != 0)
	ld.bu	d15,[a15]24
	extr.u	d15,d15,#4,#4
.L679:
	jeq	d15,#0,.L3
.L680:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    64      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    65          hssl->errorFlags.transactionTagError = 1;
	ld.bu	d15,[a4]4
.L681:
	or	d15,#2
	st.b	[a4]4,d15
.L3:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    66      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    67  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    68      if (hsslSFR->MFLAGS.B.TIMEOUT != 0)
	ld.bu	d15,[a15]25
	and	d15,#15
.L682:
	jeq	d15,#0,.L4
.L683:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    69      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    70          hssl->errorFlags.timeoutError = 1;
	ld.bu	d15,[a4]4
.L684:
	or	d15,#4
	st.b	[a4]4,d15
.L4:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    71      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    72  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    73      if (hsslSFR->MFLAGS.B.UNEXPECTED != 0)
	ld.bu	d15,[a15]25
	extr.u	d15,d15,#4,#4
.L685:
	jeq	d15,#0,.L5
.L686:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    74      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    75          hssl->errorFlags.unexpectedError = 1;
	ld.bu	d15,[a4]4
.L687:
	or	d15,#8
	st.b	[a4]4,d15
.L5:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    76      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    77  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    78      if (hsslSFR->MFLAGS.B.MAV != 0)
	ld.bu	d15,[a15]26
.L688:
	jz.t	d15:5,.L6
.L689:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    79      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    80          hssl->errorFlags.memoryAccessViolation = 1;
	ld.bu	d15,[a4]4
.L690:
	or	d15,#16
	st.b	[a4]4,d15
.L6:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    81      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    82  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    83      if (hsslSFR->MFLAGS.B.SRIE != 0)
	ld.bu	d15,[a15]26
.L691:
	jz.t	d15:6,.L7
.L692:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    84      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    85          hssl->errorFlags.busAccessError = 1;
	ld.bu	d15,[a4]4
.L693:
	or	d15,#32
	st.b	[a4]4,d15
.L7:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    86      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    87  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    88      if (hsslSFR->MFLAGS.B.PIE1 != 0)
	ld.bu	d15,[a15]26
.L694:
	jz.t	d15:7,.L8
.L695:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    89      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    90          hssl->errorFlags.channelNumberCodeError = 1;
	ld.bu	d15,[a4]4
.L696:
	or	d15,#64
	st.b	[a4]4,d15
.L8:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    91      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    92  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    93      if (hsslSFR->MFLAGS.B.PIE2 != 0)
	ld.bu	d15,[a15]27
.L697:
	jz.t	d15:0,.L9
.L698:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    94      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    95          hssl->errorFlags.dataLengthError = 1;
	ld.bu	d15,[a4]4
.L699:
	or	d15,#128
	st.b	[a4]4,d15
.L9:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    96      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    97  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    98      if (hsslSFR->MFLAGS.B.CRCE != 0)
	ld.bu	d15,[a15]27
.L700:
	jz.t	d15:1,.L10
.L701:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	    99      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   100          hssl->errorFlags.crcError = 1;
	ld.bu	d15,[a4]5
.L702:
	or	d15,#1
	st.b	[a4]5,d15
.L10:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   101      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   102  }
	ret
.L337:
	
__IfxHssl_Hssl_checkErrors_function_end:
	.size	IfxHssl_Hssl_checkErrors,__IfxHssl_Hssl_checkErrors_function_end-IfxHssl_Hssl_checkErrors
.L189:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_clearErrorFlags',code,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_clearErrorFlags'
	.align	2
	
	.global	IfxHssl_Hssl_clearErrorFlags

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   103  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   104  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   105  void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl)
; Function IfxHssl_Hssl_clearErrorFlags
.L89:
IfxHssl_Hssl_clearErrorFlags:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   106  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   107      hssl->errorFlags.notAcknowledgeError    = 0;
	mov	d15,#0
	st.h	[a4]4,d15
.L707:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   108      hssl->errorFlags.transactionTagError    = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   109      hssl->errorFlags.timeoutError           = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   110      hssl->errorFlags.unexpectedError        = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   111      hssl->errorFlags.memoryAccessViolation  = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   112      hssl->errorFlags.busAccessError         = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   113      hssl->errorFlags.channelNumberCodeError = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   114      hssl->errorFlags.dataLengthError        = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   115      hssl->errorFlags.crcError               = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   116  }
	ret
.L340:
	
__IfxHssl_Hssl_clearErrorFlags_function_end:
	.size	IfxHssl_Hssl_clearErrorFlags,__IfxHssl_Hssl_clearErrorFlags_function_end-IfxHssl_Hssl_clearErrorFlags
.L194:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_delay',code,cluster('IfxHssl_Hssl_delay')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_delay'
	.align	2
	
	.global	IfxHssl_Hssl_delay

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   117  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   118  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   119  void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct)
; Function IfxHssl_Hssl_delay
.L91:
IfxHssl_Hssl_delay:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   120  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   121      uint32 i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   122      IFX_UNUSED_PARAMETER(hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   123  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   124      for (i = 0; i < 8000; i++)
	lea	a15,7999
.L11:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   125      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   126          __nop();
	nop
.L712:
	loop	a15,.L11
.L713:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   127      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   128  }
	ret
.L342:
	
__IfxHssl_Hssl_delay_function_end:
	.size	IfxHssl_Hssl_delay,__IfxHssl_Hssl_delay_function_end-IfxHssl_Hssl_delay
.L199:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initChannel',code,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initChannel'
	.align	2
	
	.global	IfxHssl_Hssl_initChannel

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   129  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   130  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   131  void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig)
; Function IfxHssl_Hssl_initChannel
.L93:
IfxHssl_Hssl_initChannel:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   132  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   133      channel->hssl                = channelConfig->hssl;                /* adding HSSL register pointer to channel handle */
	ld.a	a15,[a5]
.L579:
	st.a	[a4],a15
.L580:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   134      channel->hsct                = channelConfig->hsct;                /* adding HSCT register pointer to channel handle */
	ld.a	a15,[a5]4
.L581:
	st.a	[a4]4,a15
.L582:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   135  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   136      channel->channelId           = channelConfig->channelId;           /* adding channel id to channel handle */
	ld.bu	d15,[a5]8
.L583:
	st.b	[a4]8,d15
.L584:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   137      channel->currentFrameRequest = IfxHssl_Hssl_FrameRequest_noAction; /* default request, no action */
	mov	d15,#5
	st.b	[a4]9,d15
.L585:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   138  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   139      channel->streamingModeOn     = FALSE;                              /* command mode (used in waitAcknowledge function) */
	mov	d15,#0
	st.b	[a4]12,d15
.L586:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   140      channel->streamingMode       = channelConfig->streamingMode;       /* adding streaming mode to channel handle */
	ld.bu	d15,[a5]9
.L587:
	st.b	[a4]10,d15
.L588:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   141      channel->loopBack            = channelConfig->loopBack;            /* adding loopback selection to channel handle */
	ld.bu	d15,[a5]10
.L589:
	st.b	[a4]11,d15
.L590:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   142  }
	ret
.L290:
	
__IfxHssl_Hssl_initChannel_function_end:
	.size	IfxHssl_Hssl_initChannel,__IfxHssl_Hssl_initChannel_function_end-IfxHssl_Hssl_initChannel
.L154:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initChannelConfig',code,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initChannelConfig'
	.align	2
	
	.global	IfxHssl_Hssl_initChannelConfig

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   143  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   144  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   145  void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct)
; Function IfxHssl_Hssl_initChannelConfig
.L95:
IfxHssl_Hssl_initChannelConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   146  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   147      channelConfig->hssl          = hssl->hssl;
	ld.a	a15,[a5]
.L595:
	st.a	[a4],a15
.L596:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   148      channelConfig->hsct          = hsct->hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   149  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   150      channelConfig->channelId     = IfxHssl_ChannelId_0;          /* default channel 0 */
	mov	d15,#0
.L597:
	ld.a	a15,[a6]
.L598:
	st.a	[a4]4,a15
.L599:
	st.b	[a4]8,d15
.L600:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   151      channelConfig->streamingMode = IfxHssl_StreamingMode_single; /* default streaming mode continuous */
	mov	d15,#1
	st.b	[a4]9,d15
.L601:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   152      channelConfig->loopBack      = hsct->loopBack;
	ld.bu	d15,[a6]4
.L602:
	st.b	[a4]10,d15
.L603:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   153      hssl->loopBack               = hsct->loopBack;               /* copy to hssl handle, used in trasfer apis */
	ld.bu	d15,[a6]4
.L604:
	st.b	[a5]6,d15
.L605:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   154  }
	ret
.L295:
	
__IfxHssl_Hssl_initChannelConfig_function_end:
	.size	IfxHssl_Hssl_initChannelConfig,__IfxHssl_Hssl_initChannelConfig_function_end-IfxHssl_Hssl_initChannelConfig
.L159:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsctModule',code,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsctModule'
	.align	2
	
	.global	IfxHssl_Hssl_initHsctModule

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   155  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   156  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   157  void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config)
; Function IfxHssl_Hssl_initHsctModule
.L97:
IfxHssl_Hssl_initHsctModule:	.type	func
	mov.aa	a15,a5
.L388:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   158  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   159      Ifx_HSCT *hsctSFR = config->hsct;   /* pointer to HSCT registers */
	ld.a	a13,[a15]
.L389:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   160  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   161      hsct->hsct     = hsctSFR;           /* adding HSCT register pointer to module handle */
	st.a	[a4],a13
.L477:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   162      hsct->loopBack = config->loopBack;  /* adding loopback selection to module handle */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   163  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   164  #ifndef IFXHSSL_HSCT_DISABLE_PINCONFIG
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   165  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   166      /* Pad initialisiation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   167      if (hsctSFR == &MODULE_HSCT1)
	movh.a	a14,#61451
.L478:
	ld.bu	d15,[a15]6
.L479:
	st.b	[a4]4,d15
.L239:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	ld.w	d15,.1.cnt
.L480:
	mov.a	a12,d15
.L240:
	jne.a	a13,a14,.L12
.L249:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	mov	d4,#0
	mov.aa	a4,a12
.L375:
	mov	d5,d4
	call	IfxPort_setPinMode
.L250:
	mov	d4,#1
	mov.aa	a4,a12
	mov	d5,#0
	call	IfxPort_setPinMode
.L251:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	ld.w	d15,.2.cnt
.L481:
	mov	d4,#2
.L482:
	mov.a	a12,d15
.L483:
	mov	d5,#128
	mov.aa	a4,a12
	call	IfxPort_setPinMode
.L253:
	mov	d4,#3

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   168      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   169          IfxPort_setPinModeInput(&MODULE_P21, 0, IfxPort_InputMode_noPullDevice);                          /* RXDN */
	j	.L13
.L12:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	mov	d4,#2
	mov.aa	a4,a12
.L376:
	mov	d5,#0
	call	IfxPort_setPinMode
.L263:
	mov	d4,#3
	mov.aa	a4,a12
	mov	d5,#0
	call	IfxPort_setPinMode
.L264:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	mov	d4,#4
	mov.aa	a4,a12
	mov	d5,#128
	call	IfxPort_setPinMode
.L265:
	mov	d4,#5

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   170          IfxPort_setPinModeInput(&MODULE_P21, 1, IfxPort_InputMode_noPullDevice);                          /* RXDP */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   171          IfxPort_setPinModeOutput(&MODULE_P22, 2, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general); /* TXDN */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   172          IfxPort_setPinModeOutput(&MODULE_P22, 3, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general); /* TXDP */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   173      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   174      else
.L13:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	mov.aa	a4,a12
	mov	d5,#128
	call	IfxPort_setPinMode
.L266:
	ld.w	d15,.3.cnt
.L484:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   175      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   176          IfxPort_setPinModeInput(&MODULE_P21, 2, IfxPort_InputMode_noPullDevice);                          /* RXDN */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   177          IfxPort_setPinModeInput(&MODULE_P21, 3, IfxPort_InputMode_noPullDevice);                          /* RXDP */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   178          IfxPort_setPinModeOutput(&MODULE_P21, 4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general); /* TXDN */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   179          IfxPort_setPinModeOutput(&MODULE_P21, 5, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general); /* TXDP */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   180      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   181  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   182      /* select the clock direction */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   183      if (config->interfaceMode == IfxHssl_InterfaceMode_master)
	mov.a	a12,d15
.L267:
	ld.bu	d15,[a15]4
.L485:
	jne	d15,#0,.L14
.L269:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	mov	d4,#0
	mov.aa	a4,a12
	mov	d5,#168
	call	IfxPort_setPinMode
.L270:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   184      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   185          IfxPort_setPinModeOutput(&MODULE_P20, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_alt5); /* CLKOUT */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   186  #ifdef IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   187          IfxPort_setPinPadDriver(&MODULE_P20, 0, IfxPort_PadDriver_cmosAutomotiveSpeed2);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   188  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   189          IfxPort_setPinPadDriver(&MODULE_P20, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
	mov	d4,#0
	mov.aa	a4,a12
	mov	d5,d4
	call	IfxPort_setPinPadDriver
.L486:
	j	.L15
.L14:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	mov	d4,#0
	mov.aa	a4,a12
	mov	d5,#8
	call	IfxPort_setPinMode

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   190  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   191      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   192      else
.L15:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   193      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   194          IfxPort_setPinModeInput(&MODULE_P20, 0, IfxPort_InputMode_pullDown); /* CLKIN */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   195      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   196  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   197      if (config->loopBack == FALSE)
	ld.bu	d15,[a15]6
.L487:
	jne	d15,#0,.L16
.L272:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   198      /* LVDS configuration */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   199      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   200          uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L377:
	mov	d8,d2
.L382:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   201          IfxScuWdt_clearCpuEndinit(psw);         /* clears the endinit protection */
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L378:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   202  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   203          if (hsctSFR == &MODULE_HSCT1)
	jne.a	a13,a14,.L17
.L488:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   204          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   205              P21_LPCR0.B.REN_CTRL = 1;
	ld.w	d15,.4.cnt
.L489:
	j	.L18
.L17:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   206              P21_LPCR0.B.RX_EN    = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   207          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   208          else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   209          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   210              P21_LPCR1.B.REN_CTRL = 1;
	ld.w	d15,.5.cnt
.L18:
	fcall	.cocofun_13
.L490:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   211              P21_LPCR1.B.RX_EN    = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   212          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   213  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   214          if (hsctSFR == &MODULE_HSCT1)
	jne.a	a13,a14,.L19
.L491:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   215          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   216              P22_LPCR1.B.TEN_CTRL = 1;
	ld.w	d15,.6.cnt
	fcall	.cocofun_11
.L492:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   217              P22_LPCR1.B.TX_EN    = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   218              P22_LPCR1.B.TX_PD    = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   219              P21_LPCR0.B.LVDSM    = 0; /* Setting P21 to LVDS-H mode */
	ld.w	d15,.4.cnt
.L493:
	j	.L20
.L19:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   220          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   221          else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   222          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   223              P21_LPCR2.B.TEN_CTRL = 1;
	ld.w	d15,.7.cnt
	fcall	.cocofun_11
.L494:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   224              P21_LPCR2.B.TX_EN    = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   225              P21_LPCR2.B.TX_PD    = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   226              P21_LPCR1.B.LVDSM    = 0; /* Setting P21 to LVDS-H mode */
	ld.w	d15,.5.cnt
.L20:
	mov.a	a2,d15
.L495:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   227          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   228  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   229          IfxScuWdt_setCpuEndinit(psw); /* sets the endinit protection back on */
	mov	d4,d8
.L383:
	ld.bu	d15,[a2]
.L496:
	insert	d15,d15,#0,#6,#1
	st.b	[a2],d15
.L497:
	call	IfxScuWdt_setCpuEndinit
.L16:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   230      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   231  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   232  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   233  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   234      /* HSCT initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   235      IfxHssl_enableHsctModule(hsctSFR);                                          /* enabling the HSCT module */
	mov.aa	a4,a13
.L384:
	call	IfxHssl_enableHsctModule
.L385:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   236  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   237      hsctSFR->IRQCLR.B.TXTECLR = 1;                                              /* due to AI */
	ld.bu	d15,[a13]73
.L498:
	or	d15,#4
	st.b	[a13]73,d15
.L499:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   238  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   239      /* slave interface initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   240      if (config->interfaceMode == IfxHssl_InterfaceMode_slave)                   /* slave mode initialisation */
	ld.bu	d15,[a15]4
.L500:
	jne	d15,#1,.L21
.L501:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   241      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   242          hsctSFR->INIT.B.IFM        = IfxHssl_InterfaceMode_slave;               /* slave mode */
	ld.bu	d15,[a13]16
.L502:
	or	d15,#8
	fcall	.cocofun_12
.L503:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   243          hsctSFR->INIT.B.SYS_CLK_EN = 0;                                         /* disabling the system clock */
	insert	d15,d15,#0,#1,#1
	fcall	.cocofun_10
.L504:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   244  #ifdef IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   245          hsctSFR->INIT.B.SRCF       = IfxHssl_RefClockFrequency_10Mhz;           /* Reference Clock Frequency rate 10 MHz */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   246  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   247          hsctSFR->INIT.B.SRCF       = IfxHssl_RefClockFrequency_20Mhz;           /* Reference Clock Frequency rate 20 MHz */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   248  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   249  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   250  #ifdef IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   251          hsctSFR->INIT.B.SSCF     = IfxHssl_SysClockDivider_2;                   /* SysClk divider 1/2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   252  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   253          hsctSFR->INIT.B.SSCF     = IfxHssl_SysClockDivider_1;                   /* SysClk divider 1/1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   254  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   255          hsctSFR->CONFIGPHY.B.PON = 1;                                           /* Peripheral power on */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   256  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   257          hsctSFR->DISABLE.U       = 0;
	mov	d15,#0
	st.w	[a13]32,d15
.L505:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   258      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   259  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   260      /* master interface initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   261      else                                                                        /* master mode initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   262      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   263          hsctSFR->INIT.B.IFM        = IfxHssl_InterfaceMode_master;              /* master mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   264          hsctSFR->INIT.B.SYS_CLK_EN = 1;                                         /* enabling the system clock */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   265  #ifdef IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   266          hsctSFR->INIT.B.SRCF       = IfxHssl_RefClockFrequency_10Mhz;           /* Reference Clock Frequency rate 10 MHz */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   267  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   268          hsctSFR->INIT.B.SRCF       = IfxHssl_RefClockFrequency_20Mhz;           /* Reference Clock Frequency rate 20 MHz */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   269  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   270  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   271  #ifdef IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   272          hsctSFR->INIT.B.SSCF       = IfxHssl_SysClockDivider_2;                 /* SysClk divider 1/2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   273  #else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   274          hsctSFR->INIT.B.SSCF       = IfxHssl_SysClockDivider_1;                 /* SysClk divider 1/1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   275  #endif
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   276          hsctSFR->CONFIGPHY.B.PON   = 1;                                         /* Peripheral power on */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   277          hsctSFR->IFCTRL.B.MTXSPEED = IfxHssl_MasterModeTxSpeed_lowSpeed;        /* Tx low speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   278          hsctSFR->IFCTRL.B.MRXSPEED = IfxHssl_MasterModeRxSpeed_lowSpeed;        /* Rx low speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   279  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   280          /* change from low speed to high speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   281          if (config->highSpeedMode)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   282          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   283              hsctSFR->IFCTRL.B.MTXSPEED = IfxHssl_MasterModeTxSpeed_highSpeed;      /* Tx high speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   284              hsctSFR->IFCTRL.B.MRXSPEED = IfxHssl_MasterModeRxSpeed_highSpeed;      /* Rx high speed */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   285          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   286  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   287          hsctSFR->DISABLE.U = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   288  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   289          while (hsctSFR->STATPHY.B.PLOCK == 0)                                      /* wait until pll is locked */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   290          {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   291      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   292  }
	ret
.L21:
	ld.bu	d15,[a13]16
.L506:
	insert	d15,d15,#0,#3,#1
	fcall	.cocofun_12
.L507:
	or	d15,#2
	fcall	.cocofun_10
.L508:
	ld.bu	d15,[a13]22
.L509:
	insert	d15,d15,#0,#2,#2
	st.b	[a13]22,d15
.L510:
	ld.bu	d15,[a13]22
.L511:
	insert	d15,d15,#0,#0,#2
	st.b	[a13]22,d15
.L512:
	ld.bu	d15,[a15]5
.L513:
	jeq	d15,#0,.L23
.L514:
	ld.bu	d15,[a13]22
.L515:
	insert	d15,d15,#2,#2,#2
	st.b	[a13]22,d15
.L516:
	ld.bu	d15,[a13]22
.L517:
	insert	d15,d15,#2,#0,#2
	st.b	[a13]22,d15
.L23:
	mov	d15,#0
	st.w	[a13]32,d15
.L24:
	ld.bu	d15,[a13]52
.L518:
	jz.t	d15:0,.L24
.L519:
	ret
.L230:
	
__IfxHssl_Hssl_initHsctModule_function_end:
	.size	IfxHssl_Hssl_initHsctModule,__IfxHssl_Hssl_initHsctModule_function_end-IfxHssl_Hssl_initHsctModule
.L134:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl..cocofun_13',code,cluster('.cocofun_13')
	.sect	'.text.IfxHssl_Hssl..cocofun_13'
	.align	2
; Function .cocofun_13
.L99:
.cocofun_13:	.type	func
; Function body .cocofun_13, coco_iter:1
	mov.a	a2,d15
	ld.bu	d15,[a2]
.L783:
	or	d15,#1
	st.b	[a2],d15
.L784:
	ld.bu	d15,[a2]
.L785:
	or	d15,#2
	st.b	[a2],d15
.L379:
	fret
.L229:
	; End of function
	.sdecl	'.text.IfxHssl_Hssl..cocofun_12',code,cluster('.cocofun_12')
	.sect	'.text.IfxHssl_Hssl..cocofun_12'
	.align	2
; Function .cocofun_12
.L101:
.cocofun_12:	.type	func
; Function body .cocofun_12, coco_iter:1
	st.b	[a13]16,d15
.L777:
	ld.bu	d15,[a13]16
.L778:
	fret
.L224:
	; End of function
	.sdecl	'.text.IfxHssl_Hssl..cocofun_11',code,cluster('.cocofun_11')
	.sect	'.text.IfxHssl_Hssl..cocofun_11'
	.align	2
; Function .cocofun_11
.L103:
.cocofun_11:	.type	func
; Function body .cocofun_11, coco_iter:0
	fcall	.cocofun_13
.L380:
	ld.bu	d15,[a2]
.L772:
	insert	d15,d15,#0,#6,#1
	st.b	[a2],d15
.L381:
	fret
.L219:
	; End of function
	.sdecl	'.text.IfxHssl_Hssl..cocofun_10',code,cluster('.cocofun_10')
	.sect	'.text.IfxHssl_Hssl..cocofun_10'
	.align	2
; Function .cocofun_10
.L105:
.cocofun_10:	.type	func
; Function body .cocofun_10, coco_iter:0
	fcall	.cocofun_12
.L386:
	insert	d15,d15,#1,#4,#2
.L767:
	fcall	.cocofun_12
.L764:
	insert	d15,d15,#0,#6,#2
	st.b	[a13]16,d15
.L765:
	ld.bu	d15,[a13]48
.L766:
	or	d15,#1
	st.b	[a13]48,d15
.L387:
	fret
.L214:
	; End of function
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsctModuleConfig',code,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsctModuleConfig'
	.align	2
	
	.global	IfxHssl_Hssl_initHsctModuleConfig

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   293  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   294  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   295  void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct)
; Function IfxHssl_Hssl_initHsctModuleConfig
.L107:
IfxHssl_Hssl_initHsctModuleConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   296  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   297      config->hsct = hsct;
	st.a	[a4],a5
.L524:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   298  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   299      /* interface mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   300      config->interfaceMode = IfxHssl_InterfaceMode_master;
	mov	d15,#0
	st.b	[a4]4,d15
.L525:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   301  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   302      /* high speed mode disabled */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   303      config->highSpeedMode = FALSE;
	st.b	[a4]5,d15
.L526:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   304  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   305      config->loopBack      = FALSE; /* default with out loopback */
	st.b	[a4]6,d15
.L527:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   306  }
	ret
.L275:
	
__IfxHssl_Hssl_initHsctModuleConfig_function_end:
	.size	IfxHssl_Hssl_initHsctModuleConfig,__IfxHssl_Hssl_initHsctModuleConfig_function_end-IfxHssl_Hssl_initHsctModuleConfig
.L139:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsslModule',code,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsslModule'
	.align	2
	
	.global	IfxHssl_Hssl_initHsslModule

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   307  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   308  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   309  void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config)
; Function IfxHssl_Hssl_initHsslModule
.L109:
IfxHssl_Hssl_initHsslModule:	.type	func
	mov.aa	a15,a5
.L392:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   310  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   311      Ifx_HSSL *hsslSFR = config->hssl;                                   /* pointer to HSSL registers */
	ld.a	a12,[a15]
.L393:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   312  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   313      hssl->hssl = hsslSFR;                                               /* adding HSSL register pointer to module handle */
	st.a	[a4],a12
.L532:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   314  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   315      /* HSSL initialisation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   316      IfxHssl_enableHsslModule(hsslSFR);                                  /* enabling the HSSL module */
	mov.aa	a4,a12
.L391:
	call	IfxHssl_enableHsslModule
.L390:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   317      hsslSFR->CFG.B.PREDIV = config->preDivider;                         /* predivivder */
	ld.hu	d15,[a12]16
.L533:
	ld.hu	d0,[a15]36
.L534:
	insert	d15,d15,d0,#0,#14
	st.h	[a12]16,d15
.L535:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   318      hsslSFR->CFG.B.SCM    = 0;                                          /* command mode */
	ld.bu	d15,[a12]18
.L536:
	insert	d15,d15,#0,#2,#1
	st.b	[a12]18,d15
.L537:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   319  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   320      /* Access windows */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   321      hsslSFR->AW[0].AWSTART.U = config->accessWindow0.start;             /* start of access window */
	ld.w	d15,[a15]4
.L538:
	st.w	[a12]192,d15
.L539:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   322      hsslSFR->AW[0].AWEND.U   = config->accessWindow0.end;               /* end of access window */
	ld.w	d15,[a15]8
.L540:
	st.w	[a12]196,d15
.L541:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   323      hsslSFR->AW[1].AWSTART.U = config->accessWindow1.start;             /* start of access window */
	ld.w	d15,[a15]12
.L542:
	st.w	[a12]200,d15
.L543:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   324      hsslSFR->AW[1].AWEND.U   = config->accessWindow1.end;               /* end of access window */
	ld.w	d15,[a15]16
.L544:
	st.w	[a12]204,d15
.L545:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   325      hsslSFR->AW[2].AWSTART.U = config->accessWindow2.start;             /* start of access window */
	ld.w	d15,[a15]20
.L546:
	st.w	[a12]208,d15
.L547:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   326      hsslSFR->AW[2].AWEND.U   = config->accessWindow2.end;               /* end of access window */
	ld.w	d15,[a15]24
.L548:
	st.w	[a12]212,d15
.L549:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   327      hsslSFR->AW[3].AWSTART.U = config->accessWindow3.start;             /* start of access window */
	ld.w	d15,[a15]28
.L550:
	st.w	[a12]216,d15
.L551:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   328      hsslSFR->AW[3].AWEND.U   = config->accessWindow3.end;               /* end of access window */
	ld.w	d15,[a15]32
.L552:
	st.w	[a12]220,d15
.L553:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   329  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   330      hsslSFR->AR.U            = 0x000000ff;                              /* allow read/write access for all windows */
	mov	d15,#255
.L554:
	st.w	[a12]224,d15
.L555:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   331  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   332      hsslSFR->MFLAGSCL.B.INIC = 1;                                       /* chnage into run mode */
	ld.bu	d15,[a12]35
.L556:
	or	d15,#128
	st.b	[a12]35,d15
.L557:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   333      hsslSFR->TIDADD.U        = (Ifx_UReg_32Bit)IFXHSSL_JTAG_ID_ADDRESS; /* Writing JTAG_ID of the device to TIDADD.This'll be used in the response when the other device queries for ID */
	ld.w	d15,.8.cnt
.L558:
	st.w	[a12]148,d15

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   334  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   335      while (hsslSFR->MFLAGS.B.INI)                                       /* wait until the mode changes */
.L25:
	ld.bu	d15,[a12]27
.L559:
	jnz.t	d15:7,.L25
.L560:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   336      {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   337  }
	ret
.L279:
	
__IfxHssl_Hssl_initHsslModule_function_end:
	.size	IfxHssl_Hssl_initHsslModule,__IfxHssl_Hssl_initHsslModule_function_end-IfxHssl_Hssl_initHsslModule
.L144:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsslModuleConfig',code,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_initHsslModuleConfig'
	.align	2
	
	.global	IfxHssl_Hssl_initHsslModuleConfig

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   338  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   339  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   340  void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl)
; Function IfxHssl_Hssl_initHsslModuleConfig
.L111:
IfxHssl_Hssl_initHsslModuleConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   341  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   342      config->hssl = hssl;
	st.a	[a4],a5
.L565:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   343  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   344      /* Access windows */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   345      config->accessWindow0.start = 0x00000000; /* start of access window */
	mov	d15,#0
	st.w	[a4]4,d15
.L566:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   346      config->accessWindow0.end   = 0xffffffff; /* end of access window */
	mov	d0,#-1
	lea	a15,[a4]8
	st.w	[a15+],d0
.L567:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   347      config->accessWindow1.start = 0x00000000; /* start of access window */
	st.w	[a15+],d15
.L568:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   348      config->accessWindow1.end   = 0xffffffff; /* end of access window */
	st.w	[a15+],d0
.L569:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   349      config->accessWindow2.start = 0x00000000; /* start of access window */
	st.w	[a15+],d15
.L570:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   350      config->accessWindow2.end   = 0xffffffff; /* end of access window */
	st.w	[a15+],d0
.L571:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   351      config->accessWindow3.start = 0x00000000; /* start of access window */
	st.w	[a15+],d15
.L572:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   352      config->accessWindow3.end   = 0xffffffff; /* end of access window */
	st.w	[a15+],d0
.L573:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   353  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   354      /* predivider */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   355      config->preDivider = 256;
	mov	d15,#256
	st.h	[a4]36,d15
.L574:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   356  }
	ret
.L286:
	
__IfxHssl_Hssl_initHsslModuleConfig_function_end:
	.size	IfxHssl_Hssl_initHsslModuleConfig,__IfxHssl_Hssl_initHsslModuleConfig_function_end-IfxHssl_Hssl_initHsslModuleConfig
.L149:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_prepareStream',code,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_prepareStream'
	.align	2
	
	.global	IfxHssl_Hssl_prepareStream

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   357  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   358  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   359  IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count)
; Function IfxHssl_Hssl_prepareStream
.L113:
IfxHssl_Hssl_prepareStream:	.type	func
	mov.aa	a15,a4
.L396:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   360  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   361      IfxHssl_ChannelId channelId = channel->channelId;
	mov	d6,d4
	ld.bu	d15,[a15]8
.L397:
	mov	d8,d5
.L398:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   362      Ifx_HSSL_TS_FC    tsfcReg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   363  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   364      if (channelId == IfxHssl_ChannelId_2)
	jeq	d15,#2,.L26
.L718:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   365      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   366          return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   367      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   368  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   369      /* target start address to memeroy block 0 on target device (writing into HSSL_TSSA0 of the target) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   370      IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->TS.SA[0], slaveTargetAddress, IfxHssl_DataLength_32bit);
	mov	d4,#2
	ld.w	d15,[a15]
.L395:
	mov	d7,d4
.L719:
	add	d5,d15,#176
	call	IfxHssl_Hssl_singleFrameRequest
.L394:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   371  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   372      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L27
.L28:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   373      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   374          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L399:
	call	IfxHssl_Hssl_waitAcknowledge
.L400:
	jeq	d2,#2,.L29
.L27:
	mov.aa	a4,a15
.L401:
	call	IfxHssl_Hssl_waitAcknowledge
.L402:
	jne	d2,#0,.L28
.L720:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   375          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   376              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   377          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   378      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   379  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   380      /* Precautionary measure on target for any last streaming interruption */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   381      /* Read count register on the target */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   382      IfxHssl_Hssl_read(channel, (uint32)&channel->hssl->TS.FC, IfxHssl_DataLength_32bit);
	ld.w	d15,[a15]
.L721:
	mov	d5,#2
	mov.aa	a4,a15
.L403:
	add	d4,d15,#188
	call	IfxHssl_Hssl_read
.L404:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   383  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   384      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L30
.L31:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   385      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   386          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L405:
	call	IfxHssl_Hssl_waitAcknowledge
.L406:
	jeq	d2,#2,.L32
.L30:
	mov.aa	a4,a15
.L407:
	call	IfxHssl_Hssl_waitAcknowledge
.L408:
	jne	d2,#0,.L31
.L353:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	ld.a	a2,[a15]
.L722:
	ld.bu	d15,[a15]8
.L354:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   387          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   388              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   389          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   390      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   391  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   392      tsfcReg.U          = IfxHssl_Hssl_getReadData(channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   393      tsfcReg.B.RELCOUNT = tsfcReg.B.CURCOUNT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   394      /* Set the RELCOUNT equal to CURCOUNT on the target */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   395      IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->TS.FC, count, IfxHssl_DataLength_16bit);
	mov	d6,d8
.L359:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	sha	d15,#4
.L723:
	addsc.a	a4,a2,d15,#0
.L360:
	mov	d4,#2
	lea	a2,[a2]188
	mov.d	d5,a2
.L724:
	mov	d7,#1

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   796      return hsslI->IRD.U;    /* retutn the data read from the data register */
	ld.w	d15,[a4]60
.L410:
	mov.aa	a4,a15
.L412:
	call	IfxHssl_Hssl_singleFrameRequest
.L409:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   396  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   397      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L33
.L34:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   398      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   399          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L413:
	call	IfxHssl_Hssl_waitAcknowledge
.L414:
	jeq	d2,#2,.L35
.L33:
	mov.aa	a4,a15
.L415:
	call	IfxHssl_Hssl_waitAcknowledge
.L416:
	jne	d2,#0,.L34
.L725:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   400          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   401              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   402          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   403      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   404  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   405      /* Disable the streaming on the target */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   406      IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->MFLAGSCL, (1 << IFX_HSSL_MFLAGSCL_TSEC_OFF), IfxHssl_DataLength_32bit);
	mov	d4,#2
	ld.w	d15,[a15]
.L411:
	mov	d7,d4
	mov.aa	a4,a15
.L417:
	add	d5,d15,#32
.L726:
	movh	d6,#4096
	call	IfxHssl_Hssl_singleFrameRequest
.L418:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   407  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   408      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L36
.L37:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   409      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   410          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L419:
	call	IfxHssl_Hssl_waitAcknowledge
.L420:
	jeq	d2,#2,.L38
.L36:
	mov.aa	a4,a15
.L421:
	call	IfxHssl_Hssl_waitAcknowledge
.L422:
	jne	d2,#0,.L37
.L727:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   411          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   412              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   413          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   414      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   415  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   416      /* memory count into target reload count register on target device */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   417      IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->TS.FC, count, IfxHssl_DataLength_16bit);
	mov	d6,d8
	ld.w	d15,[a15]
.L423:
	mov	d4,#2
	mov.aa	a4,a15
.L425:
	add	d5,d15,#188
.L728:
	mov	d7,#1
	call	IfxHssl_Hssl_singleFrameRequest
.L424:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   418  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   419      while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L39
.L40:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   420      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   421          if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L426:
	call	IfxHssl_Hssl_waitAcknowledge
.L427:
	jeq	d2,#2,.L41
.L39:
	mov.aa	a4,a15
.L428:
	call	IfxHssl_Hssl_waitAcknowledge
.L429:
	jne	d2,#0,.L40
.L729:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   422          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   423              return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   424          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   425      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   426  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   427      /* incase of transfers between two different devices (loopback off) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   428      if (!channel->loopBack)
	ld.bu	d15,[a15]11
.L730:
	jne	d15,#0,.L42
.L731:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   429      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   430          /* Get the target configuration */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   431          IfxHssl_Hssl_read(channel, (uint32)&channel->hssl->CFG, IfxHssl_DataLength_32bit);
	ld.w	d15,[a15]
.L732:
	mov	d5,#2
	mov.aa	a4,a15
.L430:
	add	d4,d15,#16
	call	IfxHssl_Hssl_read
.L431:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   432  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   433          while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L43
.L44:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   434          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   435              if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L432:
	call	IfxHssl_Hssl_waitAcknowledge
.L433:
	jeq	d2,#2,.L45
.L43:
	mov.aa	a4,a15
.L434:
	call	IfxHssl_Hssl_waitAcknowledge
.L435:
	jne	d2,#0,.L44
.L361:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	ld.a	a2,[a15]
.L733:
	ld.bu	d15,[a15]8
.L362:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   436              {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   437                  return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   438              }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   439          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   440  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   441          /* Check if the target streaming is enabled */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   442          if ((IfxHssl_Hssl_getReadData(channel) & (0x00070100)) != 0x00070100)
	ld.w	d6,.9.cnt
.L364:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     2   * \file IfxHssl_Hssl.h
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     3   * \brief HSSL HSSL details
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     4   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     5   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     8   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	     9   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    11   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    16   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    18   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    25   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    32   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    40   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    41   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    42   * \defgroup IfxLld_Hssl_Hssl_Usage How to use the HSSL Interface driver?
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    43   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    44   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    45   * The HSSL interface driver provides a default HSSL/HSCT configuration for point to point communication at two transfer speeds, 5MBaud (low speed) and 320MBaud (high speed).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    46   * It also supports streaming transfers of data a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    47   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    48   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    49   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    50   * \section IfxLld_Hssl_Hssl_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    51   * \subsection IfxLld_Hssl_Hssl_Include Include Files
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    52   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    53   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    54   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    55   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    56   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    57   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    58   * \subsection IfxLld_Hssl_Hssl_Variables Variables
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    59   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    60   * Declare the HSSL handle, HSCT handle and channel array as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    61   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    62   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    63   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    64   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    65   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    66   *     IfxHssl_Hssl_Channel hsslChannel[4];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    67   *     __attribute__ ((aligned(256))) uint32 txData[80]; // needs to be declared globally in case of streaming transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    68   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    69   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    70   * \subsection IfxLld_Hssl_Hssl_InitModule Module Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    71   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    72   * The module initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    73   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    74   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    75   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    76   *     IfxHssl_Hsct_Config hsctConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    77   *     IfxHssl_Hssl_initHsctModuleConfig(&hsctConfig, &MODULE_HSCT);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    78   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    79   *     // select the interface mode (in case of slave)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    80   *     hsctConfig.interfaceMode = IfxHssl_InterfaceMode_slave;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    81   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    82   *     // select the high speed mode if required
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    83   *     hsctConfig.highSpeedMode = TRUE;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    84   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    85   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    86   *     // IfxHssl_Hsct hsct;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    87   *     IfxHssl_Hssl_initHsctModule(&hsct, &hsctConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    88   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    89   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    90   *     IfxHssl_Hssl_Config hsslConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    91   *     IfxHssl_Hssl_initHsslModuleConfig(&hsslConfig, &MODULE_HSSL);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    92   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    93   *     // IfxHssl_Hssl hssl;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    94   *     IfxHssl_Hssl_initHsslModule(&hssl, &hsslConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    95   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    96   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    97   * If application intends to explicitly configure the pins for HSCT module IFXHSSL_HSCT_DISABLE_PINCONFIG macro should be defined in the application.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    98   * The explicit pin assignment should be done prior to IfxHssl_Hssl_initHsctModule().
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	    99   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   100   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   101   * For explicitly changing the default configuration of the REFCLK and the SYSCLK of HSCT module the below macros are provided
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   102   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   103   * IFXHSSL_HSCT_ENABLE_REF_CLK_10MHZ - This macro sets the REFCLK in the Hsct module to 10MHz (Default value of REFCLK is 20MHz).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   104   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   105   * IFXHSSL_HSCT_ENABLE_SYS_CLK_DIV_2 - This macro sets the SYSCLK divider value. Recomended value for SYSCLK is 20MHz.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   106   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   107   * Application can use the macros for changing the default clock configuration on HSCT module.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   108   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   109   * Note:  In case of HSCT Slave configuration, application has to select SysClk pin as the clock source.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   110   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   111   * After the port initialisation of HSCT slave device ie. after calling IfxHssl_Hssl_initHsctModule(), configure the SCU system PLL as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   112   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   113   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   114   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   115   *       IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   116   *       // Set the clock to SysClk generated from HSCT master interface
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   117   *       IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fSysclk;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   118   *       IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   119   *       // Wait till PLL is locked
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   120   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   121   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   122   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   123   * \subsection IfxLld_Hssl_Hssl_InitChannel Channel Initialisation
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   124   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   125   * The Channel initialisation can be done as follows:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   126   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   127   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   128   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   129   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   130   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   131   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   132   *     // initialize the channels
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   133   *     // IfxHssl_Hssl_Channel hsslChannel[4];  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   134   *     for(int i=0; i<4; ++i)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   135   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   136   *         hsslChannelConfig.channelId = (IfxHssl_ChannelId)i;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   137   *         IfxHssl_Hssl_initChannel(&hsslChannel[i], &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   138   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   140   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   141   * \subsection IfxLld_Hssl_Hssl_LinkSpeed Changing HSCT link speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   142   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   143   * The link speed change can be done as follows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   144   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   145   * As per the above settings the HSCT master is in High speed reception and transmission.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   146   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   147   * The pseudo code for setting the target to High speed is as below
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   148   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   149   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   150   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   151   *      // Set the Tx link speed of the master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   152   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   153   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   154   *      // Enable reception at the Slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   155   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   156   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   157   *      // Send interface commmand to change Rx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   158   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   159   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   160   *      // Send interface commmand to change Tx to High speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   161   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_highSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   162   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   163   *      // Set the Tx link speed of the master to High speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   164   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_highSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   165   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   166   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   167   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   168   * The pseudo code for setitng the target to Low speed from High speed (ie. if hsctConfig.highSpeedMode is set to TRUE).
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   169   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   170   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   171   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   172   *      // Set the Tx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   173   *      IfxHssl_setHsctTxLinkSpeed(&hsct , IfxHssl_MasterModeTxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   174   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   175   *      // Send interface command to change Rx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   176   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   177   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   178   *      // Set the Rx link speed of master to Low speed
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   179   *      IfxHssl_setHsctRxLinkSpeed(&hsct, IfxHssl_MasterModeRxSpeed_lowSpeed);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   180   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   181   *      // Send interface command to change Tx to low speed at the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   182   *      IfxHssl_Hssl_sendControlCommand(&hsct,IfxHssl_ControlCommand_lowSpeedTransmission);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   183   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   184   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   185   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   186   * The HSSL is ready for use now!
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   187   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   188   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   189   * \section IfxLld_Hssl_Hssl_DataTransfers Data Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   190   * \subsection IfxLld_Hssl_Hssl_SimpleTransfers Simple Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   191   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   192   * The HSSL driver provides simple to use data transfer functions,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   193   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   194   * It supports direct writing of 8/16/32 bit data from the initiator into a target's register, as well as reading a value from the target
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   195   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   196   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   197   *     // write some data to remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   198   *     IfxHssl_Hssl_write(&hsslChannel[0], 0x70000000, 0x12345678, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   199   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   200   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   201   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   202   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   203   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   204   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   205   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   206   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   207   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   208   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   209   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   210   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   211   * A simple to use receive function is available as well.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   212   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   213   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   214   *     // read some data from remote location:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   215   *     IfxHssl_Hssl_read(&hsslChannel[0], 0x70000000, IfxHssl_DataLength_32bit);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   216   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   217   *     // wait for the acknowledgement
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   218   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   219   *     {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   220   *         if( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[0]) == IfxHssl_Hssl_Status_error )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   221   *           {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   222   *               IfxHssl_Hssl_checkErrors(&hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   223   *               break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   224   *           }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   225   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   226   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   227   *     // read data from the register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   228   *     uint32 dataL = IfxHssl_Hssl_getReadData(&hsslChannel[0]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   229   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   230   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   231   * \subsection IfxLld_Hssl_Hssl_StreamingTransfers Streaming Transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   232   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   233   * HSSL driver also supports streaming transfers of data as a memory block at both low and high speeds.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   234   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   235   * Preparing the target for streaming with the desired memory location where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   236   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   237   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   238   *     // choose a channel other than channel2 for register access
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   239   *     // prepare streaming of single memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   240   *     IfxHssl_Hssl_prepareStream(&hsslChannel[0], 0x70000000, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   241   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   242   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   243   * Stream the memory block
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   244   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   245   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   246   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   247   *     // __attribute__ ((aligned(256))) uint32 txData[80];  expected to be declared globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   248   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   249   *     // for single block streaming transfer
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   250   *     // change the txData address to global address before passing it to the API
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   251   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   252   *     // IfxHssl_Hssl_writeStream(&hssl, (uint32 *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)txData),  10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   253   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   254   *     IfxHssl_Hssl_writeStream(&hssl, txData, 10);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   255   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   256   *     // wait until the streaming is finished
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   257   *     while( IfxHssl_Hssl_waitAcknowledge(&hsslChannel[2]) != IfxHssl_Hssl_Status_ok )
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   258   *     {}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   259   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   260   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   261   * \subsection IfxLld_Hssl_Hssl_DMAOperatedCommandQueues DMA Operated Command Queues
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   262   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   263   * It makes sense to do this from outside the driver, by initialising the DMA after HSSL, and send command queues through linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   264   * here is an example of how to use DMA operated command queues.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   265   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   266   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   267   * Include following header files into your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   268   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   269   *     #include <Hssl/Hssl/IfxHssl_Hssl.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   270   *     #include <Dma/Dma/IfxDma_Dma.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   271   *     #include <Scu/Std/IfxScuWdt.h>
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   272   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   273   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   274   * Declare the HSSL handle, HSCT handle, HSSL channel handle and DMA channel handle as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   275   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   276   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   277   *     // used globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   278   *     static IfxHssl_Hssl hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   279   *     static IfxHssl_Hsct hsct;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   280   *     IfxHssl_Hssl_Channel hsslChannel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   281   *     // DMA channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   282   *     IfxDma_Dma_Channel chn;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   283   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   284   *     // Linked List storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   285   *     // IMPORTANT: it has to be aligned to an 64bit address, otherwise DMA can't read it
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   286   *     #define NUM_LINKED_LIST_ITEMS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   287   *     __attribute__ ((aligned(64))) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   288   *     // transfer these values to channel 0 : HSSL_IWD0, HSSL_ICON0, HSSL_IRWA0 registers via linked lists
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   289   *     #define NUM_TRANSFERED_WORDS 3
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   290   *     // three write command queues with different data and to different addresses on slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   291   *     uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   292   *         {0xC0CAC01A, 0xFF0A0000, 0x70000000},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   293   *         {0xBA5EBA11, 0xFF0A0000, 0x70000010},
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   294   *         {0xDEADBEEF, 0xFF0A0000, 0x70000020}
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   295   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   296   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   297   *     // three command queues to the same channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   298   *     const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   299   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   300   *         (uint32)&HSSL_I0_IWD,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   301   *         (uint32)&HSSL_I0_IWD
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   302   *     };
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   303   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   304   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   305   * Initialise the hssl module, see \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   306   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   307   * Initialise the hssl channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   308   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   309   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   310   *     // create HSSL channel config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   311   *     IfxHssl_Hssl_ChannelConfig hsslChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   312   *     IfxHssl_Hssl_initChannelConfig(&hsslChannelConfig, &hssl, &hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   313   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   314   *     // initialize the channel 0
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   315   *     // IfxHssl_Hssl_Channel hsslChannel;  defined globally
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   316   *     hsslChannelConfig.channelId = 0;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   317   *     IfxHssl_Hssl_initChannel(&hsslChannel, &hsslChannelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   318   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   319   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   320   * Build a linked list
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   321   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   322   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   323   *     // create module config
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   324   *     IfxDma_Dma_Config dmaConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   325   *     IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   326   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   327   *     IfxDma_Dma dma;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   328   *     IfxDma_Dma_initModule(&dma, &dmaConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   329   *     // initial channel configuration
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   330   *     IfxDma_Dma_ChannelConfig cfg;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   331   *     IfxDma_Dma_initChannelConfig(&cfg, &dma);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   332   *     // following settings are used by all transactions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   333   *     cfg.transferCount = NUM_TRANSFERED_WORDS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   334   *     cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   335   *     cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   336   *     cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   337   *     // generate linked list items
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   338   *     for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   339   *         cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   340   *         cfg.destinationAddress = destinationAddresses[i];
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   341   *         // address to next transaction set
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   342   *         cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   343   *         // transfer first transaction set into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   344   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   345   *             IfxDma_Dma_initChannel(&chn, &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   346   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   347   *         // transfer into linked list storage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   348   *         IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   349   *         if( i == 0 ) {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   350   *             // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   351   *             linkedList[i].CHCSR.B.SIT = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   352   *         } else {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   353   *          // - activate SCH (transaction request) for each entry, expect for the first one (linked list terminated here)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   354   *             linkedList[i].CHCSR.B.SCH = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   355   *         }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   356   *     }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   357   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   358   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   359   * The transfer can be started via software with:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   360   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   361   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   362   *     // clear service request flag
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   363   *     (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   364   *     // start linked list transaction
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   365   *     IfxDma_Dma_startChannelTransaction(&chn);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   366   *     // wait for service request which is triggered at the end of linked list transfers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   367   *     while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   368   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   369   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   370   * \subsection IfxLld_Hssl_Hssl_Interrupts Interrupts usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   371   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   372   * Interrupts can be enabled from the application by using the APIs provided in the driver,
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   373   * there are APIs available in the driver to enable, disable, clear and read the status of interrupt falgs, along with these,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   374   * APIs to enable the the enterrupts are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   375   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   376   * here is an example of how to use the interrupts in HSSL driver.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   377   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   378   * Using HSCT interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   379   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   380   * After initialising HSCT module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   381   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   382   * choose what flags needs to be enabled for HSCT interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   383   * and after choosing all the flags needed, enable the HSCT interrupt with desired type of service and priority.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   384   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   385   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   386   *     Ifx_HSCT *hsct = &MODULE_HSCT;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   387   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_headerError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   388   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_payloadError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   389   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_commandError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   390   *     IfxHssl_enableHsctInterruptFlag(hsct, IfxHssl_Hsct_InterruptSource_speedModeSwitchError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   391   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   392   *     // enable the HSCT interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   393   *     IfxHssl_enableHsctInterrupt(hsct, IfxSrc_Tos_cpu0, 4);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   394   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   395   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   396   * Using HSSl interrupts
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   397   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   398   * HSSL global error interrupt (EXI)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   399   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   400   * After initilaising HSSL module \ref IfxLld_Hssl_Hssl_InitModule
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   401   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   402   * choose what flags needs to be enabled for HSSL global error (EXI) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   403   * and after choosing all the flags needed, enable the HSSL EXI interrupt with desired type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   404   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   405   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   406   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   407   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_busAccessError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   408   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_dataLengthError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   409   *     IfxHssl_enableHsslGlobalErrorInterruptFlag(hssl, IfxHssl_Hssl_EXIInterruptSource_crcError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   410   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   411   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   412   *     // enable the HSSL EXI interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   413   *     IfxHssl_enableHsslEXIInterrupt(hssl, IfxSrc_Tos_cpu0, 6);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   414   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   415   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   416   * HSSL channel specific error interrupt (ERR)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   417   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   418   * After initilaising HSSL channel \ref IfxLld_Hssl_Hssl_InitChannel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   419   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   420   * choose what flags needs to be enabled for HSSL channel specific error (ERR) interrupt and call the following function once for each flag by choosing the right flag as parameter,\n
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   421   * and after choosing all the flags needed, enable the HSSL ERR interrupt with desired channel, type of service and priority
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   422   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   423   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   424   *     Ifx_HSSL *hssl = &MODULE_HSSL;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   425   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_transactionTagError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   426   *     IfxHssl_enableHsslChannelErrorInterruptFlag(hssl, channelId_0, IfxHssl_Hssl_ERRInterruptSource_timeoutError);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   427   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   428   *     // enable the HSSL ERR interrupt
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   429   *     IfxHssl_enableHsslERRInterrupt(hssl, channelId_0, IfxSrc_Tos_cpu0, 8);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   430   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   431   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   432   * you can define the ISR of your own and service the interrupt, please refer to more general usage of interrupts \ref IfxLld_Cpu_Irq_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   433   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   434   * some additional APIs to clear, disable interrupt flags and get flag status are also available.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   435   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   436   * \defgroup IfxLld_Hssl_Hssl HSSL
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   437   * \ingroup IfxLld_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   438   * \defgroup IfxLld_Hssl_Hssl_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   439   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   440   * \defgroup IfxLld_Hssl_Hssl_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   441   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   442   * \defgroup IfxLld_Hssl_Hssl_ModuleFunctions Module Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   443   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   444   * \defgroup IfxLld_Hssl_Hssl_ChannelFunctions Channel Functions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   445   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   446   * \defgroup IfxLld_Hssl_Hssl_SimpleCom Simple Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   447   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   448   * \defgroup IfxLld_Hssl_Hssl_ErrorHandling Error Handling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   449   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   450   * \defgroup IfxLld_Hssl_Hssl_StreamingCom Streaming Communication
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   451   * \ingroup IfxLld_Hssl_Hssl
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   452   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   453  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   454  #ifndef IFXHSSL_HSSL_H
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   455  #define IFXHSSL_HSSL_H 1
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   456  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   457  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   458  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   460  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   461  #include "Hssl/Std/IfxHssl.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   462  #include "Port/Std/IfxPort.h"
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   463  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   464  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   465  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   466  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   468  /** \addtogroup IfxLld_Hssl_Hssl_Enumerations
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   469   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   470  /** \brief frame request selection
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   471   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   472  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   473  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   474      IfxHssl_Hssl_FrameRequest_readFrame    = 1,  /**< \brief read frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   475      IfxHssl_Hssl_FrameRequest_writeFrame   = 2,  /**< \brief write frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   476      IfxHssl_Hssl_FrameRequest_triggerFrame = 3,  /**< \brief trigger frame rquest */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   477      IfxHssl_Hssl_FrameRequest_readId       = 4,  /**< \brief read id request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   478      IfxHssl_Hssl_FrameRequest_noAction     = 5   /**< \brief no action */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   479  } IfxHssl_Hssl_FrameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   481  /** \brief module status
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   482   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   483  typedef enum
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   484  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   485      IfxHssl_Hssl_Status_ok    = 0, /**< \brief status ok */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   486      IfxHssl_Hssl_Status_busy  = 1, /**< \brief status busy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   487      IfxHssl_Hssl_Status_error = 2  /**< \brief status error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   488  } IfxHssl_Hssl_Status;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   489  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   490  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   492  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   493  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   496  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   497   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   498  /** \brief structure for access windows
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   499   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   500  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   501  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   502      uint32 start;       /**< \brief start of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   503      uint32 end;         /**< \brief end of the access */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   504  } IfxHssl_Hssl_AccessWindow;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   505  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   506  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   507  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   508  /** \brief structure for error flags
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   509   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   511  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   512      uint8 notAcknowledgeError : 1;        /**< \brief not acknowledge error / tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   513      uint8 transactionTagError : 1;        /**< \brief transaction tag error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   514      uint8 timeoutError : 1;               /**< \brief timeout error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   515      uint8 unexpectedError : 1;            /**< \brief unexpected type of frame error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   516      uint8 memoryAccessViolation : 1;      /**< \brief memory access violation */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   517      uint8 busAccessError : 1;             /**< \brief SRI/SPB bus access error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   518      uint8 channelNumberCodeError : 1;     /**< \brief PHY inconsistency error 1 (channel number code error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   519      uint8 dataLengthError : 1;            /**< \brief PHY inconsistency error 2 (data length error) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   520      uint8 crcError : 1;                   /**< \brief CRC error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   521  } IfxHssl_Hssl_errorFlags;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   522  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   523  /** \addtogroup IfxLld_Hssl_Hssl_DataStructures
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   524   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   525  /** \brief HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   526   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   527  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   528  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   529      Ifx_HSSL               *hssl;             /**< \brief pointer to HSSL register */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   530      IfxHssl_Hssl_errorFlags errorFlags;       /**< \brief structure for error flags */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   531      boolean                 loopBack;         /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   532  } IfxHssl_Hssl;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   534  /** \brief channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   535   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   536  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   537  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   538      Ifx_HSSL                 *hssl;                      /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   539      Ifx_HSCT                 *hsct;                      /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   540      IfxHssl_ChannelId         channelId;                 /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   541      IfxHssl_Hssl_FrameRequest currentFrameRequest;       /**< \brief current frame request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   542      IfxHssl_StreamingMode     streamingMode;             /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   543      boolean                   loopBack;                  /**< \brief loopback (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   544      boolean                   streamingModeOn;           /**< \brief streaming mode or command mode */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   545  } IfxHssl_Hssl_Channel;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   546  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   547  /** \brief configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   548   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   549  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   550  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   551      Ifx_HSSL             *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   552      Ifx_HSCT             *hsct;                /**< \brief pointer to HSCT registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   553      IfxHssl_ChannelId     channelId;           /**< \brief channel number (id) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   554      IfxHssl_StreamingMode streamingMode;       /**< \brief streaming mode selection ( single / continuous ) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   555      boolean               loopBack;            /**< \brief loop back (enable / disable) for streaming transfers within the microcontroller */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   556  } IfxHssl_Hssl_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   557  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   558  /** \brief configuration structure of the HSSL module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   559   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   560  typedef struct
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   561  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   562      Ifx_HSSL                 *hssl;                /**< \brief pointer to HSSL registers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   563      IfxHssl_Hssl_AccessWindow accessWindow0;       /**< \brief access window of channel 0 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   564      IfxHssl_Hssl_AccessWindow accessWindow1;       /**< \brief access window of channel 1 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   565      IfxHssl_Hssl_AccessWindow accessWindow2;       /**< \brief access window of channel 2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   566      IfxHssl_Hssl_AccessWindow accessWindow3;       /**< \brief access window of channel 3 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   567      uint16                    preDivider;          /**< \brief Defines the down-scaled module clock to be used by all channel timeout timers */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   568  } IfxHssl_Hssl_Config;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   571  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   572  /** \addtogroup IfxLld_Hssl_Hssl_ModuleFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   578  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   579  /** \brief Initialises the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   580   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   581   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   583   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   584   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   585   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   586   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   587  IFX_EXTERN void IfxHssl_Hssl_initHsctModule(IfxHssl_Hsct *hsct, const IfxHssl_Hsct_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   588  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   589  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   590   * \param config configuration structure of the HSCT module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   591   * \param hsct pointer to HSCT register
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   592   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   593   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   594   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   595   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   596   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   597  IFX_EXTERN void IfxHssl_Hssl_initHsctModuleConfig(IfxHssl_Hsct_Config *config, Ifx_HSCT *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   599  /** \brief Initialises the Hssl module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   600   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   601   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   603   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   604   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   605   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   606   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   607  IFX_EXTERN void IfxHssl_Hssl_initHsslModule(IfxHssl_Hssl *hssl, const IfxHssl_Hssl_Config *config);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   609  /** \brief Fills the config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   610   * \param config configuration structure of the module
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   611   * \param hssl pointer to HSSL registers
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   612   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   613   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   614   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   615   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   616   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   617  IFX_EXTERN void IfxHssl_Hssl_initHsslModuleConfig(IfxHssl_Hssl_Config *config, Ifx_HSSL *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   618  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   619  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   620  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   621  /** \addtogroup IfxLld_Hssl_Hssl_ChannelFunctions
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   622   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   623  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   625  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   626  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   627  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   628  /** \brief Initialises the channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   629   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   630   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   631   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   632   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   633   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   634   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   635   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   636  IFX_EXTERN void IfxHssl_Hssl_initChannel(IfxHssl_Hssl_Channel *channel, const IfxHssl_Hssl_ChannelConfig *channelConfig);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   637  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   638  /** \brief Fills the channel config structure with default values
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   639   * \param channelConfig configuration structure for channel
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   640   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   641   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   643   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   644   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   645   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   646   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   647  IFX_EXTERN void IfxHssl_Hssl_initChannelConfig(IfxHssl_Hssl_ChannelConfig *channelConfig, IfxHssl_Hssl *hssl, IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   648  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   649  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   650  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   651  /** \addtogroup IfxLld_Hssl_Hssl_SimpleCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   652   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   653  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   654  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   655  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   656  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   657  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   658  /** \brief reads and returs the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   659   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   660   * \return data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   661   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   662   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   663   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   664   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   665  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   666  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   668  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   669  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   670  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   671  /** \brief Initiates read request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   672   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   673   * \param address address of the location from where the data is to be read
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   674   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   675   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   676   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   677   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   678   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   679   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   680  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   681  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   682  /** \brief sends a predefined command from master to slave
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   683   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   684   * \param command command value
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   685   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   686   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   687   * Usage Example:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   688   * \code
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   689   *     // enable slave Tx channel (Rx disable to Rx low peed)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   690   *     IfxHssl_Hssl_sendControlCommand(&channel, IfxHssl_ControlCommand_enableReception);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   691   * \endcode
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   692   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   693   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   694  IFX_EXTERN void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   695  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   696  /** \brief serves the frame request (read, write, trigger frame and read id)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   697   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   698   * \param frameRequest frame request
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   699   * \param address address of the location (to be written into / read from)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   700   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   701   * \param dataLength length of the data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   702   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   703   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   704  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   705  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   706  /** \brief waits until the current transaction is done
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   707   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   708   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   709   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   710   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   711   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   712   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   713  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   714  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   715  /** \brief writes single frame of data into the specified address
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   716   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   717   * \param address address of the location where the data is to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   718   * \param data data that needs to be written
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   719   * \param dataLength length of the data (8, 16, 32 bit)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   720   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   721   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   722   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   723   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   724   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   725  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   726  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   727  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   728  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   729  /** \addtogroup IfxLld_Hssl_Hssl_ErrorHandling
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   730   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   731  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   732  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   733  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   734  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   735  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   736  /** \brief stores the status of errors in the respective members of the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   737   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   739   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   740  IFX_EXTERN void IfxHssl_Hssl_checkErrors(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   741  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   742  /** \brief clears the status of members in the error flags structure
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   743   * \param hssl HSSL Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   745   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   746  IFX_EXTERN void IfxHssl_Hssl_clearErrorFlags(IfxHssl_Hssl *hssl);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   747  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   748  /** \brief a simple software delay
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   749   * \param hsct HSCT Handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   750   * \return None
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   751   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   752  IFX_EXTERN void IfxHssl_Hssl_delay(IfxHssl_Hsct *hsct);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   753  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   754  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   755  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   756  /** \addtogroup IfxLld_Hssl_Hssl_StreamingCom
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   757   * \{ */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   758  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   759  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   760  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   761  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   762  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   763  /** \brief Prepares the target device for streaming
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   764   * \param channel channel handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   765   * \param slaveTargetAddress address of the location on target device where the data needs to be transfered
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   766   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   767   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   768   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   769   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   770   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   771   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   772  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_prepareStream(IfxHssl_Hssl_Channel *channel, uint32 slaveTargetAddress, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   773  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   774  /** \brief transfers one memory block of data
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   775   * useful for transfering huge data from one location to another and between devices.
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   776   * NOTE: This function should be called only for IfxHssl_ChannelId_2
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   777   * \param hssl HSSL handle
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   778   * \param data starting address of the location to be read from (memory block 0 / HSSL_ISSA0)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   779   * \param count Frame count (length of the data in the memory as 256 bytes per frame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   780   * \return module status (ok, busy, error)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   781   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   782   * A coding example can be found in \ref IfxLld_Hssl_Hssl_Usage
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   783   *
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   784   */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   785  IFX_EXTERN IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count);
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   786  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   787  /** \} */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   788  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   789  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   790  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   791  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   792  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   793  IFX_INLINE uint32 IfxHssl_Hssl_getReadData(IfxHssl_Hssl_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   794  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   795      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	sha	d15,#4
.L734:
	addsc.a	a2,a2,d15,#0
.L735:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.h	   796      return hsslI->IRD.U;    /* retutn the data read from the data register */
	ld.w	d15,[a2]60
.L365:
	and	d15,d6
.L736:
	jeq	d15,d6,.L46
.L737:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   443          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   444              /* enable streaming mode (single) of channel 2 on target device */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   445              IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->CFG, 0x00070100, IfxHssl_DataLength_32bit);
	mov	d4,#2
	ld.w	d15,[a15]
.L738:
	mov	d7,d4
	mov.aa	a4,a15
.L436:
	add	d5,d15,#16
	call	IfxHssl_Hssl_singleFrameRequest
.L437:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   446  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   447              while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L47
.L48:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   448              {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   449                  if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L438:
	call	IfxHssl_Hssl_waitAcknowledge
.L439:
	jeq	d2,#2,.L49
.L47:
	mov.aa	a4,a15
.L440:
	call	IfxHssl_Hssl_waitAcknowledge
.L441:
	jne	d2,#0,.L48
.L46:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   450                  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   451                      return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   452                  }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   453              }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   454          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   455  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   456          /* enable streaming on target device */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   457          IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, (uint32)&channel->hssl->MFLAGSSET, 0x10000000, IfxHssl_DataLength_32bit);
	mov	d4,#2
	ld.w	d15,[a15]
.L739:
	mov	d7,d4
	mov.aa	a4,a15
.L442:
	add	d5,d15,#28
.L740:
	movh	d6,#4096
	call	IfxHssl_Hssl_singleFrameRequest
.L443:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   458  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   459          while (IfxHssl_Hssl_waitAcknowledge(channel) != IfxHssl_Hssl_Status_ok)
	j	.L50
.L51:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   460          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   461              if (IfxHssl_Hssl_waitAcknowledge(channel) == IfxHssl_Hssl_Status_error)
	mov.aa	a4,a15
.L444:
	call	IfxHssl_Hssl_waitAcknowledge
.L445:
	jne	d2,#2,.L52

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   462              {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   463                  return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   464              }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   465          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   466      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   467  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   468      channel->streamingModeOn = TRUE;    /* for waitAcknowledge function */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   469      /* preperation was successful */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   470      return IfxHssl_Hssl_Status_ok;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   471  }
.L49:
.L45:
.L41:
.L38:
.L35:
.L32:
.L29:
.L26:
	mov	d2,#2
	ret
.L52:
.L50:
	mov.aa	a4,a15
.L446:
	call	IfxHssl_Hssl_waitAcknowledge
.L447:
	jne	d2,#0,.L51
.L42:
	mov	d15,#1
	st.b	[a15]12,d15
.L741:
	ret
.L345:
	
__IfxHssl_Hssl_prepareStream_function_end:
	.size	IfxHssl_Hssl_prepareStream,__IfxHssl_Hssl_prepareStream_function_end-IfxHssl_Hssl_prepareStream
.L204:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_read',code,cluster('IfxHssl_Hssl_read')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_read'
	.align	2
	
	.global	IfxHssl_Hssl_read

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   472  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   473  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   474  IfxHssl_Hssl_Status IfxHssl_Hssl_read(IfxHssl_Hssl_Channel *channel, uint32 address, IfxHssl_DataLength dataLength)
; Function IfxHssl_Hssl_read
.L115:
IfxHssl_Hssl_read:	.type	func
	mov	d15,d4
.L450:
	mov	d7,d5
.L451:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   475  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   476      uint32 data = 0;                                                                                                 /* not required, data will be read back */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   477      return IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_readFrame, address, data, dataLength); /* initiate the read request */
	mov	d4,#1
.L448:
	mov	d6,#0
.L610:
	mov	d5,d15
.L449:
	j	IfxHssl_Hssl_singleFrameRequest
.L301:
	
__IfxHssl_Hssl_read_function_end:
	.size	IfxHssl_Hssl_read,__IfxHssl_Hssl_read_function_end-IfxHssl_Hssl_read
.L164:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_sendControlCommand',code,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_sendControlCommand'
	.align	2
	
	.global	IfxHssl_Hssl_sendControlCommand

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   478  }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   479  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   480  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   481  void IfxHssl_Hssl_sendControlCommand(IfxHssl_Hsct *hsct, uint8 command)
; Function IfxHssl_Hssl_sendControlCommand
.L117:
IfxHssl_Hssl_sendControlCommand:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   482  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   483      Ifx_HSCT *hsctSFR = hsct->hsct;
	ld.a	a15,[a4]
.L452:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   484  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   485      hsctSFR->IFCTRL.B.IFCVS = command; /* write the command into the register */
	st.b	[a15]20,d4
.L615:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   486      hsctSFR->IFCTRL.B.SIFCV = 1;       /* activate the command */
	ld.bu	d15,[a15]21
.L616:
	or	d15,#1
	st.b	[a15]21,d15
.L617:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   487  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   488      IfxHssl_Hssl_delay(hsct);          /* wait until the change happens */
	j	IfxHssl_Hssl_delay
.L307:
	
__IfxHssl_Hssl_sendControlCommand_function_end:
	.size	IfxHssl_Hssl_sendControlCommand,__IfxHssl_Hssl_sendControlCommand_function_end-IfxHssl_Hssl_sendControlCommand
.L169:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_singleFrameRequest',code,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_singleFrameRequest'
	.align	2
	
	.global	IfxHssl_Hssl_singleFrameRequest

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   489  }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   490  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   491  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   492  IfxHssl_Hssl_Status IfxHssl_Hssl_singleFrameRequest(IfxHssl_Hssl_Channel *channel, IfxHssl_Hssl_FrameRequest frameRequest, uint32 address, uint32 data, IfxHssl_DataLength dataLength)
; Function IfxHssl_Hssl_singleFrameRequest
.L119:
IfxHssl_Hssl_singleFrameRequest:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   493  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   494      Ifx_HSSL_I *hsslI = (Ifx_HSSL_I *)&channel->hssl->I[channel->channelId];
	ld.a	a15,[a4]
.L622:
	ld.bu	d15,[a4]8
	sha	d15,#4
.L623:
	addsc.a	a15,a15,d15,#0
.L624:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   495  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   496      if (channel->currentFrameRequest != IfxHssl_Hssl_FrameRequest_noAction)
	ld.bu	d15,[a4]9
.L625:
	lea	a15,[a15]48
.L453:
	jeq	d15,#5,.L56
.L626:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   497      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   498          return IfxHssl_Hssl_Status_busy;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   499      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   500  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   501      hsslI->ICON.B.DATLEN = dataLength;               /* 0x2 -> word size */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   502      hsslI->ICON.B.TOREL  = 0xff;                     /* max reload value */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   503  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   504      switch (frameRequest)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   505      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   506      case IfxHssl_Hssl_FrameRequest_readFrame:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   507          hsslI->ICON.B.RWT = IfxHssl_Command_readFrame;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   508          hsslI->IRWA.U     = address;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   509          break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   510      case IfxHssl_Hssl_FrameRequest_writeFrame:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   511          hsslI->ICON.B.RWT = IfxHssl_Command_writeFrame;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   512          hsslI->IWD.U      = data;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   513          hsslI->IRWA.U     = address;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   514          break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   515      case IfxHssl_Hssl_FrameRequest_triggerFrame:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   516          hsslI->ICON.B.RWT = IfxHssl_Command_triggerFrame;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   517          hsslI->IWD.U      = data;    /* dummy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   518          hsslI->IRWA.U     = address; /* dummy */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   519          break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   520      case IfxHssl_Hssl_FrameRequest_readId:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   521          /* request an ID frame  */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   522          hsslI->ICON.B.IDQ = 1;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   523          break;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   524      default:
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   525          /* invalid request */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   526          return IfxHssl_Hssl_Status_error;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   527      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   528  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   529      channel->currentFrameRequest = frameRequest;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   530  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   531      return IfxHssl_Hssl_Status_ok;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   532  }
	mov	d2,#1
	ret
.L56:
	ld.bu	d15,[a15]6
.L627:
	insert	d15,d15,d7,#0,#2
	st.b	[a15]6,d15
.L628:
	mov	d15,#255
	st.b	[a15]7,d15
.L629:
	jeq	d4,#1,.L58
.L630:
	mov	d2,#2
	jeq	d4,#2,.L59
.L631:
	jeq	d4,#3,.L60
.L632:
	jeq	d4,#4,.L61
.L633:
	ret
.L58:
	ld.bu	d15,[a15]6
.L634:
	insert	d15,d15,#1,#2,#2
	st.b	[a15]6,d15
.L635:
	j	.L63
.L59:
	ld.bu	d15,[a15]6
.L636:
	insert	d15,d15,#2,#2,#2
	j	.L64
.L60:
	ld.bu	d15,[a15]6
.L637:
	or	d15,#12
.L64:
	st.b	[a15]6,d15
.L638:
	st.w	[a15],d6
.L63:
	st.w	[a15]8,d5
.L639:
	j	.L65
.L61:
	ld.bu	d15,[a15]4
.L640:
	or	d15,#1
	st.b	[a15]4,d15
.L65:
	st.b	[a4]9,d4
.L641:
	mov	d2,#0
	ret
.L312:
	
__IfxHssl_Hssl_singleFrameRequest_function_end:
	.size	IfxHssl_Hssl_singleFrameRequest,__IfxHssl_Hssl_singleFrameRequest_function_end-IfxHssl_Hssl_singleFrameRequest
.L174:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_waitAcknowledge',code,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_waitAcknowledge'
	.align	2
	
	.global	IfxHssl_Hssl_waitAcknowledge

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   533  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   534  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   535  IfxHssl_Hssl_Status IfxHssl_Hssl_waitAcknowledge(IfxHssl_Hssl_Channel *channel)
; Function IfxHssl_Hssl_waitAcknowledge
.L121:
IfxHssl_Hssl_waitAcknowledge:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   536  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   537      uint32            requestType = channel->currentFrameRequest;
	ld.bu	d15,[a4]9
.L646:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   538      IfxHssl_ChannelId channelId   = channel->channelId;
	ld.bu	d4,[a4]8
.L647:
	mov	d0,d15
.L454:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   539  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   540      if ((channelId == IfxHssl_ChannelId_2) && (channel->hssl->CFG.B.SCM == 1))
	jne	d4,#2,.L69
.L648:
	ld.a	a15,[a4]
.L649:
	ld.bu	d1,[a15]18
.L650:
	jz.t	d1:2,.L70

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   541      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   542          while (channel->hssl->MFLAGS.B.ISB)
.L71:
	ld.bu	d15,[a15]26
.L651:
	jnz.t	d15:4,.L71
.L652:
	j	.L72
.L70:
.L69:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   543          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   544              /* transfer in progress */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   545          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   546      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   547      else
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   548      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   549          if (channel->currentFrameRequest == IfxHssl_Hssl_FrameRequest_writeFrame)
	eq	d1,d15,#2
	ld.a	a15,[a4]
.L653:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   550          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   551              requestType = 1;
	seln	d0,d1,d0,#1
.L654:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   552          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   553  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   554          /* expect a read frame when requestType == IfxHssl_Hssl_FrameRequest_readId */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   555          if ((channel->currentFrameRequest == IfxHssl_Hssl_FrameRequest_readFrame) || (channel->currentFrameRequest == IfxHssl_Hssl_FrameRequest_readId))
	jeq	d15,#1,.L74
.L655:
	jne	d15,#4,.L75
.L74:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   556          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   557              requestType = 2;
	mov	d0,#2
.L75:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   558          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   559  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   560          if (channel->currentFrameRequest == IfxHssl_Hssl_FrameRequest_triggerFrame)
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   561          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   562              requestType = 3;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   563          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   564  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   565          uint32 qFlags               = channel->hssl->QFLAGS.U;
	eq	d15,d15,#3
	ld.w	d1,[a15]20
.L325:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   566          uint32 mFlags               = channel->hssl->MFLAGS.U;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   567          uint32 acknwoledgeFlagsMask = ((requestType << (16 + (channel->channelId * 2))) | (1 << channel->channelId));
	sha	d2,d4,#1
	ld.w	d5,[a15]24
.L326:
	cmov	d0,d15,#3
.L327:
	add	d2,d2,#16
.L656:
	sh	d0,d0,d2
.L455:
	mov	d2,#1
.L657:
	sha	d2,d2,d4
.L458:
	or	d0,d2
.L658:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   568          uint32 errorFlagsMask       = ((0x03E00000) | (4369 << channel->channelId)); /* all the possible errors */
	mov	d2,#4369
.L659:
	sha	d2,d2,d4
.L660:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   569  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   570          if (channel->hssl->I[channelId].ICON.B.BSY == 1)
	sha	d4,#4
.L661:
	addsc.a	a15,a15,d4,#0
.L662:
	movh	d3,#992
.L663:
	ld.bu	d15,[a15]54
.L459:
	or	d2,d3
.L664:
	jnz.t	d15:4,.L77
.L665:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   571          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   572              return IfxHssl_Hssl_Status_busy;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   573          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   574  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   575          if (qFlags & acknwoledgeFlagsMask)     /* transfer in progress? */
	and	d1,d0
.L456:
	jeq	d1,#0,.L78

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   576          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   577              return IfxHssl_Hssl_Status_busy;   /* return busy status in case of no error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   578          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   579  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   580          if (mFlags & errorFlagsMask)           /* check for errors */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   581          {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   582              channel->currentFrameRequest = IfxHssl_Hssl_FrameRequest_noAction;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   583              return IfxHssl_Hssl_Status_error;  /* return error status in case of an error */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   584          }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   585  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   586          /* transfer is finished */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   587          channel->currentFrameRequest = IfxHssl_Hssl_FrameRequest_noAction;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   588      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   589  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   590      return IfxHssl_Hssl_Status_ok;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   591  }
.L77:
	mov	d2,#1
	ret
.L78:
	and	d5,d2
.L457:
	jeq	d5,#0,.L80
.L666:
	mov	d15,#5
	st.b	[a4]9,d15
.L667:
	mov	d2,#2
	ret
.L80:
	mov	d15,#5
	st.b	[a4]9,d15
.L72:
	mov	d2,#0
	ret
.L321:
	
__IfxHssl_Hssl_waitAcknowledge_function_end:
	.size	IfxHssl_Hssl_waitAcknowledge,__IfxHssl_Hssl_waitAcknowledge_function_end-IfxHssl_Hssl_waitAcknowledge
.L179:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_write',code,cluster('IfxHssl_Hssl_write')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_write'
	.align	2
	
	.global	IfxHssl_Hssl_write

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   592  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   593  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   594  IfxHssl_Hssl_Status IfxHssl_Hssl_write(IfxHssl_Hssl_Channel *channel, uint32 address, uint32 data, IfxHssl_DataLength dataLength)
; Function IfxHssl_Hssl_write
.L123:
IfxHssl_Hssl_write:	.type	func
	mov	d15,d4
.L463:
	mov	d0,d5
.L464:
	mov	d7,d6
.L465:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   595  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   596      return IfxHssl_Hssl_singleFrameRequest(channel, IfxHssl_Hssl_FrameRequest_writeFrame, address, data, dataLength);
	mov	d4,#2
.L460:
	mov	d5,d15
.L461:
	mov	d6,d0
.L462:
	j	IfxHssl_Hssl_singleFrameRequest
.L332:
	
__IfxHssl_Hssl_write_function_end:
	.size	IfxHssl_Hssl_write,__IfxHssl_Hssl_write_function_end-IfxHssl_Hssl_write
.L184:
	; End of function
	
	.sdecl	'.text.IfxHssl_Hssl.IfxHssl_Hssl_writeStream',code,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.text.IfxHssl_Hssl.IfxHssl_Hssl_writeStream'
	.align	2
	
	.global	IfxHssl_Hssl_writeStream

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   597  }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   598  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   599  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   600  IfxHssl_Hssl_Status IfxHssl_Hssl_writeStream(IfxHssl_Hssl *hssl, uint32 *data, Ifx_SizeT count)
; Function IfxHssl_Hssl_writeStream
.L125:
IfxHssl_Hssl_writeStream:	.type	func

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   601  {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   602      Ifx_HSSL             *hsslSFR       = hssl->hssl;
	ld.a	a15,[a4]
.L466:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   603      Ifx_HSSL_IS          *hsslIS        = (Ifx_HSSL_IS *)&hsslSFR->IS;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   604      IfxHssl_StreamingMode streamingMode = IfxHssl_StreamingMode_single;
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   605  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   606      /* single memory block streaming */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   607      hsslIS->SA[0].U                              = (uint32)data;  /* initiator start address to memeroy block 0 */
	mov.d	d15,a5
.L467:
	st.w	[a15]160,d15
.L746:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   608  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   609      hsslIS->FC.B.RELCOUNT                        = count;         /* memory count into initiator reload count register */
	st.h	[a15]172,d4
.L747:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   610  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   611      hsslSFR->CFG.B.SCM                           = 1;             /* enable streaming mode of channel 2 on the initiator */
	ld.bu	d15,[a15]18
.L468:
	or	d15,#4
	st.b	[a15]18,d15
.L748:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   612      hsslSFR->CFG.B.SMT                           = streamingMode; /* set transmitter streaming mode ( single / continuous ) on the initiator */
	ld.bu	d15,[a15]18
.L749:
	or	d15,#1
	st.b	[a15]18,d15
.L750:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   613      hsslSFR->CFG.B.SMR                           = streamingMode; /* set receiver streaming mode ( single / continuous ) on the initiator */
	ld.bu	d15,[a15]18
.L751:
	or	d15,#2
	st.b	[a15]18,d15
.L752:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   614      /* streaming is supported only on IfxHssl_ChannelId_2 */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   615      hsslSFR->I[IfxHssl_ChannelId_2].ICON.B.TOREL = 0xff;          /* set the transmitter reload value to 0xff.*/
	mov	d15,#255
	st.b	[a15]87,d15
.L753:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   616  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   617      /* incase of transfers within the device(loopback on) */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   618      if (hssl->loopBack)
	ld.bu	d15,[a4]6
.L754:
	jeq	d15,#0,.L84
.L755:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   619      {
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   620          hsslSFR->MFLAGSSET.B.TSES = 1; /* enable target */
	ld.bu	d15,[a15]31
.L756:
	or	d15,#16
	st.b	[a15]31,d15
.L84:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   621      }
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   622  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   623      /* initiate the transfer */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   624      hsslSFR->MFLAGSSET.B.ISBS = 1;
	ld.bu	d15,[a15]30
.L757:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   625  
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   626      /* streaming started */
; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   627      return IfxHssl_Hssl_Status_ok;
	mov	d2,#0
.L758:
	or	d15,#16
	st.b	[a15]30,d15
.L759:

; ..\0_Src\4_McHal\Tricore\Hssl\Hssl\IfxHssl_Hssl.c	   628  }
	ret
.L366:
	
__IfxHssl_Hssl_writeStream_function_end:
	.size	IfxHssl_Hssl_writeStream,__IfxHssl_Hssl_writeStream_function_end-IfxHssl_Hssl_writeStream
.L209:
	; End of function
	
	.calls	'IfxHssl_Hssl_initHsctModule','IfxPort_setPinMode'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxPort_setPinPadDriver'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxHssl_Hssl_initHsctModule','IfxHssl_enableHsctModule'
	.calls	'IfxHssl_Hssl_initHsslModule','IfxHssl_enableHsslModule'
	.calls	'IfxHssl_Hssl_prepareStream','IfxHssl_Hssl_singleFrameRequest'
	.calls	'IfxHssl_Hssl_prepareStream','IfxHssl_Hssl_waitAcknowledge'
	.calls	'IfxHssl_Hssl_prepareStream','IfxHssl_Hssl_read'
	.calls	'IfxHssl_Hssl_read','IfxHssl_Hssl_singleFrameRequest'
	.calls	'IfxHssl_Hssl_sendControlCommand','IfxHssl_Hssl_delay'
	.calls	'IfxHssl_Hssl_write','IfxHssl_Hssl_singleFrameRequest'
	.calls	'IfxHssl_Hssl_initHsctModule','.cocofun_13'
	.calls	'IfxHssl_Hssl_initHsctModule','.cocofun_11'
	.calls	'IfxHssl_Hssl_initHsctModule','.cocofun_12'
	.calls	'IfxHssl_Hssl_initHsctModule','.cocofun_10'
	.calls	'.cocofun_11','.cocofun_13'
	.calls	'.cocofun_10','.cocofun_12'
	.calls	'IfxHssl_Hssl_checkErrors','',0
	.calls	'IfxHssl_Hssl_clearErrorFlags','',0
	.calls	'IfxHssl_Hssl_delay','',0
	.calls	'IfxHssl_Hssl_initChannel','',0
	.calls	'IfxHssl_Hssl_initChannelConfig','',0
	.calls	'IfxHssl_Hssl_initHsctModule','',0
	.calls	'.cocofun_13','',0
	.calls	'.cocofun_12','',0
	.calls	'.cocofun_11','',0
	.calls	'.cocofun_10','',0
	.calls	'IfxHssl_Hssl_initHsctModuleConfig','',0
	.calls	'IfxHssl_Hssl_initHsslModule','',0
	.calls	'IfxHssl_Hssl_initHsslModuleConfig','',0
	.calls	'IfxHssl_Hssl_prepareStream','',0
	.calls	'IfxHssl_Hssl_read','',0
	.calls	'IfxHssl_Hssl_sendControlCommand','',0
	.calls	'IfxHssl_Hssl_singleFrameRequest','',0
	.calls	'IfxHssl_Hssl_waitAcknowledge','',0
	.calls	'IfxHssl_Hssl_write','',0
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxHssl_enableHsctModule
	.extern	IfxHssl_enableHsslModule
	.extern	IfxPort_setPinMode
	.extern	IfxPort_setPinPadDriver
	.calls	'IfxHssl_Hssl_writeStream','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L127:
	.word	65142
	.half	3
	.word	.L128
	.byte	4
.L126:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L129
	.byte	2,1,1,3
	.word	172
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	175
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	220
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	232
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	312
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	286
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	318
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	318
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	286
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5
.L309:
	.byte	7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,68,16,4,11
	.byte	'SRPN',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	427
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	427
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	427
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	427
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,4,93,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	444
	.byte	4,2,35,0,0,14
	.word	734
	.byte	3
	.word	773
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,247,1,17,1,1,5
	.byte	'src',0,3,247,1,60
	.word	778
	.byte	6,0,4
	.byte	'IfxSrc_enable',0,3,3,137,2,17,1,1,5
	.byte	'src',0,3,137,2,54
	.word	778
	.byte	6,0,15,5,66,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_dma',0,1,16
	.byte	'IfxSrc_Tos_cpu1',0,2,16
	.byte	'IfxSrc_Tos_cpu2',0,3,16
	.byte	'IfxSrc_Tos_cpu3',0,4,16
	.byte	'IfxSrc_Tos_cpu4',0,5,16
	.byte	'IfxSrc_Tos_cpu5',0,6,0
.L273:
	.byte	7
	.byte	'unsigned short int',0,2,7,4
	.byte	'IfxSrc_init',0,3,3,143,2,17,1,1,5
	.byte	'src',0,3,143,2,52
	.word	778
	.byte	5
	.byte	'typOfService',0,3,143,2,68
	.word	863
	.byte	5
	.byte	'priority',0,3,143,2,95
	.word	994
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,7,145,3,16,4,11
	.byte	'P0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,7,171,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1093
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,7,171,2,16,4,11
	.byte	'PS0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,7,251,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1409
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,7,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	427
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,7,155,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1980
	.byte	4,2,35,0,0,18,4
	.word	427
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,7,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	427
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	427
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	427
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	427
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	427
	.byte	5,0,2,35,3,0,12,7,171,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2109
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,7,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	427
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	427
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	427
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	427
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	427
	.byte	5,0,2,35,3,0,12,7,187,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2324
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,7,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	427
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	427
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	427
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	427
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	427
	.byte	5,0,2,35,3,0,12,7,195,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2539
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,7,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	427
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	427
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	427
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	427
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	427
	.byte	5,0,2,35,3,0,12,7,179,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2756
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,7,141,1,16,4,11
	.byte	'P0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,7,163,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2976
	.byte	4,2,35,0,0,18,24
	.word	427
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,7,212,3,16,4,11
	.byte	'PD0',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	427
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	427
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	427
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	427
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	427
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	427
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	427
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	427
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	427
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	427
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	427
	.byte	2,0,2,35,3,0,12,7,195,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3300
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,7,233,3,16,4,11
	.byte	'PD8',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	427
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	427
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	427
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	427
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	427
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	427
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	427
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	427
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	427
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	427
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	427
	.byte	2,0,2,35,3,0,12,7,203,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3604
	.byte	4,2,35,0,0,18,8
	.word	427
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,7,111,16,4,11
	.byte	'EN0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,7,147,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3929
	.byte	4,2,35,0,0,18,12
	.word	427
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,7,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,7,187,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4269
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,7,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,7,179,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4635
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,7,230,2,16,4,11
	.byte	'PS0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	28,0,2,35,0,0,12,7,139,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4999
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,7,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	404
	.byte	24,0,2,35,0,0,12,7,155,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5146
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,7,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	404
	.byte	20,0,2,35,0,0,12,7,163,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5315
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,7,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	994
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,7,147,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5487
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,7,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	994
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	994
	.byte	12,0,2,35,2,0,12,7,219,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5662
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,7,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	8,0,2,35,3,0,12,7,235,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5836
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,7,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	427
	.byte	4,0,2,35,3,0,12,7,243,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6010
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,7,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,7,227,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6186
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,7,208,2,16,4,11
	.byte	'PS0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,7,131,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6342
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,7,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	994
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,7,211,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6675
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,7,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	427
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	427
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,7,203,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7023
	.byte	4,2,35,0,0,18,32
	.word	7303
	.byte	19,7,0,18,56
	.word	427
	.byte	19,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,7,105,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,7,139,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7361
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,7,68,16,4,11
	.byte	'EN0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,7,131,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7448
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,7,220,5,25,128,2,13
	.byte	'OUT',0
	.word	1369
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	1940
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2060
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2100
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2284
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	2499
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	2716
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	2936
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2100
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3251
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3291
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	3564
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	3880
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	3920
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4220
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4260
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	4595
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	4959
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	3920
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5106
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5275
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5447
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	5622
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	5796
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	5970
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6146
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6302
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	6635
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	6983
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3920
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	7343
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	7352
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	7408
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	7975
	.byte	4,3,35,252,1,0,14
	.word	8015
	.byte	3
	.word	8585
	.byte	15,6,81,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0
.L238:
	.byte	4
	.byte	'IfxPort_setPinModeInput',0,3,6,157,5,17,1,1
.L241:
	.byte	5
	.byte	'port',0,6,157,5,48
	.word	8590
.L243:
	.byte	5
	.byte	'pinIndex',0,6,157,5,60
	.word	427
.L245:
	.byte	5
	.byte	'mode',0,6,157,5,88
	.word	8595
.L247:
	.byte	6,0,15,6,140,1,9,1,16
	.byte	'IfxPort_OutputMode_none',0,0,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,15,6,126,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0
.L252:
	.byte	4
	.byte	'IfxPort_setPinModeOutput',0,3,6,163,5,17,1,1
.L254:
	.byte	5
	.byte	'port',0,6,163,5,49
	.word	8590
.L256:
	.byte	5
	.byte	'pinIndex',0,6,163,5,61
	.word	427
.L258:
	.byte	5
	.byte	'mode',0,6,163,5,90
	.word	8800
.L260:
	.byte	5
	.byte	'index',0,6,163,5,114
	.word	8896
.L262:
	.byte	6,0,15,6,187,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,6,169,5,17,1,1,5
	.byte	'port',0,6,169,5,44
	.word	8590
	.byte	5
	.byte	'pinIndex',0,6,169,5,56
	.word	427
	.byte	5
	.byte	'action',0,6,169,5,80
	.word	9209
	.byte	6,0
.L303:
	.byte	7
	.byte	'unsigned long int',0,4,7,10
	.byte	'_Ifx_HSSL_CLC_Bits',0,9,149,1,16,4,11
	.byte	'DISR',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	28,0,2,35,0,0,12,9,247,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9411
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_ID_Bits',0,9,167,1,16,4,11
	.byte	'MODREV',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	427
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,9,135,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9569
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_CRC_Bits',0,9,159,1,16,4,11
	.byte	'XORMASK',0,2
	.word	994
	.byte	16,0,2,35,0,11
	.byte	'XEN',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	994
	.byte	15,0,2,35,2,0,12,9,255,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9692
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_CFG_Bits',0,9,137,1,16,4,11
	.byte	'PREDIV',0,2
	.word	994
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	427
	.byte	2,0,2,35,1,11
	.byte	'SMT',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'SMR',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'SCM',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'CCC',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	994
	.byte	12,0,2,35,2,0,12,9,239,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9815
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_QFLAGS_Bits',0,9,233,2,16,4,11
	.byte	'I',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'T',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'R',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'E0',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'E1',0,1
	.word	427
	.byte	2,4,2,35,2,11
	.byte	'E2',0,1
	.word	427
	.byte	2,2,2,35,2,11
	.byte	'E3',0,1
	.word	427
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	4,4,2,35,3,11
	.byte	'IS',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'RS',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'TS',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'ES',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,9,143,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10005
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MFLAGS_Bits',0,9,251,1,16,4,11
	.byte	'NACK',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'TTE',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'TIMEOUT',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'UNEXPECTED',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'TMB',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'IMB',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'ISB',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'MAV',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'SRIE',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'PIE1',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'PIE2',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'CRCE',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	427
	.byte	2,4,2,35,3,11
	.byte	'TSE',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'TEI',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'TEO',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'INI',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,9,223,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10271
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MFLAGSSET_Bits',0,9,187,2,16,4,11
	.byte	'NACKS',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'TTES',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'TIMEOUTS',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'UNEXPECTEDS',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'TMBS',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'IMBS',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'ISBS',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'MAVS',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'SRIES',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'PIE1S',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'PIE2S',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'CRCES',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	427
	.byte	2,4,2,35,3,11
	.byte	'TSES',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'TEOS',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'INIS',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,9,247,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10642
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MFLAGSCL_Bits',0,9,146,2,16,4,11
	.byte	'NACKC',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'TTEC',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'TIMEOUTC',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'UNEXPECTEDC',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'TMBC',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'IMBC',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'ISBC',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'MAVC',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'SRIEC',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'PIE1C',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'PIE2C',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'CRCEC',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	427
	.byte	2,4,2,35,3,11
	.byte	'TSEC',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'TEOC',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'INIC',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,9,231,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11039
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MFLAGSEN_Bits',0,9,169,2,16,4,11
	.byte	'NACKEN',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'TTEEN',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'TIMEOUTEN',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'UNEXPECTEDEN',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	427
	.byte	5,3,2,35,2,11
	.byte	'MAVEN',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'SRIEEN',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'PIE1EN',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'PIE2EN',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'CRCEEN',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	427
	.byte	3,3,2,35,3,11
	.byte	'TEIEN',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	427
	.byte	2,0,2,35,3,0,12,9,239,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11435
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_SFSFLAGS_Bits',0,9,131,3,16,4,11
	.byte	'RXFL',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'TXFL',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'EXFL',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	994
	.byte	9,1,2,35,0,11
	.byte	'ISF',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,9,159,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11761
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I_IWD_Bits',0,9,223,1,16,4,11
	.byte	'DATA',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,9,191,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11940
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I_ICON_Bits',0,9,196,1,16,4,11
	.byte	'IDQ',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'TQ',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'LETT',0,1
	.word	427
	.byte	3,3,2,35,0,11
	.byte	'CETT',0,1
	.word	427
	.byte	3,0,2,35,0,11
	.byte	'TOCV',0,1
	.word	427
	.byte	8,0,2,35,1,11
	.byte	'DATLEN',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'RWT',0,1
	.word	427
	.byte	2,4,2,35,2,11
	.byte	'BSY',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'ITTAG',0,1
	.word	427
	.byte	3,0,2,35,2,11
	.byte	'TOREL',0,1
	.word	427
	.byte	8,0,2,35,3,0,12,9,167,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12024
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I_IRWA_Bits',0,9,217,1,16,4,11
	.byte	'ADDRESS',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,9,183,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12252
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I_IRD_Bits',0,9,211,1,16,4,11
	.byte	'DATA',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,9,175,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12340
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_I',0,9,232,5,25,16,13
	.byte	'IWD',0
	.word	11984
	.byte	4,2,35,0,13
	.byte	'ICON',0
	.word	12212
	.byte	4,2,35,4,13
	.byte	'IRWA',0
	.word	12300
	.byte	4,2,35,8,13
	.byte	'IRD',0
	.word	12384
	.byte	4,2,35,12,0,18,64
	.word	12424
	.byte	19,3,0,14
	.word	12497
	.byte	10
	.byte	'_Ifx_HSSL_T_TCD_Bits',0,9,188,3,16,4,11
	.byte	'D',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,9,215,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12511
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_T_TCA_Bits',0,9,182,3,16,4,11
	.byte	'A',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,9,207,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12592
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_T',0,9,253,5,25,8,13
	.byte	'TCD',0
	.word	12552
	.byte	4,2,35,0,13
	.byte	'TCA',0
	.word	12633
	.byte	4,2,35,4,0,18,32
	.word	12673
	.byte	19,3,0,14
	.word	12718
	.byte	10
	.byte	'_Ifx_HSSL_TSTAT_Bits',0,9,148,3,16,4,11
	.byte	'LASTCC0',0,1
	.word	427
	.byte	5,3,2,35,0,11
	.byte	'LASTTT0',0,1
	.word	427
	.byte	3,0,2,35,0,11
	.byte	'LASTCC1',0,1
	.word	427
	.byte	5,3,2,35,1,11
	.byte	'LASTTT1',0,1
	.word	427
	.byte	3,0,2,35,1,11
	.byte	'LASTCC2',0,1
	.word	427
	.byte	5,3,2,35,2,11
	.byte	'LASTTT2',0,1
	.word	427
	.byte	3,0,2,35,2,11
	.byte	'LASTCC3',0,1
	.word	427
	.byte	5,3,2,35,3,11
	.byte	'LASTTT3',0,1
	.word	427
	.byte	3,0,2,35,3,0,12,9,175,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12732
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_TIDADD_Bits',0,9,142,3,16,4,11
	.byte	'A',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,9,167,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12952
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_SEC_Bits',0,9,251,2,16,4,11
	.byte	'LCK',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'LAW',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	404
	.byte	30,0,2,35,0,0,12,9,151,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13034
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_MSCR_Bits',0,9,210,2,16,4,11
	.byte	'EN',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'SLAVETAG',0,1
	.word	427
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	994
	.byte	13,0,2,35,0,11
	.byte	'ITXSTOP',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	994
	.byte	15,0,2,35,2,0,12,9,255,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13152
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_IS_SA_Bits',0,9,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	5,3,2,35,0,11
	.byte	'START',0,4
	.word	404
	.byte	27,0,2,35,0,0,12,9,159,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13317
	.byte	4,2,35,0,0,18,8
	.word	13384
	.byte	19,1,0,10
	.byte	'_Ifx_HSSL_IS_CA_Bits',0,9,175,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	5,3,2,35,0,11
	.byte	'CURR',0,4
	.word	404
	.byte	27,0,2,35,0,0,12,9,143,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13433
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_IS_FC_Bits',0,9,182,1,16,4,11
	.byte	'RELCOUNT',0,2
	.word	994
	.byte	16,0,2,35,0,11
	.byte	'CURCOUNT',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,9,151,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13539
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_IS',0,9,144,6,25,16,13
	.byte	'SA',0
	.word	13424
	.byte	8,2,35,0,13
	.byte	'CA',0
	.word	13499
	.byte	4,2,35,8,13
	.byte	'FC',0
	.word	13607
	.byte	4,2,35,12,0,14
	.word	13647
	.byte	10
	.byte	'_Ifx_HSSL_TS_SA_Bits',0,9,175,3,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	404
	.byte	27,0,2,35,0,0,12,9,199,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13708
	.byte	4,2,35,0,0,18,8
	.word	13774
	.byte	19,1,0,10
	.byte	'_Ifx_HSSL_TS_CA_Bits',0,9,161,3,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	5,3,2,35,0,11
	.byte	'CURR',0,4
	.word	404
	.byte	27,0,2,35,0,0,12,9,183,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13823
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_TS_FC_Bits',0,9,168,3,16,4,11
	.byte	'RELCOUNT',0,2
	.word	994
	.byte	16,0,2,35,0,11
	.byte	'CURCOUNT',0,2
	.word	994
	.byte	16,0,2,35,2,0
.L350:
	.byte	12,9,191,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13929
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_TS',0,9,164,6,25,16,13
	.byte	'SA',0
	.word	13814
	.byte	8,2,35,0,13
	.byte	'CA',0
	.word	13889
	.byte	4,2,35,8,13
	.byte	'FC',0
	.word	13997
	.byte	4,2,35,12,0,14
	.word	14037
	.byte	10
	.byte	'_Ifx_HSSL_AW_AWSTART_Bits',0,9,130,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'AWS',0,4
	.word	404
	.byte	24,0,2,35,0,0,12,9,231,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14098
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_AW_AWEND_Bits',0,9,123,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'AWE',0,4
	.word	404
	.byte	24,0,2,35,0,0,12,9,223,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14208
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_AW',0,9,184,6,25,8,13
	.byte	'AWSTART',0
	.word	14168
	.byte	4,2,35,0,13
	.byte	'AWEND',0
	.word	14275
	.byte	4,2,35,4,0,18,32
	.word	14315
	.byte	19,3,0,14
	.word	14367
	.byte	10
	.byte	'_Ifx_HSSL_AR_Bits',0,9,111,16,4,11
	.byte	'ARW0',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'ARW1',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'ARW2',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'ARW3',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	8,0,2,35,1,11
	.byte	'MAVCH',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	994
	.byte	14,0,2,35,2,0,12,9,215,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14381
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_OCS_Bits',0,9,220,2,16,4,11
	.byte	'TGS',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	427
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	427
	.byte	2,0,2,35,3,0,12,9,135,5,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14571
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_KRSTCLR_Bits',0,9,244,1,16,4,11
	.byte	'CLR',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	404
	.byte	31,0,2,35,0,0,12,9,215,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14778
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_KRST1_Bits',0,9,237,1,16,4,11
	.byte	'RST',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	404
	.byte	31,0,2,35,0,0,12,9,207,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14885
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_KRST0_Bits',0,9,229,1,16,4,11
	.byte	'RST',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	404
	.byte	30,0,2,35,0,0,12,9,199,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14990
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_ACCEN1_Bits',0,9,105,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,9,207,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15114
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSSL_ACCEN0_Bits',0,9,68,16,4,11
	.byte	'EN0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,9,199,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15204
	.byte	4,2,35,0,0,18,255,5
	.word	427
	.byte	19,254,5,0,10
	.byte	'_Ifx_HSSL',0,9,203,6,25,128,8,13
	.byte	'CLC',0
	.word	9529
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2100
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	9652
	.byte	4,2,35,8,13
	.byte	'CRC',0
	.word	9775
	.byte	4,2,35,12,13
	.byte	'CFG',0
	.word	9965
	.byte	4,2,35,16,13
	.byte	'QFLAGS',0
	.word	10231
	.byte	4,2,35,20,13
	.byte	'MFLAGS',0
	.word	10602
	.byte	4,2,35,24,13
	.byte	'MFLAGSSET',0
	.word	10999
	.byte	4,2,35,28,13
	.byte	'MFLAGSCL',0
	.word	11395
	.byte	4,2,35,32,13
	.byte	'MFLAGSEN',0
	.word	11721
	.byte	4,2,35,36,13
	.byte	'SFSFLAGS',0
	.word	11900
	.byte	4,2,35,40,13
	.byte	'reserved_2C',0
	.word	2100
	.byte	4,2,35,44,13
	.byte	'I',0
	.word	12506
	.byte	64,2,35,48,13
	.byte	'T',0
	.word	12727
	.byte	32,2,35,112,13
	.byte	'TSTAT',0
	.word	12912
	.byte	4,3,35,144,1,13
	.byte	'TIDADD',0
	.word	12994
	.byte	4,3,35,148,1,13
	.byte	'SEC',0
	.word	13112
	.byte	4,3,35,152,1,13
	.byte	'MSCR',0
	.word	13277
	.byte	4,3,35,156,1,13
	.byte	'IS',0
	.word	13703
	.byte	16,3,35,160,1,13
	.byte	'TS',0
	.word	14093
	.byte	16,3,35,176,1,13
	.byte	'AW',0
	.word	14376
	.byte	32,3,35,192,1,13
	.byte	'AR',0
	.word	14531
	.byte	4,3,35,224,1,13
	.byte	'reserved_E4',0
	.word	2100
	.byte	4,3,35,228,1,13
	.byte	'OCS',0
	.word	14738
	.byte	4,3,35,232,1,13
	.byte	'KRSTCLR',0
	.word	14845
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	14950
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	15074
	.byte	4,3,35,244,1,13
	.byte	'ACCEN1',0
	.word	15164
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	15734
	.byte	4,3,35,252,1,13
	.byte	'reserved_100',0
	.word	15774
	.byte	255,5,3,35,128,2,0,14
	.word	15785
.L284:
	.byte	3
	.word	16280
	.byte	10
	.byte	'_Ifx_HSCT_CLC_Bits',0,10,111,16,4,11
	.byte	'DISR',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	28,0,2,35,0,0,12,10,238,2,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16290
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_ID_Bits',0,10,149,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	427
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUM',0,2
	.word	994
	.byte	16,0,2,35,2,0,12,10,142,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16447
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_INIT_Bits',0,10,178,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'SYS_CLK_EN',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'IFM',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'SRCF',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'SSCF',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	8,0,2,35,1,11
	.byte	'TXHD',0,1
	.word	427
	.byte	3,5,2,35,2,11
	.byte	'RXHD',0,1
	.word	427
	.byte	3,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	994
	.byte	10,0,2,35,2,0,12,10,166,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16570
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IFCTRL_Bits',0,10,157,1,16,4,11
	.byte	'IFCVS',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'SIFCV',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	427
	.byte	7,0,2,35,1,11
	.byte	'MRXSPEED',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'MTXSPEED',0,1
	.word	427
	.byte	2,4,2,35,2,11
	.byte	'IFTESTMD',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	994
	.byte	11,0,2,35,2,0,12,10,150,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16827
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_SLEEPCTRL_Bits',0,10,160,2,16,4,11
	.byte	'SLPEN',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'SLPCLKG',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	994
	.byte	14,0,2,35,0,11
	.byte	'WKUPCNT',0,1
	.word	427
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	8,0,2,35,3,0,12,10,230,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17035
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_CTSCTRL_Bits',0,10,130,1,16,4,11
	.byte	'CTS_FRAME',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'CTS_TXD',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'CTS_RXD',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'HSSL_CTS_FBD',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	28,0,2,35,0,0,12,10,254,2,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17207
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_DISABLE_Bits',0,10,140,1,16,4,11
	.byte	'TX_DIS',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'RX_HEPD',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	404
	.byte	29,0,2,35,0,0,12,10,134,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17382
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_STAT_Bits',0,10,170,2,16,4,11
	.byte	'RX_PSIZE',0,1
	.word	427
	.byte	3,5,2,35,0,11
	.byte	'RX_CHANNEL',0,1
	.word	427
	.byte	4,1,2,35,0,11
	.byte	'RX_SLEEP',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'TX_SLEEP',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	427
	.byte	3,4,2,35,1,11
	.byte	'TX_PSIZE',0,1
	.word	427
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'TX_CHANNEL_TYPE',0,1
	.word	427
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	427
	.byte	4,0,2,35,2,11
	.byte	'LIFCCMDR',0,1
	.word	427
	.byte	8,0,2,35,3,0,12,10,238,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17529
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IFSTAT_Bits',0,10,169,1,16,4,11
	.byte	'RX_STAT',0,1
	.word	427
	.byte	3,5,2,35,0,11
	.byte	'TX_STAT',0,1
	.word	427
	.byte	2,3,2,35,0,11
	.byte	'TX_EN',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,12,10,158,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17813
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_CONFIGPHY_Bits',0,10,121,16,4,11
	.byte	'PON',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	994
	.byte	15,0,2,35,0,11
	.byte	'CORCEN',0,1
	.word	427
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	994
	.byte	11,0,2,35,2,0,12,10,246,2,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17959
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_STATPHY_Bits',0,10,185,2,16,4,11
	.byte	'PLOCK',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'TXSA',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'RXSA',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,12,10,246,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18108
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IRQ_Bits',0,10,193,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'HER',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PYER',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'CER',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'IFCFS',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'SMER',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'USMSF',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PLER',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'USM',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'PAR',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'TXTE',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'SFO',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'SFU',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'MSCE',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	404
	.byte	18,0,2,35,0,0,12,10,174,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18271
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IRQEN_Bits',0,10,233,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'HEREN',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PYEREN',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'CEREN',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'IFCFSEN',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'SMEREN',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'USMSFEN',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PLEREN',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'USMEN',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'PAREN',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'TXTEEN',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'SFOEN',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'SFUEN',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'MSCEEN',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	404
	.byte	18,0,2,35,0,0,12,10,190,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18586
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_IRQCLR_Bits',0,10,213,1,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'HERCLR',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PYERCLR',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'CERCLR',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'IFCFSCLR',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'SMERCLR',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'USMSFCLR',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PLERCLR',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'USMCLR',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'PARCLR',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'TXTECLR',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'SFOCLR',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'SFUCLR',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'MSCELR',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	404
	.byte	18,0,2,35,0,0,12,10,182,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18929
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_USMR_Bits',0,10,205,2,16,4,11
	.byte	'USMR',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,10,134,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19285
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_USMS_Bits',0,10,211,2,16,4,11
	.byte	'USMS',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,10,142,4,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19368
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_TESTCTRL_Bits',0,10,195,2,16,4,11
	.byte	'TXENS',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'TXDISS',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'LLOPTXRX',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'PRBSEN',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	28,0,2,35,0,0,12,10,254,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19451
	.byte	4,2,35,0,0,18,132,255,3
	.word	427
	.byte	19,131,255,3,0,10
	.byte	'_Ifx_HSCT_OCS_Bits',0,10,147,2,16,4,11
	.byte	'TGS',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	427
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	427
	.byte	2,0,2,35,3,0,12,10,222,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19630
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_KRSTCLR_Bits',0,10,140,2,16,4,11
	.byte	'CLR',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	404
	.byte	31,0,2,35,0,0,12,10,214,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19837
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_KRST1_Bits',0,10,133,2,16,4,11
	.byte	'RST',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	404
	.byte	31,0,2,35,0,0,12,10,206,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19944
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_KRST0_Bits',0,10,253,1,16,4,11
	.byte	'RST',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	404
	.byte	30,0,2,35,0,0,12,10,198,3,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20049
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_ACCEN1_Bits',0,10,105,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	32,0,2,35,0,0,12,10,230,2,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20173
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT_ACCEN0_Bits',0,10,68,16,4,11
	.byte	'EN0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	427
	.byte	1,0,2,35,3,0,12,10,222,2,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20263
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_HSCT',0,10,159,4,25,128,128,4,13
	.byte	'CLC',0
	.word	16407
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2100
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	16530
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2100
	.byte	4,2,35,12,13
	.byte	'INIT',0
	.word	16787
	.byte	4,2,35,16,13
	.byte	'IFCTRL',0
	.word	16995
	.byte	4,2,35,20,13
	.byte	'SLEEPCTRL',0
	.word	17167
	.byte	4,2,35,24,13
	.byte	'CTSCTRL',0
	.word	17342
	.byte	4,2,35,28,13
	.byte	'DISABLE',0
	.word	17489
	.byte	4,2,35,32,13
	.byte	'STAT',0
	.word	17773
	.byte	4,2,35,36,13
	.byte	'IFSTAT',0
	.word	17919
	.byte	4,2,35,40,13
	.byte	'reserved_2C',0
	.word	2100
	.byte	4,2,35,44,13
	.byte	'CONFIGPHY',0
	.word	18068
	.byte	4,2,35,48,13
	.byte	'STATPHY',0
	.word	18231
	.byte	4,2,35,52,13
	.byte	'reserved_38',0
	.word	3920
	.byte	8,2,35,56,13
	.byte	'IRQ',0
	.word	18546
	.byte	4,2,35,64,13
	.byte	'IRQEN',0
	.word	18889
	.byte	4,2,35,68,13
	.byte	'IRQCLR',0
	.word	19245
	.byte	4,2,35,72,13
	.byte	'reserved_4C',0
	.word	2100
	.byte	4,2,35,76,13
	.byte	'USMR',0
	.word	19328
	.byte	4,2,35,80,13
	.byte	'USMS',0
	.word	19411
	.byte	4,2,35,84,13
	.byte	'reserved_58',0
	.word	3920
	.byte	8,2,35,88,13
	.byte	'TESTCTRL',0
	.word	19577
	.byte	4,2,35,96,13
	.byte	'reserved_64',0
	.word	19617
	.byte	132,255,3,2,35,100,13
	.byte	'OCS',0
	.word	19797
	.byte	4,4,35,232,255,3,13
	.byte	'KRSTCLR',0
	.word	19904
	.byte	4,4,35,236,255,3,13
	.byte	'KRST1',0
	.word	20009
	.byte	4,4,35,240,255,3,13
	.byte	'KRST0',0
	.word	20133
	.byte	4,4,35,244,255,3,13
	.byte	'ACCEN1',0
	.word	20223
	.byte	4,4,35,248,255,3,13
	.byte	'ACCEN0',0
	.word	20793
	.byte	4,4,35,252,255,3,0,14
	.word	20833
.L236:
	.byte	3
	.word	21367
	.byte	15,11,74,9,1,16
	.byte	'IfxHssl_ChannelId_0',0,0,16
	.byte	'IfxHssl_ChannelId_1',0,1,16
	.byte	'IfxHssl_ChannelId_2',0,2,16
	.byte	'IfxHssl_ChannelId_3',0,3,0
.L314:
	.byte	15,8,216,3,9,1,16
	.byte	'IfxHssl_Hssl_FrameRequest_readFrame',0,1,16
	.byte	'IfxHssl_Hssl_FrameRequest_writeFrame',0,2,16
	.byte	'IfxHssl_Hssl_FrameRequest_triggerFrame',0,3,16
	.byte	'IfxHssl_Hssl_FrameRequest_readId',0,4,16
	.byte	'IfxHssl_Hssl_FrameRequest_noAction',0,5,0,15,11,212,1,9,1,16
	.byte	'IfxHssl_StreamingMode_continuous',0,0,16
	.byte	'IfxHssl_StreamingMode_single',0,1,0,20,8,152,4,9,16,13
	.byte	'hssl',0
	.word	16285
	.byte	4,2,35,0,13
	.byte	'hsct',0
	.word	21372
	.byte	4,2,35,4,13
	.byte	'channelId',0
	.word	21377
	.byte	1,2,35,8,13
	.byte	'currentFrameRequest',0
	.word	21471
	.byte	1,2,35,9,13
	.byte	'streamingMode',0
	.word	21668
	.byte	1,2,35,10,13
	.byte	'loopBack',0
	.word	427
	.byte	1,2,35,11,13
	.byte	'streamingModeOn',0
	.word	427
	.byte	1,2,35,12,0
.L291:
	.byte	3
	.word	21741
.L352:
	.byte	8
	.byte	'IfxHssl_Hssl_getReadData',0,3,8,153,6,19
	.word	9390
	.byte	1,1
.L355:
	.byte	5
	.byte	'channel',0,8,153,6,66
	.word	21890
.L357:
	.byte	6,0,21
	.word	420
	.byte	22
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,23
	.word	21951
	.byte	0,14
	.word	404
	.byte	3
	.word	404
	.byte	24
	.byte	'__cmpswapw',0
	.word	21993
	.byte	1,1,1,1,25
	.byte	'p',0
	.word	21998
	.byte	25
	.byte	'value',0
	.word	404
	.byte	25
	.byte	'compare',0
	.word	404
	.byte	0,26
	.byte	'__nop',0,1,1,1,1,27
	.word	180
	.byte	28
	.word	206
	.byte	6,0,27
	.word	241
	.byte	28
	.word	273
	.byte	6,0,27
	.word	323
	.byte	28
	.word	342
	.byte	6,0,27
	.word	358
	.byte	28
	.word	373
	.byte	28
	.word	387
	.byte	6,0,29
	.byte	'IfxScuWdt_clearCpuEndinit',0,12,237,1,17,1,1,1,1,5
	.byte	'password',0,12,237,1,50
	.word	994
	.byte	0,29
	.byte	'IfxScuWdt_setCpuEndinit',0,12,157,2,17,1,1,1,1,5
	.byte	'password',0,12,157,2,48
	.word	994
	.byte	0,30
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,12,215,3,19
	.word	994
	.byte	1,1,1,1,27
	.word	783
	.byte	28
	.word	811
	.byte	6,0,27
	.word	826
	.byte	28
	.word	848
	.byte	6,0,27
	.word	1016
	.byte	28
	.word	1036
	.byte	28
	.word	1049
	.byte	28
	.word	1071
	.byte	17,31
	.word	783
	.byte	28
	.word	811
	.byte	32
	.word	824
	.byte	0,6,0,0,29
	.byte	'IfxHssl_enableHsctModule',0,11,154,3,17,1,1,1,1,5
	.byte	'hsct',0,11,154,3,52
	.word	21372
	.byte	0,29
	.byte	'IfxHssl_enableHsslModule',0,11,130,5,17,1,1,1,1,5
	.byte	'hssl',0,11,130,5,52
	.word	16285
	.byte	0,27
	.word	8720
	.byte	28
	.word	8752
	.byte	28
	.word	8766
	.byte	28
	.word	8784
	.byte	6,0,27
	.word	9113
	.byte	28
	.word	9146
	.byte	28
	.word	9160
	.byte	28
	.word	9178
	.byte	28
	.word	9192
	.byte	6,0,27
	.word	9312
	.byte	28
	.word	9340
	.byte	28
	.word	9354
	.byte	28
	.word	9372
	.byte	6,0,15,6,101,9,1,16
	.byte	'IfxPort_Mode_inputNoPullDevice',0,0,16
	.byte	'IfxPort_Mode_inputPullDown',0,8,16
	.byte	'IfxPort_Mode_inputPullUp',0,16,16
	.byte	'IfxPort_Mode_outputPushPullGeneral',0,128,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt1',0,136,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt2',0,144,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt3',0,152,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt4',0,160,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt5',0,168,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt6',0,176,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt7',0,184,1,16
	.byte	'IfxPort_Mode_outputOpenDrainGeneral',0,192,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt1',0,200,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt2',0,208,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt3',0,216,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt4',0,224,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt5',0,232,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt6',0,240,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt7',0,248,1,0,29
	.byte	'IfxPort_setPinMode',0,6,183,3,17,1,1,1,1,5
	.byte	'port',0,6,183,3,43
	.word	8590
	.byte	5
	.byte	'pinIndex',0,6,183,3,55
	.word	427
	.byte	5
	.byte	'mode',0,6,183,3,78
	.word	22504
	.byte	0,15,6,151,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,29
	.byte	'IfxPort_setPinPadDriver',0,6,207,3,17,1,1,1,1,5
	.byte	'port',0,6,207,3,48
	.word	8590
	.byte	5
	.byte	'pinIndex',0,6,207,3,60
	.word	427
	.byte	5
	.byte	'padDriver',0,6,207,3,88
	.word	23248
	.byte	0,20,11,143,2,9,8,13
	.byte	'hsct',0
	.word	21372
	.byte	4,2,35,0,13
	.byte	'loopBack',0
	.word	427
	.byte	1,2,35,4,0
.L231:
	.byte	3
	.word	23756
	.byte	15,11,165,1,9,1,16
	.byte	'IfxHssl_InterfaceMode_master',0,0,16
	.byte	'IfxHssl_InterfaceMode_slave',0,1,0,20,11,151,2,9,8,13
	.byte	'hsct',0
	.word	21372
	.byte	4,2,35,0,13
	.byte	'interfaceMode',0
	.word	23800
	.byte	1,2,35,4,13
	.byte	'highSpeedMode',0
	.word	427
	.byte	1,2,35,5,13
	.byte	'loopBack',0
	.word	427
	.byte	1,2,35,6,0,21
	.word	23868
.L233:
	.byte	3
	.word	23953
.L276:
	.byte	3
	.word	23868
	.byte	20,8,254,3,9,2,11
	.byte	'notAcknowledgeError',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'transactionTagError',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'timeoutError',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'unexpectedError',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'memoryAccessViolation',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'busAccessError',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'channelNumberCodeError',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'dataLengthError',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'crcError',0,1
	.word	427
	.byte	1,7,2,35,1,0,20,8,143,4,9,8,13
	.byte	'hssl',0
	.word	16285
	.byte	4,2,35,0,13
	.byte	'errorFlags',0
	.word	23968
	.byte	2,2,35,4,13
	.byte	'loopBack',0
	.word	427
	.byte	1,2,35,6,0
.L280:
	.byte	3
	.word	24228
	.byte	20,8,244,3,9,8,13
	.byte	'start',0
	.word	9390
	.byte	4,2,35,0,13
	.byte	'end',0
	.word	9390
	.byte	4,2,35,4,0,20,8,176,4,9,40,13
	.byte	'hssl',0
	.word	16285
	.byte	4,2,35,0,13
	.byte	'accessWindow0',0
	.word	24292
	.byte	8,2,35,4,13
	.byte	'accessWindow1',0
	.word	24292
	.byte	8,2,35,12,13
	.byte	'accessWindow2',0
	.word	24292
	.byte	8,2,35,20,13
	.byte	'accessWindow3',0
	.word	24292
	.byte	8,2,35,28,13
	.byte	'preDivider',0
	.word	994
	.byte	2,2,35,36,0,21
	.word	24327
.L282:
	.byte	3
	.word	24460
.L287:
	.byte	3
	.word	24327
	.byte	20,8,165,4,9,12,13
	.byte	'hssl',0
	.word	16285
	.byte	4,2,35,0,13
	.byte	'hsct',0
	.word	21372
	.byte	4,2,35,4,13
	.byte	'channelId',0
	.word	21377
	.byte	1,2,35,8,13
	.byte	'streamingMode',0
	.word	21668
	.byte	1,2,35,9,13
	.byte	'loopBack',0
	.word	427
	.byte	1,2,35,10,0,21
	.word	24475
.L293:
	.byte	3
	.word	24570
.L296:
	.byte	3
	.word	24475
	.byte	27
	.word	21895
	.byte	28
	.word	21932
	.byte	6,0
.L300:
	.byte	15,8,227,3,9,1,16
	.byte	'IfxHssl_Hssl_Status_ok',0,0,16
	.byte	'IfxHssl_Hssl_Status_busy',0,1,16
	.byte	'IfxHssl_Hssl_Status_error',0,2,0
.L305:
	.byte	15,11,115,9,1,16
	.byte	'IfxHssl_DataLength_8bit',0,0,16
	.byte	'IfxHssl_DataLength_16bit',0,1,16
	.byte	'IfxHssl_DataLength_32bit',0,2,0,14
	.word	12424
.L319:
	.byte	3
	.word	24770
.L348:
	.byte	7
	.byte	'short int',0,2,5
.L368:
	.byte	3
	.word	9390
	.byte	14
	.word	13647
.L372:
	.byte	3
	.word	24798
	.byte	33
	.byte	'__wchar_t',0,13,1,1
	.word	24780
	.byte	33
	.byte	'__size_t',0,13,1,1
	.word	404
	.byte	33
	.byte	'__ptrdiff_t',0,13,1,1
	.word	420
	.byte	34,1,3
	.word	24863
	.byte	33
	.byte	'__codeptr',0,13,1,1
	.word	24865
	.byte	33
	.byte	'boolean',0,14,104,29
	.word	427
	.byte	33
	.byte	'uint8',0,14,108,29
	.word	427
	.byte	33
	.byte	'uint16',0,14,112,29
	.word	994
	.byte	33
	.byte	'uint32',0,14,116,29
	.word	9390
	.byte	33
	.byte	'uint64',0,14,121,29
	.word	286
	.byte	33
	.byte	'sint16',0,14,129,1,29
	.word	24780
	.byte	7
	.byte	'long int',0,4,5,33
	.byte	'sint32',0,14,134,1,29
	.word	24979
	.byte	7
	.byte	'long long int',0,8,5,33
	.byte	'sint64',0,14,141,1,29
	.word	25007
	.byte	33
	.byte	'float32',0,14,170,1,29
	.word	232
	.byte	33
	.byte	'pvoid',0,15,54,28
	.word	318
	.byte	33
	.byte	'Ifx_TickTime',0,15,76,28
	.word	25007
	.byte	33
	.byte	'Ifx_SizeT',0,15,89,16
	.word	24780
	.byte	33
	.byte	'Ifx_Priority',0,15,100,16
	.word	994
	.byte	33
	.byte	'Ifx_UReg_8Bit',0,16,96,24
	.word	427
	.byte	33
	.byte	'Ifx_UReg_32Bit',0,16,98,24
	.word	404
	.byte	33
	.byte	'Ifx_SReg_32Bit',0,16,101,24
	.word	420
	.byte	33
	.byte	'Ifx_HSSL_ACCEN0_Bits',0,9,102,3
	.word	15204
	.byte	33
	.byte	'Ifx_HSSL_ACCEN1_Bits',0,9,108,3
	.word	15114
	.byte	33
	.byte	'Ifx_HSSL_AR_Bits',0,9,120,3
	.word	14381
	.byte	33
	.byte	'Ifx_HSSL_AW_AWEND_Bits',0,9,127,3
	.word	14208
	.byte	33
	.byte	'Ifx_HSSL_AW_AWSTART_Bits',0,9,134,1,3
	.word	14098
	.byte	33
	.byte	'Ifx_HSSL_CFG_Bits',0,9,146,1,3
	.word	9815
	.byte	33
	.byte	'Ifx_HSSL_CLC_Bits',0,9,156,1,3
	.word	9411
	.byte	33
	.byte	'Ifx_HSSL_CRC_Bits',0,9,164,1,3
	.word	9692
	.byte	33
	.byte	'Ifx_HSSL_ID_Bits',0,9,172,1,3
	.word	9569
	.byte	33
	.byte	'Ifx_HSSL_IS_CA_Bits',0,9,179,1,3
	.word	13433
	.byte	33
	.byte	'Ifx_HSSL_IS_FC_Bits',0,9,186,1,3
	.word	13539
	.byte	33
	.byte	'Ifx_HSSL_IS_SA_Bits',0,9,193,1,3
	.word	13317
	.byte	33
	.byte	'Ifx_HSSL_I_ICON_Bits',0,9,208,1,3
	.word	12024
	.byte	33
	.byte	'Ifx_HSSL_I_IRD_Bits',0,9,214,1,3
	.word	12340
	.byte	33
	.byte	'Ifx_HSSL_I_IRWA_Bits',0,9,220,1,3
	.word	12252
	.byte	33
	.byte	'Ifx_HSSL_I_IWD_Bits',0,9,226,1,3
	.word	11940
	.byte	33
	.byte	'Ifx_HSSL_KRST0_Bits',0,9,234,1,3
	.word	14990
	.byte	33
	.byte	'Ifx_HSSL_KRST1_Bits',0,9,241,1,3
	.word	14885
	.byte	33
	.byte	'Ifx_HSSL_KRSTCLR_Bits',0,9,248,1,3
	.word	14778
	.byte	33
	.byte	'Ifx_HSSL_MFLAGS_Bits',0,9,143,2,3
	.word	10271
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSCL_Bits',0,9,166,2,3
	.word	11039
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSEN_Bits',0,9,184,2,3
	.word	11435
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSSET_Bits',0,9,207,2,3
	.word	10642
	.byte	33
	.byte	'Ifx_HSSL_MSCR_Bits',0,9,217,2,3
	.word	13152
	.byte	33
	.byte	'Ifx_HSSL_OCS_Bits',0,9,230,2,3
	.word	14571
	.byte	33
	.byte	'Ifx_HSSL_QFLAGS_Bits',0,9,248,2,3
	.word	10005
	.byte	33
	.byte	'Ifx_HSSL_SEC_Bits',0,9,128,3,3
	.word	13034
	.byte	33
	.byte	'Ifx_HSSL_SFSFLAGS_Bits',0,9,139,3,3
	.word	11761
	.byte	33
	.byte	'Ifx_HSSL_TIDADD_Bits',0,9,145,3,3
	.word	12952
	.byte	33
	.byte	'Ifx_HSSL_TSTAT_Bits',0,9,158,3,3
	.word	12732
	.byte	33
	.byte	'Ifx_HSSL_TS_CA_Bits',0,9,165,3,3
	.word	13823
	.byte	33
	.byte	'Ifx_HSSL_TS_FC_Bits',0,9,172,3,3
	.word	13929
	.byte	33
	.byte	'Ifx_HSSL_TS_SA_Bits',0,9,179,3,3
	.word	13708
	.byte	33
	.byte	'Ifx_HSSL_T_TCA_Bits',0,9,185,3,3
	.word	12592
	.byte	33
	.byte	'Ifx_HSSL_T_TCD_Bits',0,9,191,3,3
	.word	12511
	.byte	33
	.byte	'Ifx_HSSL_ACCEN0',0,9,204,3,3
	.word	15734
	.byte	33
	.byte	'Ifx_HSSL_ACCEN1',0,9,212,3,3
	.word	15164
	.byte	33
	.byte	'Ifx_HSSL_AR',0,9,220,3,3
	.word	14531
	.byte	33
	.byte	'Ifx_HSSL_AW_AWEND',0,9,228,3,3
	.word	14275
	.byte	33
	.byte	'Ifx_HSSL_AW_AWSTART',0,9,236,3,3
	.word	14168
	.byte	33
	.byte	'Ifx_HSSL_CFG',0,9,244,3,3
	.word	9965
	.byte	33
	.byte	'Ifx_HSSL_CLC',0,9,252,3,3
	.word	9529
	.byte	33
	.byte	'Ifx_HSSL_CRC',0,9,132,4,3
	.word	9775
	.byte	33
	.byte	'Ifx_HSSL_ID',0,9,140,4,3
	.word	9652
	.byte	33
	.byte	'Ifx_HSSL_IS_CA',0,9,148,4,3
	.word	13499
	.byte	33
	.byte	'Ifx_HSSL_IS_FC',0,9,156,4,3
	.word	13607
	.byte	33
	.byte	'Ifx_HSSL_IS_SA',0,9,164,4,3
	.word	13384
	.byte	33
	.byte	'Ifx_HSSL_I_ICON',0,9,172,4,3
	.word	12212
	.byte	33
	.byte	'Ifx_HSSL_I_IRD',0,9,180,4,3
	.word	12384
	.byte	33
	.byte	'Ifx_HSSL_I_IRWA',0,9,188,4,3
	.word	12300
	.byte	33
	.byte	'Ifx_HSSL_I_IWD',0,9,196,4,3
	.word	11984
	.byte	33
	.byte	'Ifx_HSSL_KRST0',0,9,204,4,3
	.word	15074
	.byte	33
	.byte	'Ifx_HSSL_KRST1',0,9,212,4,3
	.word	14950
	.byte	33
	.byte	'Ifx_HSSL_KRSTCLR',0,9,220,4,3
	.word	14845
	.byte	33
	.byte	'Ifx_HSSL_MFLAGS',0,9,228,4,3
	.word	10602
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSCL',0,9,236,4,3
	.word	11395
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSEN',0,9,244,4,3
	.word	11721
	.byte	33
	.byte	'Ifx_HSSL_MFLAGSSET',0,9,252,4,3
	.word	10999
	.byte	33
	.byte	'Ifx_HSSL_MSCR',0,9,132,5,3
	.word	13277
	.byte	33
	.byte	'Ifx_HSSL_OCS',0,9,140,5,3
	.word	14738
	.byte	33
	.byte	'Ifx_HSSL_QFLAGS',0,9,148,5,3
	.word	10231
	.byte	33
	.byte	'Ifx_HSSL_SEC',0,9,156,5,3
	.word	13112
	.byte	33
	.byte	'Ifx_HSSL_SFSFLAGS',0,9,164,5,3
	.word	11900
	.byte	33
	.byte	'Ifx_HSSL_TIDADD',0,9,172,5,3
	.word	12994
	.byte	33
	.byte	'Ifx_HSSL_TSTAT',0,9,180,5,3
	.word	12912
	.byte	33
	.byte	'Ifx_HSSL_TS_CA',0,9,188,5,3
	.word	13889
	.byte	33
	.byte	'Ifx_HSSL_TS_FC',0,9,196,5,3
	.word	13997
	.byte	33
	.byte	'Ifx_HSSL_TS_SA',0,9,204,5,3
	.word	13774
	.byte	33
	.byte	'Ifx_HSSL_T_TCA',0,9,212,5,3
	.word	12633
	.byte	33
	.byte	'Ifx_HSSL_T_TCD',0,9,220,5,3
	.word	12552
	.byte	14
	.word	12424
	.byte	33
	.byte	'Ifx_HSSL_I',0,9,238,5,3
	.word	27076
	.byte	14
	.word	12673
	.byte	33
	.byte	'Ifx_HSSL_T',0,9,129,6,3
	.word	27101
	.byte	14
	.word	13647
	.byte	33
	.byte	'Ifx_HSSL_IS',0,9,149,6,3
	.word	27126
	.byte	14
	.word	14037
	.byte	33
	.byte	'Ifx_HSSL_TS',0,9,169,6,3
	.word	27152
	.byte	14
	.word	14315
	.byte	33
	.byte	'Ifx_HSSL_AW',0,9,188,6,3
	.word	27178
	.byte	14
	.word	15785
	.byte	33
	.byte	'Ifx_HSSL',0,9,235,6,3
	.word	27204
	.byte	33
	.byte	'Ifx_HSCT_ACCEN0_Bits',0,10,102,3
	.word	20263
	.byte	33
	.byte	'Ifx_HSCT_ACCEN1_Bits',0,10,108,3
	.word	20173
	.byte	33
	.byte	'Ifx_HSCT_CLC_Bits',0,10,118,3
	.word	16290
	.byte	33
	.byte	'Ifx_HSCT_CONFIGPHY_Bits',0,10,127,3
	.word	17959
	.byte	33
	.byte	'Ifx_HSCT_CTSCTRL_Bits',0,10,137,1,3
	.word	17207
	.byte	33
	.byte	'Ifx_HSCT_DISABLE_Bits',0,10,146,1,3
	.word	17382
	.byte	33
	.byte	'Ifx_HSCT_ID_Bits',0,10,154,1,3
	.word	16447
	.byte	33
	.byte	'Ifx_HSCT_IFCTRL_Bits',0,10,166,1,3
	.word	16827
	.byte	33
	.byte	'Ifx_HSCT_IFSTAT_Bits',0,10,175,1,3
	.word	17813
	.byte	33
	.byte	'Ifx_HSCT_INIT_Bits',0,10,190,1,3
	.word	16570
	.byte	33
	.byte	'Ifx_HSCT_IRQ_Bits',0,10,210,1,3
	.word	18271
	.byte	33
	.byte	'Ifx_HSCT_IRQCLR_Bits',0,10,230,1,3
	.word	18929
	.byte	33
	.byte	'Ifx_HSCT_IRQEN_Bits',0,10,250,1,3
	.word	18586
	.byte	33
	.byte	'Ifx_HSCT_KRST0_Bits',0,10,130,2,3
	.word	20049
	.byte	33
	.byte	'Ifx_HSCT_KRST1_Bits',0,10,137,2,3
	.word	19944
	.byte	33
	.byte	'Ifx_HSCT_KRSTCLR_Bits',0,10,144,2,3
	.word	19837
	.byte	33
	.byte	'Ifx_HSCT_OCS_Bits',0,10,157,2,3
	.word	19630
	.byte	33
	.byte	'Ifx_HSCT_SLEEPCTRL_Bits',0,10,167,2,3
	.word	17035
	.byte	33
	.byte	'Ifx_HSCT_STAT_Bits',0,10,182,2,3
	.word	17529
	.byte	33
	.byte	'Ifx_HSCT_STATPHY_Bits',0,10,192,2,3
	.word	18108
	.byte	33
	.byte	'Ifx_HSCT_TESTCTRL_Bits',0,10,202,2,3
	.word	19451
	.byte	33
	.byte	'Ifx_HSCT_USMR_Bits',0,10,208,2,3
	.word	19285
	.byte	33
	.byte	'Ifx_HSCT_USMS_Bits',0,10,214,2,3
	.word	19368
	.byte	33
	.byte	'Ifx_HSCT_ACCEN0',0,10,227,2,3
	.word	20793
	.byte	33
	.byte	'Ifx_HSCT_ACCEN1',0,10,235,2,3
	.word	20223
	.byte	33
	.byte	'Ifx_HSCT_CLC',0,10,243,2,3
	.word	16407
	.byte	33
	.byte	'Ifx_HSCT_CONFIGPHY',0,10,251,2,3
	.word	18068
	.byte	33
	.byte	'Ifx_HSCT_CTSCTRL',0,10,131,3,3
	.word	17342
	.byte	33
	.byte	'Ifx_HSCT_DISABLE',0,10,139,3,3
	.word	17489
	.byte	33
	.byte	'Ifx_HSCT_ID',0,10,147,3,3
	.word	16530
	.byte	33
	.byte	'Ifx_HSCT_IFCTRL',0,10,155,3,3
	.word	16995
	.byte	33
	.byte	'Ifx_HSCT_IFSTAT',0,10,163,3,3
	.word	17919
	.byte	33
	.byte	'Ifx_HSCT_INIT',0,10,171,3,3
	.word	16787
	.byte	33
	.byte	'Ifx_HSCT_IRQ',0,10,179,3,3
	.word	18546
	.byte	33
	.byte	'Ifx_HSCT_IRQCLR',0,10,187,3,3
	.word	19245
	.byte	33
	.byte	'Ifx_HSCT_IRQEN',0,10,195,3,3
	.word	18889
	.byte	33
	.byte	'Ifx_HSCT_KRST0',0,10,203,3,3
	.word	20133
	.byte	33
	.byte	'Ifx_HSCT_KRST1',0,10,211,3,3
	.word	20009
	.byte	33
	.byte	'Ifx_HSCT_KRSTCLR',0,10,219,3,3
	.word	19904
	.byte	33
	.byte	'Ifx_HSCT_OCS',0,10,227,3,3
	.word	19797
	.byte	33
	.byte	'Ifx_HSCT_SLEEPCTRL',0,10,235,3,3
	.word	17167
	.byte	33
	.byte	'Ifx_HSCT_STAT',0,10,243,3,3
	.word	17773
	.byte	33
	.byte	'Ifx_HSCT_STATPHY',0,10,251,3,3
	.word	18231
	.byte	33
	.byte	'Ifx_HSCT_TESTCTRL',0,10,131,4,3
	.word	19577
	.byte	33
	.byte	'Ifx_HSCT_USMR',0,10,139,4,3
	.word	19328
	.byte	33
	.byte	'Ifx_HSCT_USMS',0,10,147,4,3
	.word	19411
	.byte	14
	.word	20833
	.byte	33
	.byte	'Ifx_HSCT',0,10,191,4,3
	.word	28464
	.byte	15,17,162,11,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,33
	.byte	'IfxScu_WDTCON1_IR',0,17,167,11,3
	.word	28487
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,18,68,16,4,11
	.byte	'EN0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN00_Bits',0,18,102,3
	.word	28609
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,18,105,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01_Bits',0,18,108,3
	.word	29168
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,18,111,16,4,11
	.byte	'EN0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN10_Bits',0,18,145,1,3
	.word	29247
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,18,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11_Bits',0,18,151,1,3
	.word	29807
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,18,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	404
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,18,164,1,3
	.word	29888
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,18,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	427
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	427
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	427
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	427
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	427
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	427
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON0_Bits',0,18,181,1,3
	.word	30105
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,18,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	427
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	427
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	427
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	427
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	427
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON1_Bits',0,18,199,1,3
	.word	30378
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,18,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	427
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10_Bits',0,18,206,1,3
	.word	30704
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,18,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	427
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11_Bits',0,18,213,1,3
	.word	30806
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,18,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	427
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	404
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	427
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON2_Bits',0,18,228,1,3
	.word	30908
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,18,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	427
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	404
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON3_Bits',0,18,248,1,3
	.word	31182
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,18,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	994
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	404
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	427
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON4_Bits',0,18,132,2,3
	.word	31551
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,18,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	404
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON5_Bits',0,18,143,2,3
	.word	31731
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,18,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	427
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6_Bits',0,18,150,2,3
	.word	31900
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,18,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	427
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7_Bits',0,18,157,2,3
	.word	32000
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,18,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	427
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8_Bits',0,18,164,2,3
	.word	32100
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,18,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	427
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9_Bits',0,18,171,2,3
	.word	32200
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,18,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	427
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	427
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	427
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	427
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CHIPID_Bits',0,18,185,2,3
	.word	32300
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,18,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	994
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	994
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,18,200,2,3
	.word	32503
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,18,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	994
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	404
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,18,207,2,3
	.word	32735
	.byte	7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_EICON0_Bits',0,18,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	32837
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	32837
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	32837
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	32837
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0_Bits',0,18,216,2,3
	.word	32853
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,18,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1_Bits',0,18,228,2,3
	.word	32981
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,18,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	427
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	427
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	404
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	427
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	427
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EICR_Bits',0,18,250,2,3
	.word	33170
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,18,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	427
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	427
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	427
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EIFILT_Bits',0,18,147,3,3
	.word	33534
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,18,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	404
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR_Bits',0,18,161,3,3
	.word	33973
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,18,164,3,16,4,11
	.byte	'AE',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	994
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_EISR_Bits',0,18,174,3,3
	.word	34184
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,18,177,3,16,4,11
	.byte	'POL',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	994
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	994
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_EMSR_Bits',0,18,187,3,3
	.word	34360
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,18,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	427
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	427
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	427
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EMSSW_Bits',0,18,196,3,3
	.word	34554
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,18,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	994
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	404
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,18,204,3,3
	.word	34689
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,18,207,3,16,4,11
	.byte	'ARI',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	404
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG_Bits',0,18,212,3,3
	.word	34825
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,18,215,3,16,4,11
	.byte	'EN0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	427
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	994
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	427
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	427
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	427
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_EXTCON_Bits',0,18,226,3,3
	.word	34936
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,18,229,3,16,4,11
	.byte	'STEP',0,2
	.word	994
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	427
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	427
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	994
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	427
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_FDR_Bits',0,18,237,3,3
	.word	35154
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,18,240,3,16,4,11
	.byte	'FS0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_FMR_Bits',0,18,132,4,3
	.word	35317
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,18,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	427
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_ID_Bits',0,18,140,4,3
	.word	35653
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,18,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	427
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	427
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	427
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_IGCR_Bits',0,18,167,4,3
	.word	35760
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,18,170,4,16,4,11
	.byte	'P0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	404
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_IN_Bits',0,18,175,4,3
	.word	36212
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,18,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_IOCR_Bits',0,18,185,4,3
	.word	36311
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,18,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	404
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	994
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,18,198,4,3
	.word	36461
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,18,201,4,16,4,11
	.byte	'SEED',0,4
	.word	404
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	427
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	427
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	427
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,18,208,4,3
	.word	36699
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,18,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	994
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	404
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,18,215,4,3
	.word	36860
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,18,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,18,221,4,3
	.word	36966
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,18,224,4,16,4,11
	.byte	'LS2',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	994
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	994
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON0_Bits',0,18,232,4,3
	.word	37052
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,18,235,4,16,4,11
	.byte	'LS3',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	994
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	994
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON1_Bits',0,18,243,4,3
	.word	37220
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,18,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	994
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	994
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_LCLTEST_Bits',0,18,134,5,3
	.word	37388
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,18,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	427
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	994
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_MANID_Bits',0,18,142,5,3
	.word	37702
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,18,145,5,16,4,11
	.byte	'PS0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	994
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	994
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_OMR_Bits',0,18,153,5,3
	.word	37813
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,18,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	427
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	427
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	427
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	427
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	427
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	427
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	427
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	427
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_OSCCON_Bits',0,18,177,5,3
	.word	37971
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,18,180,5,16,4,11
	.byte	'P0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	404
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_OUT_Bits',0,18,185,5,3
	.word	38382
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,18,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	994
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	427
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	427
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_OVCCON_Bits',0,18,204,5,3
	.word	38483
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,18,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,18,216,5,3
	.word	38801
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,18,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	404
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC_Bits',0,18,224,5,3
	.word	38988
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,18,227,5,16,4,11
	.byte	'PD0',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	404
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDR_Bits',0,18,234,5,3
	.word	39099
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,18,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	404
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR_Bits',0,18,248,5,3
	.word	39232
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,18,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	994
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	427
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	427
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	427
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	427
	.byte	5,0,2,35,3,0,33
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,18,134,6,3
	.word	39435
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,18,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	427
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	427
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	404
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,18,143,6,3
	.word	39675
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,18,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	404
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,18,156,6,3
	.word	39819
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,18,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	404
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0_Bits',0,18,165,6,3
	.word	40041
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,18,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	404
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1_Bits',0,18,174,6,3
	.word	40177
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,18,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	404
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2_Bits',0,18,183,6,3
	.word	40313
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,18,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	404
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3_Bits',0,18,192,6,3
	.word	40449
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,18,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	404
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4_Bits',0,18,201,6,3
	.word	40585
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,18,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	404
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5_Bits',0,18,210,6,3
	.word	40721
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,18,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	994
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	994
	.byte	12,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,18,227,6,3
	.word	40857
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,18,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	427
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	404
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	427
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	427
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,18,241,6,3
	.word	41129
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,18,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	994
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	994
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	427
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,18,135,7,3
	.word	41374
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,18,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	994
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	994
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	427
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,18,143,7,3
	.word	41762
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,18,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	427
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	427
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,18,157,7,3
	.word	41880
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,18,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	427
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	427
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	427
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	994
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	427
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,18,172,7,3
	.word	42123
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,18,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	427
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	427
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	427
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	427
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	427
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	427
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	427
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	427
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	427
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	994
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON_Bits',0,18,189,7,3
	.word	42390
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,18,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	994
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON2_Bits',0,18,206,7,3
	.word	42649
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,18,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3_Bits',0,18,212,7,3
	.word	42954
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,18,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	427
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	427
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	427
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	427
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	427
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,18,245,7,3
	.word	43035
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,18,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	32837
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	32837
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	32837
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	32837
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0_Bits',0,18,254,7,3
	.word	43584
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,18,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	404
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1_Bits',0,18,138,8,3
	.word	43714
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,18,141,8,16,4,11
	.byte	'AE',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	994
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SEISR_Bits',0,18,151,8,3
	.word	43905
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,18,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	994
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	427
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	427
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_STCON_Bits',0,18,161,8,3
	.word	44083
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,18,164,8,16,4,11
	.byte	'MEM',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1_Bits',0,18,167,8,3
	.word	44234
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,18,170,8,16,4,11
	.byte	'MEM',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2_Bits',0,18,173,8,3
	.word	44306
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,18,176,8,16,4,11
	.byte	'MEM',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3_Bits',0,18,179,8,3
	.word	44378
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,18,182,8,16,4,11
	.byte	'MEM',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4_Bits',0,18,185,8,3
	.word	44450
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,18,188,8,16,4,11
	.byte	'MEM',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5_Bits',0,18,191,8,3
	.word	44522
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,18,194,8,16,4,11
	.byte	'MEM',0,4
	.word	404
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6_Bits',0,18,197,8,3
	.word	44594
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,18,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	427
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	427
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	427
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	427
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	427
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	427
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	427
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	427
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	427
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_STSTAT_Bits',0,18,216,8,3
	.word	44666
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,18,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	994
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,18,224,8,3
	.word	44995
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,18,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	427
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	427
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,18,234,8,3
	.word	45115
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,18,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	427
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	427
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSCON_Bits',0,18,249,8,3
	.word	45285
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,18,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	994
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	427
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	427
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	427
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	427
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	427
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,18,137,9,3
	.word	45548
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,18,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	427
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	404
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,18,144,9,3
	.word	45827
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,18,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	994
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,18,151,9,3
	.word	45931
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,18,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	427
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	404
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,18,164,9,3
	.word	46037
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,18,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,18,174,9,3
	.word	46260
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,18,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	427
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	427
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	427
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	427
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	427
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	427
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	427
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	427
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	427
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	427
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,18,199,9,3
	.word	46408
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,18,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	427
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	427
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	427
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	427
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	427
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,18,215,9,3
	.word	46896
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,18,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET_Bits',0,18,225,9,3
	.word	47193
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,18,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	404
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,18,235,9,3
	.word	47341
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,18,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	32837
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	32837
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	32837
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	32837
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,18,244,9,3
	.word	47491
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,18,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	427
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,18,132,10,3
	.word	47621
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,18,135,10,16,4,11
	.byte	'AE',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	427
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,18,148,10,3
	.word	47881
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,18,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	32837
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	32837
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	32837
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	32837
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,18,157,10,3
	.word	48104
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,18,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	427
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,18,173,10,3
	.word	48230
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,18,176,10,16,4,11
	.byte	'AE',0,1
	.word	427
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	427
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	427
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	427
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	427
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	427
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	427
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	427
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	427
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	427
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	994
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,18,189,10,3
	.word	48482
	.byte	12,18,197,10,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28609
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN00',0,18,202,10,3
	.word	48701
	.byte	12,18,205,10,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29168
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01',0,18,210,10,3
	.word	48766
	.byte	12,18,213,10,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29247
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN10',0,18,218,10,3
	.word	48831
	.byte	12,18,221,10,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29807
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11',0,18,226,10,3
	.word	48896
	.byte	12,18,229,10,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29888
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS',0,18,234,10,3
	.word	48961
	.byte	12,18,237,10,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30105
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON0',0,18,242,10,3
	.word	49026
	.byte	12,18,245,10,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30378
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON1',0,18,250,10,3
	.word	49091
	.byte	12,18,253,10,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30704
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10',0,18,130,11,3
	.word	49156
	.byte	12,18,133,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30806
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11',0,18,138,11,3
	.word	49222
	.byte	12,18,141,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30908
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON2',0,18,146,11,3
	.word	49288
	.byte	12,18,149,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31182
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON3',0,18,154,11,3
	.word	49353
	.byte	12,18,157,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31551
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON4',0,18,162,11,3
	.word	49418
	.byte	12,18,165,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31731
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON5',0,18,170,11,3
	.word	49483
	.byte	12,18,173,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31900
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6',0,18,178,11,3
	.word	49548
	.byte	12,18,181,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32000
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7',0,18,186,11,3
	.word	49613
	.byte	12,18,189,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32100
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8',0,18,194,11,3
	.word	49678
	.byte	12,18,197,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32200
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9',0,18,202,11,3
	.word	49743
	.byte	12,18,205,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32300
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CHIPID',0,18,210,11,3
	.word	49808
	.byte	12,18,213,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32503
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCLIM',0,18,218,11,3
	.word	49872
	.byte	12,18,221,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32735
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT',0,18,226,11,3
	.word	49937
	.byte	12,18,229,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32853
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0',0,18,234,11,3
	.word	50003
	.byte	12,18,237,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32981
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1',0,18,242,11,3
	.word	50067
	.byte	12,18,245,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33170
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICR',0,18,250,11,3
	.word	50131
	.byte	12,18,253,11,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33534
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFILT',0,18,130,12,3
	.word	50193
	.byte	12,18,133,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33973
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR',0,18,138,12,3
	.word	50257
	.byte	12,18,141,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34184
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EISR',0,18,146,12,3
	.word	50319
	.byte	12,18,149,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34360
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSR',0,18,154,12,3
	.word	50381
	.byte	12,18,157,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34554
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSSW',0,18,162,12,3
	.word	50443
	.byte	12,18,165,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34689
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,18,170,12,3
	.word	50506
	.byte	12,18,173,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34825
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG',0,18,178,12,3
	.word	50579
	.byte	12,18,181,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34936
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EXTCON',0,18,186,12,3
	.word	50644
	.byte	12,18,189,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35154
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FDR',0,18,194,12,3
	.word	50708
	.byte	12,18,197,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35317
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FMR',0,18,202,12,3
	.word	50769
	.byte	12,18,205,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35653
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ID',0,18,210,12,3
	.word	50830
	.byte	12,18,213,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35760
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IGCR',0,18,218,12,3
	.word	50890
	.byte	12,18,221,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36212
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IN',0,18,226,12,3
	.word	50952
	.byte	12,18,229,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36311
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IOCR',0,18,234,12,3
	.word	51012
	.byte	12,18,237,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36461
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL0',0,18,242,12,3
	.word	51074
	.byte	12,18,245,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36699
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL1',0,18,250,12,3
	.word	51142
	.byte	12,18,253,12,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36860
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2',0,18,130,13,3
	.word	51210
	.byte	12,18,133,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36966
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3',0,18,138,13,3
	.word	51278
	.byte	12,18,141,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37052
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON0',0,18,146,13,3
	.word	51346
	.byte	12,18,149,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37220
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON1',0,18,154,13,3
	.word	51411
	.byte	12,18,157,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37388
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLTEST',0,18,162,13,3
	.word	51476
	.byte	12,18,165,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37702
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_MANID',0,18,170,13,3
	.word	51541
	.byte	12,18,173,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37813
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OMR',0,18,178,13,3
	.word	51604
	.byte	12,18,181,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37971
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OSCCON',0,18,186,13,3
	.word	51665
	.byte	12,18,189,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38382
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OUT',0,18,194,13,3
	.word	51729
	.byte	12,18,197,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38483
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCCON',0,18,202,13,3
	.word	51790
	.byte	12,18,205,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38801
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE',0,18,210,13,3
	.word	51854
	.byte	12,18,213,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38988
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC',0,18,218,13,3
	.word	51921
	.byte	12,18,221,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39099
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDR',0,18,226,13,3
	.word	51984
	.byte	12,18,229,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39232
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR',0,18,234,13,3
	.word	52045
	.byte	12,18,237,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39435
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON0',0,18,242,13,3
	.word	52107
	.byte	12,18,245,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39675
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1',0,18,250,13,3
	.word	52175
	.byte	12,18,253,13,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39819
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT',0,18,130,14,3
	.word	52243
	.byte	12,18,133,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40041
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0',0,18,138,14,3
	.word	52311
	.byte	12,18,141,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40177
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1',0,18,146,14,3
	.word	52375
	.byte	12,18,149,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40313
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2',0,18,154,14,3
	.word	52439
	.byte	12,18,157,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40449
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3',0,18,162,14,3
	.word	52503
	.byte	12,18,165,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40585
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4',0,18,170,14,3
	.word	52567
	.byte	12,18,173,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40721
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5',0,18,178,14,3
	.word	52631
	.byte	12,18,181,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40857
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSTAT0',0,18,186,14,3
	.word	52695
	.byte	12,18,189,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41129
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWCR1',0,18,194,14,3
	.word	52760
	.byte	12,18,197,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41374
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR0',0,18,202,14,3
	.word	52825
	.byte	12,18,205,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41762
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR1',0,18,210,14,3
	.word	52891
	.byte	12,18,213,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41880
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR2',0,18,218,14,3
	.word	52957
	.byte	12,18,221,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42123
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR3',0,18,226,14,3
	.word	53023
	.byte	12,18,229,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42390
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON',0,18,234,14,3
	.word	53089
	.byte	12,18,237,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42649
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON2',0,18,242,14,3
	.word	53153
	.byte	12,18,245,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42954
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3',0,18,250,14,3
	.word	53218
	.byte	12,18,253,14,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43035
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTSTAT',0,18,130,15,3
	.word	53283
	.byte	12,18,133,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43584
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0',0,18,138,15,3
	.word	53348
	.byte	12,18,141,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43714
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1',0,18,146,15,3
	.word	53413
	.byte	12,18,149,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43905
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEISR',0,18,154,15,3
	.word	53478
	.byte	12,18,157,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44083
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STCON',0,18,162,15,3
	.word	53541
	.byte	12,18,165,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44234
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1',0,18,170,15,3
	.word	53604
	.byte	12,18,173,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44306
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2',0,18,178,15,3
	.word	53668
	.byte	12,18,181,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44378
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3',0,18,186,15,3
	.word	53732
	.byte	12,18,189,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44450
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4',0,18,194,15,3
	.word	53796
	.byte	12,18,197,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44522
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5',0,18,202,15,3
	.word	53860
	.byte	12,18,205,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44594
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6',0,18,210,15,3
	.word	53924
	.byte	12,18,213,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44666
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STSTAT',0,18,218,15,3
	.word	53988
	.byte	12,18,221,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44995
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWAPCTRL',0,18,226,15,3
	.word	54052
	.byte	12,18,229,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45115
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWRSTCON',0,18,234,15,3
	.word	54118
	.byte	12,18,237,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45285
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSCON',0,18,242,15,3
	.word	54184
	.byte	12,18,245,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45548
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON0',0,18,250,15,3
	.word	54248
	.byte	12,18,253,15,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45827
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1',0,18,130,16,3
	.word	54316
	.byte	12,18,133,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45931
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON2',0,18,138,16,3
	.word	54384
	.byte	12,18,141,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46037
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT',0,18,146,16,3
	.word	54452
	.byte	12,18,149,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46260
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR',0,18,154,16,3
	.word	54520
	.byte	12,18,157,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46408
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS0',0,18,162,16,3
	.word	54585
	.byte	12,18,165,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46896
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS1',0,18,170,16,3
	.word	54651
	.byte	12,18,173,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47193
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET',0,18,178,16,3
	.word	54717
	.byte	12,18,181,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47341
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT',0,18,186,16,3
	.word	54782
	.byte	12,18,189,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47491
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTCPU_CON0',0,18,194,16,3
	.word	54848
	.byte	12,18,197,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47621
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTCPU_CON1',0,18,202,16,3
	.word	54917
	.byte	12,18,205,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47881
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTCPU_SR',0,18,210,16,3
	.word	54986
	.byte	12,18,213,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48104
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0',0,18,218,16,3
	.word	55053
	.byte	12,18,221,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48230
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON1',0,18,226,16,3
	.word	55120
	.byte	12,18,229,16,9,4,13
	.byte	'U',0
	.word	404
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48482
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_SR',0,18,234,16,3
	.word	55187
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,18,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	50506
	.byte	4,2,35,0,0,14
	.word	55252
	.byte	33
	.byte	'Ifx_SCU_ESRCFGX',0,18,249,16,3
	.word	55293
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU',0,18,136,17,25,12,13
	.byte	'CON0',0
	.word	54848
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	54917
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	54986
	.byte	4,2,35,8,0,14
	.word	55323
	.byte	33
	.byte	'Ifx_SCU_WDTCPU',0,18,141,17,3
	.word	55386
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,18,156,17,25,12,13
	.byte	'CON0',0
	.word	55053
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	55120
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	55187
	.byte	4,2,35,8,0,14
	.word	55415
	.byte	33
	.byte	'Ifx_SCU_WDTS',0,18,161,17,3
	.word	55476
	.byte	33
	.byte	'IfxSrc_Tos',0,5,75,3
	.word	863
	.byte	33
	.byte	'Ifx_SRC_SRCR_Bits',0,4,85,3
	.word	444
	.byte	33
	.byte	'Ifx_SRC_SRCR',0,4,98,3
	.word	734
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,4,110,25,4,13
	.byte	'SB',0
	.word	734
	.byte	4,2,35,0,0,14
	.word	55569
	.byte	33
	.byte	'Ifx_SRC_CPU_CPU',0,4,113,3
	.word	55604
	.byte	18,24
	.word	55569
	.byte	19,5,0,14
	.word	55633
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,4,128,1,25,24,13
	.byte	'CPU',0
	.word	55642
	.byte	24,2,35,0,0,14
	.word	55647
	.byte	33
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	55680
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,4,146,1,25,4,13
	.byte	'SR',0
	.word	734
	.byte	4,2,35,0,0,14
	.word	55706
	.byte	33
	.byte	'Ifx_SRC_AGBT_AGBT',0,4,149,1,3
	.word	55744
	.byte	18,4
	.word	55706
	.byte	19,0,0,14
	.word	55776
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,4,164,1,25,4,13
	.byte	'AGBT',0
	.word	55785
	.byte	4,2,35,0,0,14
	.word	55790
	.byte	33
	.byte	'Ifx_SRC_AGBT',0,4,167,1,3
	.word	55825
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,4,182,1,25,4,13
	.byte	'SR',0
	.word	734
	.byte	4,2,35,0,0,14
	.word	55852
	.byte	33
	.byte	'Ifx_SRC_XBAR_XBAR',0,4,185,1,3
	.word	55890
	.byte	18,12
	.word	55852
	.byte	19,2,0,14
	.word	55922
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,4,200,1,25,12,13
	.byte	'XBAR',0
	.word	55931
	.byte	12,2,35,0,0,14
	.word	55936
	.byte	33
	.byte	'Ifx_SRC_XBAR',0,4,203,1,3
	.word	55971
	.byte	18,8
	.word	734
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,4,218,1,25,8,13
	.byte	'SR',0
	.word	55998
	.byte	8,2,35,0,0,14
	.word	56007
	.byte	33
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,4,221,1,3
	.word	56053
	.byte	14
	.word	56007
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,4,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	56093
	.byte	8,2,35,0,0,14
	.word	56098
	.byte	33
	.byte	'Ifx_SRC_CERBERUS',0,4,239,1,3
	.word	56141
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,4,254,1,25,12,13
	.byte	'TX',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	734
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	734
	.byte	4,2,35,8,0,14
	.word	56172
	.byte	33
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,4,131,2,3
	.word	56239
	.byte	18,144,1
	.word	56172
	.byte	19,11,0,14
	.word	56275
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,4,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	56285
	.byte	144,1,2,35,0,0,14
	.word	56290
	.byte	33
	.byte	'Ifx_SRC_ASCLIN',0,4,149,2,3
	.word	56331
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,4,164,2,25,20,13
	.byte	'TX',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	734
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	734
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	734
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	734
	.byte	4,2,35,16,0,14
	.word	56360
	.byte	33
	.byte	'Ifx_SRC_QSPI_QSPI',0,4,171,2,3
	.word	56446
	.byte	18,120
	.word	56360
	.byte	19,5,0,14
	.word	56478
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,4,186,2,25,120,13
	.byte	'QSPI',0
	.word	56487
	.byte	120,2,35,0,0,14
	.word	56492
	.byte	33
	.byte	'Ifx_SRC_QSPI',0,4,189,2,3
	.word	56527
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,4,204,2,25,4,13
	.byte	'SR',0
	.word	734
	.byte	4,2,35,0,0,14
	.word	56554
	.byte	33
	.byte	'Ifx_SRC_HSCT_HSCT',0,4,207,2,3
	.word	56592
	.byte	18,8
	.word	56554
	.byte	19,1,0,14
	.word	56624
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,4,222,2,25,8,13
	.byte	'HSCT',0
	.word	56633
	.byte	8,2,35,0,0,14
	.word	56638
	.byte	33
	.byte	'Ifx_SRC_HSCT',0,4,225,2,3
	.word	56673
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,4,240,2,25,16,13
	.byte	'COK',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	734
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	734
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	734
	.byte	4,2,35,12,0,14
	.word	56700
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,4,246,2,3
	.word	56781
	.byte	18,64
	.word	56700
	.byte	19,3,0,14
	.word	56816
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,4,133,3,25,68,13
	.byte	'CH',0
	.word	56825
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	734
	.byte	4,2,35,64,0,14
	.word	56830
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL',0,4,137,3,3
	.word	56881
	.byte	18,136,1
	.word	56830
	.byte	19,1,0,14
	.word	56913
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,4,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	56923
	.byte	136,1,2,35,0,0,14
	.word	56928
	.byte	33
	.byte	'Ifx_SRC_HSSL',0,4,155,3,3
	.word	56965
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,4,170,3,25,16,13
	.byte	'DTR',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	734
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	734
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2100
	.byte	4,2,35,12,0,14
	.word	56992
	.byte	33
	.byte	'Ifx_SRC_I2C_I2C',0,4,176,3,3
	.word	57073
	.byte	18,32
	.word	56992
	.byte	19,1,0,14
	.word	57103
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,4,191,3,25,32,13
	.byte	'I2C',0
	.word	57112
	.byte	32,2,35,0,0,14
	.word	57117
	.byte	33
	.byte	'Ifx_SRC_I2C',0,4,194,3,3
	.word	57150
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,4,209,3,25,4,13
	.byte	'SR',0
	.word	734
	.byte	4,2,35,0,0,14
	.word	57176
	.byte	33
	.byte	'Ifx_SRC_SENT_SENT',0,4,212,3,3
	.word	57214
	.byte	18,40
	.word	57176
	.byte	19,9,0,14
	.word	57246
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,4,227,3,25,40,13
	.byte	'SENT',0
	.word	57255
	.byte	40,2,35,0,0,14
	.word	57260
	.byte	33
	.byte	'Ifx_SRC_SENT',0,4,230,3,3
	.word	57295
	.byte	18,20
	.word	734
	.byte	19,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,4,245,3,25,20,13
	.byte	'SR',0
	.word	57322
	.byte	20,2,35,0,0,14
	.word	57331
	.byte	33
	.byte	'Ifx_SRC_MSC_MSC',0,4,248,3,3
	.word	57367
	.byte	18,80
	.word	57331
	.byte	19,3,0,14
	.word	57397
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,4,135,4,25,80,13
	.byte	'MSC',0
	.word	57406
	.byte	80,2,35,0,0,14
	.word	57411
	.byte	33
	.byte	'Ifx_SRC_MSC',0,4,138,4,3
	.word	57444
	.byte	18,16
	.word	734
	.byte	19,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,4,153,4,25,16,13
	.byte	'SR',0
	.word	57470
	.byte	16,2,35,0,0,14
	.word	57479
	.byte	33
	.byte	'Ifx_SRC_CCU6_CCU',0,4,156,4,3
	.word	57516
	.byte	18,32
	.word	57479
	.byte	19,1,0,14
	.word	57547
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,4,171,4,25,32,13
	.byte	'CCU',0
	.word	57556
	.byte	32,2,35,0,0,14
	.word	57561
	.byte	33
	.byte	'Ifx_SRC_CCU6',0,4,174,4,3
	.word	57595
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,4,189,4,25,24,13
	.byte	'CIRQ',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	734
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	734
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	734
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	734
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	734
	.byte	4,2,35,20,0,14
	.word	57622
	.byte	33
	.byte	'Ifx_SRC_GPT12_GPT12',0,4,197,4,3
	.word	57724
	.byte	18,24
	.word	57622
	.byte	19,0,0,14
	.word	57758
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,4,212,4,25,24,13
	.byte	'GPT12',0
	.word	57767
	.byte	24,2,35,0,0,14
	.word	57772
	.byte	33
	.byte	'Ifx_SRC_GPT12',0,4,215,4,3
	.word	57809
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,4,230,4,25,8,13
	.byte	'SR',0
	.word	55998
	.byte	8,2,35,0,0,14
	.word	57837
	.byte	33
	.byte	'Ifx_SRC_STM_STM',0,4,233,4,3
	.word	57873
	.byte	18,48
	.word	57837
	.byte	19,5,0,14
	.word	57903
	.byte	10
	.byte	'_Ifx_SRC_STM',0,4,248,4,25,48,13
	.byte	'STM',0
	.word	57912
	.byte	48,2,35,0,0,14
	.word	57917
	.byte	33
	.byte	'Ifx_SRC_STM',0,4,251,4,3
	.word	57950
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,4,138,5,25,4,13
	.byte	'SR',0
	.word	734
	.byte	4,2,35,0,0,14
	.word	57976
	.byte	33
	.byte	'Ifx_SRC_FCE_FCE0',0,4,141,5,3
	.word	58013
	.byte	14
	.word	57976
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,4,156,5,25,4,13
	.byte	'FCE0',0
	.word	58044
	.byte	4,2,35,0,0,14
	.word	58049
	.byte	33
	.byte	'Ifx_SRC_FCE',0,4,159,5,3
	.word	58083
	.byte	18,32
	.word	427
	.byte	19,31,0,18,128,4
	.word	734
	.byte	19,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,4,174,5,25,176,4,13
	.byte	'ERR',0
	.word	57470
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	58109
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	58118
	.byte	128,4,2,35,48,0,14
	.word	58128
	.byte	33
	.byte	'Ifx_SRC_DMA_DMA',0,4,179,5,3
	.word	58200
	.byte	18,176,4
	.word	58128
	.byte	19,0,0,14
	.word	58230
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,4,194,5,25,176,4,13
	.byte	'DMA',0
	.word	58240
	.byte	176,4,2,35,0,0,14
	.word	58245
	.byte	33
	.byte	'Ifx_SRC_DMA',0,4,197,5,3
	.word	58280
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,4,212,5,25,8,13
	.byte	'ERR',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	734
	.byte	4,2,35,4,0,14
	.word	58306
	.byte	33
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,4,216,5,3
	.word	58360
	.byte	18,8
	.word	58306
	.byte	19,0,0,14
	.word	58394
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,4,231,5,25,8,13
	.byte	'SDMMC',0
	.word	58403
	.byte	8,2,35,0,0,14
	.word	58408
	.byte	33
	.byte	'Ifx_SRC_SDMMC',0,4,234,5,3
	.word	58445
	.byte	18,40
	.word	734
	.byte	19,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,4,249,5,25,40,13
	.byte	'SR',0
	.word	58473
	.byte	40,2,35,0,0,14
	.word	58482
	.byte	33
	.byte	'Ifx_SRC_GETH_GETH',0,4,252,5,3
	.word	58520
	.byte	18,40
	.word	58482
	.byte	19,0,0,14
	.word	58552
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,4,139,6,25,40,13
	.byte	'GETH',0
	.word	58561
	.byte	40,2,35,0,0,14
	.word	58566
	.byte	33
	.byte	'Ifx_SRC_GETH',0,4,142,6,3
	.word	58601
	.byte	18,64
	.word	734
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,4,157,6,25,64,13
	.byte	'INT',0
	.word	58628
	.byte	64,2,35,0,0,14
	.word	58637
	.byte	33
	.byte	'Ifx_SRC_CAN_CAN',0,4,160,6,3
	.word	58674
	.byte	18,192,1
	.word	58637
	.byte	19,2,0,14
	.word	58704
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,4,175,6,25,192,1,13
	.byte	'CAN',0
	.word	58714
	.byte	192,1,2,35,0,0,14
	.word	58719
	.byte	33
	.byte	'Ifx_SRC_CAN',0,4,178,6,3
	.word	58754
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,4,193,6,25,16,13
	.byte	'SR0',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	734
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	734
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	734
	.byte	4,2,35,12,0,14
	.word	58780
	.byte	33
	.byte	'Ifx_SRC_VADC_G',0,4,199,6,3
	.word	58855
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,4,214,6,25,4,13
	.byte	'SR0',0
	.word	734
	.byte	4,2,35,0,0,14
	.word	58884
	.byte	33
	.byte	'Ifx_SRC_VADC_FC',0,4,217,6,3
	.word	58921
	.byte	18,192,1
	.word	58780
	.byte	19,11,0,14
	.word	58951
	.byte	18,32
	.word	58884
	.byte	19,7,0,14
	.word	58966
	.byte	18,32
	.word	58780
	.byte	19,1,0,14
	.word	58980
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,4,233,6,25,128,2,13
	.byte	'G',0
	.word	58961
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	58975
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	58989
	.byte	32,3,35,224,1,0,14
	.word	58994
	.byte	33
	.byte	'Ifx_SRC_VADC',0,4,238,6,3
	.word	59054
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,4,253,6,25,8,13
	.byte	'SRM',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	734
	.byte	4,2,35,4,0,14
	.word	59081
	.byte	33
	.byte	'Ifx_SRC_DSADC_DSADC',0,4,129,7,3
	.word	59135
	.byte	18,112
	.word	59081
	.byte	19,13,0,14
	.word	59169
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,4,144,7,25,112,13
	.byte	'DSADC',0
	.word	59178
	.byte	112,2,35,0,0,14
	.word	59183
	.byte	33
	.byte	'Ifx_SRC_DSADC',0,4,147,7,3
	.word	59220
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,4,162,7,25,48,13
	.byte	'INT0',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	734
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	734
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	734
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	734
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	734
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	734
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	734
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	734
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	734
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3920
	.byte	8,2,35,40,0,14
	.word	59248
	.byte	33
	.byte	'Ifx_SRC_ERAY_ERAY',0,4,175,7,3
	.word	59443
	.byte	18,96
	.word	59248
	.byte	19,1,0,14
	.word	59475
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,4,190,7,25,96,13
	.byte	'ERAY',0
	.word	59484
	.byte	96,2,35,0,0,14
	.word	59489
	.byte	33
	.byte	'Ifx_SRC_ERAY',0,4,193,7,3
	.word	59524
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,4,208,7,25,8,13
	.byte	'HSM',0
	.word	55998
	.byte	8,2,35,0,0,14
	.word	59551
	.byte	33
	.byte	'Ifx_SRC_HSM_HSM',0,4,211,7,3
	.word	59588
	.byte	18,8
	.word	59551
	.byte	19,0,0,14
	.word	59618
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,4,226,7,25,8,13
	.byte	'HSM',0
	.word	59627
	.byte	8,2,35,0,0,14
	.word	59632
	.byte	33
	.byte	'Ifx_SRC_HSM',0,4,229,7,3
	.word	59665
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,4,244,7,25,16,13
	.byte	'SCUERU',0
	.word	57470
	.byte	16,2,35,0,0,14
	.word	59691
	.byte	33
	.byte	'Ifx_SRC_SCU',0,4,247,7,3
	.word	59727
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,4,134,8,25,4,13
	.byte	'SR',0
	.word	734
	.byte	4,2,35,0,0,14
	.word	59753
	.byte	33
	.byte	'Ifx_SRC_PMS_PMS',0,4,137,8,3
	.word	59789
	.byte	18,16
	.word	59753
	.byte	19,3,0,14
	.word	59819
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,4,152,8,25,16,13
	.byte	'PMS',0
	.word	59828
	.byte	16,2,35,0,0,14
	.word	59833
	.byte	33
	.byte	'Ifx_SRC_PMS',0,4,155,8,3
	.word	59866
	.byte	18,12
	.word	734
	.byte	19,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,4,170,8,25,12,13
	.byte	'SR',0
	.word	59892
	.byte	12,2,35,0,0,14
	.word	59901
	.byte	33
	.byte	'Ifx_SRC_SMU_SMU',0,4,173,8,3
	.word	59937
	.byte	18,12
	.word	59901
	.byte	19,0,0,14
	.word	59967
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,4,188,8,25,12,13
	.byte	'SMU',0
	.word	59976
	.byte	12,2,35,0,0,14
	.word	59981
	.byte	33
	.byte	'Ifx_SRC_SMU',0,4,191,8,3
	.word	60014
	.byte	18,32
	.word	734
	.byte	19,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,4,206,8,25,32,13
	.byte	'SR',0
	.word	60040
	.byte	32,2,35,0,0,14
	.word	60049
	.byte	33
	.byte	'Ifx_SRC_PSI5_PSI5',0,4,209,8,3
	.word	60087
	.byte	18,32
	.word	60049
	.byte	19,0,0,14
	.word	60119
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,4,224,8,25,32,13
	.byte	'PSI5',0
	.word	60128
	.byte	32,2,35,0,0,14
	.word	60133
	.byte	33
	.byte	'Ifx_SRC_PSI5',0,4,227,8,3
	.word	60168
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,4,242,8,25,12,13
	.byte	'BFR',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	734
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	734
	.byte	4,2,35,8,0,14
	.word	60195
	.byte	33
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,4,247,8,3
	.word	60264
	.byte	14
	.word	60195
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,4,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	60299
	.byte	12,2,35,0,0,14
	.word	60304
	.byte	33
	.byte	'Ifx_SRC_HSPDM',0,4,137,9,3
	.word	60342
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,4,152,9,25,24,13
	.byte	'LI0',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	734
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	734
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	734
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	734
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	734
	.byte	4,2,35,20,0,14
	.word	60370
	.byte	33
	.byte	'Ifx_SRC_DAM_DAM',0,4,160,9,3
	.word	60471
	.byte	18,48
	.word	60370
	.byte	19,1,0,14
	.word	60501
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,4,175,9,25,48,13
	.byte	'DAM',0
	.word	60510
	.byte	48,2,35,0,0,14
	.word	60515
	.byte	33
	.byte	'Ifx_SRC_DAM',0,4,178,9,3
	.word	60548
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,4,193,9,25,32,13
	.byte	'SR',0
	.word	60040
	.byte	32,2,35,0,0,14
	.word	60574
	.byte	33
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,4,196,9,3
	.word	60614
	.byte	18,32
	.word	60574
	.byte	19,0,0,14
	.word	60648
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,4,211,9,25,32,13
	.byte	'PSI5S',0
	.word	60657
	.byte	32,2,35,0,0,14
	.word	60662
	.byte	33
	.byte	'Ifx_SRC_PSI5S',0,4,214,9,3
	.word	60699
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,4,229,9,25,8,13
	.byte	'ERR',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	734
	.byte	4,2,35,4,0,14
	.word	60727
	.byte	33
	.byte	'Ifx_SRC_RIF_RIF',0,4,233,9,3
	.word	60777
	.byte	18,16
	.word	60727
	.byte	19,1,0,14
	.word	60807
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,4,248,9,25,16,13
	.byte	'RIF',0
	.word	60816
	.byte	16,2,35,0,0,14
	.word	60821
	.byte	33
	.byte	'Ifx_SRC_RIF',0,4,251,9,3
	.word	60854
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,4,138,10,25,8,13
	.byte	'INT',0
	.word	734
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	734
	.byte	4,2,35,4,0,14
	.word	60880
	.byte	33
	.byte	'Ifx_SRC_SPU_SPU',0,4,142,10,3
	.word	60930
	.byte	18,16
	.word	60880
	.byte	19,1,0,14
	.word	60960
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,4,157,10,25,16,13
	.byte	'SPU',0
	.word	60969
	.byte	16,2,35,0,0,14
	.word	60974
	.byte	33
	.byte	'Ifx_SRC_SPU',0,4,160,10,3
	.word	61007
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,4,175,10,25,32,13
	.byte	'SR',0
	.word	60040
	.byte	32,2,35,0,0,14
	.word	61033
	.byte	33
	.byte	'Ifx_SRC_GPSR_GPSR',0,4,178,10,3
	.word	61071
	.byte	18,192,1
	.word	61033
	.byte	19,5,0,14
	.word	61103
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,4,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	61113
	.byte	192,1,2,35,0,0,14
	.word	61118
	.byte	33
	.byte	'Ifx_SRC_GPSR',0,4,196,10,3
	.word	61155
	.byte	33
	.byte	'IfxHssl_ChannelId',0,11,80,3
	.word	21377
	.byte	33
	.byte	'IfxHssl_DataLength',0,11,120,3
	.word	24684
	.byte	15,11,125,9,1,16
	.byte	'IfxHssl_Hsct_InterruptSource_headerError',0,1,16
	.byte	'IfxHssl_Hsct_InterruptSource_payloadError',0,2,16
	.byte	'IfxHssl_Hsct_InterruptSource_commandError',0,3,16
	.byte	'IfxHssl_Hsct_InterruptSource_interfaceControlFrameSend',0,4,16
	.byte	'IfxHssl_Hsct_InterruptSource_speedModeSwitchError',0,5,16
	.byte	'IfxHssl_Hsct_InterruptSource_unsolicitedMessageSendFinished',0,6,16
	.byte	'IfxHssl_Hsct_InterruptSource_pllLockLosterror',0,7,16
	.byte	'IfxHssl_Hsct_InterruptSource_UnsolicitedMessageReceived',0,8,16
	.byte	'IfxHssl_Hsct_InterruptSource_pingAnswerReceived',0,9,16
	.byte	'IfxHssl_Hsct_InterruptSource_txTransferError',0,10,16
	.byte	'IfxHssl_Hsct_InterruptSource_synchronizationFifoOverflow',0,11,16
	.byte	'IfxHssl_Hsct_InterruptSource_synchronizationFifoUnderflow',0,12,0,33
	.byte	'IfxHssl_Hsct_InterruptSource',0,11,142,1,3
	.word	61235
	.byte	15,11,147,1,9,1,16
	.byte	'IfxHssl_Hsct_SleepMode_enable',0,0,16
	.byte	'IfxHssl_Hsct_SleepMode_disable',0,1,0,33
	.byte	'IfxHssl_Hsct_SleepMode',0,11,151,1,3
	.word	61903
	.byte	15,11,156,1,9,1,16
	.byte	'IfxHssl_Hssl_SleepMode_enable',0,0,16
	.byte	'IfxHssl_Hssl_SleepMode_disable',0,1,0,33
	.byte	'IfxHssl_Hssl_SleepMode',0,11,160,1,3
	.word	62007
	.byte	33
	.byte	'IfxHssl_InterfaceMode',0,11,169,1,3
	.word	23800
	.byte	15,11,174,1,9,1,16
	.byte	'IfxHssl_MasterModeRxSpeed_lowSpeed',0,0,16
	.byte	'IfxHssl_MasterModeRxSpeed_mediumSpeed',0,1,16
	.byte	'IfxHssl_MasterModeRxSpeed_highSpeed',0,2,0,33
	.byte	'IfxHssl_MasterModeRxSpeed',0,11,179,1,3
	.word	62142
	.byte	15,11,184,1,9,1,16
	.byte	'IfxHssl_MasterModeTxSpeed_lowSpeed',0,0,16
	.byte	'IfxHssl_MasterModeTxSpeed_highSpeed',0,2,0,33
	.byte	'IfxHssl_MasterModeTxSpeed',0,11,188,1,3
	.word	62299
	.byte	33
	.byte	'IfxHssl_StreamingMode',0,11,216,1,3
	.word	21668
	.byte	15,11,220,1,9,1,16
	.byte	'IfxHssl_SuspendMode_none',0,0,16
	.byte	'IfxHssl_SuspendMode_hard',0,1,16
	.byte	'IfxHssl_SuspendMode_soft',0,2,0,33
	.byte	'IfxHssl_SuspendMode',0,11,225,1,3
	.word	62447
	.byte	15,11,242,1,9,1,16
	.byte	'IfxHssl_Hssl_ERRInterruptSource_notAcknowledgeError',0,0,16
	.byte	'IfxHssl_Hssl_ERRInterruptSource_transactionTagError',0,4,16
	.byte	'IfxHssl_Hssl_ERRInterruptSource_timeoutError',0,8,16
	.byte	'IfxHssl_Hssl_ERRInterruptSource_unexpectedError',0,12,0,33
	.byte	'IfxHssl_Hssl_ERRInterruptSource',0,11,248,1,3
	.word	62564
	.byte	15,11,253,1,9,1,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_memoryAccessViolation',0,21,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_busAccessError',0,22,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_channelNumberCodeError',0,23,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_dataLengthError',0,24,16
	.byte	'IfxHssl_Hssl_EXIInterruptSource_crcError',0,25,0,33
	.byte	'IfxHssl_Hssl_EXIInterruptSource',0,11,133,2,3
	.word	62817
	.byte	33
	.byte	'IfxHssl_Hsct',0,11,147,2,3
	.word	23756
	.byte	33
	.byte	'IfxHssl_Hsct_Config',0,11,157,2,3
	.word	23868
	.byte	33
	.byte	'Ifx_P_ACCEN0_Bits',0,7,102,3
	.word	7448
	.byte	33
	.byte	'Ifx_P_ACCEN1_Bits',0,7,108,3
	.word	7361
	.byte	33
	.byte	'Ifx_P_ESR_Bits',0,7,130,1,3
	.word	3929
	.byte	33
	.byte	'Ifx_P_ID_Bits',0,7,138,1,3
	.word	1980
	.byte	33
	.byte	'Ifx_P_IN_Bits',0,7,160,1,3
	.word	2976
	.byte	33
	.byte	'Ifx_P_IOCR0_Bits',0,7,173,1,3
	.word	2109
	.byte	33
	.byte	'Ifx_P_IOCR12_Bits',0,7,186,1,3
	.word	2756
	.byte	33
	.byte	'Ifx_P_IOCR4_Bits',0,7,199,1,3
	.word	2324
	.byte	33
	.byte	'Ifx_P_IOCR8_Bits',0,7,212,1,3
	.word	2539
	.byte	33
	.byte	'Ifx_P_LPCR_Bits',0,7,231,1,3
	.word	7023
	.byte	33
	.byte	'Ifx_P_OMCR_Bits',0,7,253,1,3
	.word	6675
	.byte	33
	.byte	'Ifx_P_OMCR0_Bits',0,7,136,2,3
	.word	5662
	.byte	33
	.byte	'Ifx_P_OMCR12_Bits',0,7,146,2,3
	.word	6186
	.byte	33
	.byte	'Ifx_P_OMCR4_Bits',0,7,157,2,3
	.word	5836
	.byte	33
	.byte	'Ifx_P_OMCR8_Bits',0,7,168,2,3
	.word	6010
	.byte	33
	.byte	'Ifx_P_OMR_Bits',0,7,205,2,3
	.word	1409
	.byte	33
	.byte	'Ifx_P_OMSR_Bits',0,7,227,2,3
	.word	6342
	.byte	33
	.byte	'Ifx_P_OMSR0_Bits',0,7,237,2,3
	.word	4999
	.byte	33
	.byte	'Ifx_P_OMSR12_Bits',0,7,248,2,3
	.word	5487
	.byte	33
	.byte	'Ifx_P_OMSR4_Bits',0,7,131,3,3
	.word	5146
	.byte	33
	.byte	'Ifx_P_OMSR8_Bits',0,7,142,3,3
	.word	5315
	.byte	33
	.byte	'Ifx_P_OUT_Bits',0,7,164,3,3
	.word	1093
	.byte	33
	.byte	'Ifx_P_PCSR_Bits',0,7,187,3,3
	.word	4635
	.byte	33
	.byte	'Ifx_P_PDISC_Bits',0,7,209,3,3
	.word	4269
	.byte	33
	.byte	'Ifx_P_PDR0_Bits',0,7,230,3,3
	.word	3300
	.byte	33
	.byte	'Ifx_P_PDR1_Bits',0,7,251,3,3
	.word	3604
	.byte	33
	.byte	'Ifx_P_ACCEN0',0,7,136,4,3
	.word	7975
	.byte	33
	.byte	'Ifx_P_ACCEN1',0,7,144,4,3
	.word	7408
	.byte	33
	.byte	'Ifx_P_ESR',0,7,152,4,3
	.word	4220
	.byte	33
	.byte	'Ifx_P_ID',0,7,160,4,3
	.word	2060
	.byte	33
	.byte	'Ifx_P_IN',0,7,168,4,3
	.word	3251
	.byte	33
	.byte	'Ifx_P_IOCR0',0,7,176,4,3
	.word	2284
	.byte	33
	.byte	'Ifx_P_IOCR12',0,7,184,4,3
	.word	2936
	.byte	33
	.byte	'Ifx_P_IOCR4',0,7,192,4,3
	.word	2499
	.byte	33
	.byte	'Ifx_P_IOCR8',0,7,200,4,3
	.word	2716
	.byte	33
	.byte	'Ifx_P_LPCR',0,7,208,4,3
	.word	7303
	.byte	33
	.byte	'Ifx_P_OMCR',0,7,216,4,3
	.word	6983
	.byte	33
	.byte	'Ifx_P_OMCR0',0,7,224,4,3
	.word	5796
	.byte	33
	.byte	'Ifx_P_OMCR12',0,7,232,4,3
	.word	6302
	.byte	33
	.byte	'Ifx_P_OMCR4',0,7,240,4,3
	.word	5970
	.byte	33
	.byte	'Ifx_P_OMCR8',0,7,248,4,3
	.word	6146
	.byte	33
	.byte	'Ifx_P_OMR',0,7,128,5,3
	.word	1940
	.byte	33
	.byte	'Ifx_P_OMSR',0,7,136,5,3
	.word	6635
	.byte	33
	.byte	'Ifx_P_OMSR0',0,7,144,5,3
	.word	5106
	.byte	33
	.byte	'Ifx_P_OMSR12',0,7,152,5,3
	.word	5622
	.byte	33
	.byte	'Ifx_P_OMSR4',0,7,160,5,3
	.word	5275
	.byte	33
	.byte	'Ifx_P_OMSR8',0,7,168,5,3
	.word	5447
	.byte	33
	.byte	'Ifx_P_OUT',0,7,176,5,3
	.word	1369
	.byte	33
	.byte	'Ifx_P_PCSR',0,7,184,5,3
	.word	4959
	.byte	33
	.byte	'Ifx_P_PDISC',0,7,192,5,3
	.word	4595
	.byte	33
	.byte	'Ifx_P_PDR0',0,7,200,5,3
	.word	3564
	.byte	33
	.byte	'Ifx_P_PDR1',0,7,208,5,3
	.word	3880
	.byte	14
	.word	8015
	.byte	33
	.byte	'Ifx_P',0,7,128,6,3
	.word	64365
	.byte	15,6,73,9,1,16
	.byte	'IfxPort_ControlledBy_port',0,0,16
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,33
	.byte	'IfxPort_ControlledBy',0,6,77,3
	.word	64385
	.byte	33
	.byte	'IfxPort_InputMode',0,6,87,3
	.word	8595
	.byte	15,6,91,9,1,16
	.byte	'IfxPort_LvdsMode_high',0,0,16
	.byte	'IfxPort_LvdsMode_medium',0,1,0,33
	.byte	'IfxPort_LvdsMode',0,6,95,3
	.word	64502
	.byte	33
	.byte	'IfxPort_Mode',0,6,122,3
	.word	22504
	.byte	33
	.byte	'IfxPort_OutputIdx',0,6,136,1,3
	.word	8896
	.byte	33
	.byte	'IfxPort_OutputMode',0,6,145,1,3
	.word	8800
	.byte	33
	.byte	'IfxPort_PadDriver',0,6,165,1,3
	.word	23248
	.byte	15,6,169,1,9,1,16
	.byte	'IfxPort_PadSupply_3v',0,0,16
	.byte	'IfxPort_PadSupply_5v',0,1,0,33
	.byte	'IfxPort_PadSupply',0,6,173,1,3
	.word	64686
	.byte	15,6,177,1,9,1,16
	.byte	'IfxPort_PinFunctionMode_digital',0,0,16
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,33
	.byte	'IfxPort_PinFunctionMode',0,6,181,1,3
	.word	64766
	.byte	33
	.byte	'IfxPort_State',0,6,193,1,3
	.word	9209
	.byte	33
	.byte	'IfxHssl_Hssl_FrameRequest',0,8,223,3,3
	.word	21471
	.byte	33
	.byte	'IfxHssl_Hssl_Status',0,8,232,3,3
	.word	24597
	.byte	33
	.byte	'IfxHssl_Hssl_AccessWindow',0,8,248,3,3
	.word	24292
	.byte	33
	.byte	'IfxHssl_Hssl_errorFlags',0,8,137,4,3
	.word	23968
	.byte	33
	.byte	'IfxHssl_Hssl',0,8,148,4,3
	.word	24228
	.byte	33
	.byte	'IfxHssl_Hssl_Channel',0,8,161,4,3
	.word	21741
	.byte	33
	.byte	'IfxHssl_Hssl_ChannelConfig',0,8,172,4,3
	.word	24475
	.byte	33
	.byte	'IfxHssl_Hssl_Config',0,8,184,4,3
	.word	24327
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L128:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,19,1,58,15,59,15,57,15,11,15,0,0,21,38,0,73,19
	.byte	0,0,22,46,1,3,8,54,15,39,12,63,12,60,12,0,0,23,5,0,73,19,0,0,24,46,1,3,8,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,25,5,0,3,8,73,19,0,0,26,46,0,3,8,54,15,39,12,63,12,60,12,0,0,27,46,1,49,19,0,0,28,5,0,49,19,0,0,29
	.byte	46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,30,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,31,29,1,49,19,0,0,32,11,0,49,19,0,0,33,22,0,3,8,58,15,59,15,57,15,73,19,0,0,34,21,0,54
	.byte	15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L129:
	.word	.L470-.L469
.L469:
	.half	3
	.word	.L472-.L471
.L471:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.h',0,0,0,0
	.byte	'IfxHssl_regdef.h',0,3,0,0
	.byte	'IfxHsct_regdef.h',0,3,0,0
	.byte	'IfxHssl.h',0,6,0,0
	.byte	'IfxScuWdt.h',0,7,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0,0
.L472:
.L470:
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_info'
.L130:
	.word	983
	.half	3
	.word	.L131
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L133,.L132
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_initHsctModule',0,1,157,1,6,1,1,1
	.word	.L97,.L230,.L96
	.byte	4
	.byte	'hsct',0,1,157,1,48
	.word	.L231,.L232
	.byte	4
	.byte	'config',0,1,157,1,81
	.word	.L233,.L234
	.byte	5
	.word	.L235
	.byte	6
	.byte	'hsctSFR',0,1,159,1,15
	.word	.L236,.L237
	.byte	7
	.word	.L238,.L239,.L240
	.byte	8
	.word	.L241,.L242
	.byte	8
	.word	.L243,.L244
	.byte	8
	.word	.L245,.L246
	.byte	9
	.word	.L247,.L248
	.byte	0,7
	.word	.L238,.L249,.L250
	.byte	8
	.word	.L241,.L242
	.byte	8
	.word	.L243,.L244
	.byte	8
	.word	.L245,.L246
	.byte	0,7
	.word	.L238,.L250,.L251
	.byte	8
	.word	.L241,.L242
	.byte	8
	.word	.L243,.L244
	.byte	8
	.word	.L245,.L246
	.byte	10
	.word	.L247,.L250,.L251
	.byte	0,7
	.word	.L252,.L251,.L253
	.byte	8
	.word	.L254,.L255
	.byte	8
	.word	.L256,.L257
	.byte	8
	.word	.L258,.L259
	.byte	8
	.word	.L260,.L261
	.byte	10
	.word	.L262,.L251,.L253
	.byte	0,7
	.word	.L252,.L253,.L12
	.byte	8
	.word	.L254,.L255
	.byte	8
	.word	.L256,.L257
	.byte	8
	.word	.L258,.L259
	.byte	8
	.word	.L260,.L261
	.byte	10
	.word	.L262,.L253,.L12
	.byte	0,7
	.word	.L238,.L12,.L263
	.byte	8
	.word	.L241,.L242
	.byte	8
	.word	.L243,.L244
	.byte	8
	.word	.L245,.L246
	.byte	10
	.word	.L247,.L12,.L263
	.byte	0,7
	.word	.L238,.L263,.L264
	.byte	8
	.word	.L241,.L242
	.byte	8
	.word	.L243,.L244
	.byte	8
	.word	.L245,.L246
	.byte	10
	.word	.L247,.L263,.L264
	.byte	0,7
	.word	.L252,.L264,.L265
	.byte	8
	.word	.L254,.L255
	.byte	8
	.word	.L256,.L257
	.byte	8
	.word	.L258,.L259
	.byte	8
	.word	.L260,.L261
	.byte	10
	.word	.L262,.L264,.L265
	.byte	0,7
	.word	.L252,.L265,.L266
	.byte	8
	.word	.L254,.L255
	.byte	8
	.word	.L256,.L257
	.byte	8
	.word	.L258,.L259
	.byte	8
	.word	.L260,.L261
	.byte	10
	.word	.L262,.L265,.L266
	.byte	0,7
	.word	.L252,.L266,.L267
	.byte	8
	.word	.L254,.L255
	.byte	8
	.word	.L256,.L257
	.byte	8
	.word	.L258,.L259
	.byte	8
	.word	.L260,.L261
	.byte	9
	.word	.L262,.L268
	.byte	0,7
	.word	.L252,.L269,.L270
	.byte	8
	.word	.L254,.L255
	.byte	8
	.word	.L256,.L257
	.byte	8
	.word	.L258,.L259
	.byte	8
	.word	.L260,.L261
	.byte	0,7
	.word	.L238,.L14,.L15
	.byte	8
	.word	.L241,.L242
	.byte	8
	.word	.L243,.L244
	.byte	8
	.word	.L245,.L246
	.byte	10
	.word	.L247,.L14,.L15
	.byte	0,5
	.word	.L271
	.byte	6
	.byte	'psw',0,1,200,1,16
	.word	.L273,.L274
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_abbrev'
.L131:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0,10,11
	.byte	0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_line'
.L132:
	.word	.L474-.L473
.L473:
	.half	3
	.word	.L476-.L475
.L475:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0
	.byte	'IfxPort.h',0,1,0,0,0
.L476:
	.byte	5,6,7,0,5,2
	.word	.L97
	.byte	3,156,1,1,5,31,9
	.half	.L388-.L97
	.byte	3,2,1,5,20,9
	.half	.L389-.L388
	.byte	3,2,1,5,21,9
	.half	.L477-.L389
	.byte	3,6,1,5,28,9
	.half	.L478-.L477
	.byte	3,123,1,5,20,9
	.half	.L479-.L478
	.byte	1,4,2,5,24,9
	.half	.L239-.L479
	.byte	3,253,3,1,4,1,5,23,9
	.half	.L480-.L239
	.byte	3,128,124,1,5,5,9
	.half	.L240-.L480
	.byte	3,8,1,4,2,5,30,7,9
	.half	.L249-.L240
	.byte	3,248,3,1,5,40,1,5,30,9
	.half	.L250-.L249
	.byte	1,5,40,1,5,24,9
	.half	.L251-.L250
	.byte	3,6,1,5,30,9
	.half	.L481-.L251
	.byte	1,5,24,9
	.half	.L482-.L481
	.byte	1,5,40,9
	.half	.L483-.L482
	.byte	1,5,30,9
	.half	.L253-.L483
	.byte	1,4,1,5,80,3,132,124,1,4,2,5,30,9
	.half	.L12-.L253
	.byte	3,246,3,1,5,40,1,5,30,9
	.half	.L263-.L12
	.byte	1,5,40,1,5,30,9
	.half	.L264-.L263
	.byte	3,6,1,5,40,1,5,30,9
	.half	.L265-.L264
	.byte	1,5,40,9
	.half	.L13-.L265
	.byte	1,5,24,9
	.half	.L266-.L13
	.byte	1,4,1,5,5,9
	.half	.L484-.L266
	.byte	3,146,124,1,5,15,9
	.half	.L267-.L484
	.byte	1,5,5,9
	.half	.L485-.L267
	.byte	1,4,2,5,30,7,9
	.half	.L269-.L485
	.byte	3,238,3,1,5,40,1,4,1,5,46,9
	.half	.L270-.L269
	.byte	3,152,124,1,5,49,1,5,102,9
	.half	.L486-.L270
	.byte	3,124,1,4,2,5,30,9
	.half	.L14-.L486
	.byte	3,230,3,1,5,40,1,4,1,5,15,9
	.half	.L15-.L14
	.byte	3,166,124,1,5,5,9
	.half	.L487-.L15
	.byte	1,5,54,7,9
	.half	.L272-.L487
	.byte	3,3,1,5,20,9
	.half	.L377-.L272
	.byte	1,5,35,9
	.half	.L382-.L377
	.byte	3,1,1,5,9,9
	.half	.L378-.L382
	.byte	3,2,1,5,24,7,9
	.half	.L488-.L378
	.byte	3,2,1,5,37,9
	.half	.L489-.L488
	.byte	1,5,24,9
	.half	.L17-.L489
	.byte	3,5,1,5,9,9
	.half	.L490-.L17
	.byte	3,4,1,5,24,7,9
	.half	.L491-.L490
	.byte	3,2,1,9
	.half	.L492-.L491
	.byte	3,3,1,5,37,9
	.half	.L493-.L492
	.byte	3,125,1,5,24,9
	.half	.L19-.L493
	.byte	3,7,1,9
	.half	.L494-.L19
	.byte	3,3,1,5,33,9
	.half	.L495-.L494
	.byte	3,3,1,5,24,9
	.half	.L383-.L495
	.byte	3,125,1,5,34,9
	.half	.L496-.L383
	.byte	1,5,33,9
	.half	.L497-.L496
	.byte	3,3,1,5,30,9
	.half	.L16-.L497
	.byte	3,6,1,5,22,9
	.half	.L385-.L16
	.byte	3,2,1,5,31,9
	.half	.L498-.L385
	.byte	1,5,15,9
	.half	.L499-.L498
	.byte	3,3,1,5,5,9
	.half	.L500-.L499
	.byte	1,5,24,7,9
	.half	.L501-.L500
	.byte	3,2,1,5,36,9
	.half	.L502-.L501
	.byte	1,9
	.half	.L503-.L502
	.byte	3,1,1,9
	.half	.L504-.L503
	.byte	3,14,1,5,34,1,5,1,9
	.half	.L505-.L504
	.byte	3,35,1,5,24,7,9
	.half	.L21-.L505
	.byte	3,99,1,5,36,9
	.half	.L506-.L21
	.byte	1,9
	.half	.L507-.L506
	.byte	3,1,1,5,26,9
	.half	.L508-.L507
	.byte	3,13,1,5,36,9
	.half	.L509-.L508
	.byte	1,5,26,9
	.half	.L510-.L509
	.byte	3,1,1,5,36,9
	.half	.L511-.L510
	.byte	1,5,19,9
	.half	.L512-.L511
	.byte	3,3,1,5,9,9
	.half	.L513-.L512
	.byte	1,5,30,7,9
	.half	.L514-.L513
	.byte	3,2,1,5,40,9
	.half	.L515-.L514
	.byte	1,5,30,9
	.half	.L516-.L515
	.byte	3,1,1,5,40,9
	.half	.L517-.L516
	.byte	1,5,30,9
	.half	.L23-.L517
	.byte	3,3,1,5,28,1,5,34,9
	.half	.L24-.L23
	.byte	3,2,1,5,45,9
	.half	.L518-.L24
	.byte	1,5,1,7,9
	.half	.L519-.L518
	.byte	3,3,1,7,9
	.half	.L134-.L519
	.byte	0,1,1
.L474:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_ranges'
.L133:
	.word	-1,.L97,0,.L134-.L97,0,0
.L235:
	.word	-1,.L97,0,.L230-.L97,-1,.L101,0,.L224-.L101,-1,.L105,0,.L214-.L105,0,0
.L248:
	.word	-1,.L97,.L239-.L97,.L240-.L97,.L249-.L97,.L250-.L97,0,0
.L268:
	.word	-1,.L97,.L266-.L97,.L267-.L97,.L269-.L97,.L270-.L97,0,0
.L271:
	.word	-1,.L97,.L272-.L97,.L16-.L97,-1,.L99,0,.L229-.L99,-1,.L103,0,.L219-.L103,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_info'
.L135:
	.word	280
	.half	3
	.word	.L136
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L138,.L137
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_initHsctModuleConfig',0,1,167,2,6,1,1,1
	.word	.L107,.L275,.L106
	.byte	4
	.byte	'config',0,1,167,2,61
	.word	.L276,.L277
	.byte	4
	.byte	'hsct',0,1,167,2,79
	.word	.L236,.L278
	.byte	5
	.word	.L107,.L275
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_abbrev'
.L136:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_line'
.L137:
	.word	.L521-.L520
.L520:
	.half	3
	.word	.L523-.L522
.L522:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L523:
	.byte	5,18,7,0,5,2
	.word	.L107
	.byte	3,168,2,1,5,29,9
	.half	.L524-.L107
	.byte	3,3,1,5,27,1,9
	.half	.L525-.L524
	.byte	3,3,1,9
	.half	.L526-.L525
	.byte	3,2,1,5,1,9
	.half	.L527-.L526
	.byte	3,1,1,7,9
	.half	.L139-.L527
	.byte	0,1,1
.L521:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_ranges'
.L138:
	.word	-1,.L107,0,.L139-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_info'
.L140:
	.word	296
	.half	3
	.word	.L141
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L143,.L142
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_initHsslModule',0,1,181,2,6,1,1,1
	.word	.L109,.L279,.L108
	.byte	4
	.byte	'hssl',0,1,181,2,48
	.word	.L280,.L281
	.byte	4
	.byte	'config',0,1,181,2,81
	.word	.L282,.L283
	.byte	5
	.word	.L109,.L279
	.byte	6
	.byte	'hsslSFR',0,1,183,2,15
	.word	.L284,.L285
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_abbrev'
.L141:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_line'
.L142:
	.word	.L529-.L528
.L528:
	.half	3
	.word	.L531-.L530
.L530:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L531:
	.byte	5,6,7,0,5,2
	.word	.L109
	.byte	3,180,2,1,5,31,9
	.half	.L392-.L109
	.byte	3,2,1,5,16,9
	.half	.L393-.L392
	.byte	3,2,1,5,30,9
	.half	.L532-.L393
	.byte	3,3,1,5,19,9
	.half	.L390-.L532
	.byte	3,1,1,5,35,9
	.half	.L533-.L390
	.byte	1,5,27,9
	.half	.L534-.L533
	.byte	1,5,19,9
	.half	.L535-.L534
	.byte	3,1,1,5,27,9
	.half	.L536-.L535
	.byte	1,5,53,9
	.half	.L537-.L536
	.byte	3,3,1,5,30,9
	.half	.L538-.L537
	.byte	1,5,53,9
	.half	.L539-.L538
	.byte	3,1,1,5,30,9
	.half	.L540-.L539
	.byte	1,5,53,9
	.half	.L541-.L540
	.byte	3,1,1,5,30,9
	.half	.L542-.L541
	.byte	1,5,53,9
	.half	.L543-.L542
	.byte	3,1,1,5,30,9
	.half	.L544-.L543
	.byte	1,5,53,9
	.half	.L545-.L544
	.byte	3,1,1,5,30,9
	.half	.L546-.L545
	.byte	1,5,53,9
	.half	.L547-.L546
	.byte	3,1,1,5,30,9
	.half	.L548-.L547
	.byte	1,5,53,9
	.half	.L549-.L548
	.byte	3,1,1,5,30,9
	.half	.L550-.L549
	.byte	1,5,53,9
	.half	.L551-.L550
	.byte	3,1,1,5,30,9
	.half	.L552-.L551
	.byte	1,5,32,9
	.half	.L553-.L552
	.byte	3,2,1,5,30,9
	.half	.L554-.L553
	.byte	1,5,24,9
	.half	.L555-.L554
	.byte	3,2,1,5,30,9
	.half	.L556-.L555
	.byte	1,5,48,9
	.half	.L557-.L556
	.byte	3,1,1,5,30,9
	.half	.L558-.L557
	.byte	1,5,29,9
	.half	.L25-.L558
	.byte	3,2,1,5,33,9
	.half	.L559-.L25
	.byte	1,5,1,7,9
	.half	.L560-.L559
	.byte	3,2,1,7,9
	.half	.L144-.L560
	.byte	0,1,1
.L529:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_ranges'
.L143:
	.word	-1,.L109,0,.L144-.L109,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_info'
.L145:
	.word	280
	.half	3
	.word	.L146
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L148,.L147
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_initHsslModuleConfig',0,1,212,2,6,1,1,1
	.word	.L111,.L286,.L110
	.byte	4
	.byte	'config',0,1,212,2,61
	.word	.L287,.L288
	.byte	4
	.byte	'hssl',0,1,212,2,79
	.word	.L284,.L289
	.byte	5
	.word	.L111,.L286
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_abbrev'
.L146:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_line'
.L147:
	.word	.L562-.L561
.L561:
	.half	3
	.word	.L564-.L563
.L563:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L564:
	.byte	5,18,7,0,5,2
	.word	.L111
	.byte	3,213,2,1,5,35,9
	.half	.L565-.L111
	.byte	3,3,1,5,33,1,5,35,9
	.half	.L566-.L565
	.byte	3,1,1,5,33,1,9
	.half	.L567-.L566
	.byte	3,1,1,9
	.half	.L568-.L567
	.byte	3,1,1,9
	.half	.L569-.L568
	.byte	3,1,1,9
	.half	.L570-.L569
	.byte	3,1,1,9
	.half	.L571-.L570
	.byte	3,1,1,9
	.half	.L572-.L571
	.byte	3,1,1,5,26,9
	.half	.L573-.L572
	.byte	3,3,1,5,24,1,5,1,9
	.half	.L574-.L573
	.byte	3,1,1,7,9
	.half	.L149-.L574
	.byte	0,1,1
.L562:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_ranges'
.L148:
	.word	-1,.L111,0,.L149-.L111,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_info'
.L150:
	.word	281
	.half	3
	.word	.L151
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L153,.L152
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_initChannel',0,1,131,1,6,1,1,1
	.word	.L93,.L290,.L92
	.byte	4
	.byte	'channel',0,1,131,1,53
	.word	.L291,.L292
	.byte	4
	.byte	'channelConfig',0,1,131,1,96
	.word	.L293,.L294
	.byte	5
	.word	.L93,.L290
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_abbrev'
.L151:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_line'
.L152:
	.word	.L576-.L575
.L575:
	.half	3
	.word	.L578-.L577
.L577:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L578:
	.byte	5,49,7,0,5,2
	.word	.L93
	.byte	3,132,1,1,5,34,9
	.half	.L579-.L93
	.byte	1,5,49,9
	.half	.L580-.L579
	.byte	3,1,1,5,34,9
	.half	.L581-.L580
	.byte	1,5,49,9
	.half	.L582-.L581
	.byte	3,2,1,5,34,9
	.half	.L583-.L582
	.byte	1,5,36,9
	.half	.L584-.L583
	.byte	3,1,1,5,34,1,5,36,9
	.half	.L585-.L584
	.byte	3,2,1,5,34,1,5,49,9
	.half	.L586-.L585
	.byte	3,1,1,5,34,9
	.half	.L587-.L586
	.byte	1,5,49,9
	.half	.L588-.L587
	.byte	3,1,1,5,34,9
	.half	.L589-.L588
	.byte	1,5,1,9
	.half	.L590-.L589
	.byte	3,1,1,7,9
	.half	.L154-.L590
	.byte	0,1,1
.L576:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_ranges'
.L153:
	.word	-1,.L93,0,.L154-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_info'
.L155:
	.word	302
	.half	3
	.word	.L156
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L158,.L157
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_initChannelConfig',0,1,145,1,6,1,1,1
	.word	.L95,.L295,.L94
	.byte	4
	.byte	'channelConfig',0,1,145,1,65
	.word	.L296,.L297
	.byte	4
	.byte	'hssl',0,1,145,1,94
	.word	.L280,.L298
	.byte	4
	.byte	'hsct',0,1,145,1,114
	.word	.L231,.L299
	.byte	5
	.word	.L95,.L295
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_abbrev'
.L156:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_line'
.L157:
	.word	.L592-.L591
.L591:
	.half	3
	.word	.L594-.L593
.L593:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L594:
	.byte	5,40,7,0,5,2
	.word	.L95
	.byte	3,146,1,1,5,34,9
	.half	.L595-.L95
	.byte	1,5,36,9
	.half	.L596-.L595
	.byte	3,3,1,5,40,9
	.half	.L597-.L596
	.byte	3,126,1,5,34,9
	.half	.L598-.L597
	.byte	1,9
	.half	.L599-.L598
	.byte	3,2,1,5,36,9
	.half	.L600-.L599
	.byte	3,1,1,5,34,1,5,40,9
	.half	.L601-.L600
	.byte	3,1,1,5,34,9
	.half	.L602-.L601
	.byte	1,5,40,9
	.half	.L603-.L602
	.byte	3,1,1,5,34,9
	.half	.L604-.L603
	.byte	1,5,1,9
	.half	.L605-.L604
	.byte	3,1,1,7,9
	.half	.L159-.L605
	.byte	0,1,1
.L592:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_ranges'
.L158:
	.word	-1,.L95,0,.L159-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_info'
.L160:
	.word	296
	.half	3
	.word	.L161
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L163,.L162
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_read',0,1,218,3,21
	.word	.L300
	.byte	1,1,1
	.word	.L115,.L301,.L114
	.byte	4
	.byte	'channel',0,1,218,3,61
	.word	.L291,.L302
	.byte	4
	.byte	'address',0,1,218,3,77
	.word	.L303,.L304
	.byte	4
	.byte	'dataLength',0,1,218,3,105
	.word	.L305,.L306
	.byte	5
	.word	.L115,.L301
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_abbrev'
.L161:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_line'
.L162:
	.word	.L607-.L606
.L606:
	.half	3
	.word	.L609-.L608
.L608:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L609:
	.byte	5,21,7,0,5,2
	.word	.L115
	.byte	3,217,3,1,5,53,9
	.half	.L451-.L115
	.byte	3,3,1,5,99,9
	.half	.L448-.L451
	.byte	1,5,105,9
	.half	.L610-.L448
	.byte	1,5,1,9
	.half	.L164-.L610
	.byte	3,1,0,1,1
.L607:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_ranges'
.L163:
	.word	-1,.L115,0,.L164-.L115,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_info'
.L165:
	.word	301
	.half	3
	.word	.L166
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L168,.L167
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_sendControlCommand',0,1,225,3,6,1,1,1
	.word	.L117,.L307,.L116
	.byte	4
	.byte	'hsct',0,1,225,3,52
	.word	.L231,.L308
	.byte	4
	.byte	'command',0,1,225,3,64
	.word	.L309,.L310
	.byte	5
	.word	.L117,.L307
	.byte	6
	.byte	'hsctSFR',0,1,227,3,15
	.word	.L236,.L311
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_abbrev'
.L166:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_line'
.L167:
	.word	.L612-.L611
.L611:
	.half	3
	.word	.L614-.L613
.L613:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L614:
	.byte	5,29,7,0,5,2
	.word	.L117
	.byte	3,226,3,1,9
	.half	.L452-.L117
	.byte	3,2,1,5,22,9
	.half	.L615-.L452
	.byte	3,1,1,5,29,9
	.half	.L616-.L615
	.byte	1,5,24,9
	.half	.L617-.L616
	.byte	3,2,1,5,1,7,9
	.half	.L169-.L617
	.byte	3,1,0,1,1
.L612:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_ranges'
.L168:
	.word	-1,.L117,0,.L169-.L117,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_info'
.L170:
	.word	377
	.half	3
	.word	.L171
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L173,.L172
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_singleFrameRequest',0,1,236,3,21
	.word	.L300
	.byte	1,1,1
	.word	.L119,.L312,.L118
	.byte	4
	.byte	'channel',0,1,236,3,75
	.word	.L291,.L313
	.byte	4
	.byte	'frameRequest',0,1,236,3,110
	.word	.L314,.L315
	.byte	4
	.byte	'address',0,1,236,3,131,1
	.word	.L303,.L316
	.byte	4
	.byte	'data',0,1,236,3,147,1
	.word	.L303,.L317
	.byte	4
	.byte	'dataLength',0,1,236,3,172,1
	.word	.L305,.L318
	.byte	5
	.word	.L119,.L312
	.byte	6
	.byte	'hsslI',0,1,238,3,17
	.word	.L319,.L320
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_abbrev'
.L171:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_line'
.L172:
	.word	.L619-.L618
.L618:
	.half	3
	.word	.L621-.L620
.L620:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L621:
	.byte	5,47,7,0,5,2
	.word	.L119
	.byte	3,237,3,1,5,64,9
	.half	.L622-.L119
	.byte	1,5,56,9
	.half	.L623-.L622
	.byte	1,5,16,9
	.half	.L624-.L623
	.byte	3,2,1,5,56,9
	.half	.L625-.L624
	.byte	3,126,1,5,5,9
	.half	.L453-.L625
	.byte	3,2,1,5,16,7,9
	.half	.L626-.L453
	.byte	3,2,1,5,1,3,34,1,5,18,7,9
	.half	.L56-.L626
	.byte	3,97,1,5,26,9
	.half	.L627-.L56
	.byte	1,5,28,9
	.half	.L628-.L627
	.byte	3,1,1,5,26,1,5,10,9
	.half	.L629-.L628
	.byte	3,4,1,7,9
	.half	.L630-.L629
	.byte	3,4,1,9
	.half	.L631-.L630
	.byte	3,5,1,7,9
	.half	.L632-.L631
	.byte	3,5,1,5,1,7,9
	.half	.L633-.L632
	.byte	3,12,1,5,22,7,9
	.half	.L58-.L633
	.byte	3,103,1,5,27,9
	.half	.L634-.L58
	.byte	1,5,9,9
	.half	.L635-.L634
	.byte	3,2,1,5,22,9
	.half	.L59-.L635
	.byte	3,2,1,5,27,9
	.half	.L636-.L59
	.byte	1,5,9,3,3,1,5,22,9
	.half	.L60-.L636
	.byte	3,2,1,5,27,9
	.half	.L637-.L60
	.byte	1,9
	.half	.L638-.L637
	.byte	3,1,1,9
	.half	.L63-.L638
	.byte	3,1,1,5,9,9
	.half	.L639-.L63
	.byte	3,1,1,5,22,9
	.half	.L61-.L639
	.byte	3,3,1,5,27,9
	.half	.L640-.L61
	.byte	1,5,34,9
	.half	.L65-.L640
	.byte	3,7,1,5,12,9
	.half	.L641-.L65
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L174-.L641
	.byte	0,1,1
.L619:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_ranges'
.L173:
	.word	-1,.L119,0,.L174-.L119,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_info'
.L175:
	.word	396
	.half	3
	.word	.L176
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L178,.L177
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_waitAcknowledge',0,1,151,4,21
	.word	.L300
	.byte	1,1,1
	.word	.L121,.L321,.L120
	.byte	4
	.byte	'channel',0,1,151,4,72
	.word	.L291,.L322
	.byte	5
	.word	.L121,.L321
	.byte	6
	.byte	'requestType',0,1,153,4,23
	.word	.L303,.L323
	.byte	7
	.word	.L324
	.byte	6
	.byte	'qFlags',0,1,181,4,16
	.word	.L303,.L328
	.byte	6
	.byte	'mFlags',0,1,182,4,16
	.word	.L303,.L329
	.byte	6
	.byte	'acknwoledgeFlagsMask',0,1,183,4,16
	.word	.L303,.L330
	.byte	6
	.byte	'errorFlagsMask',0,1,184,4,16
	.word	.L303,.L331
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_abbrev'
.L176:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_line'
.L177:
	.word	.L643-.L642
.L642:
	.half	3
	.word	.L645-.L644
.L644:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L645:
	.byte	5,44,7,0,5,2
	.word	.L121
	.byte	3,152,4,1,9
	.half	.L646-.L121
	.byte	3,1,1,5,35,9
	.half	.L647-.L646
	.byte	3,127,1,5,9,9
	.half	.L454-.L647
	.byte	3,3,1,5,55,7,9
	.half	.L648-.L454
	.byte	1,5,68,9
	.half	.L649-.L648
	.byte	1,5,73,9
	.half	.L650-.L649
	.byte	1,5,39,7,9
	.half	.L71-.L650
	.byte	3,2,1,5,43,9
	.half	.L651-.L71
	.byte	1,7,9
	.half	.L652-.L651
	.byte	1,5,9,9
	.half	.L69-.L652
	.byte	3,7,1,5,55,3,119,1,5,25,9
	.half	.L653-.L69
	.byte	3,11,1,5,13,9
	.half	.L654-.L653
	.byte	3,4,1,5,116,7,9
	.half	.L655-.L654
	.byte	1,5,25,7,9
	.half	.L74-.L655
	.byte	3,2,1,5,9,9
	.half	.L75-.L74
	.byte	3,3,1,5,60,3,5,1,5,70,9
	.half	.L325-.L75
	.byte	3,2,1,5,60,3,127,1,5,25,9
	.half	.L326-.L325
	.byte	3,124,1,5,60,9
	.half	.L327-.L326
	.byte	3,5,1,5,53,9
	.half	.L656-.L327
	.byte	1,5,92,9
	.half	.L455-.L656
	.byte	1,5,94,9
	.half	.L657-.L455
	.byte	1,5,89,9
	.half	.L458-.L657
	.byte	1,5,56,9
	.half	.L658-.L458
	.byte	3,1,1,5,61,9
	.half	.L659-.L658
	.byte	1,5,30,9
	.half	.L660-.L659
	.byte	3,2,1,5,29,9
	.half	.L661-.L660
	.byte	1,5,41,9
	.half	.L662-.L661
	.byte	3,126,1,5,47,9
	.half	.L663-.L662
	.byte	3,2,1,5,53,9
	.half	.L459-.L663
	.byte	3,126,1,5,9,9
	.half	.L664-.L459
	.byte	3,2,1,5,20,7,9
	.half	.L665-.L664
	.byte	3,5,1,5,9,9
	.half	.L456-.L665
	.byte	1,5,20,7,9
	.half	.L77-.L456
	.byte	3,2,1,5,1,3,14,1,5,20,7,9
	.half	.L78-.L77
	.byte	3,117,1,5,9,9
	.half	.L457-.L78
	.byte	1,5,44,7,9
	.half	.L666-.L457
	.byte	3,2,1,5,42,1,5,20,9
	.half	.L667-.L666
	.byte	3,1,1,5,1,3,8,1,5,40,7,9
	.half	.L80-.L667
	.byte	3,124,1,5,38,1,5,12,9
	.half	.L72-.L80
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L179-.L72
	.byte	0,1,1
.L643:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_ranges'
.L178:
	.word	-1,.L121,0,.L179-.L121,0,0
.L324:
	.word	-1,.L121,.L325-.L121,.L326-.L121,.L327-.L121,.L72-.L121,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_info'
.L180:
	.word	315
	.half	3
	.word	.L181
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L183,.L182
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_write',0,1,210,4,21
	.word	.L300
	.byte	1,1,1
	.word	.L123,.L332,.L122
	.byte	4
	.byte	'channel',0,1,210,4,62
	.word	.L291,.L333
	.byte	4
	.byte	'address',0,1,210,4,78
	.word	.L303,.L334
	.byte	4
	.byte	'data',0,1,210,4,94
	.word	.L303,.L335
	.byte	4
	.byte	'dataLength',0,1,210,4,119
	.word	.L305,.L336
	.byte	5
	.word	.L123,.L332
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_abbrev'
.L181:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_line'
.L182:
	.word	.L669-.L668
.L668:
	.half	3
	.word	.L671-.L670
.L670:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L671:
	.byte	5,21,7,0,5,2
	.word	.L123
	.byte	3,209,4,1,5,53,9
	.half	.L465-.L123
	.byte	3,2,1,5,106,9
	.half	.L460-.L465
	.byte	1,5,1,9
	.half	.L184-.L460
	.byte	3,1,0,1,1
.L669:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_ranges'
.L183:
	.word	-1,.L123,0,.L184-.L123,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_info'
.L185:
	.word	270
	.half	3
	.word	.L186
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L188,.L187
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_checkErrors',0,1,53,6,1,1,1
	.word	.L87,.L337,.L86
	.byte	4
	.byte	'hssl',0,1,53,45
	.word	.L280,.L338
	.byte	5
	.word	.L87,.L337
	.byte	6
	.byte	'hsslSFR',0,1,55,15
	.word	.L284,.L339
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_abbrev'
.L186:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_line'
.L187:
	.word	.L673-.L672
.L672:
	.half	3
	.word	.L675-.L674
.L674:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L675:
	.byte	5,29,7,0,5,2
	.word	.L87
	.byte	3,54,1,5,26,9
	.half	.L374-.L87
	.byte	3,3,1,5,5,9
	.half	.L676-.L374
	.byte	1,5,25,7,9
	.half	.L677-.L676
	.byte	3,2,1,5,46,9
	.half	.L678-.L677
	.byte	1,5,26,9
	.half	.L2-.L678
	.byte	3,3,1,5,5,9
	.half	.L679-.L2
	.byte	1,5,25,7,9
	.half	.L680-.L679
	.byte	3,2,1,5,46,9
	.half	.L681-.L680
	.byte	1,5,26,9
	.half	.L3-.L681
	.byte	3,3,1,5,5,9
	.half	.L682-.L3
	.byte	1,5,25,7,9
	.half	.L683-.L682
	.byte	3,2,1,5,39,9
	.half	.L684-.L683
	.byte	1,5,26,9
	.half	.L4-.L684
	.byte	3,3,1,5,5,9
	.half	.L685-.L4
	.byte	1,5,25,7,9
	.half	.L686-.L685
	.byte	3,2,1,5,42,9
	.half	.L687-.L686
	.byte	1,5,26,9
	.half	.L5-.L687
	.byte	3,3,1,5,5,9
	.half	.L688-.L5
	.byte	1,5,25,7,9
	.half	.L689-.L688
	.byte	3,2,1,5,48,9
	.half	.L690-.L689
	.byte	1,5,26,9
	.half	.L6-.L690
	.byte	3,3,1,5,5,9
	.half	.L691-.L6
	.byte	1,5,25,7,9
	.half	.L692-.L691
	.byte	3,2,1,5,41,9
	.half	.L693-.L692
	.byte	1,5,26,9
	.half	.L7-.L693
	.byte	3,3,1,5,5,9
	.half	.L694-.L7
	.byte	1,5,25,7,9
	.half	.L695-.L694
	.byte	3,2,1,5,49,9
	.half	.L696-.L695
	.byte	1,5,26,9
	.half	.L8-.L696
	.byte	3,3,1,5,5,9
	.half	.L697-.L8
	.byte	1,5,25,7,9
	.half	.L698-.L697
	.byte	3,2,1,5,42,9
	.half	.L699-.L698
	.byte	1,5,26,9
	.half	.L9-.L699
	.byte	3,3,1,5,5,9
	.half	.L700-.L9
	.byte	1,5,25,7,9
	.half	.L701-.L700
	.byte	3,2,1,5,35,9
	.half	.L702-.L701
	.byte	1,5,1,9
	.half	.L10-.L702
	.byte	3,2,1,7,9
	.half	.L189-.L10
	.byte	0,1,1
.L673:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_ranges'
.L188:
	.word	-1,.L87,0,.L189-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_info'
.L190:
	.word	253
	.half	3
	.word	.L191
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L193,.L192
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_clearErrorFlags',0,1,105,6,1,1,1
	.word	.L89,.L340,.L88
	.byte	4
	.byte	'hssl',0,1,105,49
	.word	.L280,.L341
	.byte	5
	.word	.L89,.L340
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_abbrev'
.L191:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_line'
.L192:
	.word	.L704-.L703
.L703:
	.half	3
	.word	.L706-.L705
.L705:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L706:
	.byte	5,47,7,0,5,2
	.word	.L89
	.byte	3,234,0,1,5,45,1,5,1,9
	.half	.L707-.L89
	.byte	3,9,1,7,9
	.half	.L194-.L707
	.byte	0,1,1
.L704:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_ranges'
.L193:
	.word	-1,.L89,0,.L194-.L89,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_info'
.L195:
	.word	258
	.half	3
	.word	.L196
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L198,.L197
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_delay',0,1,119,6,1,1,1
	.word	.L91,.L342,.L90
	.byte	4
	.byte	'hsct',0,1,119,39
	.word	.L231,.L343
	.byte	5
	.word	.L91,.L342
	.byte	6
	.byte	'i',0,1,121,12
	.word	.L303,.L344
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_abbrev'
.L196:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_line'
.L197:
	.word	.L709-.L708
.L708:
	.half	3
	.word	.L711-.L710
.L710:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L711:
	.byte	5,25,7,0,5,2
	.word	.L91
	.byte	3,251,0,1,5,14,9
	.half	.L11-.L91
	.byte	3,2,1,5,25,9
	.half	.L712-.L11
	.byte	3,126,1,5,1,7,9
	.half	.L713-.L712
	.byte	3,4,1,7,9
	.half	.L199-.L713
	.byte	0,1,1
.L709:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_ranges'
.L198:
	.word	-1,.L91,0,.L199-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_info'
.L200:
	.word	443
	.half	3
	.word	.L201
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L203,.L202
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_prepareStream',0,1,231,2,21
	.word	.L300
	.byte	1,1,1
	.word	.L113,.L345,.L112
	.byte	4
	.byte	'channel',0,1,231,2,70
	.word	.L291,.L346
	.byte	4
	.byte	'slaveTargetAddress',0,1,231,2,86
	.word	.L303,.L347
	.byte	4
	.byte	'count',0,1,231,2,116
	.word	.L348,.L349
	.byte	5
	.word	.L113,.L345
	.byte	6
	.byte	'tsfcReg',0,1,234,2,23
	.word	.L350,.L351
	.byte	7
	.word	.L352,.L353,.L354
	.byte	8
	.word	.L355,.L356
	.byte	9
	.word	.L357,.L358
	.byte	0,7
	.word	.L352,.L359,.L360
	.byte	8
	.word	.L355,.L356
	.byte	0,7
	.word	.L352,.L361,.L362
	.byte	8
	.word	.L355,.L356
	.byte	9
	.word	.L357,.L363
	.byte	0,7
	.word	.L352,.L364,.L365
	.byte	8
	.word	.L355,.L356
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_abbrev'
.L201:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85
	.byte	6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_line'
.L202:
	.word	.L715-.L714
.L714:
	.half	3
	.word	.L717-.L716
.L716:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.h',0,0,0,0,0
.L717:
	.byte	5,21,7,0,5,2
	.word	.L113
	.byte	3,230,2,1,5,42,9
	.half	.L396-.L113
	.byte	3,2,1,5,21,9
	.half	.L397-.L396
	.byte	3,126,1,5,5,9
	.half	.L398-.L397
	.byte	3,5,1,5,46,7,9
	.half	.L718-.L398
	.byte	3,6,1,5,100,1,5,138,1,9
	.half	.L395-.L718
	.byte	1,5,106,9
	.half	.L719-.L395
	.byte	1,5,138,1,1,5,75,9
	.half	.L394-.L719
	.byte	3,2,1,5,42,9
	.half	.L28-.L394
	.byte	3,2,1,5,9,9
	.half	.L400-.L28
	.byte	1,5,41,7,9
	.half	.L27-.L400
	.byte	3,126,1,5,75,9
	.half	.L402-.L27
	.byte	1,5,48,7,9
	.half	.L720-.L402
	.byte	3,10,1,5,63,9
	.half	.L721-.L720
	.byte	1,5,54,9
	.half	.L403-.L721
	.byte	1,5,63,1,5,75,9
	.half	.L404-.L403
	.byte	3,2,1,5,42,9
	.half	.L31-.L404
	.byte	3,2,1,5,9,9
	.half	.L406-.L31
	.byte	1,5,41,7,9
	.half	.L30-.L406
	.byte	3,126,1,5,75,9
	.half	.L408-.L30
	.byte	1,4,2,5,47,7,9
	.half	.L353-.L408
	.byte	3,155,3,1,5,64,9
	.half	.L722-.L353
	.byte	1,4,1,5,122,9
	.half	.L354-.L722
	.byte	3,240,124,1,4,2,5,64,9
	.half	.L359-.L354
	.byte	3,144,3,1,5,56,9
	.half	.L723-.L359
	.byte	1,4,1,5,46,9
	.half	.L360-.L723
	.byte	3,240,124,1,5,106,1,5,122,9
	.half	.L724-.L360
	.byte	1,4,2,5,22,3,145,3,1,4,1,5,122,9
	.half	.L410-.L724
	.byte	3,239,124,1,5,75,9
	.half	.L409-.L410
	.byte	3,2,1,5,42,9
	.half	.L34-.L409
	.byte	3,2,1,5,9,9
	.half	.L414-.L34
	.byte	1,5,41,7,9
	.half	.L33-.L414
	.byte	3,126,1,5,75,9
	.half	.L416-.L33
	.byte	1,5,46,7,9
	.half	.L725-.L416
	.byte	3,9,1,5,100,1,5,153,1,9
	.half	.L411-.L725
	.byte	1,5,106,9
	.half	.L417-.L411
	.byte	1,5,121,9
	.half	.L726-.L417
	.byte	1,5,153,1,1,5,75,9
	.half	.L418-.L726
	.byte	3,2,1,5,42,9
	.half	.L37-.L418
	.byte	3,2,1,5,9,9
	.half	.L420-.L37
	.byte	1,5,41,7,9
	.half	.L36-.L420
	.byte	3,126,1,5,75,9
	.half	.L422-.L36
	.byte	1,5,122,7,9
	.half	.L727-.L422
	.byte	3,9,1,5,100,1,5,46,9
	.half	.L423-.L727
	.byte	1,5,122,1,5,106,9
	.half	.L425-.L423
	.byte	1,5,122,9
	.half	.L728-.L425
	.byte	1,5,75,9
	.half	.L424-.L728
	.byte	3,2,1,5,42,9
	.half	.L40-.L424
	.byte	3,2,1,5,9,9
	.half	.L427-.L40
	.byte	1,5,41,7,9
	.half	.L39-.L427
	.byte	3,126,1,5,75,9
	.half	.L429-.L39
	.byte	1,5,17,7,9
	.half	.L729-.L429
	.byte	3,9,1,5,10,9
	.half	.L730-.L729
	.byte	1,5,52,7,9
	.half	.L731-.L730
	.byte	3,3,1,5,65,9
	.half	.L732-.L731
	.byte	1,5,58,9
	.half	.L430-.L732
	.byte	1,5,65,1,5,79,9
	.half	.L431-.L430
	.byte	3,2,1,5,46,9
	.half	.L44-.L431
	.byte	3,2,1,5,13,9
	.half	.L433-.L44
	.byte	1,5,45,7,9
	.half	.L43-.L433
	.byte	3,126,1,5,79,9
	.half	.L435-.L43
	.byte	1,4,2,5,47,7,9
	.half	.L361-.L435
	.byte	3,234,2,1,5,64,9
	.half	.L733-.L361
	.byte	1,4,1,5,67,9
	.half	.L362-.L733
	.byte	3,159,125,1,4,2,5,64,9
	.half	.L364-.L362
	.byte	3,225,2,1,5,56,9
	.half	.L734-.L364
	.byte	1,5,22,9
	.half	.L735-.L734
	.byte	3,1,1,4,1,5,48,9
	.half	.L365-.L735
	.byte	3,158,125,1,5,9,9
	.half	.L736-.L365
	.byte	1,5,54,7,9
	.half	.L737-.L736
	.byte	3,3,1,5,108,1,5,133,1,9
	.half	.L738-.L737
	.byte	1,5,114,9
	.half	.L436-.L738
	.byte	1,5,133,1,1,5,83,9
	.half	.L437-.L436
	.byte	3,2,1,5,50,9
	.half	.L48-.L437
	.byte	3,2,1,5,17,9
	.half	.L439-.L48
	.byte	1,5,49,7,9
	.half	.L47-.L439
	.byte	3,126,1,5,83,9
	.half	.L441-.L47
	.byte	1,5,50,7,9
	.half	.L46-.L441
	.byte	3,10,1,5,104,1,5,135,1,9
	.half	.L739-.L46
	.byte	1,5,110,9
	.half	.L442-.L739
	.byte	1,5,121,9
	.half	.L740-.L442
	.byte	3,77,1,5,135,1,3,51,1,5,79,9
	.half	.L443-.L740
	.byte	3,2,1,5,46,9
	.half	.L51-.L443
	.byte	3,2,1,5,13,9
	.half	.L445-.L51
	.byte	1,5,24,7,9
	.half	.L26-.L445
	.byte	3,2,1,5,1,3,8,1,5,45,7,9
	.half	.L50-.L26
	.byte	3,116,1,5,79,9
	.half	.L447-.L50
	.byte	1,5,32,7,9
	.half	.L42-.L447
	.byte	3,9,1,5,30,1,5,1,9
	.half	.L741-.L42
	.byte	3,3,1,7,9
	.half	.L204-.L741
	.byte	0,1,1
.L715:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_ranges'
.L203:
	.word	-1,.L113,0,.L204-.L113,0,0
.L358:
	.word	-1,.L113,.L353-.L113,.L354-.L113,.L359-.L113,.L360-.L113,0,0
.L363:
	.word	-1,.L113,.L361-.L113,.L362-.L113,.L364-.L113,.L365-.L113,0,0
	.sdecl	'.debug_info',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_info'
.L205:
	.word	334
	.half	3
	.word	.L206
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L208,.L207
	.byte	2
	.word	.L126
	.byte	3
	.byte	'IfxHssl_Hssl_writeStream',0,1,216,4,21
	.word	.L300
	.byte	1,1,1
	.word	.L125,.L366,.L124
	.byte	4
	.byte	'hssl',0,1,216,4,60
	.word	.L280,.L367
	.byte	4
	.byte	'data',0,1,216,4,74
	.word	.L368,.L369
	.byte	4
	.byte	'count',0,1,216,4,90
	.word	.L348,.L370
	.byte	5
	.word	.L125,.L366
	.byte	6
	.byte	'hsslSFR',0,1,218,4,27
	.word	.L284,.L371
	.byte	6
	.byte	'hsslIS',0,1,219,4,27
	.word	.L372,.L373
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_abbrev'
.L206:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_line'
.L207:
	.word	.L743-.L742
.L742:
	.half	3
	.word	.L745-.L744
.L744:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L745:
	.byte	5,47,7,0,5,2
	.word	.L125
	.byte	3,217,4,1,5,60,9
	.half	.L466-.L125
	.byte	3,5,1,5,50,9
	.half	.L467-.L466
	.byte	1,9
	.half	.L746-.L467
	.byte	3,2,1,5,19,9
	.half	.L747-.L746
	.byte	3,2,1,5,50,9
	.half	.L468-.L747
	.byte	1,5,19,9
	.half	.L748-.L468
	.byte	3,1,1,5,50,9
	.half	.L749-.L748
	.byte	1,5,19,9
	.half	.L750-.L749
	.byte	3,1,1,5,50,9
	.half	.L751-.L750
	.byte	1,5,52,9
	.half	.L752-.L751
	.byte	3,2,1,5,50,1,5,13,9
	.half	.L753-.L752
	.byte	3,3,1,5,5,9
	.half	.L754-.L753
	.byte	1,5,29,7,9
	.half	.L755-.L754
	.byte	3,2,1,5,35,9
	.half	.L756-.L755
	.byte	1,5,25,9
	.half	.L84-.L756
	.byte	3,4,1,5,12,9
	.half	.L757-.L84
	.byte	3,3,1,5,31,9
	.half	.L758-.L757
	.byte	3,125,1,5,1,9
	.half	.L759-.L758
	.byte	3,4,1,7,9
	.half	.L209-.L759
	.byte	0,1,1
.L743:
	.sdecl	'.debug_ranges',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_ranges'
.L208:
	.word	-1,.L125,0,.L209-.L125,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_10')
	.sect	'.debug_info'
.L210:
	.word	208
	.half	3
	.word	.L211
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L213,.L212
	.byte	2
	.word	.L126
	.byte	3
	.byte	'.cocofun_10',0,1,157,1,6,1
	.word	.L105,.L214,.L104
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_10')
	.sect	'.debug_abbrev'
.L211:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_10')
	.sect	'.debug_line'
.L212:
	.word	.L761-.L760
.L760:
	.half	3
	.word	.L763-.L762
.L762:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L763:
	.byte	5,36,7,0,5,2
	.word	.L105
	.byte	3,242,1,1,9
	.half	.L386-.L105
	.byte	3,4,1,5,34,9
	.half	.L764-.L386
	.byte	3,6,1,5,29,9
	.half	.L765-.L764
	.byte	3,2,1,5,34,9
	.half	.L766-.L765
	.byte	1,9
	.half	.L214-.L766
	.byte	0,1,1,5,36,0,5,2
	.word	.L105
	.byte	3,242,1,1,9
	.half	.L386-.L105
	.byte	3,25,1,9
	.half	.L767-.L386
	.byte	3,107,1,9
	.half	.L764-.L767
	.byte	3,27,1,5,29,9
	.half	.L765-.L764
	.byte	3,2,1,5,36,9
	.half	.L766-.L765
	.byte	1,5,34,9
	.half	.L387-.L766
	.byte	3,107,1,7,9
	.half	.L214-.L387
	.byte	0,1,1
.L761:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_10')
	.sect	'.debug_ranges'
.L213:
	.word	-1,.L105,0,.L214-.L105,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_11')
	.sect	'.debug_info'
.L215:
	.word	208
	.half	3
	.word	.L216
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L218,.L217
	.byte	2
	.word	.L126
	.byte	3
	.byte	'.cocofun_11',0,1,157,1,6,1
	.word	.L103,.L219,.L102
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_11')
	.sect	'.debug_abbrev'
.L216:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_11')
	.sect	'.debug_line'
.L217:
	.word	.L769-.L768
.L768:
	.half	3
	.word	.L771-.L770
.L770:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L771:
	.byte	5,24,7,0,5,2
	.word	.L103
	.byte	3,215,1,1,9
	.half	.L380-.L103
	.byte	3,2,1,5,34,9
	.half	.L772-.L380
	.byte	1,9
	.half	.L219-.L772
	.byte	0,1,1,5,24,0,5,2
	.word	.L103
	.byte	3,215,1,1,9
	.half	.L380-.L103
	.byte	3,9,1,5,34,9
	.half	.L772-.L380
	.byte	1,9
	.half	.L381-.L772
	.byte	3,121,1,7,9
	.half	.L219-.L381
	.byte	0,1,1
.L769:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_11')
	.sect	'.debug_ranges'
.L218:
	.word	-1,.L103,0,.L219-.L103,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_12')
	.sect	'.debug_info'
.L220:
	.word	208
	.half	3
	.word	.L221
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L223,.L222
	.byte	2
	.word	.L126
	.byte	3
	.byte	'.cocofun_12',0,1,157,1,6,1
	.word	.L101,.L224,.L100
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_12')
	.sect	'.debug_abbrev'
.L221:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_12')
	.sect	'.debug_line'
.L222:
	.word	.L774-.L773
.L773:
	.half	3
	.word	.L776-.L775
.L775:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L776:
	.byte	5,36,7,0,5,2
	.word	.L101
	.byte	3,241,1,1,5,24,9
	.half	.L777-.L101
	.byte	3,1,1,9
	.half	.L224-.L777
	.byte	0,1,1,5,36,0,5,2
	.word	.L101
	.byte	3,134,2,1,5,24,9
	.half	.L777-.L101
	.byte	3,1,1,9
	.half	.L778-.L777
	.byte	3,107,1,7,9
	.half	.L224-.L778
	.byte	0,1,1,5,36,0,5,2
	.word	.L101
	.byte	3,242,1,1,5,24,9
	.half	.L777-.L101
	.byte	3,4,1,9
	.half	.L778-.L777
	.byte	3,124,1,7,9
	.half	.L224-.L778
	.byte	0,1,1,5,36,0,5,2
	.word	.L101
	.byte	3,135,2,1,5,24,9
	.half	.L777-.L101
	.byte	3,4,1,9
	.half	.L778-.L777
	.byte	3,103,1,7,9
	.half	.L224-.L778
	.byte	0,1,1,5,36,0,5,2
	.word	.L101
	.byte	3,246,1,1,5,24,9
	.half	.L777-.L101
	.byte	3,6,1,9
	.half	.L778-.L777
	.byte	3,118,1,7,9
	.half	.L224-.L778
	.byte	0,1,1,5,36,0,5,2
	.word	.L101
	.byte	3,139,2,1,5,24,9
	.half	.L777-.L101
	.byte	3,6,1,9
	.half	.L778-.L777
	.byte	3,97,1,7,9
	.half	.L224-.L778
	.byte	0,1,1
.L774:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_12')
	.sect	'.debug_ranges'
.L223:
	.word	-1,.L101,0,.L224-.L101,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_13')
	.sect	'.debug_info'
.L225:
	.word	208
	.half	3
	.word	.L226
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L228,.L227
	.byte	2
	.word	.L126
	.byte	3
	.byte	'.cocofun_13',0,1,157,1,6,1
	.word	.L99,.L229,.L98
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_13')
	.sect	'.debug_abbrev'
.L226:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_13')
	.sect	'.debug_line'
.L227:
	.word	.L780-.L779
.L779:
	.half	3
	.word	.L782-.L781
.L781:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl\\IfxHssl_Hssl.c',0,0,0,0,0
.L782:
	.byte	5,24,7,0,5,2
	.word	.L99
	.byte	3,209,1,1,5,34,9
	.half	.L783-.L99
	.byte	1,5,24,9
	.half	.L784-.L783
	.byte	3,1,1,5,34,9
	.half	.L785-.L784
	.byte	1,9
	.half	.L229-.L785
	.byte	0,1,1,5,24,0,5,2
	.word	.L99
	.byte	3,215,1,1,5,34,9
	.half	.L783-.L99
	.byte	1,5,24,9
	.half	.L784-.L783
	.byte	3,1,1,5,34,9
	.half	.L785-.L784
	.byte	1,9
	.half	.L379-.L785
	.byte	3,122,1,7,9
	.half	.L229-.L379
	.byte	0,1,1,5,24,0,5,2
	.word	.L99
	.byte	3,222,1,1,5,34,9
	.half	.L783-.L99
	.byte	1,5,24,9
	.half	.L784-.L783
	.byte	3,1,1,5,34,9
	.half	.L785-.L784
	.byte	1,9
	.half	.L379-.L785
	.byte	3,115,1,7,9
	.half	.L229-.L379
	.byte	0,1,1
.L780:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_13')
	.sect	'.debug_ranges'
.L228:
	.word	-1,.L99,0,.L229-.L99,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_10')
	.sect	'.debug_loc'
.L104:
	.word	-1,.L105,0,.L214-.L105
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_11')
	.sect	'.debug_loc'
.L102:
	.word	-1,.L103,0,.L219-.L103
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_12')
	.sect	'.debug_loc'
.L100:
	.word	-1,.L101,0,.L224-.L101
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_13')
	.sect	'.debug_loc'
.L98:
	.word	-1,.L99,0,.L229-.L99
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_loc'
.L86:
	.word	-1,.L87,0,.L337-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L338:
	.word	-1,.L87,0,.L337-.L87
	.half	1
	.byte	100
	.word	0,0
.L339:
	.word	-1,.L87,.L374-.L87,.L337-.L87
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_loc'
.L88:
	.word	-1,.L89,0,.L340-.L89
	.half	2
	.byte	138,0
	.word	0,0
.L341:
	.word	-1,.L89,0,.L340-.L89
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_loc'
.L90:
	.word	-1,.L91,0,.L342-.L91
	.half	2
	.byte	138,0
	.word	0,0
.L343:
	.word	-1,.L91,0,.L342-.L91
	.half	1
	.byte	100
	.word	0,0
.L344:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_loc'
.L92:
	.word	-1,.L93,0,.L290-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L292:
	.word	-1,.L93,0,.L290-.L93
	.half	1
	.byte	100
	.word	0,0
.L294:
	.word	-1,.L93,0,.L290-.L93
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_loc'
.L94:
	.word	-1,.L95,0,.L295-.L95
	.half	2
	.byte	138,0
	.word	0,0
.L297:
	.word	-1,.L95,0,.L295-.L95
	.half	1
	.byte	100
	.word	0,0
.L299:
	.word	-1,.L95,0,.L295-.L95
	.half	1
	.byte	102
	.word	0,0
.L298:
	.word	-1,.L95,0,.L295-.L95
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_loc'
.L96:
	.word	-1,.L97,0,.L230-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L234:
	.word	-1,.L97,0,.L250-.L97
	.half	1
	.byte	101
	.word	.L12-.L97,.L263-.L97
	.half	1
	.byte	101
	.word	.L99-.L97,.L379-.L97
	.half	1
	.byte	111
	.word	.L99-.L97,.L229-.L97
	.half	1
	.byte	111
	.word	.L380-.L97,.L381-.L97
	.half	1
	.byte	111
	.word	.L380-.L97,.L219-.L97
	.half	1
	.byte	111
	.word	.L101-.L97,.L224-.L97
	.half	1
	.byte	111
	.word	.L386-.L97,.L387-.L97
	.half	1
	.byte	111
	.word	.L386-.L97,.L214-.L97
	.half	1
	.byte	111
	.word	.L388-.L97,.L230-.L97
	.half	1
	.byte	111
	.word	0,0
.L232:
	.word	-1,.L97,0,.L375-.L97
	.half	1
	.byte	100
	.word	.L12-.L97,.L376-.L97
	.half	1
	.byte	100
	.word	0,0
.L237:
	.word	-1,.L97,.L99-.L97,.L379-.L97
	.half	1
	.byte	109
	.word	.L99-.L97,.L229-.L97
	.half	1
	.byte	109
	.word	.L380-.L97,.L381-.L97
	.half	1
	.byte	109
	.word	.L380-.L97,.L219-.L97
	.half	1
	.byte	109
	.word	.L384-.L97,.L385-.L97
	.half	1
	.byte	100
	.word	.L101-.L97,.L224-.L97
	.half	1
	.byte	109
	.word	.L386-.L97,.L387-.L97
	.half	1
	.byte	109
	.word	.L386-.L97,.L214-.L97
	.half	1
	.byte	109
	.word	.L389-.L97,.L230-.L97
	.half	1
	.byte	109
	.word	0,0
.L261:
	.word	0,0
.L246:
	.word	0,0
.L259:
	.word	0,0
.L244:
	.word	0,0
.L257:
	.word	0,0
.L242:
	.word	0,0
.L255:
	.word	0,0
.L274:
	.word	-1,.L97,.L377-.L97,.L378-.L97
	.half	1
	.byte	82
	.word	.L99-.L97,.L379-.L97
	.half	1
	.byte	88
	.word	.L99-.L97,.L229-.L97
	.half	1
	.byte	88
	.word	.L380-.L97,.L381-.L97
	.half	1
	.byte	88
	.word	.L380-.L97,.L219-.L97
	.half	1
	.byte	88
	.word	.L382-.L97,.L16-.L97
	.half	1
	.byte	88
	.word	.L383-.L97,.L16-.L97
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_loc'
.L106:
	.word	-1,.L107,0,.L275-.L107
	.half	2
	.byte	138,0
	.word	0,0
.L277:
	.word	-1,.L107,0,.L275-.L107
	.half	1
	.byte	100
	.word	0,0
.L278:
	.word	-1,.L107,0,.L275-.L107
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_loc'
.L108:
	.word	-1,.L109,0,.L279-.L109
	.half	2
	.byte	138,0
	.word	0,0
.L283:
	.word	-1,.L109,0,.L390-.L109
	.half	1
	.byte	101
	.word	.L392-.L109,.L279-.L109
	.half	1
	.byte	111
	.word	0,0
.L281:
	.word	-1,.L109,0,.L391-.L109
	.half	1
	.byte	100
	.word	0,0
.L285:
	.word	-1,.L109,.L393-.L109,.L279-.L109
	.half	1
	.byte	108
	.word	.L391-.L109,.L390-.L109
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_loc'
.L110:
	.word	-1,.L111,0,.L286-.L111
	.half	2
	.byte	138,0
	.word	0,0
.L288:
	.word	-1,.L111,0,.L286-.L111
	.half	1
	.byte	100
	.word	0,0
.L289:
	.word	-1,.L111,0,.L286-.L111
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_loc'
.L112:
	.word	-1,.L113,0,.L345-.L113
	.half	2
	.byte	138,0
	.word	0,0
.L346:
	.word	-1,.L113,0,.L394-.L113
	.half	1
	.byte	100
	.word	.L396-.L113,.L345-.L113
	.half	1
	.byte	111
	.word	.L399-.L113,.L400-.L113
	.half	1
	.byte	100
	.word	.L401-.L113,.L402-.L113
	.half	1
	.byte	100
	.word	.L403-.L113,.L404-.L113
	.half	1
	.byte	100
	.word	.L405-.L113,.L406-.L113
	.half	1
	.byte	100
	.word	.L407-.L113,.L408-.L113
	.half	1
	.byte	100
	.word	.L412-.L113,.L409-.L113
	.half	1
	.byte	100
	.word	.L413-.L113,.L414-.L113
	.half	1
	.byte	100
	.word	.L415-.L113,.L416-.L113
	.half	1
	.byte	100
	.word	.L417-.L113,.L418-.L113
	.half	1
	.byte	100
	.word	.L419-.L113,.L420-.L113
	.half	1
	.byte	100
	.word	.L421-.L113,.L422-.L113
	.half	1
	.byte	100
	.word	.L425-.L113,.L424-.L113
	.half	1
	.byte	100
	.word	.L426-.L113,.L427-.L113
	.half	1
	.byte	100
	.word	.L428-.L113,.L429-.L113
	.half	1
	.byte	100
	.word	.L430-.L113,.L431-.L113
	.half	1
	.byte	100
	.word	.L432-.L113,.L433-.L113
	.half	1
	.byte	100
	.word	.L434-.L113,.L435-.L113
	.half	1
	.byte	100
	.word	.L436-.L113,.L437-.L113
	.half	1
	.byte	100
	.word	.L438-.L113,.L439-.L113
	.half	1
	.byte	100
	.word	.L440-.L113,.L441-.L113
	.half	1
	.byte	100
	.word	.L442-.L113,.L443-.L113
	.half	1
	.byte	100
	.word	.L444-.L113,.L445-.L113
	.half	1
	.byte	100
	.word	.L446-.L113,.L447-.L113
	.half	1
	.byte	100
	.word	0,0
.L356:
	.word	0,0
.L349:
	.word	-1,.L113,0,.L394-.L113
	.half	1
	.byte	85
	.word	.L398-.L113,.L345-.L113
	.half	1
	.byte	88
	.word	.L359-.L113,.L409-.L113
	.half	1
	.byte	86
	.word	.L423-.L113,.L424-.L113
	.half	1
	.byte	86
	.word	0,0
.L347:
	.word	-1,.L113,0,.L395-.L113
	.half	1
	.byte	84
	.word	.L397-.L113,.L394-.L113
	.half	1
	.byte	86
	.word	0,0
.L351:
	.word	-1,.L113,.L410-.L113,.L411-.L113
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_loc'
.L114:
	.word	-1,.L115,0,.L301-.L115
	.half	2
	.byte	138,0
	.word	0,0
.L304:
	.word	-1,.L115,0,.L448-.L115
	.half	1
	.byte	84
	.word	.L450-.L115,.L301-.L115
	.half	1
	.byte	95
	.word	.L449-.L115,.L301-.L115
	.half	1
	.byte	85
	.word	0,0
.L302:
	.word	-1,.L115,0,.L301-.L115
	.half	1
	.byte	100
	.word	0,0
.L306:
	.word	-1,.L115,0,.L449-.L115
	.half	1
	.byte	85
	.word	.L451-.L115,.L301-.L115
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_loc'
.L116:
	.word	-1,.L117,0,.L307-.L117
	.half	2
	.byte	138,0
	.word	0,0
.L310:
	.word	-1,.L117,0,.L307-.L117
	.half	1
	.byte	84
	.word	0,0
.L308:
	.word	-1,.L117,0,.L307-.L117
	.half	1
	.byte	100
	.word	0,0
.L311:
	.word	-1,.L117,.L452-.L117,.L307-.L117
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_loc'
.L118:
	.word	-1,.L119,0,.L312-.L119
	.half	2
	.byte	138,0
	.word	0,0
.L316:
	.word	-1,.L119,0,.L312-.L119
	.half	1
	.byte	85
	.word	0,0
.L313:
	.word	-1,.L119,0,.L312-.L119
	.half	1
	.byte	100
	.word	0,0
.L317:
	.word	-1,.L119,0,.L312-.L119
	.half	1
	.byte	86
	.word	0,0
.L318:
	.word	-1,.L119,0,.L312-.L119
	.half	1
	.byte	87
	.word	0,0
.L315:
	.word	-1,.L119,0,.L312-.L119
	.half	1
	.byte	84
	.word	0,0
.L320:
	.word	-1,.L119,.L453-.L119,.L312-.L119
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_loc'
.L120:
	.word	-1,.L121,0,.L321-.L121
	.half	2
	.byte	138,0
	.word	0,0
.L330:
	.word	-1,.L121,.L458-.L121,.L72-.L121
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L322:
	.word	-1,.L121,0,.L321-.L121
	.half	1
	.byte	100
	.word	0,0
.L331:
	.word	-1,.L121,.L459-.L121,.L72-.L121
	.half	1
	.byte	82
	.word	0,0
.L329:
	.word	-1,.L121,.L326-.L121,.L457-.L121
	.half	1
	.byte	85
	.word	0,0
.L328:
	.word	-1,.L121,.L325-.L121,.L456-.L121
	.half	1
	.byte	81
	.word	0,0
.L323:
	.word	-1,.L121,.L454-.L121,.L455-.L121
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_loc'
.L122:
	.word	-1,.L123,0,.L332-.L123
	.half	2
	.byte	138,0
	.word	0,0
.L334:
	.word	-1,.L123,0,.L460-.L123
	.half	1
	.byte	84
	.word	.L463-.L123,.L332-.L123
	.half	1
	.byte	95
	.word	.L461-.L123,.L332-.L123
	.half	1
	.byte	85
	.word	0,0
.L333:
	.word	-1,.L123,0,.L332-.L123
	.half	1
	.byte	100
	.word	0,0
.L335:
	.word	-1,.L123,0,.L461-.L123
	.half	1
	.byte	85
	.word	.L464-.L123,.L332-.L123
	.half	5
	.byte	144,32,157,32,0
	.word	.L462-.L123,.L332-.L123
	.half	1
	.byte	86
	.word	0,0
.L336:
	.word	-1,.L123,0,.L462-.L123
	.half	1
	.byte	86
	.word	.L465-.L123,.L332-.L123
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_loc'
.L124:
	.word	-1,.L125,0,.L366-.L125
	.half	2
	.byte	138,0
	.word	0,0
.L370:
	.word	-1,.L125,0,.L366-.L125
	.half	1
	.byte	84
	.word	0,0
.L369:
	.word	-1,.L125,0,.L366-.L125
	.half	1
	.byte	101
	.word	.L467-.L125,.L468-.L125
	.half	1
	.byte	95
	.word	0,0
.L367:
	.word	-1,.L125,0,.L366-.L125
	.half	1
	.byte	100
	.word	0,0
.L373:
	.word	0,0
.L371:
	.word	-1,.L125,.L466-.L125,.L366-.L125
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L786:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_checkErrors')
	.sect	'.debug_frame'
	.word	24
	.word	.L786,.L87,.L337-.L87
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_clearErrorFlags')
	.sect	'.debug_frame'
	.word	24
	.word	.L786,.L89,.L340-.L89
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_delay')
	.sect	'.debug_frame'
	.word	24
	.word	.L786,.L91,.L342-.L91
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initChannel')
	.sect	'.debug_frame'
	.word	20
	.word	.L786,.L93,.L290-.L93
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initChannelConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L786,.L95,.L295-.L95
	.byte	8,18,8,19,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initHsctModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L786,.L97,.L230-.L97
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initHsctModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L786,.L107,.L275-.L107
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initHsslModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L786,.L109,.L279-.L109
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_initHsslModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L786,.L111,.L286-.L111
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_prepareStream')
	.sect	'.debug_frame'
	.word	12
	.word	.L786,.L113,.L345-.L113
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_read')
	.sect	'.debug_frame'
	.word	12
	.word	.L786,.L115,.L301-.L115
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_sendControlCommand')
	.sect	'.debug_frame'
	.word	12
	.word	.L786,.L117,.L307-.L117
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_singleFrameRequest')
	.sect	'.debug_frame'
	.word	24
	.word	.L786,.L119,.L312-.L119
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_waitAcknowledge')
	.sect	'.debug_frame'
	.word	24
	.word	.L786,.L121,.L321-.L121
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_write')
	.sect	'.debug_frame'
	.word	12
	.word	.L786,.L123,.L332-.L123
	.sdecl	'.debug_frame',debug,cluster('IfxHssl_Hssl_writeStream')
	.sect	'.debug_frame'
	.word	20
	.word	.L786,.L125,.L366-.L125
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L787:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_13')
	.sect	'.debug_frame'
	.word	24
	.word	.L787,.L99,.L229-.L99
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_12')
	.sect	'.debug_frame'
	.word	24
	.word	.L787,.L101,.L224-.L101
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_11')
	.sect	'.debug_frame'
	.word	24
	.word	.L787,.L103,.L219-.L103
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_10')
	.sect	'.debug_frame'
	.word	24
	.word	.L787,.L105,.L214-.L105
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
