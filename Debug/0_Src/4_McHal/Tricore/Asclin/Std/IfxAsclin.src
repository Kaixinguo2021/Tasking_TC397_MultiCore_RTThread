	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Asclin\\Std\\.IfxAsclin.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.src ..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c'

	
$TC162
	.sdecl	'.zrodata.IfxScuCcu..2.cnt',data,rom
	.sect	'.zrodata.IfxScuCcu..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268214208
	.sdecl	'.zrodata.IfxAsclin..3.cnt',data,rom
	.sect	'.zrodata.IfxAsclin..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	981668463
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_disableModule',code,cluster('IfxAsclin_disableModule')
	.sect	'.text.IfxAsclin.IfxAsclin_disableModule'
	.align	2
	
	.global	IfxAsclin_disableModule

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     2   * \file IfxAsclin.c
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     4   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     7   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    11   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    16   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    18   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    25   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    32   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    40   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    42   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    43  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    44  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    45  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    46  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    47  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    48  #include "IfxAsclin.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    49  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    50  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    51  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    53  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    54  void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
; Function IfxAsclin_disableModule
.L62:
IfxAsclin_disableModule:	.type	func
	mov.aa	a15,a4
.L453:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    55  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    56      uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L452:
	mov	d8,d2
.L455:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    57      IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L454:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    58      IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    59      IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
	mov	d4,d8

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->CSR.B.CON;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1961  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1962  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1963  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1964  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1965  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1966      return asclin->FLAGS.B.CE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1967  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1968  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1969  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1970  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1971  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1972      return asclin->FLAGS.B.FED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1973  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1974  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1975  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1976  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1977  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1978      return asclin->FLAGS.B.FE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1979  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1980  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1981  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1982  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1983  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1984      return asclin->FLAGS.B.HT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1985  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1986  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1987  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1988  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1989  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1990      return asclin->KRST0.B.RSTSTAT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1991  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1992  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1993  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1994  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1995  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1996      return asclin->FLAGS.B.LA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1998  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1999  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2000  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2002      return asclin->FLAGS.B.LC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2003  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2004  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2005  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2006  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2007  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2008      return asclin->FLAGS.B.LP;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2009  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2010  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2011  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2012  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2013  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2014      return asclin->CLC.B.DISS;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2015  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2016  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2017  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2018  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2019  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2020      return asclin->FLAGS.B.PE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2021  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2023  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2024  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2025  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2026      return asclin->BITCON.B.PRESCALER + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2027  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2028  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2029  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2030  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2031  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2032      return asclin->FLAGS.B.RED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2033  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2034  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2035  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2036  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2037  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2038      return asclin->IOCR.B.RXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2039  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2040  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2041  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2042  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2043  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2044      return asclin->FLAGS.B.RT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2045  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2046  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2047  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2048  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2049  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2050      return asclin->RXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2051  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2052  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2053  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2054  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2055  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2056      return asclin->FLAGS.B.RFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2057  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2059  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2060  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2061  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2062      return asclin->RXFIFOCON.B.OUTW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2063  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2064  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2066  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2067  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2068      return asclin->FLAGS.B.RFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2069  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2070  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2072  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2073  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2074      return asclin->FLAGS.B.RFU;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2075  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2076  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2077  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2078  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2079  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2080      return asclin->FLAGS.B.RH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2081  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2082  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2083  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2084  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2085  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2086      return asclin->FLAGS.B.RR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2087  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2088  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2089  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2090  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2091  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2092      return asclin->FLAGS.B.TC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2093  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2094  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2095  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2096  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2097  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2098      return asclin->IOCR.B.TXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2099  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2100  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2101  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2102  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2103  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2104      return asclin->TXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2105  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2108  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2109  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2110      return asclin->FLAGS.B.TFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2111  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2112  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2114  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2116      return asclin->TXFIFOCON.B.INW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2117  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2118  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2120  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2121  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2122      return asclin->FLAGS.B.TFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2123  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2126  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2127  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2128      return asclin->FLAGS.B.TH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2129  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2130  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2132  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2133  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2134      return asclin->FLAGS.B.TR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2135  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2137  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2138  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2139  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2140      if (cts->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2141      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2144          IfxAsclin_enableCts(cts->module, TRUE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2145          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2146      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2147  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2150  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2151  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2152      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2153      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2154  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2156  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2157  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2158  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2159      if (rx->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2160      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2161          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2162          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2163          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2164      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2165  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2168  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2169  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2170      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2171      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2172  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2174  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2175  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2177      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2178      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2179  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2181  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2182  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2183  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2184      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2185      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2186  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2188  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2189  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2190  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2191      Ifx_ASCLIN_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2193      // read the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2194      ocs.U = asclin->OCS.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2196      // return the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2197      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2198  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2199  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2200  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2201  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2203      return asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2204  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2205  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2206  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2207  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2208  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2209      asclin->BRD.B.LOWERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2210  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2213  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2214  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2215      asclin->BRD.B.UPPERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2217  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2219  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2221      asclin->LIN.CON.B.CSI = csi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2222  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2223  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2225  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2227      asclin->DATCON.B.CSM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2228  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2231  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2232  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2233      asclin->IOCR.B.CPOL = cpol;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2234  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2235  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2237  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2239      asclin->IOCR.B.CTS = ctsi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2240  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2241  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2243  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2244  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2245      asclin->DATCON.B.DATLEN = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2246  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2247  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2248  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2249  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2250  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2251      asclin->BRG.B.DENOMINATOR = denominator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2254  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2255  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2257      asclin->CLC.B.DISR = 1;
	ld.bu	d15,[a15]
.L322:
	or	d15,#1
	st.b	[a15],d15
.L323:
	j	IfxScuWdt_setCpuEndinit
.L318:
	
__IfxAsclin_disableModule_function_end:
	.size	IfxAsclin_disableModule,__IfxAsclin_disableModule_function_end-IfxAsclin_disableModule
.L159:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_enableAscErrorFlags',code,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.text.IfxAsclin.IfxAsclin_enableAscErrorFlags'
	.align	2
	
	.global	IfxAsclin_enableAscErrorFlags

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    60  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    61  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    62  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    63  void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable)
; Function IfxAsclin_enableAscErrorFlags
.L64:
IfxAsclin_enableAscErrorFlags:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
	ld.bu	d15,[a4]66
.L624:
	ne	d0,d4,#0
.L625:
	insert	d15,d15,d0,#0,#1
	st.b	[a4]66,d15
.L332:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
	ld.bu	d15,[a4]67
.L626:
	ne	d0,d5,#0
.L627:
	insert	d15,d15,d0,#2,#1
	st.b	[a4]67,d15
.L339:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    64  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    65      IfxAsclin_enableParityErrorFlag(asclin, parEnable);     /* enables parity error*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    66      IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    67  }
	ret
.L327:
	
__IfxAsclin_enableAscErrorFlags_function_end:
	.size	IfxAsclin_enableAscErrorFlags,__IfxAsclin_enableAscErrorFlags_function_end-IfxAsclin_enableAscErrorFlags
.L164:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_enableModule',code,cluster('IfxAsclin_enableModule')
	.sect	'.text.IfxAsclin.IfxAsclin_enableModule'
	.align	2
	
	.global	IfxAsclin_enableModule

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    68  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    69  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    70  void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
; Function IfxAsclin_enableModule
.L66:
IfxAsclin_enableModule:	.type	func
	mov.aa	a15,a4
.L457:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    71  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    72      uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L456:
	mov	d15,d2
.L459:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    73      IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L458:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    74      IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    75      IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
	mov	d4,d15

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->CSR.B.CON;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1961  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1962  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1963  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1964  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1965  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1966      return asclin->FLAGS.B.CE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1967  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1968  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1969  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1970  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1971  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1972      return asclin->FLAGS.B.FED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1973  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1974  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1975  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1976  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1977  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1978      return asclin->FLAGS.B.FE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1979  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1980  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1981  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1982  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1983  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1984      return asclin->FLAGS.B.HT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1985  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1986  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1987  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1988  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1989  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1990      return asclin->KRST0.B.RSTSTAT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1991  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1992  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1993  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1994  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1995  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1996      return asclin->FLAGS.B.LA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1998  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1999  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2000  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2002      return asclin->FLAGS.B.LC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2003  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2004  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2005  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2006  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2007  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2008      return asclin->FLAGS.B.LP;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2009  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2010  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2011  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2012  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2013  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2014      return asclin->CLC.B.DISS;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2015  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2016  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2017  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2018  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2019  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2020      return asclin->FLAGS.B.PE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2021  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2023  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2024  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2025  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2026      return asclin->BITCON.B.PRESCALER + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2027  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2028  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2029  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2030  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2031  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2032      return asclin->FLAGS.B.RED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2033  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2034  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2035  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2036  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2037  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2038      return asclin->IOCR.B.RXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2039  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2040  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2041  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2042  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2043  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2044      return asclin->FLAGS.B.RT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2045  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2046  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2047  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2048  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2049  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2050      return asclin->RXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2051  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2052  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2053  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2054  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2055  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2056      return asclin->FLAGS.B.RFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2057  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2059  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2060  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2061  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2062      return asclin->RXFIFOCON.B.OUTW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2063  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2064  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2066  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2067  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2068      return asclin->FLAGS.B.RFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2069  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2070  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2072  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2073  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2074      return asclin->FLAGS.B.RFU;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2075  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2076  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2077  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2078  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2079  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2080      return asclin->FLAGS.B.RH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2081  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2082  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2083  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2084  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2085  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2086      return asclin->FLAGS.B.RR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2087  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2088  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2089  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2090  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2091  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2092      return asclin->FLAGS.B.TC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2093  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2094  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2095  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2096  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2097  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2098      return asclin->IOCR.B.TXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2099  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2100  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2101  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2102  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2103  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2104      return asclin->TXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2105  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2108  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2109  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2110      return asclin->FLAGS.B.TFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2111  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2112  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2114  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2116      return asclin->TXFIFOCON.B.INW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2117  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2118  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2120  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2121  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2122      return asclin->FLAGS.B.TFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2123  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2126  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2127  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2128      return asclin->FLAGS.B.TH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2129  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2130  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2132  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2133  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2134      return asclin->FLAGS.B.TR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2135  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2137  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2138  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2139  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2140      if (cts->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2141      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2144          IfxAsclin_enableCts(cts->module, TRUE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2145          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2146      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2147  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2150  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2151  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2152      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2153      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2154  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2156  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2157  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2158  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2159      if (rx->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2160      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2161          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2162          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2163          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2164      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2165  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2168  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2169  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2170      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2171      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2172  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2174  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2175  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2177      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2178      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2179  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2181  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2182  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2183  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2184      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2185      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2186  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2188  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2189  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2190  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2191      Ifx_ASCLIN_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2193      // read the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2194      ocs.U = asclin->OCS.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2196      // return the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2197      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2198  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2199  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2200  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2201  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2203      return asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2204  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2205  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2206  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2207  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2208  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2209      asclin->BRD.B.LOWERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2210  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2213  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2214  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2215      asclin->BRD.B.UPPERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2217  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2219  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2221      asclin->LIN.CON.B.CSI = csi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2222  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2223  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2225  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2227      asclin->DATCON.B.CSM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2228  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2231  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2232  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2233      asclin->IOCR.B.CPOL = cpol;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2234  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2235  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2237  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2239      asclin->IOCR.B.CTS = ctsi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2240  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2241  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2243  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2244  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2245      asclin->DATCON.B.DATLEN = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2246  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2247  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2248  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2249  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2250  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2251      asclin->BRG.B.DENOMINATOR = denominator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2254  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2255  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2257      asclin->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2261  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2263      asclin->CLC.B.DISR = 0;
	ld.bu	d0,[a15]
.L349:
	insert	d0,d0,#0,#0,#1
	st.b	[a15],d0
.L350:
	j	IfxScuWdt_setCpuEndinit
.L345:
	
__IfxAsclin_enableModule_function_end:
	.size	IfxAsclin_enableModule,__IfxAsclin_enableModule_function_end-IfxAsclin_enableModule
.L169:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getAddress',code,cluster('IfxAsclin_getAddress')
	.sect	'.text.IfxAsclin.IfxAsclin_getAddress'
	.align	2
	
	.global	IfxAsclin_getAddress

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    76  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    77  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    78  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    79  Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
; Function IfxAsclin_getAddress
.L68:
IfxAsclin_getAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    80  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    81      Ifx_ASCLIN *module;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    82  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    83      if (asclin < IFXASCLIN_NUM_MODULES)
	mov	d15,#12
.L529:
	jge	d4,d15,.L2
.L530:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    84      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    85          module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
	movh.a	a15,#@his(IfxAsclin_cfg_indexMap)
	lea	a15,[a15]@los(IfxAsclin_cfg_indexMap)
.L531:
	addsc.a	a15,a15,d4,#3
.L532:
	ld.a	a2,[a15]
.L460:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    86      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    87      else
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    88      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    89          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    90      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    91  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    92      return module;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    93  }
	ret
.L2:
	mov.a	a2,#0
.L461:
	ret
.L241:
	
__IfxAsclin_getAddress_function_end:
	.size	IfxAsclin_getAddress,__IfxAsclin_getAddress_function_end-IfxAsclin_getAddress
.L119:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getFaFrequency',code,cluster('IfxAsclin_getFaFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getFaFrequency'
	.align	2
	
	.global	IfxAsclin_getFaFrequency

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    94  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    96  float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
; Function IfxAsclin_getFaFrequency
.L70:
IfxAsclin_getFaFrequency:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
	ld.bu	d15,[a4]76
.L250:
	sub.a	a10,#16
.L255:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
	and	d15,#31
.L256:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    97  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    98      float32               frequency;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	    99      IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   100  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   101      switch (clockSource)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   102      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   103      case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   104          frequency = 0.0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   105          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   106      case IfxAsclin_ClockSource_ascFastClock:
	jeq	d15,#2,.L5
.L537:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   107          frequency = IfxScuCcu_getAsclinFFrequency();
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   108          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   109      case IfxAsclin_ClockSource_ascSlowClock:
	jeq	d15,#4,.L6
.L538:
	j	.L7
.L5:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
	mov	d2,#0
	movh.a	a15,#@his(.1.ini)
.L462:
	lea	a15,[a15]@los(.1.ini)
.L539:
	mov.aa	a2,a10
	mov.a	a4,#15
.L8:
	ld.bu	d15,[a15+]
	st.b	[a2+],d15
	loop	a4,.L8
.L540:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
	ld.w	d15,.2.cnt
	mov.a	a15,d15
	ld.bu	d15,[a15]
	and	d15,#15
.L541:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)      (inlined)
	jeq	d15,#0,.L10
.L542:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
	mov	d4,#2
	call	IfxScuCcu_getSourceFrequency
.L463:
	ld.bu	d15,[a15]
	and	d15,#15
.L543:
	addsc.a	a15,a10,d15,#0
	ld.bu	d15,[a15]
	utof	d15,d15
.L544:
	div.f	d2,d2,d15

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   110          frequency = IfxScuCcu_getAsclinSFrequency();
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   111          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   112      default:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   113          frequency = 0.0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   114          break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   115      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   116  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   117      return frequency;
.L10:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   118  }
	ret
.L6:
	j	IfxScuCcu_getAsclinSFrequency
.L7:
	mov	d2,#0
	ret
.L246:
	
__IfxAsclin_getFaFrequency_function_end:
	.size	IfxAsclin_getFaFrequency,__IfxAsclin_getFaFrequency_function_end-IfxAsclin_getFaFrequency
.L124:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getIndex',code,cluster('IfxAsclin_getIndex')
	.sect	'.text.IfxAsclin.IfxAsclin_getIndex'
	.align	2
	
	.global	IfxAsclin_getIndex

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   120  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   121  IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
; Function IfxAsclin_getIndex
.L72:
IfxAsclin_getIndex:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   122  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   123      uint32          index;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   124      IfxAsclin_Index result;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   126      result = IfxAsclin_Index_none;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   127  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   128      for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   129      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   130          if (IfxAsclin_cfg_indexMap[index].module == asclin)
	mov	d2,#-1
	movh.a	a15,#@his(IfxAsclin_cfg_indexMap)
.L464:
	lea	a15,[a15]@los(IfxAsclin_cfg_indexMap)
.L549:
	mov.a	a2,#11
.L13:
	ld.a	a5,[a15]
.L550:
	jne.a	a5,a4,.L14
.L551:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   131          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   132              result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
	ld.w	d15,[a15]4
.L552:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   133              break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   134          }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   135      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   136  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   137      return result;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   138  }
	extr	d2,d15,#0,#8
	ret
.L14:
	lea	a15,[a15]8
	loop	a2,.L13
.L553:
	ret
.L263:
	
__IfxAsclin_getIndex_function_end:
	.size	IfxAsclin_getIndex,__IfxAsclin_getIndex_function_end-IfxAsclin_getIndex
.L129:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getOvsFrequency',code,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getOvsFrequency'
	.align	2
	
	.global	IfxAsclin_getOvsFrequency

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   139  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   140  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   141  float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
; Function IfxAsclin_getOvsFrequency
.L74:
IfxAsclin_getOvsFrequency:	.type	func
	mov.aa	a15,a4
.L466:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   142  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   143      return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
	call	IfxAsclin_getPdFrequency
.L465:
	ld.hu	d15,[a15]34
.L558:
	extr.u	d15,d15,#0,#12
	ld.hu	d0,[a15]32
	extr.u	d0,d0,#0,#12
.L559:
	itof	d15,d15
.L560:
	mul.f	d15,d2,d15
.L561:
	itof	d0,d0
.L562:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   144  }
	div.f	d2,d15,d0
	ret
.L268:
	
__IfxAsclin_getOvsFrequency_function_end:
	.size	IfxAsclin_getOvsFrequency,__IfxAsclin_getOvsFrequency_function_end-IfxAsclin_getOvsFrequency
.L134:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getPdFrequency',code,cluster('IfxAsclin_getPdFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getPdFrequency'
	.align	2
	
	.global	IfxAsclin_getPdFrequency

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   146  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   147  float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
; Function IfxAsclin_getPdFrequency
.L76:
IfxAsclin_getPdFrequency:	.type	func
	mov.aa	a15,a4
.L468:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   148  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   149      return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
	call	IfxAsclin_getFaFrequency
.L467:
	ld.hu	d15,[a15]20
	extr.u	d15,d15,#0,#12
.L567:
	add	d15,#1
	itof	d15,d15
.L568:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   150  }
	div.f	d2,d2,d15
	ret
.L270:
	
__IfxAsclin_getPdFrequency_function_end:
	.size	IfxAsclin_getPdFrequency,__IfxAsclin_getPdFrequency_function_end-IfxAsclin_getPdFrequency
.L139:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getShiftFrequency',code,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getShiftFrequency'
	.align	2
	
	.global	IfxAsclin_getShiftFrequency

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   151  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   153  float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
; Function IfxAsclin_getShiftFrequency
.L78:
IfxAsclin_getShiftFrequency:	.type	func
	mov.aa	a15,a4
.L470:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   155      return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
	call	IfxAsclin_getOvsFrequency
.L469:
	ld.bu	d15,[a15]22
	and	d15,#15
	itof	d15,d15
.L573:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   156  }
	div.f	d2,d2,d15
	ret
.L272:
	
__IfxAsclin_getShiftFrequency_function_end:
	.size	IfxAsclin_getShiftFrequency,__IfxAsclin_getShiftFrequency_function_end-IfxAsclin_getShiftFrequency
.L144:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getSrcPointerEr',code,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.text.IfxAsclin.IfxAsclin_getSrcPointerEr'
	.align	2
	
	.global	IfxAsclin_getSrcPointerEr

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   157  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   158  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   159  volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
; Function IfxAsclin_getSrcPointerEr
.L80:
IfxAsclin_getSrcPointerEr:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   160  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   161      return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
	call	IfxAsclin_getIndex
.L636:
	fcall	.cocofun_6
.L471:
	lea	a2,[a3]-32680
.L637:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   162  }
	ret
.L355:
	
__IfxAsclin_getSrcPointerEr_function_end:
	.size	IfxAsclin_getSrcPointerEr,__IfxAsclin_getSrcPointerEr_function_end-IfxAsclin_getSrcPointerEr
.L174:
	; End of function
	
	.sdecl	'.text.IfxAsclin..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.IfxAsclin..cocofun_6'
	.align	2
; Function .cocofun_6
.L82:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:1
	mul	d15,d2,#12
	mov.a	a15,d15
	movh.a	a3,#61444
	add.a	a3,a15
.L713:
	fret
.L239:
	; End of function
	.sdecl	'.text.IfxAsclin.IfxAsclin_getSrcPointerRx',code,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.text.IfxAsclin.IfxAsclin_getSrcPointerRx'
	.align	2
	
	.global	IfxAsclin_getSrcPointerRx

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   163  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   164  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   165  volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
; Function IfxAsclin_getSrcPointerRx
.L84:
IfxAsclin_getSrcPointerRx:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   166  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   167      return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
	call	IfxAsclin_getIndex
.L642:
	fcall	.cocofun_4
.L472:
	add.a	a2,#4
.L643:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   168  }
	ret
.L358:
	
__IfxAsclin_getSrcPointerRx_function_end:
	.size	IfxAsclin_getSrcPointerRx,__IfxAsclin_getSrcPointerRx_function_end-IfxAsclin_getSrcPointerRx
.L179:
	; End of function
	
	.sdecl	'.text.IfxAsclin..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxAsclin..cocofun_4'
	.align	2
; Function .cocofun_4
.L86:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	fcall	.cocofun_6
.L703:
	lea	a2,[a3]-32688
.L704:
	fret
.L229:
	; End of function
	.sdecl	'.text.IfxAsclin.IfxAsclin_getSrcPointerTx',code,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.text.IfxAsclin.IfxAsclin_getSrcPointerTx'
	.align	2
	
	.global	IfxAsclin_getSrcPointerTx

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   169  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   171  volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
; Function IfxAsclin_getSrcPointerTx
.L88:
IfxAsclin_getSrcPointerTx:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   172  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   173      return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
	call	IfxAsclin_getIndex
.L648:
	fcall	.cocofun_4
.L473:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   174  }
	ret
.L361:
	
__IfxAsclin_getSrcPointerTx_function_end:
	.size	IfxAsclin_getSrcPointerTx,__IfxAsclin_getSrcPointerTx_function_end-IfxAsclin_getSrcPointerTx
.L184:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_read16',code,cluster('IfxAsclin_read16')
	.sect	'.text.IfxAsclin.IfxAsclin_read16'
	.align	2
	
	.global	IfxAsclin_read16

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   175  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   176  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   177  uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
; Function IfxAsclin_read16
.L90:
IfxAsclin_read16:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   178  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   179      volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;
	lea	a15,[a4]72
.L474:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   181      while (count > 0)
	j	.L23
.L24:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   182      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   183          *data++ = (uint16)rxData->U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   184          count--;
	add	d4,#-1
	ld.w	d15,[a15]
.L653:
	st.h	[a5+],d15
.L23:
	jne	d4,#0,.L24
.L654:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   185      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   186  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   187      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   188  }
	mov	d2,#0
	ret
.L363:
	
__IfxAsclin_read16_function_end:
	.size	IfxAsclin_read16,__IfxAsclin_read16_function_end-IfxAsclin_read16
.L189:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_read32',code,cluster('IfxAsclin_read32')
	.sect	'.text.IfxAsclin.IfxAsclin_read32'
	.align	2
	
	.global	IfxAsclin_read32

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   189  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   190  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   191  uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
; Function IfxAsclin_read32
.L92:
IfxAsclin_read32:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   192  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   193      volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;
	lea	a15,[a4]72
.L475:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   195      while (count > 0)
	j	.L26
.L27:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   196      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   197          *data++ = rxData->U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   198          count--;
	add	d4,#-1
	ld.w	d15,[a15]
.L659:
	st.w	[a5+],d15
.L26:
	jne	d4,#0,.L27
.L660:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   199      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   200  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   201      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   202  }
	mov	d2,#0
	ret
.L370:
	
__IfxAsclin_read32_function_end:
	.size	IfxAsclin_read32,__IfxAsclin_read32_function_end-IfxAsclin_read32
.L194:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_read8',code,cluster('IfxAsclin_read8')
	.sect	'.text.IfxAsclin.IfxAsclin_read8'
	.align	2
	
	.global	IfxAsclin_read8

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   203  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   204  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   205  uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
; Function IfxAsclin_read8
.L94:
IfxAsclin_read8:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   206  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   207      volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;
	lea	a15,[a4]72
.L476:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   209      while (count > 0)
	j	.L29
.L30:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   210      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   211          *data++ = (uint8)rxData->U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   212          count--;
	add	d4,#-1
	ld.w	d15,[a15]
.L665:
	st.b	[a5+],d15
.L29:
	jne	d4,#0,.L30
.L666:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   213      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   214  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   215      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   216  }
	mov	d2,#0
	ret
.L376:
	
__IfxAsclin_read8_function_end:
	.size	IfxAsclin_read8,__IfxAsclin_read8_function_end-IfxAsclin_read8
.L199:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_resetModule',code,cluster('IfxAsclin_resetModule')
	.sect	'.text.IfxAsclin.IfxAsclin_resetModule'
	.align	2
	
	.global	IfxAsclin_resetModule

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   217  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   219  void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
; Function IfxAsclin_resetModule
.L96:
IfxAsclin_resetModule:	.type	func
	mov.aa	a15,a4
.L478:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   220  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   221      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L477:
	mov	d8,d2
.L480:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   222      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L479:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   223  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   224      asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
	ld.bu	d15,[a15]244
.L578:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   225      asclin->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   226      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L481:
	or	d15,#1
	st.b	[a15]244,d15
.L579:
	ld.bu	d15,[a15]240
.L580:
	or	d15,#1
	st.b	[a15]240,d15
.L581:
	call	IfxScuWdt_setCpuEndinit

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   227  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   228      while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
.L32:
	ld.bu	d15,[a15]244
.L582:
	jz.t	d15:1,.L32
.L583:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   229      {}
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   231      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L584:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   232      asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   233  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   234      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
	ld.bu	d15,[a15]236
.L482:
	or	d15,#1
	st.b	[a15]236,d15
.L585:
	j	IfxScuWdt_setCpuEndinit
.L274:
	
__IfxAsclin_resetModule_function_end:
	.size	IfxAsclin_resetModule,__IfxAsclin_resetModule_function_end-IfxAsclin_resetModule
.L149:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_setBaudrateBitFields',code,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.text.IfxAsclin.IfxAsclin_setBaudrateBitFields'
	.align	2
	
	.global	IfxAsclin_setBaudrateBitFields

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   235  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   237  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   238  void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling)
; Function IfxAsclin_setBaudrateBitFields
.L98:
IfxAsclin_setBaudrateBitFields:	.type	func
	mov.aa	a15,a4
.L388:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
	ld.bu	d15,[a15]76
.L389:
	mov	e8,d5,d4
.L392:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
	and	d12,d15,#31
.L393:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   239  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   240      IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin); /* gets the current clock source */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   241      IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
	mov	d4,#0
.L483:
	mov	e10,d7,d6
	call	IfxAsclin_setClockSource
.L395:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->CSR.B.CON;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1961  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1962  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1963  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1964  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1965  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1966      return asclin->FLAGS.B.CE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1967  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1968  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1969  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1970  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1971  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1972      return asclin->FLAGS.B.FED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1973  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1974  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1975  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1976  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1977  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1978      return asclin->FLAGS.B.FE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1979  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1980  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1981  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1982  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1983  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1984      return asclin->FLAGS.B.HT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1985  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1986  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1987  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1988  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1989  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1990      return asclin->KRST0.B.RSTSTAT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1991  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1992  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1993  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1994  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1995  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1996      return asclin->FLAGS.B.LA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1998  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1999  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2000  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2002      return asclin->FLAGS.B.LC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2003  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2004  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2005  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2006  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2007  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2008      return asclin->FLAGS.B.LP;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2009  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2010  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2011  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2012  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2013  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2014      return asclin->CLC.B.DISS;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2015  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2016  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2017  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2018  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2019  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2020      return asclin->FLAGS.B.PE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2021  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2023  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2024  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2025  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2026      return asclin->BITCON.B.PRESCALER + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2027  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2028  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2029  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2030  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2031  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2032      return asclin->FLAGS.B.RED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2033  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2034  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2035  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2036  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2037  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2038      return asclin->IOCR.B.RXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2039  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2040  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2041  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2042  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2043  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2044      return asclin->FLAGS.B.RT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2045  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2046  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2047  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2048  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2049  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2050      return asclin->RXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2051  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2052  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2053  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2054  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2055  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2056      return asclin->FLAGS.B.RFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2057  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2059  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2060  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2061  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2062      return asclin->RXFIFOCON.B.OUTW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2063  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2064  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2066  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2067  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2068      return asclin->FLAGS.B.RFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2069  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2070  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2072  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2073  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2074      return asclin->FLAGS.B.RFU;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2075  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2076  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2077  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2078  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2079  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2080      return asclin->FLAGS.B.RH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2081  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2082  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2083  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2084  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2085  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2086      return asclin->FLAGS.B.RR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2087  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2088  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2089  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2090  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2091  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2092      return asclin->FLAGS.B.TC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2093  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2094  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2095  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2096  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2097  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2098      return asclin->IOCR.B.TXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2099  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2100  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2101  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2102  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2103  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2104      return asclin->TXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2105  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2108  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2109  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2110      return asclin->FLAGS.B.TFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2111  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2112  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2114  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2116      return asclin->TXFIFOCON.B.INW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2117  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2118  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2120  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2121  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2122      return asclin->FLAGS.B.TFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2123  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2126  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2127  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2128      return asclin->FLAGS.B.TH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2129  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2130  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2132  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2133  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2134      return asclin->FLAGS.B.TR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2135  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2137  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2138  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2139  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2140      if (cts->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2141      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2144          IfxAsclin_enableCts(cts->module, TRUE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2145          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2146      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2147  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2150  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2151  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2152      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2153      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2154  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2156  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2157  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2158  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2159      if (rx->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2160      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2161          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2162          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2163          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2164      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2165  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2168  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2169  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2170      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2171      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2172  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2174  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2175  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2177      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2178      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2179  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2181  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2182  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2183  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2184      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2185      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2186  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2188  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2189  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2190  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2191      Ifx_ASCLIN_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2193      // read the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2194      ocs.U = asclin->OCS.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2196      // return the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2197      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2198  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2199  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2200  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2201  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2203      return asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2204  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2205  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2206  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2207  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2208  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2209      asclin->BRD.B.LOWERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2210  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2213  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2214  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2215      asclin->BRD.B.UPPERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2217  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2219  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2221      asclin->LIN.CON.B.CSI = csi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2222  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2223  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2225  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2227      asclin->DATCON.B.CSM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2228  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2231  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2232  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2233      asclin->IOCR.B.CPOL = cpol;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2234  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2235  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2237  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2239      asclin->IOCR.B.CTS = ctsi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2240  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2241  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2243  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2244  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2245      asclin->DATCON.B.DATLEN = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2246  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2247  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2248  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2249  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2250  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2251      asclin->BRG.B.DENOMINATOR = denominator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2254  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2255  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2257      asclin->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2261  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2263      asclin->CLC.B.DISR = 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2264  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2265  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2266  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2267  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2268  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2269      asclin->IOCR.B.DEPTH = __minu(depth, 63);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2270  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2272  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2273  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2274  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2275      asclin->FRAMECON.B.MODE = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2276  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2279  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2280  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2281      asclin->DATCON.B.HO = type;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2282  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2283  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2284  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2285  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2286  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2287      asclin->FRAMECON.B.IDLE = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2288  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2289  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2290  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2291  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2292  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2293      asclin->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2294  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2296  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2297  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2298  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2299      asclin->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2300  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2301  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2303  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2304  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2305      asclin->FRAMECON.B.LEAD = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2306  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2307  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2308  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2309  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2310  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2311      asclin->LIN.BTIMER.B.BREAK = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2312  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2314  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2315  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2317      asclin->LIN.HTIMER.B.HEADER = timeout;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2318  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2319  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2321  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2322  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2323      asclin->LIN.CON.B.MS = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2324  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2325  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2327  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2328  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2329      asclin->DATCON.B.RM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2330  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2333  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2334  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2335      asclin->DATCON.B.RESPONSE = __minu(threshold, 256);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2336  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2338  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2339  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2340  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2341      asclin->BRG.B.NUMERATOR = numerator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2342  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2343  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2344  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2345  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2346  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2347      asclin->BITCON.B.OVERSAMPLING = ovsFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2348  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2350  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2351  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2352  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2353      asclin->FRAMECON.B.ODD = type;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2354  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2355  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2357  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2358  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2359      asclin->BITCON.B.PRESCALER = prescaler - 1;
	ld.hu	d0,[a15]20
.L671:
	add	d8,#-1
.L672:
	insert	d15,d0,d8,#0,#12
	st.h	[a15]20,d15
.L396:
	fcall	.cocofun_5
.L403:
	ld.hu	d15,[a15]32
.L411:
	mov	d4,d12
	mov.aa	a4,a15
.L418:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->CSR.B.CON;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1961  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1962  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1963  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1964  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1965  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1966      return asclin->FLAGS.B.CE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1967  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1968  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1969  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1970  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1971  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1972      return asclin->FLAGS.B.FED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1973  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1974  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1975  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1976  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1977  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1978      return asclin->FLAGS.B.FE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1979  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1980  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1981  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1982  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1983  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1984      return asclin->FLAGS.B.HT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1985  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1986  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1987  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1988  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1989  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1990      return asclin->KRST0.B.RSTSTAT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1991  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1992  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1993  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1994  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1995  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1996      return asclin->FLAGS.B.LA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1998  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1999  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2000  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2002      return asclin->FLAGS.B.LC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2003  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2004  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2005  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2006  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2007  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2008      return asclin->FLAGS.B.LP;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2009  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2010  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2011  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2012  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2013  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2014      return asclin->CLC.B.DISS;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2015  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2016  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2017  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2018  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2019  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2020      return asclin->FLAGS.B.PE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2021  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2023  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2024  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2025  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2026      return asclin->BITCON.B.PRESCALER + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2027  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2028  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2029  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2030  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2031  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2032      return asclin->FLAGS.B.RED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2033  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2034  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2035  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2036  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2037  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2038      return asclin->IOCR.B.RXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2039  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2040  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2041  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2042  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2043  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2044      return asclin->FLAGS.B.RT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2045  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2046  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2047  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2048  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2049  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2050      return asclin->RXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2051  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2052  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2053  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2054  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2055  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2056      return asclin->FLAGS.B.RFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2057  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2059  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2060  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2061  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2062      return asclin->RXFIFOCON.B.OUTW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2063  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2064  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2066  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2067  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2068      return asclin->FLAGS.B.RFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2069  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2070  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2072  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2073  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2074      return asclin->FLAGS.B.RFU;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2075  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2076  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2077  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2078  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2079  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2080      return asclin->FLAGS.B.RH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2081  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2082  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2083  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2084  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2085  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2086      return asclin->FLAGS.B.RR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2087  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2088  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2089  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2090  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2091  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2092      return asclin->FLAGS.B.TC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2093  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2094  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2095  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2096  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2097  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2098      return asclin->IOCR.B.TXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2099  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2100  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2101  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2102  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2103  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2104      return asclin->TXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2105  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2108  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2109  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2110      return asclin->FLAGS.B.TFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2111  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2112  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2114  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2116      return asclin->TXFIFOCON.B.INW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2117  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2118  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2120  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2121  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2122      return asclin->FLAGS.B.TFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2123  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2126  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2127  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2128      return asclin->FLAGS.B.TH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2129  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2130  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2132  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2133  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2134      return asclin->FLAGS.B.TR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2135  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2137  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2138  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2139  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2140      if (cts->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2141      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2144          IfxAsclin_enableCts(cts->module, TRUE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2145          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2146      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2147  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2150  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2151  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2152      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2153      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2154  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2156  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2157  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2158  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2159      if (rx->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2160      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2161          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2162          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2163          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2164      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2165  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2168  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2169  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2170      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2171      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2172  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2174  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2175  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2177      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2178      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2179  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2181  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2182  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2183  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2184      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2185      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2186  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2188  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2189  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2190  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2191      Ifx_ASCLIN_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2193      // read the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2194      ocs.U = asclin->OCS.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2196      // return the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2197      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2198  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2199  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2200  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2201  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2203      return asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2204  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2205  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2206  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2207  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2208  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2209      asclin->BRD.B.LOWERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2210  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2213  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2214  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2215      asclin->BRD.B.UPPERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2217  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2219  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2221      asclin->LIN.CON.B.CSI = csi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2222  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2223  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2225  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2227      asclin->DATCON.B.CSM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2228  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2231  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2232  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2233      asclin->IOCR.B.CPOL = cpol;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2234  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2235  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2237  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2239      asclin->IOCR.B.CTS = ctsi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2240  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2241  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2243  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2244  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2245      asclin->DATCON.B.DATLEN = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2246  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2247  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2248  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2249  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2250  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2251      asclin->BRG.B.DENOMINATOR = denominator;
	insert	d15,d15,d10,#0,#12
	st.h	[a15]32,d15
.L419:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2254  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2255  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2257      asclin->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2261  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2263      asclin->CLC.B.DISR = 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2264  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2265  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2266  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2267  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2268  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2269      asclin->IOCR.B.DEPTH = __minu(depth, 63);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2270  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2272  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2273  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2274  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2275      asclin->FRAMECON.B.MODE = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2276  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2279  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2280  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2281      asclin->DATCON.B.HO = type;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2282  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2283  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2284  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2285  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2286  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2287      asclin->FRAMECON.B.IDLE = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2288  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2289  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2290  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2291  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2292  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2293      asclin->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2294  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2296  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2297  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2298  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2299      asclin->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2300  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2301  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2303  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2304  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2305      asclin->FRAMECON.B.LEAD = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2306  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2307  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2308  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2309  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2310  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2311      asclin->LIN.BTIMER.B.BREAK = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2312  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2314  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2315  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2317      asclin->LIN.HTIMER.B.HEADER = timeout;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2318  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2319  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2321  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2322  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2323      asclin->LIN.CON.B.MS = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2324  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2325  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2327  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2328  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2329      asclin->DATCON.B.RM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2330  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2333  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2334  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2335      asclin->DATCON.B.RESPONSE = __minu(threshold, 256);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2336  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2338  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2339  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2340  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2341      asclin->BRG.B.NUMERATOR = numerator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2342  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2343  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2344  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2345  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2346  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2347      asclin->BITCON.B.OVERSAMPLING = ovsFactor;
	ld.bu	d15,[a15]22
.L486:
	insert	d15,d15,d11,#0,#4
	st.b	[a15]22,d15
.L421:
	j	IfxAsclin_setClockSource
.L382:
	
__IfxAsclin_setBaudrateBitFields_function_end:
	.size	IfxAsclin_setBaudrateBitFields,__IfxAsclin_setBaudrateBitFields_function_end-IfxAsclin_setBaudrateBitFields
.L204:
	; End of function
	
	.sdecl	'.text.IfxAsclin..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxAsclin..cocofun_5'
	.align	2
; Function .cocofun_5
.L100:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->CSR.B.CON;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1961  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1962  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1963  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1964  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1965  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1966      return asclin->FLAGS.B.CE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1967  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1968  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1969  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1970  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1971  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1972      return asclin->FLAGS.B.FED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1973  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1974  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1975  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1976  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1977  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1978      return asclin->FLAGS.B.FE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1979  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1980  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1981  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1982  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1983  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1984      return asclin->FLAGS.B.HT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1985  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1986  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1987  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1988  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1989  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1990      return asclin->KRST0.B.RSTSTAT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1991  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1992  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1993  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1994  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1995  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1996      return asclin->FLAGS.B.LA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1997  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1998  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1999  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2000  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2001  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2002      return asclin->FLAGS.B.LC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2003  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2004  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2005  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2006  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2007  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2008      return asclin->FLAGS.B.LP;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2009  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2010  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2011  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2012  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2013  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2014      return asclin->CLC.B.DISS;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2015  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2016  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2017  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2018  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2019  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2020      return asclin->FLAGS.B.PE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2021  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2022  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2023  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2024  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2025  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2026      return asclin->BITCON.B.PRESCALER + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2027  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2028  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2029  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2030  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2031  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2032      return asclin->FLAGS.B.RED;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2033  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2034  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2035  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2036  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2037  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2038      return asclin->IOCR.B.RXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2039  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2040  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2041  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2042  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2043  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2044      return asclin->FLAGS.B.RT;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2045  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2046  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2047  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2048  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2049  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2050      return asclin->RXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2051  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2052  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2053  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2054  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2055  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2056      return asclin->FLAGS.B.RFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2057  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2058  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2059  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2060  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2061  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2062      return asclin->RXFIFOCON.B.OUTW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2063  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2064  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2065  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2066  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2067  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2068      return asclin->FLAGS.B.RFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2069  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2070  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2071  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2072  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2073  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2074      return asclin->FLAGS.B.RFU;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2075  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2076  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2077  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2078  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2079  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2080      return asclin->FLAGS.B.RH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2081  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2082  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2083  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2084  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2085  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2086      return asclin->FLAGS.B.RR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2087  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2088  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2089  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2090  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2091  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2092      return asclin->FLAGS.B.TC;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2093  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2094  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2095  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2096  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2097  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2098      return asclin->IOCR.B.TXM;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2099  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2100  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2101  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2102  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2103  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2104      return asclin->TXFIFOCON.B.FILL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2105  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2106  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2108  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2109  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2110      return asclin->FLAGS.B.TFL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2111  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2112  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2113  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2114  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2115  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2116      return asclin->TXFIFOCON.B.INW;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2117  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2118  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2119  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2120  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2121  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2122      return asclin->FLAGS.B.TFO;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2123  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2125  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2126  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2127  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2128      return asclin->FLAGS.B.TH;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2129  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2130  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2132  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2133  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2134      return asclin->FLAGS.B.TR;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2135  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2137  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2138  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2139  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2140      if (cts->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2141      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2144          IfxAsclin_enableCts(cts->module, TRUE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2145          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2146      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2147  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2148  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2150  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2151  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2152      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2153      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2154  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2155  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2156  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2157  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2158  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2159      if (rx->pin.port != NULL_PTR)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2160      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2161          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2162          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2163          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2164      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2165  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2168  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2169  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2170      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2171      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2172  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2174  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2175  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2176  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2177      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2178      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2179  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2181  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2182  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2183  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2184      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2185      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2186  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2188  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2189  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2190  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2191      Ifx_ASCLIN_OCS ocs;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2193      // read the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2194      ocs.U = asclin->OCS.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2195  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2196      // return the status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2197      return ocs.B.SUSSTA;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2198  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2199  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2200  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2201  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2203      return asclin->RXDATA.U;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2204  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2205  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2206  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2207  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2208  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2209      asclin->BRD.B.LOWERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2210  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2211  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2213  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2214  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2215      asclin->BRD.B.UPPERLIMIT = limit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2216  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2217  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2218  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2219  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2220  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2221      asclin->LIN.CON.B.CSI = csi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2222  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2223  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2224  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2225  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2227      asclin->DATCON.B.CSM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2228  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2231  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2232  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2233      asclin->IOCR.B.CPOL = cpol;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2234  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2235  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2237  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2238  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2239      asclin->IOCR.B.CTS = ctsi;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2240  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2241  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2242  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2243  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2244  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2245      asclin->DATCON.B.DATLEN = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2246  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2247  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2248  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2249  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2250  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2251      asclin->BRG.B.DENOMINATOR = denominator;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2252  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2253  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2254  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2255  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2256  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2257      asclin->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2258  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2260  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2261  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2262  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2263      asclin->CLC.B.DISR = 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2264  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2265  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2266  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2267  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2268  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2269      asclin->IOCR.B.DEPTH = __minu(depth, 63);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2270  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2272  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2273  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2274  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2275      asclin->FRAMECON.B.MODE = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2276  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2279  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2280  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2281      asclin->DATCON.B.HO = type;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2282  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2283  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2284  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2285  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2286  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2287      asclin->FRAMECON.B.IDLE = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2288  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2289  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2290  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2291  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2292  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2293      asclin->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2294  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2295  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2296  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2297  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2298  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2299      asclin->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2300  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2301  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2302  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2303  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2304  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2305      asclin->FRAMECON.B.LEAD = delay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2306  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2307  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2308  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2309  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2310  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2311      asclin->LIN.BTIMER.B.BREAK = length;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2312  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2314  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2315  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2317      asclin->LIN.HTIMER.B.HEADER = timeout;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2318  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2319  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2321  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2322  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2323      asclin->LIN.CON.B.MS = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2324  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2325  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2327  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2328  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2329      asclin->DATCON.B.RM = mode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2330  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2331  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2332  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2333  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2334  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2335      asclin->DATCON.B.RESPONSE = __minu(threshold, 256);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2336  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2337  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2338  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2339  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2340  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  2341      asclin->BRG.B.NUMERATOR = numerator;
	ld.hu	d15,[a15]34
.L485:
	insert	d15,d15,d9,#0,#12
	st.h	[a15]34,d15
.L484:
	fret
.L234:
	; End of function
	.sdecl	'.text.IfxAsclin.IfxAsclin_setBitTiming',code,cluster('IfxAsclin_setBitTiming')
	.sect	'.text.IfxAsclin.IfxAsclin_setBitTiming'
	.align	2
	
	.global	IfxAsclin_setBitTiming

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   242      IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   243      IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   244      IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   245      IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   246      IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   247  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   248  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   249  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   250  boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
; Function IfxAsclin_setBitTiming
.L102:
IfxAsclin_setBitTiming:	.type	func
	mov.aa	a15,a4
.L297:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
	ld.bu	d15,[a15]76
.L298:
	sub.a	a10,#24
.L301:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
	and	d15,#31
	st.w	[a10]12,d7
.L302:
	mov	d10,d6

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
	st.w	[a10]16,d15
.L489:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   251  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   252      IfxAsclin_ClockSource source = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   253      float32               fOvs;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   254      uint32                d      = 0, n, dBest = 1, nBest = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   255      float32               f;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   256  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   257      /* Set the PD frequency */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   258      float32               fpd = IfxAsclin_getPdFrequency(asclin);
	mov	e8,d4,d5
	call	IfxAsclin_getPdFrequency
.L487:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   259      oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
	add	d8,#1
.L590:
	max.u	d15,d8,#4
.L591:
	extr.u	d15,d15,#0,#8
	st.w	[a10]4,d15
.L491:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   260      samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
	max.u	d15,d10,#1
	st.w	[a10]8,d15
.L304:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   261      fOvs         = baudrate * oversampling;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   262      float32               relError   = fOvs;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   263      float32               limit      = 0.001 * fOvs;                     // save the error limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   265      boolean               terminated = FALSE;
	mov	d5,#0
.L305:
	ld.w	d15,[a10]4
.L306:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   266      float32               newRelError;                                   //modified by Hassan
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   267      uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   269      d = (uint32)(fpd / fOvs);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   270      n = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   272      if (d >> 12)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   273      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   274          if (((uint32)(fpd / (baudrate * 16))) >> 12)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   275          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   276              /* Increase the value of the prescalar to generate the required baudrate */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   277              IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   278          }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   279          else
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   280          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   281              /* Increase the value of the oversampling to generate the required baudrate */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   282              IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   283          }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   284      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   286      dBest          = d;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   287      nBest          = n;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   288      adder_facL_min = 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   289      f              = (fpd * n) / d;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   290      relError       = __absf(fOvs - f);
	mov	d10,d5
.L307:
	utof	d15,d15
.L308:
	mov	d3,d5
.L309:
	mul.f	d4,d9,d15
	ld.w	d15,.3.cnt
.L310:
	mov	d9,#1
.L493:
	div.f	d0,d2,d4
.L592:
	mul.f	d15,d4,d15
	st.w	[a10],d15
.L494:
	ftouz	d1,d0
.L496:
	utof	d0,d1
.L593:
	mov	d8,d1
.L497:
	div.f	d0,d2,d0
.L498:
	sub.f	d11,d4,d0
.L500:
	cmp.f	d15,d11,d10
.L495:
	jz.t	d15:0,.L34
	insn.t	d11,d11:31,d11:31
.L34:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   291  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   292      if (relError <= limit)
	ld.w	d0,[a10]
.L499:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   293      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   294          terminated = TRUE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   295      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   296  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   297      for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
	mov	d13,#2
.L501:
	cmp.f	d15,d11,d0
	and	d15,#3
	ne	d15,d15,#0
.L594:
	cmov	d5,d15,#1
	j	.L36
.L37:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   298      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   299          if (n == 2)
	jne	d13,#2,.L38
.L595:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   300          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   301              adder_facL = 1;
	mov	d6,#1
.L502:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   302              adder_facH = 1;
	mov	d12,#1
	j	.L40
.L38:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   303          }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   304          else
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   305          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   306              adder_facL = (adder_facL_min * n) / nBest;
	mul	d0,d3,d13
.L503:
	div.u	e6,d0,d9
.L504:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   307              adder_facH = adder_facL + 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   308          }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   309  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   310          for (count = adder_facL; count <= adder_facH; count++)
	add	d12,d6,#1
	j	.L40
.L41:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   311          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   312              f           = (fpd * n) / (n * d + count);
	madd	d14,d6,d13,d1
.L596:
	utof	d0,d13
.L597:
	mul.f	d0,d2,d0
.L598:
	utof	d15,d14
.L599:
	div.f	d15,d0,d15
.L505:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   313              newRelError = __absf(fOvs - f);
	sub.f	d0,d4,d15
	cmp.f	d15,d0,d10
.L506:
	jz.t	d15:0,.L43
	insn.t	d0,d0:31,d0:31
.L43:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   314  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   315              if (relError > (newRelError))
	cmp.f	d15,d11,d0
.L600:
	jz.t	d15:2,.L44
.L601:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   316              {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   317                  relError       = newRelError;
	mov	d11,d0
.L602:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   318                  nBest          = n;
	mov	e8,d13,d14
.L603:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   319                  dBest          = (n * d + count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   320                  adder_facL_min = count;
	mov	d3,d6
.L44:
	add	d6,#1
.L40:
	jge.u	d12,d6,.L41
.L604:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   321              }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   322          }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   323  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   324          if (relError <= limit)
	ld.w	d15,[a10]
.L507:
	cmp.f	d15,d11,d15
.L508:
	and	d15,#3
.L605:
	jne	d15,#0,.L45
.L606:
	add	d13,#1
.L36:
	jne	d5,#0,.L46
.L607:
	mul	d15,d13,d1
.L608:
	mov	d0,#4095
.L609:
	jge.u	d0,d15,.L37
.L46:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   325          {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   326              break;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   327          }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   328      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   329  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   330      IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
.L45:
	mov	d4,#0
	mov.aa	a4,a15
.L492:
	call	IfxAsclin_setClockSource
.L490:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   331      asclin->BRG.B.DENOMINATOR = dBest;
	ld.hu	d15,[a15]32
.L509:
	insert	d15,d15,d8,#0,#12
	st.h	[a15]32,d15
.L488:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   332      asclin->BRG.B.NUMERATOR   = nBest;
	fcall	.cocofun_5
.L510:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   333  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   334      /* Set the SHIFT frequency */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   335      asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
	ld.w	d15,[a10]4
.L511:
	ld.bu	d0,[a15]22
.L610:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   336  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   337      /* Set the sampling point */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   338      asclin->BITCON.B.SAMPLEPOINT = samplepoint;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   339  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   340      /* Set the median filter */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   341      asclin->BITCON.B.SM = medianFilter ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   343      IfxAsclin_setClockSource(asclin, source);
	add	d15,#-1
	mov.aa	a4,a15
.L512:
	insert	d15,d0,d15,#0,#4
	st.b	[a15]22,d15
.L611:
	ld.w	d15,[a10]8
.L514:
	ld.bu	d0,[a15]23
.L612:
	ld.w	d4,[a10]16
.L613:
	insert	d15,d0,d15,#0,#4
	st.b	[a15]23,d15
.L515:
	ld.w	d15,[a10]12
.L516:
	ld.bu	d0,[a15]23
.L614:
	ne	d15,d15,#0
.L517:
	insert	d15,d0,d15,#7,#1
	st.b	[a15]23,d15
.L615:
	call	IfxAsclin_setClockSource
.L513:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   344  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   345      return TRUE;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   346  }
	mov	d2,#1
	ret
.L279:
	
__IfxAsclin_setBitTiming_function_end:
	.size	IfxAsclin_setBitTiming,__IfxAsclin_setBitTiming_function_end-IfxAsclin_setBitTiming
.L154:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_setClockSource',code,cluster('IfxAsclin_setClockSource')
	.sect	'.text.IfxAsclin.IfxAsclin_setClockSource'
	.align	2
	
	.global	IfxAsclin_setClockSource

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   347  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   349  void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
; Function IfxAsclin_setClockSource
.L104:
IfxAsclin_setClockSource:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   350  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   351      asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
	ld.bu	d15,[a4]76
.L677:
	insert	d15,d15,d4,#0,#5
	st.b	[a4]76,d15
.L678:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   352  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   353      /* Waits TW or polls for CSR.CON to change */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   354      if (clockSource == IfxAsclin_ClockSource_noClock)
	jne	d4,#0,.L48

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   355      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   356          while (IfxAsclin_getClockStatus(asclin) != 0U)
.L49:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->CSR.B.CON;
	ld.bu	d15,[a4]79
.L431:
	jnz.t	d15:7,.L49
.L679:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   357          {}
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   358      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   359      else
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   360      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   361          while (IfxAsclin_getClockStatus(asclin) != 1U)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   362          {}
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   363      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   364  }
	ret
.L48:
.L51:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    10   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    11   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    16   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    17   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    19   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    25   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    26   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    27   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    31   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    32   * language processor.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    33   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    40   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    41   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    42   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    43   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    44   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    45   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    46   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    47   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    48   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    49   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    50   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    51   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    52   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    53   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    54   * \ingroup IfxLld_Asclin_Std
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    55   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    56  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    57  #ifndef IFXASCLIN_H
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    58  #define IFXASCLIN_H 1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    59  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    60  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    61  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    63  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    64  #include "_Impl/IfxAsclin_cfg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "IfxAsclin_reg.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    71  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    72  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    73  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    74  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    75  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    76  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    77   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    78  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    79   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    80   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    81  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    82  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    83      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    85  } IfxAsclin_Checksum;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    86  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    87  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    88   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    89   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    90  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    91  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    92      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    94  } IfxAsclin_ChecksumInjection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    95  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    96  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    97   * Idle level is the level outside the data transmission time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    98   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	    99   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   100  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   101  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   102      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   104  } IfxAsclin_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   105  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   106  /** \brief Selection of clock source\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   107   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   108   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   109  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   110  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   111      IfxAsclin_ClockSource_noClock      = 0,  /**< \brief no clock will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_ascFastClock = 2,  /**< \brief f asclinf wiil be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_ascSlowClock = 4   /**< \brief f asclins will be supplied */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   114  } IfxAsclin_ClockSource;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   115  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   116  /** \brief CTS input pin selection\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   117   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   118   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   119  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   120  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   121      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   122      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   123      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   124      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   125  } IfxAsclin_CtsInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   126  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   127  /** \brief Number of bits per transfer\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   128   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   130  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   131  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   132      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   133      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   134      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   135      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   148  } IfxAsclin_DataLength;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   149  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   150  /** \brief Defines the interrupt generation modes of Tx FIFO and Rx FIFO\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   151   * Definition in Ifx_ASCLIN.RXFIFOCON.B.FM and Ifx_ASCLIN.TXFIFOCON.B.FM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   152   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   154  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   155      IfxAsclin_FifoInterruptMode_combined,  /**< \brief Combined Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   156      IfxAsclin_FifoInterruptMode_single,    /**< \brief Single Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   157      IfxAsclin_FifoInterruptMode_batch      /**< \brief Batch Move Mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   158  } IfxAsclin_FifoInterruptMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   160  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   161   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   162   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   163  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   164  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   165      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   166      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   167      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   168      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   169  } IfxAsclin_FrameMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   170  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   171  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   172   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   173   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   174  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   175  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   176      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   177      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   178  } IfxAsclin_HeaderResponseSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   179  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   180  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   181   * SPI mode: this is the idle time between the frames.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   182   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   183   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   184   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   185  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   186  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   189      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   190      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   191      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   192      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   193      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   194      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   195  } IfxAsclin_IdleDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   196  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   197  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   198   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   199   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   200   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   201  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   202  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   205      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   206      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   207      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   208      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   209      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   210      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   211  } IfxAsclin_LeadDelay;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   212  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   213  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   214   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   215   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   216  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   217  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   218      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   219      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   220  } IfxAsclin_LinMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   221  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   222  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   223   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   224   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   225  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   226  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   227      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   228      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   229  } IfxAsclin_LinResponseTimeoutMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   230  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   231  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   232   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   233   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   234  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   235  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   243      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   244      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   245      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   246      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   247      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   248      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   249  } IfxAsclin_OversamplingFactor;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   251  /** \brief Type of parity bit attached to data bits\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   252   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   253   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   254  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   255  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   256      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   257      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   258  } IfxAsclin_ParityType;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   259  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   260  /** \brief Receive buffer mode\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   261   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   263  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   264  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   265      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   266      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   267  } IfxAsclin_ReceiveBufferMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   268  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   269  /** \brief Polarity of the RTS and CTS signals\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   270   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   271   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   273  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   274      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   275      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   276  } IfxAsclin_RtsCtsPolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   277  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   278  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   279   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   280   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   281  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   282  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   293      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   294      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   295      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   296      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   297      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   298      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   299  } IfxAsclin_RxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   300  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   301  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   302   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   303   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   304  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   305  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   306      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   307      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   308      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   309      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   310  } IfxAsclin_RxFifoOutletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   311  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   312  /** \brief Alternate input selection for Rx signal.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   313   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   314   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   315  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   316  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   319      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   320      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   321      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   322      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   323      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   324      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   325  } IfxAsclin_RxInputSelect;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   326  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   327  /** \brief Sample point position\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   328   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   329   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   330  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   331  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   341      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   342      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   343      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   344      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   345      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   346      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   347  } IfxAsclin_SamplePointPosition;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   348  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   349  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   350   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   351   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   352  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   353  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   354      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   355      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   356  } IfxAsclin_SamplesPerBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   357  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   358  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   359   * ASC and LIN mode: should be set to 0.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   360   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   362  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   363  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   364      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   365      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   366  } IfxAsclin_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   367  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   368  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   369   * Outside the data transmission, leading and trailing time intervals.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   370   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   371   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   372  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   373  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   374      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   375      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   376  } IfxAsclin_SlavePolarity;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   378  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   379   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   380   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   381  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   383      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   384      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   385  } IfxAsclin_SleepMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   386  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   387  /** \brief Error status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   388   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   389  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   390  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   391      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   392      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   393  } IfxAsclin_Status;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   395  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   396   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   397   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   398  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   399  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   402      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   403      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   404      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   405      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   406      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   407      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   408  } IfxAsclin_StopBit;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   409  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   410  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   411   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   413  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   414      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   415      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   416      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   417  } IfxAsclin_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   418  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   419  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   420   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   422  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   423  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   424      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   425      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   426      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   427      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   428  } IfxAsclin_TxFifoInletWidth;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   429  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   430  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   431   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   432   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   433  typedef enum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   434  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   445      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   446      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   447      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   448      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   449      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   450      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   451  } IfxAsclin_TxFifoInterruptLevel;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   453  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   454  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   455  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   456   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   457  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   458  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   459  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   460  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief clears all the flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the transmission pending flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Clears the transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Flushes (empties) the Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   608   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   610  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   612  /** \brief Sets the baudrate detection's lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   613   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param limit value of the lower limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   615   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   616   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   617  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   618  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   619  /** \brief Sets the baudrate detection's upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   620   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param limit value of the upper limit
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   622   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   623   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   624  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   625  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   626  /** \brief Sets the checksum injection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   627   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param csi checksum injection selection (not written / written)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   630   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   631  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   633  /** \brief Sets the checksum mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   634   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param mode checksum mode selection (classic / enhanced)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   636   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   637   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   638  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   640  /** \brief Sets the data length (number of bits per transfer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   641   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param length data length selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   643   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   644   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   645  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   646  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   647  /** \brief Sets the denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   648   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param denominator value of the denominator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the disable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets the enable module request
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   662   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   663   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   664  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   665  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   666  /** \brief Sets digital glitch filter depth
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   667   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param depth digital glitch filter depth selection (1 to 63)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   669   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   670   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   671  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   672  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   673  /** \brief Sets the header response selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   674   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param type type of selection (header and response or header only)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   676   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   677   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   678  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   679  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   680  /** \brief Sets the idle delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   681   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param delay idle delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernal reset of the KRST1
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the kernel reset of the KRST0
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   695   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   696   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   697  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   699  /** \brief Sets the lead delay
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   700   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param delay lead delay selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   702   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   703   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   704  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   706  /** \brief Sets the LIN break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   707   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param length value of the break length
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   709   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   710   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   711  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   712  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   713  /** \brief Sets the LIN header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   714   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param timeout value of the header timeout
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   717   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   718  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   719  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   720  /** \brief Sets the LIN mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   721   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param mode mode selection (slave / master)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   723   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   724   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   725  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   726  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   727  /** \brief Sets the LIN response timeout mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   728   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param mode LIN response timeout mode selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   730   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   731   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   732  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   733  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   734  /** \brief Sets the LIN response timeout threshold
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   735   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   738   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   739  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   741  /** \brief Sets the numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   742   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param numerator value of the numerator
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   744   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   745   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   746  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   748  /** \brief Sets the division ratio of the baudrate post divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   749   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param ovsFactor value of oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   751   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   752   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   753  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   754  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   755  /** \brief Sets the parity type
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   756   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param type parity type selction (even / odd)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   759   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   760  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   761  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   762  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   763   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param prescaler value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   766   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   767  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   768  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   769  /** \brief Sets the receive buffer mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   770   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   773   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   774  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   775  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   776  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   777   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   779   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   780   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   781  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   783  /** \brief Sets the receive FIFO outlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   784   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   786   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   787   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   788  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   790  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   791   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param medianFilter value of the median filter
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   794   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   795  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   796  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   797  /** \brief Sets the sampling point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   798   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param spPosition sample point position selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   800   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   801   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   802  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   803  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   804  /** \brief Sets the shift direction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   805   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param dir shift direction selection (LSB / MSB first)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   807   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   808   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   809  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   810  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   811  /** \brief Sets the number of stop bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   812   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param stopBit number of stop bits selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit header request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmit response request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmission wake request flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   832   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   833   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   834  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   835  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   836  /** \brief Sets the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   837   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   839   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   840   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   841  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   843  /** \brief Sets the Tx FIFO interrupt level
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   844   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   845   * \param level interrupt level selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   846   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   847   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   848  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   850  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   851  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   852  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   853   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   855  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   856  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   857  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return break detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the clock status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return clock status (off / on)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns the collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return collision detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns  the falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return falling edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return frame error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return header timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return kernel reset status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN auto baudrate detection error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN checksum error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return LIN parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the module status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return module status (enabled / disabled)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return parity error flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return value of prescaler
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return raising edge detected flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the received signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return received signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return response timeout flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return current filling level of Rx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return Rx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the receive FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return Rx FIFO underflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return receive response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmission pending flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the transmit signal status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return transmit signal status (0 is low & 1 is high)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return current filling level of Tx FIFO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return Tx FIFO level flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the transmit FIFO inlet width
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return Tx FIFO overflow flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit header end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Returns the transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \return transmit response end flag status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1048   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1049  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1050  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1051  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1052   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1053   * \param mode mode selection (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1054   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1055   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1056  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1057  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1058  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1059  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1060  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin Resource index of the ASCLIN
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return ASCLIN module register address
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1070   * \return Returns the ASCLIN module FA frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1072  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1073  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1074  /** \brief API to get the resource index of the ASCLIN specified.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return asclin resource index
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the OVS frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the PD frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module PD frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief Returns the SHIFT frequency
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \brief resets Asclin kernel
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1098   * \param asclin pointer to ASCLIN resgisters
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1099   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1100   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1101  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1102  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1103  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1104  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1105  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1106   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1107  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1108  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1109  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1110  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief disables all flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1115   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1116  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1117  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1118  /** \brief Enables/disables the auto baudrate detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1119   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1122   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1123  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1124  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1125  /** \brief Enables/disables break detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1126   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1129   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1130  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1131  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1132  /** \brief Enables/disables the collision detection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1133   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1136   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1137  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1138  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1139  /** \brief Enables/disables LIN collision detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1140   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1143   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1144  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1145  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1146  /** \brief Enables/disables CTS
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1147   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1150   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1151  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1152  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1153  /** \brief Enables/disables falling edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1154   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1157   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1158  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1159  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1160  /** \brief Enables/disables frame error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1161   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1164   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1165  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1166  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1167  /** \brief Enables/disables the hardware checksum
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1168   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1172  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1173  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1174  /** \brief Enables/disables header timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1175   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1178   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1179  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1180  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1181  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1182   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1185   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1186  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1187  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1188  /** \brief Enables/disables LIN checksum error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1189   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1192   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1193  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1194  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1195  /** \brief Enables/disables LIN parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1196   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1200  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1201  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1202  /** \brief Enables/disables the loop back mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1203   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1206   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1207  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1208  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1209  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1210   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1213   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1214  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1215  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1216  /** \brief Enables/disables parity error flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1217   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1220   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1221  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1222  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1223  /** \brief Enables/disables raising edge detected flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1224   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1227   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1228  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1229  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1230  /** \brief Enables/disables response timeout flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1231   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1235  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1236  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1237  /** \brief Enables/disables Rx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1238   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1242  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1243  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1244  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1245   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1248   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1249  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1250  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1251  /** \brief Enables/disables Rx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1252   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1255   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1256  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1257  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1258  /** \brief Enables/disables Rx FIFO underflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1259   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1262   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1263  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1264  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1265  /** \brief Enables/disables receive header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1266   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1269   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1270  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1271  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1272  /** \brief Enables/disables receive response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1273   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1276   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1277  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1278  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1279  /** \brief Enables/disables transmission completed flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1280   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1283   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1284  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1285  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1286  /** \brief Enables/disables Tx FIFO level flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1287   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1290   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1291  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1292  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1293  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1294   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param enable choice (enable/disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1297   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1298  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1299  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1300  /** \brief Enables/disables Tx FIFO overflow flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1301   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1304   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1305  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1306  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1307  /** \brief Enables/disables transmit header end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1308   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1311   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1312  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1313  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1314  /** \brief Enables/disables transmit response end flag
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1315   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1316   * \param enable choice (enable / disable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1317   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1318   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1319  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1320  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1321  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1322   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1323   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1326   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1327  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1328  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1329  /** \brief Selects the clock polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1330   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param cpol CPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1333   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1334  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1335  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1336  /** \brief Selects the CTS input pin
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1337   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param ctsi CTS input pin selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1340   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1341  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1342  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1343  /** \brief Selects the module's mode of operation
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1344   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1347   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1348  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1349  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1350  /** \brief Selects the RTS/CTS polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1351   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param rcpol RCPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1354   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1355  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1356  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1357  /** \brief Selects the Rx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1358   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1361   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1362  IFX_INLINE void IfxAsclin_setRxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1363  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1364  /** \brief Selects the alternate input for Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1365   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1366   * \param alti alternate input selection of Rx signal
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1368   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1369  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1371  /** \brief Selects the slave polarity
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1372   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1373   * \param spol SPOL selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1374   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1375   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1376  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1377  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1378  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1379   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin Pointer to ASCLIN module registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1384  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1385  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1386  /** \brief Selects the Tx FIFO interupt generation mode
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1387   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1388   * \param mode mode selction
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1389   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1390   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1391  IFX_INLINE void IfxAsclin_setTxFifoInterruptMode(Ifx_ASCLIN *asclin, IfxAsclin_FifoInterruptMode mode);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1392  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1393  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1394  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1395  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1396  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1397  /** \brief Set the bit timing
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1398   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \note this function required FA source and the PD frequency to be set to their final values
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1401   * \param baudrate Required baudrate
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1402   * \param oversampling The oversampling factor
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1403   * \param samplepoint The sample point position
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1404   * \param medianFilter Number of samples per bit (median filter)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \return TRUE if configuration was successfull
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1406   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1407  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1408  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1409  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1410  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1411  /** \addtogroup IfxLld_Asclin_Std_External
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1412   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1413  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1414  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1415  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1416  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Disables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1422  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1423  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1424  /** \brief Enables the ASC error interrupt Flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1425   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1426   * \param parEnable parity error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1427   * \param rfoEnable Rx FIFO overflow error
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1428   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1429   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1430  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1431  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1432  /** \brief Enables the module
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1433   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1436  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1437  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1438  /** \brief Returns the SRC pointer for ERR
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1439   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1440   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1441  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1442  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1443  /** \brief Returns the  SRC pointer for Rx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1445   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1446  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1447  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1448  /** \brief Returns the SRC pointer for Tx
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1449   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1450   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1451  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1452  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1453  /** \brief Reads data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1454   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1455   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1456   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1457   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1458   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1459  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1460  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1461  /** \brief Reads data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1464   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1465   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1466   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1467  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1468  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1469  /** \brief Reads data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1471   * \param data Array where the read data shall be stored
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1472   * \param count number of items to read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1473   * \return number of items that could not be read
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1474   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1475  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1476  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1477  /** \brief Sets the baudrate bit fields
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1479   * \param prescaler division ratio of the predivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1480   * \param numerator numerator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1481   * \param denominator denominator of the fractional divider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1482   * \param oversampling division ratio of the baudrate postdivider
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1484   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1485  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1486  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1487  /** \brief Sets the  clock source
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1488   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1489   * \param clockSource clock source selection
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1490   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1491   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1492  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1493  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1494  /** \brief Writes data up to 16 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1495   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1496   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1497   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1498   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1499   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1500  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1501  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1502  /** \brief Writes data up to 32 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1503   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1504   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1505   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1506   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1507   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1508  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1509  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1510  /** \brief Writes data up to 8 bits
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1511   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1512   * \param data Array of data to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1513   * \param count number of items to be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \return the number of items that could not be send
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1515   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1516  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1517  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1518  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1519  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1520  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1521   * \{ */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1522  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1523  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1524  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1525  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1526  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1527  /** \brief Initializes a CTS input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1528   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1529   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1531   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1533   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1534   * \param cts the CTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1535   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1538   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1539  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1540  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1541  /** \brief Initializes a RTS output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1542   * \param rts the RTS Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1543   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1546   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1547  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1548  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1549  /** \brief Initializes a RX input
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1550   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1551   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1552   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1553   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1554   *
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1555   * After the function call, the current clock can be enabled again.
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1556   * \param rx the RX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1557   * \param inputMode the pin input mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1558   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1559   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1560   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1561  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1562  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1563  /** \brief Initializes a SCLK output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1564   * \param sclk the SCLK Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1565   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1566   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1567   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1568   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1569  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1570  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1571  /** \brief Initializes a SLSO output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1572   * \param slso the SLSO Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1573   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1579  /** \brief Initializes a TX output
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param tx the TX Pin which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param outputMode the pin output mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \param padDriver the pad driver mode which should be configured
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1583   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1584   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1585  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1586  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1587  /** \} */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1588  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1589  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1590  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1591  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1592  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1593  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1594   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1595   * \return returns the value of RxDATA register
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1596   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1597  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1598  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1599  /**
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1600   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1601   * \param data data to be written
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1602   * \return None
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1603   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1604  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1605  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1606  /** \brief Returns the status of all error flags
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1607   * \param asclin pointer to ASCLIN registers
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1608   * \return status
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1609   */
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1610  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1611  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1612  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1613  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1614  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1615  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1616  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1617  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1618      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1619  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1620  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1621  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1622  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1623  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1624      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1625  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1626  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1627  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1628  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1629  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1630      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1631  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1632  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1633  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1634  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1635  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1636      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1637  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1638  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1639  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1640  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1641  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1642      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1643  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1644  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1645  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1646  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1647  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1648      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1649  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1650  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1651  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1652  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1653  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1654      asclin->KRSTCLR.B.CLR = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1655  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1656  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1657  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1658  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1659  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1660      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1661  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1662  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1663  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1664  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1665  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1666      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1667  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1668  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1669  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1670  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1671  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1672      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1673  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1674  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1675  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1676  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1677  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1678      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1679  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1680  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1681  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1682  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1683  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1684      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1685  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1686  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1687  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1688  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1689  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1690      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1691  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1692  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1693  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1694  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1695  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1696      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1697  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1698  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1699  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1700  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1701  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1702      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1703  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1704  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1705  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1706  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1707  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1708      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1709  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1710  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1711  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1712  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1713  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1714      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1715  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1716  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1717  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1718  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1719  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1720      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1721  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1722  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1723  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1724  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1725  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1726      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1727  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1728  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1729  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1730  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1731  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1732      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1733  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1734  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1735  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1736  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1737  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1738      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1739  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1740  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1741  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1742  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1743  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1744      asclin->FLAGSCLEAR.B.THC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1745  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1746  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1747  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1748  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1749  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1750      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1751  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1752  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1753  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1754  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1755  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1756      asclin->FLAGSENABLE.U = 0x00000000;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1757  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1758  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1759  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1760  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1761  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1762      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1763  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1764  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1765  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1766  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1767  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1768      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1770  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1771  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1772  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1774      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1776  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1777  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1778  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1780      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1782  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1783  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1784  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1786      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1787  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1788  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1789  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1790  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1791  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1792      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1793  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1794  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1795  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1796  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1797  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1798      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1799  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1800  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1801  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1802  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1803  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1804      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1805  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1806  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1807  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1808  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1809  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1810      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1811  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1812  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1813  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1814  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1815  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1816      asclin->FLAGSENABLE.B.LAE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1817  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1818  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1819  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1820  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1821  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1822      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1823  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1824  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1825  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1826  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1827  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1828      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1829  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1830  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1831  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1832  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1833  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1834      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1835  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1836  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1837  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1838  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1839  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1840      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1841  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1842  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1843  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1844  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1845  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1846      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1847  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1848  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1849  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1850  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1851  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1852      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1853  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1854  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1855  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1856  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1857  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1858      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1859  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1860  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1861  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1862  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1863  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1864      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1865  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1866  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1867  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1868  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1869  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1870      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1871  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1872  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1873  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1874  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1875  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1876      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1877  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1878  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1879  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1880  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1881  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1882      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1883  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1884  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1885  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1886  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1887  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1888      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1889  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1890  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1891  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1892  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1893  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1894      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1895  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1896  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1897  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1898  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1899  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1900      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1901  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1902  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1903  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1904  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1905  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1906      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1907  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1908  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1909  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1910  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1911  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1912      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1913  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1914  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1915  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1916  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1917  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1918      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1919  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1920  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1921  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1922  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1923  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1924      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1925  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1926  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1927  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1928  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1929  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1930      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1931  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1932  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1933  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1934  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1935  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1936      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1937  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1938  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1939  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1940  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1941  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1942      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1943  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1944  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1945  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1946  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1947  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1948      return asclin->FLAGS.B.BD;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1949  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1950  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1951  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1952  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1953  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1954      return asclin->CSR.B.CLKSEL;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1955  }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1956  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1957  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1958  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1959  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.h	  1960      return asclin->CSR.B.CON;
	ld.bu	d15,[a4]79
.L435:
	jz.t	d15:7,.L51
.L680:
	ret
.L427:
	
__IfxAsclin_setClockSource_function_end:
	.size	IfxAsclin_setClockSource,__IfxAsclin_setClockSource_function_end-IfxAsclin_setClockSource
.L209:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_write16',code,cluster('IfxAsclin_write16')
	.sect	'.text.IfxAsclin.IfxAsclin_write16'
	.align	2
	
	.global	IfxAsclin_write16

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   365  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   366  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   367  uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
; Function IfxAsclin_write16
.L106:
IfxAsclin_write16:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   368  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   369      volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;
	lea	a15,[a4]68
.L518:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   370  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   371      while ((count > 0))
	j	.L52
.L53:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   372      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   373          txData->U = *data++;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   374          count--;
	add	d4,#-1
	ld.hu	d15,[a5+]2
.L685:
	st.w	[a15],d15
.L52:
	jne	d4,#0,.L53
.L686:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   375      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   376  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   377      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   378  }
	mov	d2,#0
	ret
.L436:
	
__IfxAsclin_write16_function_end:
	.size	IfxAsclin_write16,__IfxAsclin_write16_function_end-IfxAsclin_write16
.L214:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_write32',code,cluster('IfxAsclin_write32')
	.sect	'.text.IfxAsclin.IfxAsclin_write32'
	.align	2
	
	.global	IfxAsclin_write32

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   379  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   380  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   381  uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
; Function IfxAsclin_write32
.L108:
IfxAsclin_write32:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   382  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   383      volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;
	lea	a15,[a4]68
.L519:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   384  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   385      while ((count > 0))
	j	.L55
.L56:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   386      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   387          txData->U = *data++;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   388          count--;
	add	d4,#-1
	ld.w	d15,[a5+]
.L691:
	st.w	[a15],d15
.L55:
	jne	d4,#0,.L56
.L692:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   389      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   390  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   391      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   392  }
	mov	d2,#0
	ret
.L442:
	
__IfxAsclin_write32_function_end:
	.size	IfxAsclin_write32,__IfxAsclin_write32_function_end-IfxAsclin_write32
.L219:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_write8',code,cluster('IfxAsclin_write8')
	.sect	'.text.IfxAsclin.IfxAsclin_write8'
	.align	2
	
	.global	IfxAsclin_write8

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   393  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   394  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   395  uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
; Function IfxAsclin_write8
.L110:
IfxAsclin_write8:	.type	func

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   396  {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   397      volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;
	lea	a15,[a4]68
.L520:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   398  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   399      while ((count > 0))
	j	.L58
.L59:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   400      {
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   401          txData->U = *data++;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   402          count--;
	add	d4,#-1
	ld.bu	d15,[a5+]
.L697:
	st.w	[a15],d15
.L58:
	jne	d4,#0,.L59
.L698:

; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   403      }
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   404  
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   405      return count;
; ..\0_Src\4_McHal\Tricore\Asclin\Std\IfxAsclin.c	   406  }
	mov	d2,#0
	ret
.L447:
	
__IfxAsclin_write8_function_end:
	.size	IfxAsclin_write8,__IfxAsclin_write8_function_end-IfxAsclin_write8
.L224:
	; End of function
	
	.sdecl	'.rodata.IfxScuCcu..1.ini',data,rom
	.sect	'.rodata.IfxScuCcu..1.ini'
.1.ini:	.type	object
	.size	.1.ini,16
	.byte	1,1,2,3
	.byte	4,5,6,6
	.byte	8,8,10,10
	.byte	12,12,12,15
	.calls	'IfxAsclin_disableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxAsclin_disableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxAsclin_disableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxAsclin_enableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxAsclin_enableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxAsclin_enableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getSourceFrequency'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getAsclinSFrequency'
	.calls	'IfxAsclin_getOvsFrequency','IfxAsclin_getPdFrequency'
	.calls	'IfxAsclin_getPdFrequency','IfxAsclin_getFaFrequency'
	.calls	'IfxAsclin_getShiftFrequency','IfxAsclin_getOvsFrequency'
	.calls	'IfxAsclin_getSrcPointerEr','IfxAsclin_getIndex'
	.calls	'IfxAsclin_getSrcPointerRx','IfxAsclin_getIndex'
	.calls	'IfxAsclin_getSrcPointerTx','IfxAsclin_getIndex'
	.calls	'IfxAsclin_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxAsclin_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxAsclin_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxAsclin_setBaudrateBitFields','IfxAsclin_setClockSource'
	.calls	'IfxAsclin_setBitTiming','IfxAsclin_getPdFrequency'
	.calls	'IfxAsclin_setBitTiming','IfxAsclin_setClockSource'
	.calls	'IfxAsclin_getSrcPointerEr','.cocofun_6'
	.calls	'IfxAsclin_getSrcPointerRx','.cocofun_4'
	.calls	'.cocofun_4','.cocofun_6'
	.calls	'IfxAsclin_getSrcPointerTx','.cocofun_4'
	.calls	'IfxAsclin_setBaudrateBitFields','.cocofun_5'
	.calls	'IfxAsclin_setBitTiming','.cocofun_5'
	.calls	'IfxAsclin_disableModule','',0
	.calls	'IfxAsclin_enableAscErrorFlags','',0
	.calls	'IfxAsclin_enableModule','',0
	.calls	'IfxAsclin_getAddress','',0
	.calls	'IfxAsclin_getFaFrequency','',16
	.calls	'IfxAsclin_getIndex','',0
	.calls	'IfxAsclin_getOvsFrequency','',0
	.calls	'IfxAsclin_getPdFrequency','',0
	.calls	'IfxAsclin_getShiftFrequency','',0
	.calls	'IfxAsclin_getSrcPointerEr','',0
	.calls	'.cocofun_6','',0
	.calls	'IfxAsclin_getSrcPointerRx','',0
	.calls	'.cocofun_4','',0
	.calls	'IfxAsclin_getSrcPointerTx','',0
	.calls	'IfxAsclin_read16','',0
	.calls	'IfxAsclin_read32','',0
	.calls	'IfxAsclin_read8','',0
	.calls	'IfxAsclin_resetModule','',0
	.calls	'IfxAsclin_setBaudrateBitFields','',0
	.calls	'.cocofun_5','',0
	.calls	'IfxAsclin_setBitTiming','',24
	.calls	'IfxAsclin_setClockSource','',0
	.calls	'IfxAsclin_write16','',0
	.calls	'IfxAsclin_write32','',0
	.extern	IfxAsclin_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuCcu_getAsclinSFrequency
	.extern	IfxScuCcu_getSourceFrequency
	.calls	'IfxAsclin_write8','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L112:
	.word	113974
	.half	3
	.word	.L113
	.byte	4
.L111:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L114
	.byte	2,1,1,3
	.word	170
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	173
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L245:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	218
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	230
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	342
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	316
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	348
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	348
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	316
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	457
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	457
	.byte	16,0,2,35,0,0,12,4,189,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	473
	.byte	4,2,35,0,0
.L278:
	.byte	7
	.byte	'unsigned char',0,1,8
.L276:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	609
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,4,197,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	648
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,10,16,4,11
	.byte	'AE',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	609
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,4,205,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	914
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,136,17,25,12,13
	.byte	'CON0',0
	.word	569
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	874
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1105
	.byte	4,2,35,8,0,14
	.word	1145
	.byte	3
	.word	1208
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1,5
	.byte	'watchdog',0,3,164,4,65
	.word	1213
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	626
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1,5
	.byte	'password',0,3,197,4,59
	.word	626
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1213
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	626
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	626
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	626
	.byte	1,1,5
	.byte	'watchdog',0,3,220,4,74
	.word	1213
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	626
	.byte	1,1,6,0,15,6,161,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_2',0,2,16
	.byte	'IfxCpu_ResourceCpu_3',0,3,16
	.byte	'IfxCpu_ResourceCpu_4',0,4,16
	.byte	'IfxCpu_ResourceCpu_5',0,5,16
	.byte	'IfxCpu_ResourceCpu_none',0,6,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,5,235,6,31
	.word	1623
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,233,5,20
	.word	609
	.byte	1,1,6,0
.L265:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,255,6,19
	.word	1870
	.byte	1,1,5
	.byte	'address',0,5,255,6,55
	.word	626
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,156,7,20
	.word	609
	.byte	1,1,5
	.byte	'address',0,5,156,7,70
	.word	626
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,138,9,17,1,1,5
	.byte	'address',0,5,138,9,56
	.word	1870
	.byte	5
	.byte	'count',0,5,138,9,72
	.word	1870
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,8,145,3,16,4,11
	.byte	'P0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,8,171,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2101
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,8,171,2,16,4,11
	.byte	'PS0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,8,251,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2417
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,8,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	609
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,8,155,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2988
	.byte	4,2,35,0,0,18,4
	.word	609
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,8,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	609
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	609
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	609
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	609
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	609
	.byte	5,0,2,35,3,0,12,8,171,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3117
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,8,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	609
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	609
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	609
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	609
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	609
	.byte	5,0,2,35,3,0,12,8,187,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3332
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,8,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	609
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	609
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	609
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	609
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	609
	.byte	5,0,2,35,3,0,12,8,195,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3547
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,8,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	609
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	609
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	609
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	609
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	609
	.byte	5,0,2,35,3,0,12,8,179,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3764
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,8,141,1,16,4,11
	.byte	'P0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,8,163,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3984
	.byte	4,2,35,0,0,18,24
	.word	609
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,8,212,3,16,4,11
	.byte	'PD0',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	609
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	609
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	609
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	609
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	609
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	609
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	609
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	609
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	609
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	609
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	609
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	609
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	609
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	609
	.byte	2,0,2,35,3,0,12,8,195,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4308
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,8,233,3,16,4,11
	.byte	'PD8',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	609
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	609
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	609
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	609
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	609
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	609
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	609
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	609
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	609
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	609
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	609
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	609
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	609
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	609
	.byte	2,0,2,35,3,0,12,8,203,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4612
	.byte	4,2,35,0,0,18,8
	.word	609
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,8,111,16,4,11
	.byte	'EN0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,8,147,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4937
	.byte	4,2,35,0,0,18,12
	.word	609
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,8,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,8,187,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5277
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,8,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,8,179,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5643
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,8,230,2,16,4,11
	.byte	'PS0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	434
	.byte	28,0,2,35,0,0,12,8,139,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6007
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,8,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	434
	.byte	24,0,2,35,0,0,12,8,155,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6154
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,8,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	434
	.byte	20,0,2,35,0,0,12,8,163,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6323
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,8,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	626
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,8,147,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6495
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,8,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	626
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	626
	.byte	12,0,2,35,2,0,12,8,219,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6670
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,8,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	8,0,2,35,3,0,12,8,235,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6844
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,8,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	4,0,2,35,3,0,12,8,243,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7018
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,8,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,8,227,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7194
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,8,208,2,16,4,11
	.byte	'PS0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,8,131,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7350
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,8,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	626
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,8,211,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7683
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,8,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	609
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	609
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,8,203,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8031
	.byte	4,2,35,0,0,18,32
	.word	8311
	.byte	19,7,0,18,56
	.word	609
	.byte	19,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,105,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	32,0,2,35,0,0,12,8,139,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8369
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,68,16,4,11
	.byte	'EN0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,8,131,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8456
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,8,220,5,25,128,2,13
	.byte	'OUT',0
	.word	2377
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2948
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	3068
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3108
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3292
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3507
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3724
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3944
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	3108
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	4259
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4299
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4572
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4888
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4928
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	5228
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5268
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5603
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5967
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4928
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	6114
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	6283
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6455
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6630
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6804
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6978
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	7154
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	7310
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7643
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7991
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4928
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	8351
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	8360
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	8416
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8983
	.byte	4,3,35,252,1,0,14
	.word	9023
	.byte	3
	.word	9593
	.byte	15,7,81,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,4
	.byte	'IfxPort_setPinModeInput',0,3,7,157,5,17,1,1,5
	.byte	'port',0,7,157,5,48
	.word	9598
	.byte	5
	.byte	'pinIndex',0,7,157,5,60
	.word	609
	.byte	5
	.byte	'mode',0,7,157,5,88
	.word	9603
	.byte	6,0,15,7,140,1,9,1,16
	.byte	'IfxPort_OutputMode_none',0,0,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,15,7,126,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,4
	.byte	'IfxPort_setPinModeOutput',0,3,7,163,5,17,1,1,5
	.byte	'port',0,7,163,5,49
	.word	9598
	.byte	5
	.byte	'pinIndex',0,7,163,5,61
	.word	609
	.byte	5
	.byte	'mode',0,7,163,5,90
	.word	9808
	.byte	5
	.byte	'index',0,7,163,5,114
	.word	9904
	.byte	6,0,15,7,187,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,7,169,5,17,1,1,5
	.byte	'port',0,7,169,5,44
	.word	9598
	.byte	5
	.byte	'pinIndex',0,7,169,5,56
	.word	609
	.byte	5
	.byte	'action',0,7,169,5,80
	.word	10217
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,9,157,14,17,1,1,5
	.byte	'timeSec',0,9,157,14,40
	.word	230
	.byte	17,6,0,0
.L257:
	.byte	8
	.byte	'IfxScuCcu_getAsclinFFrequency',0,3,9,207,12,20
	.word	230
	.byte	1,1
.L258:
	.byte	6,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,9,188,13,20
	.word	230
	.byte	1,1,6,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,11,68,16,4,11
	.byte	'SRPN',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	609
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	609
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	609
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	609
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	609
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,11,93,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10526
	.byte	4,2,35,0,0,14
	.word	10816
.L354:
	.byte	3
	.word	10855
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,10,247,1,17,1,1,5
	.byte	'src',0,10,247,1,60
	.word	10860
	.byte	6,0,10
	.byte	'_Ifx_ASCLIN_CLC_Bits',0,13,141,1,16,4,11
	.byte	'DISR',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	434
	.byte	28,0,2,35,0,0,12,13,232,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10908
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_IOCR_Bits',0,13,192,2,16,4,11
	.byte	'ALTI',0,1
	.word	609
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'DEPTH',0,2
	.word	626
	.byte	6,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	609
	.byte	6,0,2,35,1,11
	.byte	'CTS',0,1
	.word	609
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	626
	.byte	7,7,2,35,2,11
	.byte	'RCPOL',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'CPOL',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'SPOL',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'LB',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'CTSEN',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'RXM',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'TXM',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,176,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11068
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_ID_Bits',0,13,184,2,16,4,11
	.byte	'MODREV',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	609
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	626
	.byte	16,0,2,35,2,0,12,13,168,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11363
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_TXFIFOCON_Bits',0,13,173,3,16,4,11
	.byte	'FLUSH',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'ENO',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	2,4,2,35,0,11
	.byte	'FM',0,1
	.word	609
	.byte	2,2,2,35,0,11
	.byte	'INW',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'INTLEVEL',0,1
	.word	609
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'FILL',0,1
	.word	609
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	626
	.byte	11,0,2,35,2,0,12,13,144,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11488
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_RXFIFOCON_Bits',0,13,152,3,16,4,11
	.byte	'FLUSH',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'ENI',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	2,4,2,35,0,11
	.byte	'FM',0,1
	.word	609
	.byte	2,2,2,35,0,11
	.byte	'OUTW',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'INTLEVEL',0,1
	.word	609
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'FILL',0,1
	.word	609
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	626
	.byte	10,1,2,35,2,11
	.byte	'BUF',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,128,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11727
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_BITCON_Bits',0,13,111,16,4,11
	.byte	'PRESCALER',0,2
	.word	626
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'OVERSAMPLING',0,1
	.word	609
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	609
	.byte	4,0,2,35,2,11
	.byte	'SAMPLEPOINT',0,1
	.word	609
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	3,1,2,35,3,11
	.byte	'SM',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,208,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11982
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_FRAMECON_Bits',0,13,168,2,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	6,2,2,35,0,11
	.byte	'IDLE',0,2
	.word	626
	.byte	3,7,2,35,0,11
	.byte	'STOP',0,1
	.word	609
	.byte	3,4,2,35,1,11
	.byte	'LEAD',0,1
	.word	609
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'MODE',0,1
	.word	609
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	626
	.byte	10,4,2,35,2,11
	.byte	'MSB',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'CEN',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'PEN',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'ODD',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,160,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12203
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_DATCON_Bits',0,13,159,1,16,4,11
	.byte	'DATLEN',0,1
	.word	609
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	626
	.byte	9,3,2,35,0,11
	.byte	'HO',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'RM',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'CSM',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'RESPONSE',0,1
	.word	609
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	8,0,2,35,3,0,12,13,248,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12468
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_BRG_Bits',0,13,132,1,16,4,11
	.byte	'DENOMINATOR',0,2
	.word	626
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'NUMERATOR',0,2
	.word	626
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	4,0,2,35,3,0,12,13,224,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12665
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_BRD_Bits',0,13,123,16,4,11
	.byte	'LOWERLIMIT',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'UPPERLIMIT',0,1
	.word	609
	.byte	8,0,2,35,1,11
	.byte	'MEASURED',0,2
	.word	626
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	4,0,2,35,3,0,12,13,216,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12823
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_LIN_CON_Bits',0,13,239,2,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	23,9,2,35,0,11
	.byte	'CSI',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'CSEN',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'MS',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'ABD',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	4,0,2,35,3,0,12,13,216,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12977
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_LIN_BTIMER_Bits',0,13,232,2,16,4,11
	.byte	'BREAK',0,1
	.word	609
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,12,13,208,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13177
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_LIN_HTIMER_Bits',0,13,251,2,16,4,11
	.byte	'HEADER',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	434
	.byte	24,0,2,35,0,0,12,13,224,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13291
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_LIN',0,13,161,5,25,12,13
	.byte	'CON',0
	.word	13137
	.byte	4,2,35,0,13
	.byte	'BTIMER',0
	.word	13251
	.byte	4,2,35,4,13
	.byte	'HTIMER',0
	.word	13366
	.byte	4,2,35,8,0,14
	.word	13406
	.byte	10
	.byte	'_Ifx_ASCLIN_FLAGS_Bits',0,13,171,1,16,4,11
	.byte	'TH',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'TR',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'RH',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'RR',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'FED',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'RED',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	626
	.byte	6,3,2,35,0,11
	.byte	'TWRQ',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'THRQ',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'TRRQ',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'PE',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'TC',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'FE',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'HT',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'RT',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'BD',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'LP',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'LA',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'LC',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'CE',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'RFO',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'RFU',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'RFL',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'TFO',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'TFL',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,128,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13479
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_FLAGSSET_Bits',0,13,136,2,16,4,11
	.byte	'THS',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'TRS',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'RHS',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'RRS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'FEDS',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'REDS',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	626
	.byte	6,3,2,35,0,11
	.byte	'TWRQS',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'THRQS',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'TRRQS',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'PES',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'TCS',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'FES',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'HTS',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'RTS',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'BDS',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'LPS',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'LAS',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'LCS',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'CES',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'RFOS',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'RFUS',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'RFLS',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'TFOS',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'TFLS',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,152,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13965
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_FLAGSCLEAR_Bits',0,13,203,1,16,4,11
	.byte	'THC',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'TRC',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'RHC',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'RRC',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'FEDC',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'REDC',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	626
	.byte	6,3,2,35,0,11
	.byte	'TWRQC',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'THRQC',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'TRRQC',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'PEC',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'TCC',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'FEC',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'HTC',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'RTC',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'BDC',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'LPC',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'LAC',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'LCC',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'CEC',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'RFOC',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'RFUC',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'RFLC',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'TFOC',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'TFLC',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,136,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14478
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_FLAGSENABLE_Bits',0,13,235,1,16,4,11
	.byte	'THE',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'TRE',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'RHE',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'RRE',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'FEDE',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'REDE',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	626
	.byte	9,0,2,35,0,11
	.byte	'PEE',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'TCE',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'FEE',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'HTE',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'RTE',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'BDE',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'LPE',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'LAE',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'LCE',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'CEE',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'RFOE',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'RFUE',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'RFLE',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'TFOE',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'TFLE',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,144,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14993
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_TXDATA_Bits',0,13,167,3,16,4,11
	.byte	'DATA',0,4
	.word	434
	.byte	32,0,2,35,0,0,12,13,136,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15458
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_RXDATA_Bits',0,13,140,3,16,4,11
	.byte	'DATA',0,4
	.word	434
	.byte	32,0,2,35,0,0,12,13,240,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15545
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_CSR_Bits',0,13,151,1,16,4,11
	.byte	'CLKSEL',0,1
	.word	609
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,4
	.word	434
	.byte	26,1,2,35,0,11
	.byte	'CON',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,240,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15632
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_RXDATAD_Bits',0,13,146,3,16,4,11
	.byte	'DATA',0,4
	.word	434
	.byte	32,0,2,35,0,0,12,13,248,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15755
	.byte	4,2,35,0,0,18,148,1
	.word	609
	.byte	19,147,1,0,10
	.byte	'_Ifx_ASCLIN_OCS_Bits',0,13,130,3,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	609
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	609
	.byte	2,0,2,35,3,0,12,13,232,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15854
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_KRSTCLR_Bits',0,13,225,2,16,4,11
	.byte	'CLR',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	434
	.byte	31,0,2,35,0,0,12,13,200,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16017
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_KRST1_Bits',0,13,218,2,16,4,11
	.byte	'RST',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	434
	.byte	31,0,2,35,0,0,12,13,192,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16126
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_KRST0_Bits',0,13,210,2,16,4,11
	.byte	'RST',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	434
	.byte	30,0,2,35,0,0,12,13,184,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16233
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_ACCEN1_Bits',0,13,105,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	32,0,2,35,0,0,12,13,200,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16359
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_ACCEN0_Bits',0,13,68,16,4,11
	.byte	'EN0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	609
	.byte	1,0,2,35,3,0,12,13,192,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16451
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN',0,13,181,5,25,128,2,13
	.byte	'CLC',0
	.word	11028
	.byte	4,2,35,0,13
	.byte	'IOCR',0
	.word	11323
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	11448
	.byte	4,2,35,8,13
	.byte	'TXFIFOCON',0
	.word	11687
	.byte	4,2,35,12,13
	.byte	'RXFIFOCON',0
	.word	11942
	.byte	4,2,35,16,13
	.byte	'BITCON',0
	.word	12163
	.byte	4,2,35,20,13
	.byte	'FRAMECON',0
	.word	12428
	.byte	4,2,35,24,13
	.byte	'DATCON',0
	.word	12625
	.byte	4,2,35,28,13
	.byte	'BRG',0
	.word	12783
	.byte	4,2,35,32,13
	.byte	'BRD',0
	.word	12937
	.byte	4,2,35,36,13
	.byte	'LIN',0
	.word	13474
	.byte	12,2,35,40,13
	.byte	'FLAGS',0
	.word	13925
	.byte	4,2,35,52,13
	.byte	'FLAGSSET',0
	.word	14438
	.byte	4,2,35,56,13
	.byte	'FLAGSCLEAR',0
	.word	14953
	.byte	4,2,35,60,13
	.byte	'FLAGSENABLE',0
	.word	15418
	.byte	4,2,35,64,13
	.byte	'TXDATA',0
	.word	15505
	.byte	4,2,35,68,13
	.byte	'RXDATA',0
	.word	15592
	.byte	4,2,35,72,13
	.byte	'CSR',0
	.word	15715
	.byte	4,2,35,76,13
	.byte	'RXDATAD',0
	.word	15803
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	15843
	.byte	148,1,2,35,84,13
	.byte	'OCS',0
	.word	15977
	.byte	4,3,35,232,1,13
	.byte	'KRSTCLR',0
	.word	16086
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	16193
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	16319
	.byte	4,3,35,244,1,13
	.byte	'ACCEN1',0
	.word	16411
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	16983
	.byte	4,3,35,252,1,0,14
	.word	17023
.L240:
	.byte	3
	.word	17465
.L410:
	.byte	4
	.byte	'IfxAsclin_setDenominator',0,3,12,201,17,17,1,1
.L412:
	.byte	5
	.byte	'asclin',0,12,201,17,54
	.word	17470
.L414:
	.byte	5
	.byte	'denominator',0,12,201,17,69
	.word	626
.L416:
	.byte	6,0
.L321:
	.byte	4
	.byte	'IfxAsclin_setDisableModuleRequest',0,3,12,207,17,17,1,1
.L324:
	.byte	5
	.byte	'asclin',0,12,207,17,63
	.word	17470
.L326:
	.byte	6,0
.L348:
	.byte	4
	.byte	'IfxAsclin_setEnableModuleRequest',0,3,12,213,17,17,1,1
.L351:
	.byte	5
	.byte	'asclin',0,12,213,17,62
	.word	17470
.L353:
	.byte	6,0
.L402:
	.byte	4
	.byte	'IfxAsclin_setNumerator',0,3,12,163,18,17,1,1
.L404:
	.byte	5
	.byte	'asclin',0,12,163,18,52
	.word	17470
.L406:
	.byte	5
	.byte	'numerator',0,12,163,18,67
	.word	626
.L408:
	.byte	6,0
.L282:
	.byte	15,12,234,1,9,1,16
	.byte	'IfxAsclin_OversamplingFactor_4',0,3,16
	.byte	'IfxAsclin_OversamplingFactor_5',0,4,16
	.byte	'IfxAsclin_OversamplingFactor_6',0,5,16
	.byte	'IfxAsclin_OversamplingFactor_7',0,6,16
	.byte	'IfxAsclin_OversamplingFactor_8',0,7,16
	.byte	'IfxAsclin_OversamplingFactor_9',0,8,16
	.byte	'IfxAsclin_OversamplingFactor_10',0,9,16
	.byte	'IfxAsclin_OversamplingFactor_11',0,10,16
	.byte	'IfxAsclin_OversamplingFactor_12',0,11,16
	.byte	'IfxAsclin_OversamplingFactor_13',0,12,16
	.byte	'IfxAsclin_OversamplingFactor_14',0,13,16
	.byte	'IfxAsclin_OversamplingFactor_15',0,14,16
	.byte	'IfxAsclin_OversamplingFactor_16',0,15,0
.L420:
	.byte	4
	.byte	'IfxAsclin_setOversampling',0,3,12,169,18,17,1,1
.L422:
	.byte	5
	.byte	'asclin',0,12,169,18,55
	.word	17470
.L424:
	.byte	5
	.byte	'ovsFactor',0,12,169,18,92
	.word	17734
.L426:
	.byte	6,0
.L394:
	.byte	4
	.byte	'IfxAsclin_setPrescaler',0,3,12,181,18,17,1,1
.L397:
	.byte	5
	.byte	'asclin',0,12,181,18,52
	.word	17470
.L399:
	.byte	5
	.byte	'prescaler',0,12,181,18,67
	.word	626
.L401:
	.byte	6,0
.L249:
	.byte	8
	.byte	'IfxAsclin_getClockSource',0,3,12,160,15,18
	.word	609
	.byte	1,1
.L251:
	.byte	5
	.byte	'asclin',0,12,160,15,55
	.word	17470
.L253:
	.byte	6,0
.L430:
	.byte	8
	.byte	'IfxAsclin_getClockStatus',0,3,12,166,15,20
	.word	609
	.byte	1,1
.L432:
	.byte	5
	.byte	'asclin',0,12,166,15,57
	.word	17470
.L434:
	.byte	6,0,4
	.byte	'IfxAsclin_enableCts',0,3,12,248,13,17,1,1,5
	.byte	'asclin',0,12,248,13,49
	.word	17470
	.byte	5
	.byte	'enable',0,12,248,13,65
	.word	609
	.byte	6,0
.L331:
	.byte	4
	.byte	'IfxAsclin_enableParityErrorFlag',0,3,12,180,14,17,1,1
.L333:
	.byte	5
	.byte	'asclin',0,12,180,14,61
	.word	17470
.L335:
	.byte	5
	.byte	'enable',0,12,180,14,77
	.word	609
.L337:
	.byte	6,0
.L338:
	.byte	4
	.byte	'IfxAsclin_enableRxFifoOverflowFlag',0,3,12,210,14,17,1,1
.L340:
	.byte	5
	.byte	'asclin',0,12,210,14,64
	.word	17470
.L342:
	.byte	5
	.byte	'enable',0,12,210,14,80
	.word	609
.L344:
	.byte	6,0,15,12,119,9,1,16
	.byte	'IfxAsclin_CtsInputSelect_0',0,0,16
	.byte	'IfxAsclin_CtsInputSelect_1',0,1,16
	.byte	'IfxAsclin_CtsInputSelect_2',0,2,16
	.byte	'IfxAsclin_CtsInputSelect_3',0,3,0,4
	.byte	'IfxAsclin_setCtsInput',0,3,12,189,17,17,1,1,5
	.byte	'asclin',0,12,189,17,51
	.word	17470
	.byte	5
	.byte	'ctsi',0,12,189,17,84
	.word	18639
	.byte	6,0,15,12,187,2,9,1,16
	.byte	'IfxAsclin_RxInputSelect_0',0,0,16
	.byte	'IfxAsclin_RxInputSelect_1',0,1,16
	.byte	'IfxAsclin_RxInputSelect_2',0,2,16
	.byte	'IfxAsclin_RxInputSelect_3',0,3,16
	.byte	'IfxAsclin_RxInputSelect_4',0,4,16
	.byte	'IfxAsclin_RxInputSelect_5',0,5,16
	.byte	'IfxAsclin_RxInputSelect_6',0,6,16
	.byte	'IfxAsclin_RxInputSelect_7',0,7,0,4
	.byte	'IfxAsclin_setRxInput',0,3,12,217,18,17,1,1,5
	.byte	'asclin',0,12,217,18,50
	.word	17470
	.byte	5
	.byte	'alti',0,12,217,18,82
	.word	18823
	.byte	6,0,20
	.word	450
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	19115
	.byte	0,14
	.word	434
	.byte	3
	.word	434
	.byte	23
	.byte	'__cmpswapw',0
	.word	19157
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	19162
	.byte	24
	.byte	'value',0
	.word	434
	.byte	24
	.byte	'compare',0
	.word	434
	.byte	0,23
	.byte	'__maxu',0
	.word	434
	.byte	1,1,1,1,22
	.word	434
	.byte	22
	.word	434
	.byte	0,25
	.word	178
	.byte	26
	.word	204
	.byte	6,0,25
	.word	239
	.byte	26
	.word	271
	.byte	6,0,25
	.word	284
	.byte	6,0,25
	.word	353
	.byte	26
	.word	372
	.byte	6,0,25
	.word	388
	.byte	26
	.word	403
	.byte	26
	.word	417
	.byte	6,0,25
	.word	1218
	.byte	26
	.word	1258
	.byte	26
	.word	1276
	.byte	6,0,25
	.word	1296
	.byte	26
	.word	1339
	.byte	6,0,25
	.word	1359
	.byte	26
	.word	1397
	.byte	26
	.word	1415
	.byte	6,0,25
	.word	1435
	.byte	26
	.word	1476
	.byte	6,0,27
	.byte	'IfxScuWdt_clearCpuEndinit',0,3,237,1,17,1,1,1,1,5
	.byte	'password',0,3,237,1,50
	.word	626
	.byte	0,27
	.byte	'IfxScuWdt_setCpuEndinit',0,3,157,2,17,1,1,1,1,5
	.byte	'password',0,3,157,2,48
	.word	626
	.byte	0,25
	.word	1496
	.byte	26
	.word	1547
	.byte	6,0,25
	.word	1567
	.byte	6,0,28
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,215,3,19
	.word	626
	.byte	1,1,1,1,25
	.word	1794
	.byte	6,0,25
	.word	1828
	.byte	6,0,25
	.word	1891
	.byte	26
	.word	1932
	.byte	6,0,25
	.word	1951
	.byte	26
	.word	2006
	.byte	6,0,25
	.word	2025
	.byte	26
	.word	2065
	.byte	26
	.word	2082
	.byte	17,6,0,0,25
	.word	9728
	.byte	26
	.word	9760
	.byte	26
	.word	9774
	.byte	26
	.word	9792
	.byte	6,0,25
	.word	10121
	.byte	26
	.word	10154
	.byte	26
	.word	10168
	.byte	26
	.word	10186
	.byte	26
	.word	10200
	.byte	6,0,25
	.word	10320
	.byte	26
	.word	10348
	.byte	26
	.word	10362
	.byte	26
	.word	10380
	.byte	6,0,25
	.word	10398
	.byte	26
	.word	10421
	.byte	17,29
	.word	10486
	.byte	30
	.word	10524
	.byte	0,6,0,0,25
	.word	10442
	.byte	6,0,25
	.word	10486
	.byte	6,0,28
	.byte	'IfxScuCcu_getAsclinSFrequency',0,9,190,6,20
	.word	230
	.byte	1,1,1,1,15,9,172,2,9,1,16
	.byte	'IfxScuCcu_Fsource_0',0,0,16
	.byte	'IfxScuCcu_Fsource_1',0,1,16
	.byte	'IfxScuCcu_Fsource_2',0,2,0,31
	.byte	'IfxScuCcu_getSourceFrequency',0,9,138,7,20
	.word	230
	.byte	1,1,1,1,5
	.byte	'fsource',0,9,138,7,67
	.word	19745
	.byte	0,25
	.word	10865
	.byte	26
	.word	10893
	.byte	6,0,25
	.word	17475
	.byte	26
	.word	17508
	.byte	26
	.word	17524
	.byte	6,0,25
	.word	17547
	.byte	26
	.word	17589
	.byte	6,0,25
	.word	17607
	.byte	26
	.word	17648
	.byte	6,0,25
	.word	17666
	.byte	26
	.word	17697
	.byte	26
	.word	17713
	.byte	6,0,25
	.word	18177
	.byte	26
	.word	18211
	.byte	26
	.word	18227
	.byte	6,0,25
	.word	18248
	.byte	26
	.word	18279
	.byte	26
	.word	18295
	.byte	6,0,25
	.word	18316
	.byte	26
	.word	18353
	.byte	6,0,25
	.word	18371
	.byte	26
	.word	18408
	.byte	6,0
.L242:
	.byte	15,14,77,9,1,16
	.byte	'IfxAsclin_Index_none',0,127,16
	.byte	'IfxAsclin_Index_0',0,0,16
	.byte	'IfxAsclin_Index_1',0,1,16
	.byte	'IfxAsclin_Index_2',0,2,16
	.byte	'IfxAsclin_Index_3',0,3,16
	.byte	'IfxAsclin_Index_4',0,4,16
	.byte	'IfxAsclin_Index_5',0,5,16
	.byte	'IfxAsclin_Index_6',0,6,16
	.byte	'IfxAsclin_Index_7',0,7,16
	.byte	'IfxAsclin_Index_8',0,8,16
	.byte	'IfxAsclin_Index_9',0,9,16
	.byte	'IfxAsclin_Index_10',0,10,16
	.byte	'IfxAsclin_Index_11',0,11,0
.L261:
	.byte	18,16
	.word	609
	.byte	19,15,0,25
	.word	18426
	.byte	26
	.word	18454
	.byte	26
	.word	18470
	.byte	6,0,25
	.word	18488
	.byte	26
	.word	18528
	.byte	26
	.word	18544
	.byte	6,0,25
	.word	18562
	.byte	26
	.word	18605
	.byte	26
	.word	18621
	.byte	6,0,25
	.word	18761
	.byte	26
	.word	18791
	.byte	26
	.word	18807
	.byte	6,0,25
	.word	19054
	.byte	26
	.word	19083
	.byte	26
	.word	19099
	.byte	6,0
.L284:
	.byte	15,12,202,2,9,1,16
	.byte	'IfxAsclin_SamplePointPosition_1',0,1,16
	.byte	'IfxAsclin_SamplePointPosition_2',0,2,16
	.byte	'IfxAsclin_SamplePointPosition_3',0,3,16
	.byte	'IfxAsclin_SamplePointPosition_4',0,4,16
	.byte	'IfxAsclin_SamplePointPosition_5',0,5,16
	.byte	'IfxAsclin_SamplePointPosition_6',0,6,16
	.byte	'IfxAsclin_SamplePointPosition_7',0,7,16
	.byte	'IfxAsclin_SamplePointPosition_8',0,8,16
	.byte	'IfxAsclin_SamplePointPosition_9',0,9,16
	.byte	'IfxAsclin_SamplePointPosition_10',0,10,16
	.byte	'IfxAsclin_SamplePointPosition_11',0,11,16
	.byte	'IfxAsclin_SamplePointPosition_12',0,12,16
	.byte	'IfxAsclin_SamplePointPosition_13',0,13,16
	.byte	'IfxAsclin_SamplePointPosition_14',0,14,16
	.byte	'IfxAsclin_SamplePointPosition_15',0,15,0
.L286:
	.byte	15,12,224,2,9,1,16
	.byte	'IfxAsclin_SamplesPerBit_one',0,0,16
	.byte	'IfxAsclin_SamplesPerBit_three',0,1,0
.L288:
	.byte	15,12,109,9,1,16
	.byte	'IfxAsclin_ClockSource_noClock',0,0,16
	.byte	'IfxAsclin_ClockSource_ascFastClock',0,2,16
	.byte	'IfxAsclin_ClockSource_ascSlowClock',0,4,0
.L365:
	.byte	3
	.word	626
	.byte	14
	.word	15592
.L368:
	.byte	3
	.word	21080
.L372:
	.byte	3
	.word	1870
.L378:
	.byte	3
	.word	609
	.byte	14
	.word	15505
.L440:
	.byte	3
	.word	21100
	.byte	7
	.byte	'short int',0,2,5,32
	.byte	'__wchar_t',0,15,1,1
	.word	21110
	.byte	32
	.byte	'__size_t',0,15,1,1
	.word	434
	.byte	32
	.byte	'__ptrdiff_t',0,15,1,1
	.word	450
	.byte	33,1,3
	.word	21178
	.byte	32
	.byte	'__codeptr',0,15,1,1
	.word	21180
	.byte	32
	.byte	'boolean',0,16,104,29
	.word	609
	.byte	32
	.byte	'uint8',0,16,108,29
	.word	609
	.byte	32
	.byte	'uint16',0,16,112,29
	.word	626
	.byte	32
	.byte	'uint32',0,16,116,29
	.word	1870
	.byte	32
	.byte	'uint64',0,16,121,29
	.word	316
	.byte	32
	.byte	'sint16',0,16,129,1,29
	.word	21110
	.byte	7
	.byte	'long int',0,4,5,32
	.byte	'sint32',0,16,134,1,29
	.word	21294
	.byte	7
	.byte	'long long int',0,8,5,32
	.byte	'sint64',0,16,141,1,29
	.word	21322
	.byte	32
	.byte	'float32',0,16,170,1,29
	.word	230
	.byte	32
	.byte	'pvoid',0,17,54,28
	.word	348
	.byte	32
	.byte	'Ifx_TickTime',0,17,76,28
	.word	21322
	.byte	32
	.byte	'Ifx_Priority',0,17,100,16
	.word	626
	.byte	15,17,127,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,32
	.byte	'Ifx_RxSel',0,17,137,1,3
	.word	21428
	.byte	14
	.word	342
	.byte	3
	.word	21565
	.byte	34,17,140,1,9,8,13
	.byte	'module',0
	.word	21570
	.byte	4,2,35,0,13
	.byte	'index',0
	.word	21294
	.byte	4,2,35,4,0,32
	.byte	'IfxModule_IndexMap',0,17,144,1,3
	.word	21575
	.byte	32
	.byte	'Ifx_UReg_8Bit',0,18,96,24
	.word	609
	.byte	32
	.byte	'Ifx_UReg_32Bit',0,18,98,24
	.word	434
	.byte	32
	.byte	'Ifx_SReg_32Bit',0,18,101,24
	.word	450
	.byte	32
	.byte	'Ifx_ASCLIN_ACCEN0_Bits',0,13,102,3
	.word	16451
	.byte	32
	.byte	'Ifx_ASCLIN_ACCEN1_Bits',0,13,108,3
	.word	16359
	.byte	32
	.byte	'Ifx_ASCLIN_BITCON_Bits',0,13,120,3
	.word	11982
	.byte	32
	.byte	'Ifx_ASCLIN_BRD_Bits',0,13,129,1,3
	.word	12823
	.byte	32
	.byte	'Ifx_ASCLIN_BRG_Bits',0,13,138,1,3
	.word	12665
	.byte	32
	.byte	'Ifx_ASCLIN_CLC_Bits',0,13,148,1,3
	.word	10908
	.byte	32
	.byte	'Ifx_ASCLIN_CSR_Bits',0,13,156,1,3
	.word	15632
	.byte	32
	.byte	'Ifx_ASCLIN_DATCON_Bits',0,13,168,1,3
	.word	12468
	.byte	32
	.byte	'Ifx_ASCLIN_FLAGS_Bits',0,13,200,1,3
	.word	13479
	.byte	32
	.byte	'Ifx_ASCLIN_FLAGSCLEAR_Bits',0,13,232,1,3
	.word	14478
	.byte	32
	.byte	'Ifx_ASCLIN_FLAGSENABLE_Bits',0,13,133,2,3
	.word	14993
	.byte	32
	.byte	'Ifx_ASCLIN_FLAGSSET_Bits',0,13,165,2,3
	.word	13965
	.byte	32
	.byte	'Ifx_ASCLIN_FRAMECON_Bits',0,13,181,2,3
	.word	12203
	.byte	32
	.byte	'Ifx_ASCLIN_ID_Bits',0,13,189,2,3
	.word	11363
	.byte	32
	.byte	'Ifx_ASCLIN_IOCR_Bits',0,13,207,2,3
	.word	11068
	.byte	32
	.byte	'Ifx_ASCLIN_KRST0_Bits',0,13,215,2,3
	.word	16233
	.byte	32
	.byte	'Ifx_ASCLIN_KRST1_Bits',0,13,222,2,3
	.word	16126
	.byte	32
	.byte	'Ifx_ASCLIN_KRSTCLR_Bits',0,13,229,2,3
	.word	16017
	.byte	32
	.byte	'Ifx_ASCLIN_LIN_BTIMER_Bits',0,13,236,2,3
	.word	13177
	.byte	32
	.byte	'Ifx_ASCLIN_LIN_CON_Bits',0,13,248,2,3
	.word	12977
	.byte	32
	.byte	'Ifx_ASCLIN_LIN_HTIMER_Bits',0,13,255,2,3
	.word	13291
	.byte	32
	.byte	'Ifx_ASCLIN_OCS_Bits',0,13,137,3,3
	.word	15854
	.byte	32
	.byte	'Ifx_ASCLIN_RXDATA_Bits',0,13,143,3,3
	.word	15545
	.byte	32
	.byte	'Ifx_ASCLIN_RXDATAD_Bits',0,13,149,3,3
	.word	15755
	.byte	32
	.byte	'Ifx_ASCLIN_RXFIFOCON_Bits',0,13,164,3,3
	.word	11727
	.byte	32
	.byte	'Ifx_ASCLIN_TXDATA_Bits',0,13,170,3,3
	.word	15458
	.byte	32
	.byte	'Ifx_ASCLIN_TXFIFOCON_Bits',0,13,184,3,3
	.word	11488
	.byte	32
	.byte	'Ifx_ASCLIN_ACCEN0',0,13,197,3,3
	.word	16983
	.byte	32
	.byte	'Ifx_ASCLIN_ACCEN1',0,13,205,3,3
	.word	16411
	.byte	32
	.byte	'Ifx_ASCLIN_BITCON',0,13,213,3,3
	.word	12163
	.byte	32
	.byte	'Ifx_ASCLIN_BRD',0,13,221,3,3
	.word	12937
	.byte	32
	.byte	'Ifx_ASCLIN_BRG',0,13,229,3,3
	.word	12783
	.byte	32
	.byte	'Ifx_ASCLIN_CLC',0,13,237,3,3
	.word	11028
	.byte	32
	.byte	'Ifx_ASCLIN_CSR',0,13,245,3,3
	.word	15715
	.byte	32
	.byte	'Ifx_ASCLIN_DATCON',0,13,253,3,3
	.word	12625
	.byte	32
	.byte	'Ifx_ASCLIN_FLAGS',0,13,133,4,3
	.word	13925
	.byte	32
	.byte	'Ifx_ASCLIN_FLAGSCLEAR',0,13,141,4,3
	.word	14953
	.byte	32
	.byte	'Ifx_ASCLIN_FLAGSENABLE',0,13,149,4,3
	.word	15418
	.byte	32
	.byte	'Ifx_ASCLIN_FLAGSSET',0,13,157,4,3
	.word	14438
	.byte	32
	.byte	'Ifx_ASCLIN_FRAMECON',0,13,165,4,3
	.word	12428
	.byte	32
	.byte	'Ifx_ASCLIN_ID',0,13,173,4,3
	.word	11448
	.byte	32
	.byte	'Ifx_ASCLIN_IOCR',0,13,181,4,3
	.word	11323
	.byte	32
	.byte	'Ifx_ASCLIN_KRST0',0,13,189,4,3
	.word	16319
	.byte	32
	.byte	'Ifx_ASCLIN_KRST1',0,13,197,4,3
	.word	16193
	.byte	32
	.byte	'Ifx_ASCLIN_KRSTCLR',0,13,205,4,3
	.word	16086
	.byte	32
	.byte	'Ifx_ASCLIN_LIN_BTIMER',0,13,213,4,3
	.word	13251
	.byte	32
	.byte	'Ifx_ASCLIN_LIN_CON',0,13,221,4,3
	.word	13137
	.byte	32
	.byte	'Ifx_ASCLIN_LIN_HTIMER',0,13,229,4,3
	.word	13366
	.byte	32
	.byte	'Ifx_ASCLIN_OCS',0,13,237,4,3
	.word	15977
	.byte	32
	.byte	'Ifx_ASCLIN_RXDATA',0,13,245,4,3
	.word	15592
	.byte	32
	.byte	'Ifx_ASCLIN_RXDATAD',0,13,253,4,3
	.word	15803
	.byte	32
	.byte	'Ifx_ASCLIN_RXFIFOCON',0,13,133,5,3
	.word	11942
	.byte	32
	.byte	'Ifx_ASCLIN_TXDATA',0,13,141,5,3
	.word	15505
	.byte	32
	.byte	'Ifx_ASCLIN_TXFIFOCON',0,13,149,5,3
	.word	11687
	.byte	14
	.word	13406
	.byte	32
	.byte	'Ifx_ASCLIN_LIN',0,13,166,5,3
	.word	23311
	.byte	14
	.word	17023
	.byte	32
	.byte	'Ifx_ASCLIN',0,13,209,5,3
	.word	23340
	.byte	32
	.byte	'IfxAsclin_Index',0,14,92,3
	.word	20006
	.byte	18,96
	.word	21575
	.byte	19,11,0,20
	.word	23389
	.byte	35
	.byte	'IfxAsclin_cfg_indexMap',0,14,99,41
	.word	23398
	.byte	1,1,15,19,162,11,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,32
	.byte	'IfxScu_WDTCON1_IR',0,19,167,11,3
	.word	23436
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	23558
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	24117
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	24196
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	24756
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	434
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	24837
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	609
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	609
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	609
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	609
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	609
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	609
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	609
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	609
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	609
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	25054
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	609
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	609
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	609
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	609
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	609
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	609
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	609
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	609
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	25327
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,4,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	609
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10_Bits',0,4,206,1,3
	.word	25653
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,4,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	609
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11_Bits',0,4,213,1,3
	.word	25755
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	609
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	609
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	609
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	434
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	609
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,228,1,3
	.word	25857
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	609
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	434
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,248,1,3
	.word	26131
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	626
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	434
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	609
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,132,2,3
	.word	26500
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	609
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	609
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	609
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	434
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,143,2,3
	.word	26680
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	609
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,150,2,3
	.word	26849
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	609
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,157,2,3
	.word	26949
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	609
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,164,2,3
	.word	27049
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	609
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,171,2,3
	.word	27149
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	609
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	609
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	609
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	609
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	609
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,185,2,3
	.word	27249
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	626
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	626
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,200,2,3
	.word	27452
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	626
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	434
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,207,2,3
	.word	27684
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	457
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0_Bits',0,4,216,2,3
	.word	27786
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1_Bits',0,4,228,2,3
	.word	27914
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	609
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	609
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	434
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	609
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	609
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EICR_Bits',0,4,250,2,3
	.word	28103
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	609
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	609
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	609
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,147,3,3
	.word	28467
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	434
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,3,3
	.word	28906
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,164,3,16,4,11
	.byte	'AE',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	626
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_EISR_Bits',0,4,174,3,3
	.word	29117
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,177,3,16,4,11
	.byte	'POL',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	626
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	626
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_EMSR_Bits',0,4,187,3,3
	.word	29293
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	609
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	609
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,196,3,3
	.word	29487
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	626
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	434
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,204,3,3
	.word	29622
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,207,3,16,4,11
	.byte	'ARI',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	434
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,212,3,3
	.word	29758
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,215,3,16,4,11
	.byte	'EN0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	609
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	626
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	609
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	609
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	609
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,226,3,3
	.word	29869
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,229,3,16,4,11
	.byte	'STEP',0,2
	.word	626
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	609
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	609
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	626
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	609
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_FDR_Bits',0,4,237,3,3
	.word	30087
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,240,3,16,4,11
	.byte	'FS0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	609
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_FMR_Bits',0,4,132,4,3
	.word	30250
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	609
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_ID_Bits',0,4,140,4,3
	.word	30586
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	609
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	609
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	609
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	609
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_IGCR_Bits',0,4,167,4,3
	.word	30693
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,170,4,16,4,11
	.byte	'P0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	434
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_IN_Bits',0,4,175,4,3
	.word	31145
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	609
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	609
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_IOCR_Bits',0,4,185,4,3
	.word	31244
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	434
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	626
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,198,4,3
	.word	31394
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,201,4,16,4,11
	.byte	'SEED',0,4
	.word	434
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	609
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	609
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	609
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,208,4,3
	.word	31632
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	626
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	434
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,215,4,3
	.word	31793
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,221,4,3
	.word	31899
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,224,4,16,4,11
	.byte	'LS2',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	626
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	626
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,232,4,3
	.word	31985
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,235,4,16,4,11
	.byte	'LS3',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	626
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	626
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,243,4,3
	.word	32153
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	626
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	626
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,134,5,3
	.word	32321
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	609
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	626
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_MANID_Bits',0,4,142,5,3
	.word	32635
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,145,5,16,4,11
	.byte	'PS0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	626
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	626
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_OMR_Bits',0,4,153,5,3
	.word	32746
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	609
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	609
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	609
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	609
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	609
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	609
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	609
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,177,5,3
	.word	32904
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,180,5,16,4,11
	.byte	'P0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	434
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_OUT_Bits',0,4,185,5,3
	.word	33315
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	626
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	609
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	609
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,204,5,3
	.word	33416
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,216,5,3
	.word	33734
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	434
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC_Bits',0,4,224,5,3
	.word	33921
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,227,5,16,4,11
	.byte	'PD0',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	609
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	609
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	434
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDR_Bits',0,4,234,5,3
	.word	34032
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	434
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR_Bits',0,4,248,5,3
	.word	34165
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	626
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	609
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	609
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	609
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	609
	.byte	5,0,2,35,3,0,32
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,134,6,3
	.word	34368
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	609
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	609
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	434
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,143,6,3
	.word	34608
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	434
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,156,6,3
	.word	34752
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	434
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,165,6,3
	.word	34974
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	434
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,174,6,3
	.word	35110
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	434
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,183,6,3
	.word	35246
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	434
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,192,6,3
	.word	35382
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	434
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,201,6,3
	.word	35518
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	434
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,210,6,3
	.word	35654
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	626
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	626
	.byte	12,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,227,6,3
	.word	35790
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	609
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	434
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	609
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	609
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,241,6,3
	.word	36062
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	626
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	626
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	609
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,135,7,3
	.word	36307
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	626
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	626
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	609
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,143,7,3
	.word	36695
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	609
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	609
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	609
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,157,7,3
	.word	36813
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	609
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	609
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	609
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	626
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	609
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,172,7,3
	.word	37056
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	609
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	609
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	609
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	609
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	609
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	609
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	609
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	609
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	609
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	626
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,189,7,3
	.word	37323
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	626
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,206,7,3
	.word	37582
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,212,7,3
	.word	37887
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	609
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,245,7,3
	.word	37968
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	457
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,254,7,3
	.word	38517
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	434
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,138,8,3
	.word	38647
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,141,8,16,4,11
	.byte	'AE',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	626
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SEISR_Bits',0,4,151,8,3
	.word	38838
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	626
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_STCON_Bits',0,4,161,8,3
	.word	39016
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,164,8,16,4,11
	.byte	'MEM',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,167,8,3
	.word	39167
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,170,8,16,4,11
	.byte	'MEM',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,173,8,3
	.word	39239
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,176,8,16,4,11
	.byte	'MEM',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,179,8,3
	.word	39311
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,182,8,16,4,11
	.byte	'MEM',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,185,8,3
	.word	39383
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,188,8,16,4,11
	.byte	'MEM',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,191,8,3
	.word	39455
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,194,8,16,4,11
	.byte	'MEM',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,197,8,3
	.word	39527
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	609
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	609
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,216,8,3
	.word	39599
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	626
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,224,8,3
	.word	39928
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	609
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,234,8,3
	.word	40048
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	609
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	609
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,249,8,3
	.word	40218
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	626
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	609
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	609
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	609
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	609
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	609
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,137,9,3
	.word	40481
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	609
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	434
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,144,9,3
	.word	40760
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	626
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,151,9,3
	.word	40864
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	609
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	434
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,164,9,3
	.word	40970
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	434
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,174,9,3
	.word	41193
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	609
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,199,9,3
	.word	41341
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,215,9,3
	.word	41829
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	434
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,225,9,3
	.word	42126
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	434
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,235,9,3
	.word	42274
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,244,9,3
	.word	473
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,10,3
	.word	648
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,10,3
	.word	914
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	457
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,10,3
	.word	42524
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	609
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,10,3
	.word	42650
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,10,16,4,11
	.byte	'AE',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	609
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,10,3
	.word	42902
	.byte	12,4,197,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23558
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN00',0,4,202,10,3
	.word	43121
	.byte	12,4,205,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24117
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01',0,4,210,10,3
	.word	43186
	.byte	12,4,213,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24196
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN10',0,4,218,10,3
	.word	43251
	.byte	12,4,221,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24756
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11',0,4,226,10,3
	.word	43316
	.byte	12,4,229,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24837
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS',0,4,234,10,3
	.word	43381
	.byte	12,4,237,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25054
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON0',0,4,242,10,3
	.word	43446
	.byte	12,4,245,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25327
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON1',0,4,250,10,3
	.word	43511
	.byte	12,4,253,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25653
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10',0,4,130,11,3
	.word	43576
	.byte	12,4,133,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25755
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11',0,4,138,11,3
	.word	43642
	.byte	12,4,141,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25857
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON2',0,4,146,11,3
	.word	43708
	.byte	12,4,149,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26131
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON3',0,4,154,11,3
	.word	43773
	.byte	12,4,157,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26500
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON4',0,4,162,11,3
	.word	43838
	.byte	12,4,165,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26680
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON5',0,4,170,11,3
	.word	43903
	.byte	12,4,173,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26849
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6',0,4,178,11,3
	.word	43968
	.byte	12,4,181,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26949
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7',0,4,186,11,3
	.word	44033
	.byte	12,4,189,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27049
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8',0,4,194,11,3
	.word	44098
	.byte	12,4,197,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27149
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9',0,4,202,11,3
	.word	44163
	.byte	12,4,205,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27249
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CHIPID',0,4,210,11,3
	.word	44228
	.byte	12,4,213,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27452
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCLIM',0,4,218,11,3
	.word	44292
	.byte	12,4,221,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27684
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT',0,4,226,11,3
	.word	44357
	.byte	12,4,229,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27786
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0',0,4,234,11,3
	.word	44423
	.byte	12,4,237,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27914
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1',0,4,242,11,3
	.word	44487
	.byte	12,4,245,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28103
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICR',0,4,250,11,3
	.word	44551
	.byte	12,4,253,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28467
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFILT',0,4,130,12,3
	.word	44613
	.byte	12,4,133,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28906
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR',0,4,138,12,3
	.word	44677
	.byte	12,4,141,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29117
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EISR',0,4,146,12,3
	.word	44739
	.byte	12,4,149,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29293
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSR',0,4,154,12,3
	.word	44801
	.byte	12,4,157,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29487
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSSW',0,4,162,12,3
	.word	44863
	.byte	12,4,165,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29622
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,170,12,3
	.word	44926
	.byte	12,4,173,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29758
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG',0,4,178,12,3
	.word	44999
	.byte	12,4,181,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29869
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EXTCON',0,4,186,12,3
	.word	45064
	.byte	12,4,189,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30087
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FDR',0,4,194,12,3
	.word	45128
	.byte	12,4,197,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30250
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FMR',0,4,202,12,3
	.word	45189
	.byte	12,4,205,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30586
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ID',0,4,210,12,3
	.word	45250
	.byte	12,4,213,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30693
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IGCR',0,4,218,12,3
	.word	45310
	.byte	12,4,221,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IN',0,4,226,12,3
	.word	45372
	.byte	12,4,229,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31244
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IOCR',0,4,234,12,3
	.word	45432
	.byte	12,4,237,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31394
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,242,12,3
	.word	45494
	.byte	12,4,245,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31632
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,250,12,3
	.word	45562
	.byte	12,4,253,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31793
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,130,13,3
	.word	45630
	.byte	12,4,133,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31899
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,138,13,3
	.word	45698
	.byte	12,4,141,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31985
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON0',0,4,146,13,3
	.word	45766
	.byte	12,4,149,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32153
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON1',0,4,154,13,3
	.word	45831
	.byte	12,4,157,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32321
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST',0,4,162,13,3
	.word	45896
	.byte	12,4,165,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32635
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_MANID',0,4,170,13,3
	.word	45961
	.byte	12,4,173,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32746
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OMR',0,4,178,13,3
	.word	46024
	.byte	12,4,181,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32904
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OSCCON',0,4,186,13,3
	.word	46085
	.byte	12,4,189,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33315
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OUT',0,4,194,13,3
	.word	46149
	.byte	12,4,197,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33416
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCCON',0,4,202,13,3
	.word	46210
	.byte	12,4,205,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33734
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE',0,4,210,13,3
	.word	46274
	.byte	12,4,213,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33921
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC',0,4,218,13,3
	.word	46341
	.byte	12,4,221,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34032
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDR',0,4,226,13,3
	.word	46404
	.byte	12,4,229,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34165
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR',0,4,234,13,3
	.word	46465
	.byte	12,4,237,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34368
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON0',0,4,242,13,3
	.word	46527
	.byte	12,4,245,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34608
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1',0,4,250,13,3
	.word	46595
	.byte	12,4,253,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34752
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,130,14,3
	.word	46663
	.byte	12,4,133,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34974
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0',0,4,138,14,3
	.word	46731
	.byte	12,4,141,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35110
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1',0,4,146,14,3
	.word	46795
	.byte	12,4,149,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35246
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2',0,4,154,14,3
	.word	46859
	.byte	12,4,157,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35382
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3',0,4,162,14,3
	.word	46923
	.byte	12,4,165,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35518
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4',0,4,170,14,3
	.word	46987
	.byte	12,4,173,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35654
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5',0,4,178,14,3
	.word	47051
	.byte	12,4,181,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35790
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSTAT0',0,4,186,14,3
	.word	47115
	.byte	12,4,189,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36062
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR1',0,4,194,14,3
	.word	47180
	.byte	12,4,197,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36307
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR0',0,4,202,14,3
	.word	47245
	.byte	12,4,205,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36695
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR1',0,4,210,14,3
	.word	47311
	.byte	12,4,213,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36813
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR2',0,4,218,14,3
	.word	47377
	.byte	12,4,221,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37056
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR3',0,4,226,14,3
	.word	47443
	.byte	12,4,229,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37323
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON',0,4,234,14,3
	.word	47509
	.byte	12,4,237,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37582
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON2',0,4,242,14,3
	.word	47573
	.byte	12,4,245,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37887
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3',0,4,250,14,3
	.word	47638
	.byte	12,4,253,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37968
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTSTAT',0,4,130,15,3
	.word	47703
	.byte	12,4,133,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38517
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0',0,4,138,15,3
	.word	47768
	.byte	12,4,141,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38647
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1',0,4,146,15,3
	.word	47833
	.byte	12,4,149,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38838
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEISR',0,4,154,15,3
	.word	47898
	.byte	12,4,157,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39016
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STCON',0,4,162,15,3
	.word	47961
	.byte	12,4,165,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39167
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1',0,4,170,15,3
	.word	48024
	.byte	12,4,173,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39239
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2',0,4,178,15,3
	.word	48088
	.byte	12,4,181,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39311
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3',0,4,186,15,3
	.word	48152
	.byte	12,4,189,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39383
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4',0,4,194,15,3
	.word	48216
	.byte	12,4,197,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39455
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5',0,4,202,15,3
	.word	48280
	.byte	12,4,205,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39527
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6',0,4,210,15,3
	.word	48344
	.byte	12,4,213,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39599
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STSTAT',0,4,218,15,3
	.word	48408
	.byte	12,4,221,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39928
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWAPCTRL',0,4,226,15,3
	.word	48472
	.byte	12,4,229,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40048
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON',0,4,234,15,3
	.word	48538
	.byte	12,4,237,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40218
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON',0,4,242,15,3
	.word	48604
	.byte	12,4,245,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40481
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,250,15,3
	.word	48668
	.byte	12,4,253,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40760
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,130,16,3
	.word	48736
	.byte	12,4,133,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40864
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,138,16,3
	.word	48804
	.byte	12,4,141,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40970
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,146,16,3
	.word	48872
	.byte	12,4,149,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41193
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR',0,4,154,16,3
	.word	48940
	.byte	12,4,157,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41341
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS0',0,4,162,16,3
	.word	49005
	.byte	12,4,165,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41829
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS1',0,4,170,16,3
	.word	49071
	.byte	12,4,173,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42126
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET',0,4,178,16,3
	.word	49137
	.byte	12,4,181,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42274
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT',0,4,186,16,3
	.word	49202
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,194,16,3
	.word	569
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,202,16,3
	.word	874
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,210,16,3
	.word	1105
	.byte	12,4,213,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42524
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0',0,4,218,16,3
	.word	49353
	.byte	12,4,221,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42650
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON1',0,4,226,16,3
	.word	49420
	.byte	12,4,229,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42902
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_SR',0,4,234,16,3
	.word	49487
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	44926
	.byte	4,2,35,0,0,14
	.word	49552
	.byte	32
	.byte	'Ifx_SCU_ESRCFGX',0,4,249,16,3
	.word	49593
	.byte	14
	.word	1145
	.byte	32
	.byte	'Ifx_SCU_WDTCPU',0,4,141,17,3
	.word	49623
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,156,17,25,12,13
	.byte	'CON0',0
	.word	49353
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	49420
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	49487
	.byte	4,2,35,8,0,14
	.word	49652
	.byte	32
	.byte	'Ifx_SCU_WDTS',0,4,161,17,3
	.word	49713
	.byte	18,8
	.word	49552
	.byte	19,1,0,14
	.word	49740
	.byte	18,16
	.word	609
	.byte	19,15,0,18,20
	.word	609
	.byte	19,19,0,18,36
	.word	609
	.byte	19,35,0,18,16
	.word	44551
	.byte	19,3,0,18,16
	.word	45310
	.byte	19,3,0,18,72
	.word	1145
	.byte	19,5,0,14
	.word	49799
	.byte	14
	.word	49652
	.byte	18,176,2
	.word	609
	.byte	19,175,2,0,10
	.byte	'_Ifx_SCU',0,4,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	4928
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	45250
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3108
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	46085
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	48872
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	48668
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	48736
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	48804
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	46663
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	46527
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	46595
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	43446
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	43511
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	45128
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	45064
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	43708
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	43773
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	43838
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	43903
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	47703
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	3108
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	47509
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	43381
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	48538
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	47573
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	47638
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	3108
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	49749
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	44999
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	48604
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	43968
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	44033
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	44098
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	44163
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	43576
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	43642
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3108
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	46404
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	45432
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	46149
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	46024
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	45372
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	49754
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	48408
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	47961
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	46731
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	46795
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	46859
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	46923
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	46987
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	47051
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	3108
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	47115
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	47180
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	49754
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	44801
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	44863
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	44357
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	44292
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	49763
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	49071
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	49202
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	49137
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	48940
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	49005
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	45766
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	45831
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	45896
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	44228
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	45961
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	3108
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	48472
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	49763
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	45494
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	45562
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	45630
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	45698
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	49754
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	48024
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	48088
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	46341
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4928
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	47245
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	47311
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	47377
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	47443
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	4299
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	48152
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	48216
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	48280
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	48344
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	49754
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	46274
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	46210
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	49772
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	44613
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	49781
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	44677
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	45189
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	46465
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	49790
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	49754
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	49808
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	4928
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	44423
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	44487
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	44739
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	49813
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	47768
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	47833
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	47898
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	49818
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	43316
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	43251
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	43186
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	43121
	.byte	4,3,35,252,7,0,14
	.word	49829
	.byte	32
	.byte	'Ifx_SCU',0,4,166,18,3
	.word	51950
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,20,68,16,4,11
	.byte	'ADDR',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_A_Bits',0,20,71,3
	.word	51972
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,20,74,16,4,11
	.byte	'VSS',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	457
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BIV_Bits',0,20,78,3
	.word	52033
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,20,81,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	457
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	457
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	457
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,20,87,3
	.word	52112
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,20,90,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	457
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	457
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,20,95,3
	.word	52250
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,20,98,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	457
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	457
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	457
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	457
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,20,106,3
	.word	52371
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,20,109,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	457
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BTV_Bits',0,20,113,3
	.word	52547
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,20,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	457
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT_Bits',0,20,120,3
	.word	52633
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,20,123,16,4,11
	.byte	'CM',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	457
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	457
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	457
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	457
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL_Bits',0,20,131,1,3
	.word	52722
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,20,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	457
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT_Bits',0,20,140,1,3
	.word	52869
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,20,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	457
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID_Bits',0,20,147,1,3
	.word	52998
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,20,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	457
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L_Bits',0,20,154,1,3
	.word	53098
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,20,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	457
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U_Bits',0,20,161,1,3
	.word	53193
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,20,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	457
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	457
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID_Bits',0,20,169,1,3
	.word	53288
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,20,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	457
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	457
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE_Bits',0,20,176,1,3
	.word	53398
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,20,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	457
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	457
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT_Bits',0,20,187,1,3
	.word	53490
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,20,190,1,16,4,11
	.byte	'CID',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	457
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID_Bits',0,20,194,1,3
	.word	53644
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,20,197,1,16,4,11
	.byte	'DATA',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_D_Bits',0,20,200,1,3
	.word	53738
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,20,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	457
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	457
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DATR_Bits',0,20,214,1,3
	.word	53801
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,20,217,1,16,4,11
	.byte	'DE',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	457
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	457
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	457
	.byte	19,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR_Bits',0,20,228,1,3
	.word	54027
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,20,231,1,16,4,11
	.byte	'DTA',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	457
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR_Bits',0,20,235,1,3
	.word	54242
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,20,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	457
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0_Bits',0,20,243,1,3
	.word	54336
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,20,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	457
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2_Bits',0,20,250,1,3
	.word	54452
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,20,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	457
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCX_Bits',0,20,129,2,3
	.word	54553
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,20,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD_Bits',0,20,135,2,3
	.word	54646
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,20,138,2,16,4,11
	.byte	'TA',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR_Bits',0,20,141,2,3
	.word	54726
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,20,144,2,16,4,11
	.byte	'IED',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	457
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	457
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR_Bits',0,20,159,2,3
	.word	54795
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,20,162,2,16,4,11
	.byte	'EN0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,20,196,2,3
	.word	55079
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,20,199,2,16,4,11
	.byte	'EN0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,20,233,2,3
	.word	55670
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,20,236,2,16,4,11
	.byte	'EN32',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,20,142,3,3
	.word	56261
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,20,145,3,16,4,11
	.byte	'EN32',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,20,179,3,3
	.word	56862
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,20,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	457
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,20,186,3,3
	.word	57463
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,20,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	457
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,20,193,3,3
	.word	57578
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,20,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	457
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DMS_Bits',0,20,200,3,3
	.word	57693
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,20,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	457
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	457
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE_Bits',0,20,207,3,3
	.word	57786
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,20,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	457
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L_Bits',0,20,214,3,3
	.word	57878
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,20,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	457
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U_Bits',0,20,221,3,3
	.word	57973
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,20,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	457
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	457
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE_Bits',0,20,228,3,3
	.word	58068
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,20,231,3,16,4,11
	.byte	'SRE',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	457
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	457
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	457
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR_Bits',0,20,250,3,3
	.word	58160
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,20,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	457
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	457
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT_Bits',0,20,133,4,3
	.word	58499
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,20,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	457
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	457
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	457
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FCX_Bits',0,20,141,4,3
	.word	58653
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,20,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	457
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	457
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	457
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	457
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	457
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	457
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	457
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	457
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,20,154,4,3
	.word	58759
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,20,157,4,16,4,11
	.byte	'STALL',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	457
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	457
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	457
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	457
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	457
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,20,165,4,3
	.word	58977
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,20,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	457
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	457
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	457
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	457
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	457
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	457
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	457
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	457
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	457
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	457
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	457
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	457
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,20,182,4,3
	.word	59168
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,20,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	457
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,20,198,4,3
	.word	59468
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,20,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	457
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,20,205,4,3
	.word	59773
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,20,208,4,16,4,11
	.byte	'TST',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	457
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	457
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	457
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	457
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,20,227,4,3
	.word	59874
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,230,4,16,4,11
	.byte	'OPC',0,4
	.word	457
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	457
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	457
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	457
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,237,4,3
	.word	60223
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,20,240,4,16,4,11
	.byte	'PC',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,20,243,4,3
	.word	60383
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,249,4,3
	.word	60464
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,255,4,3
	.word	60551
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,133,5,3
	.word	60638
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,20,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	457
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT_Bits',0,20,140,5,3
	.word	60725
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,20,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	457
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	457
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	457
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	457
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICR_Bits',0,20,150,5,3
	.word	60816
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,20,153,5,16,4,11
	.byte	'ISP',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_ISP_Bits',0,20,156,5,3
	.word	60958
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,20,159,5,16,4,11
	.byte	'RST',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	457
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	457
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0_Bits',0,20,164,5,3
	.word	61024
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,20,167,5,16,4,11
	.byte	'RST',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	457
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1_Bits',0,20,171,5,3
	.word	61135
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,20,174,5,16,4,11
	.byte	'CLR',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	457
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,20,178,5,3
	.word	61227
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,20,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	457
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	457
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	457
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_LCX_Bits',0,20,186,5,3
	.word	61323
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,20,189,5,16,4,11
	.byte	'EN0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,20,223,5,3
	.word	61429
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,20,226,5,16,4,11
	.byte	'EN32',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,20,132,6,3
	.word	62012
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,20,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	457
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT_Bits',0,20,139,6,3
	.word	62605
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,20,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	457
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT_Bits',0,20,146,6,3
	.word	62698
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,20,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	457
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT_Bits',0,20,153,6,3
	.word	62791
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,20,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL_Bits',0,20,159,6,3
	.word	62884
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,20,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	457
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_PC_Bits',0,20,166,6,3
	.word	62957
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,20,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	457
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0_Bits',0,20,174,6,3
	.word	63042
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,20,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	457
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1_Bits',0,20,182,6,3
	.word	63158
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,20,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	457
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2_Bits',0,20,189,6,3
	.word	63269
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,20,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	457
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	457
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	457
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	457
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI_Bits',0,20,200,6,3
	.word	63370
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,20,203,6,16,4,11
	.byte	'TA',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR_Bits',0,20,206,6,3
	.word	63523
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,20,209,6,16,4,11
	.byte	'IED',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	457
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	457
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR_Bits',0,20,224,6,3
	.word	63592
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,20,227,6,16,4,11
	.byte	'DAC',0,4
	.word	457
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0_Bits',0,20,231,6,3
	.word	63876
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,20,234,6,16,4,11
	.byte	'CAC',0,4
	.word	457
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1_Bits',0,20,238,6,3
	.word	63967
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,20,241,6,16,4,11
	.byte	'PSI',0,4
	.word	457
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2_Bits',0,20,245,6,3
	.word	64058
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,20,248,6,16,4,11
	.byte	'FRE',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	457
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	457
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR_Bits',0,20,130,7,3
	.word	64149
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,20,133,7,16,4,11
	.byte	'CDC',0,4
	.word	457
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	457
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	457
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	457
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	457
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSW_Bits',0,20,145,7,3
	.word	64352
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,20,148,7,16,4,11
	.byte	'EN0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,20,182,7,3
	.word	64557
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,20,185,7,16,4,11
	.byte	'EN32',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,20,219,7,3
	.word	65124
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,20,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	457
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA_Bits',0,20,226,7,3
	.word	65701
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,20,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	457
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA_Bits',0,20,233,7,3
	.word	65796
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,20,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	457
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	457
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	457
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN_Bits',0,20,242,7,3
	.word	65891
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,20,245,7,16,4,11
	.byte	'EN0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,20,151,8,3
	.word	66019
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,20,154,8,16,4,11
	.byte	'EN32',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,20,188,8,3
	.word	66602
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,20,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON_Bits',0,20,196,8,3
	.word	67195
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,20,199,8,16,4,11
	.byte	'EN0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,20,233,8,3
	.word	67313
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,20,236,8,16,4,11
	.byte	'EN32',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,20,142,9,3
	.word	67902
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,20,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	457
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	457
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT_Bits',0,20,153,9,3
	.word	68501
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,20,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	457
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	457
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	457
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON_Bits',0,20,171,9,3
	.word	68655
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,20,174,9,16,4,11
	.byte	'ASI',0,4
	.word	457
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	457
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,20,178,9,3
	.word	68954
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,20,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	457
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	457
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON_Bits',0,20,189,9,3
	.word	69052
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,20,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	457
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	457
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,20,196,9,3
	.word	69224
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,20,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	457
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	457
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,20,203,9,3
	.word	69353
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,20,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	457
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	457
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,20,211,9,3
	.word	69483
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,20,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	457
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	457
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,20,218,9,3
	.word	69635
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,20,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	457
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	457
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	457
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,20,226,9,3
	.word	69762
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,20,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	457
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	457
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,20,233,9,3
	.word	69911
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,20,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	457
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	457
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	457
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	457
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	457
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	457
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,20,246,9,3
	.word	70025
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,20,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,20,252,9,3
	.word	70269
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,20,255,9,16,4,11
	.byte	'T0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	457
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,20,138,10,3
	.word	70349
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,20,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	457
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR_Bits',0,20,144,10,3
	.word	70544
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,20,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	457
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	457
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	457
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	457
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	457
	.byte	3,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT_Bits',0,20,164,10,3
	.word	70617
	.byte	12,20,172,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51972
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_A',0,20,177,10,3
	.word	70935
	.byte	12,20,180,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52033
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BIV',0,20,185,10,3
	.word	70994
	.byte	12,20,188,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52112
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK',0,20,193,10,3
	.word	71055
	.byte	12,20,196,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52250
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR',0,20,201,10,3
	.word	71122
	.byte	12,20,204,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52371
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR',0,20,209,10,3
	.word	71188
	.byte	12,20,212,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52547
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BTV',0,20,217,10,3
	.word	71254
	.byte	12,20,220,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52633
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT',0,20,225,10,3
	.word	71315
	.byte	12,20,228,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52722
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL',0,20,233,10,3
	.word	71377
	.byte	12,20,236,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52869
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT',0,20,241,10,3
	.word	71440
	.byte	12,20,244,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52998
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID',0,20,249,10,3
	.word	71504
	.byte	12,20,252,10,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53098
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L',0,20,129,11,3
	.word	71569
	.byte	12,20,132,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53193
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U',0,20,137,11,3
	.word	71632
	.byte	12,20,140,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53288
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID',0,20,145,11,3
	.word	71695
	.byte	12,20,148,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53398
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE',0,20,153,11,3
	.word	71759
	.byte	12,20,156,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53490
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT',0,20,161,11,3
	.word	71821
	.byte	12,20,164,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53644
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID',0,20,169,11,3
	.word	71884
	.byte	12,20,172,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53738
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_D',0,20,177,11,3
	.word	71948
	.byte	12,20,180,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53801
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DATR',0,20,185,11,3
	.word	72007
	.byte	12,20,188,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54027
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR',0,20,193,11,3
	.word	72069
	.byte	12,20,196,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54242
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR',0,20,201,11,3
	.word	72132
	.byte	12,20,204,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54336
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0',0,20,209,11,3
	.word	72196
	.byte	12,20,212,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54452
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2',0,20,217,11,3
	.word	72259
	.byte	12,20,220,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54553
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCX',0,20,225,11,3
	.word	72322
	.byte	12,20,228,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54646
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD',0,20,233,11,3
	.word	72383
	.byte	12,20,236,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54726
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR',0,20,241,11,3
	.word	72446
	.byte	12,20,244,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54795
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR',0,20,249,11,3
	.word	72509
	.byte	12,20,252,11,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55079
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,20,129,12,3
	.word	72572
	.byte	12,20,132,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55670
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,20,137,12,3
	.word	72652
	.byte	12,20,140,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56261
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,20,145,12,3
	.word	72732
	.byte	12,20,148,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56862
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,20,153,12,3
	.word	72812
	.byte	12,20,156,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57463
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,20,161,12,3
	.word	72892
	.byte	12,20,164,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57578
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,20,169,12,3
	.word	72966
	.byte	12,20,172,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57693
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DMS',0,20,177,12,3
	.word	73040
	.byte	12,20,180,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57786
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE',0,20,185,12,3
	.word	73101
	.byte	12,20,188,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57878
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L',0,20,193,12,3
	.word	73163
	.byte	12,20,196,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57973
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U',0,20,201,12,3
	.word	73226
	.byte	12,20,204,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58068
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE',0,20,209,12,3
	.word	73289
	.byte	12,20,212,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58160
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR',0,20,217,12,3
	.word	73351
	.byte	12,20,220,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58499
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT',0,20,225,12,3
	.word	73413
	.byte	12,20,228,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58653
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FCX',0,20,233,12,3
	.word	73476
	.byte	12,20,236,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58759
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0',0,20,241,12,3
	.word	73537
	.byte	12,20,244,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58977
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1',0,20,249,12,3
	.word	73604
	.byte	12,20,252,12,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59168
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2',0,20,129,13,3
	.word	73671
	.byte	12,20,132,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59468
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3',0,20,137,13,3
	.word	73738
	.byte	12,20,140,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59773
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4',0,20,145,13,3
	.word	73805
	.byte	12,20,148,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59874
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,20,153,13,3
	.word	73872
	.byte	12,20,156,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60223
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,20,161,13,3
	.word	73942
	.byte	12,20,164,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60383
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,20,169,13,3
	.word	74012
	.byte	12,20,172,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60464
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,20,177,13,3
	.word	74081
	.byte	12,20,180,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60551
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,20,185,13,3
	.word	74152
	.byte	12,20,188,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60638
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,20,193,13,3
	.word	74223
	.byte	12,20,196,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60725
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT',0,20,201,13,3
	.word	74294
	.byte	12,20,204,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60816
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICR',0,20,209,13,3
	.word	74356
	.byte	12,20,212,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60958
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ISP',0,20,217,13,3
	.word	74417
	.byte	12,20,220,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61024
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0',0,20,225,13,3
	.word	74478
	.byte	12,20,228,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61135
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1',0,20,233,13,3
	.word	74541
	.byte	12,20,236,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61227
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR',0,20,241,13,3
	.word	74604
	.byte	12,20,244,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61323
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LCX',0,20,249,13,3
	.word	74669
	.byte	12,20,252,13,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61429
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,20,129,14,3
	.word	74730
	.byte	12,20,132,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62012
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,20,137,14,3
	.word	74806
	.byte	12,20,140,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62605
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT',0,20,145,14,3
	.word	74882
	.byte	12,20,148,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62698
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT',0,20,153,14,3
	.word	74945
	.byte	12,20,156,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62791
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT',0,20,161,14,3
	.word	75008
	.byte	12,20,164,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62884
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL',0,20,169,14,3
	.word	75071
	.byte	12,20,172,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62957
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PC',0,20,177,14,3
	.word	75133
	.byte	12,20,180,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63042
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0',0,20,185,14,3
	.word	75193
	.byte	12,20,188,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63158
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1',0,20,193,14,3
	.word	75256
	.byte	12,20,196,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63269
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2',0,20,201,14,3
	.word	75319
	.byte	12,20,204,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63370
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI',0,20,209,14,3
	.word	75382
	.byte	12,20,212,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63523
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR',0,20,217,14,3
	.word	75444
	.byte	12,20,220,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63592
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR',0,20,225,14,3
	.word	75507
	.byte	12,20,228,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63876
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0',0,20,233,14,3
	.word	75570
	.byte	12,20,236,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63967
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1',0,20,241,14,3
	.word	75632
	.byte	12,20,244,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64058
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2',0,20,249,14,3
	.word	75694
	.byte	12,20,252,14,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64149
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR',0,20,129,15,3
	.word	75756
	.byte	12,20,132,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64352
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSW',0,20,137,15,3
	.word	75818
	.byte	12,20,140,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64557
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA',0,20,145,15,3
	.word	75879
	.byte	12,20,148,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65124
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB',0,20,153,15,3
	.word	75947
	.byte	12,20,156,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65701
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA',0,20,161,15,3
	.word	76015
	.byte	12,20,164,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65796
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA',0,20,169,15,3
	.word	76079
	.byte	12,20,172,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65891
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN',0,20,177,15,3
	.word	76143
	.byte	12,20,180,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66019
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,20,185,15,3
	.word	76206
	.byte	12,20,188,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66602
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,20,193,15,3
	.word	76282
	.byte	12,20,196,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67195
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON',0,20,201,15,3
	.word	76358
	.byte	12,20,204,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67313
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,20,209,15,3
	.word	76422
	.byte	12,20,212,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67902
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,20,217,15,3
	.word	76501
	.byte	12,20,220,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68501
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT',0,20,225,15,3
	.word	76580
	.byte	12,20,228,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68655
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON',0,20,233,15,3
	.word	76643
	.byte	12,20,236,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68954
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI',0,20,241,15,3
	.word	76707
	.byte	12,20,244,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69052
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON',0,20,249,15,3
	.word	76773
	.byte	12,20,252,15,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69224
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,20,129,16,3
	.word	76838
	.byte	12,20,132,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69353
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,20,137,16,3
	.word	76914
	.byte	12,20,140,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69483
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,20,145,16,3
	.word	76992
	.byte	12,20,148,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69635
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,20,153,16,3
	.word	77070
	.byte	12,20,156,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69762
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,20,161,16,3
	.word	77147
	.byte	12,20,164,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69911
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,20,169,16,3
	.word	77224
	.byte	12,20,172,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70025
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,20,177,16,3
	.word	77295
	.byte	12,20,180,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70269
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER',0,20,185,16,3
	.word	77367
	.byte	12,20,188,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70349
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC',0,20,193,16,3
	.word	77434
	.byte	12,20,196,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70544
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR',0,20,201,16,3
	.word	77500
	.byte	12,20,204,16,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70617
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT',0,20,209,16,3
	.word	77564
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,20,221,16,25,16,13
	.byte	'LA',0
	.word	76015
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	76079
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	75879
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	75947
	.byte	4,2,35,12,0,14
	.word	77628
	.byte	32
	.byte	'Ifx_CPU_RGN',0,20,227,16,3
	.word	77704
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,20,242,16,25,12,13
	.byte	'RABR',0
	.word	71188
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	71122
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	71055
	.byte	4,2,35,8,0,14
	.word	77730
	.byte	32
	.byte	'Ifx_CPU_BLK',0,20,247,16,3
	.word	77793
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,20,134,17,25,28,13
	.byte	'CON',0
	.word	73872
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	74012
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	73942
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3108
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	74081
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	74152
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	74223
	.byte	4,2,35,24,0,14
	.word	77819
	.byte	32
	.byte	'Ifx_CPU_FPU_TRAP',0,20,143,17,3
	.word	77944
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,20,158,17,25,8,13
	.byte	'L',0
	.word	73163
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	73226
	.byte	4,2,35,4,0,14
	.word	77975
	.byte	32
	.byte	'Ifx_CPU_DPR',0,20,162,17,3
	.word	78017
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,20,177,17,25,8,13
	.byte	'L',0
	.word	71569
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	71632
	.byte	4,2,35,4,0,14
	.word	78043
	.byte	32
	.byte	'Ifx_CPU_CPR',0,20,181,17,3
	.word	78085
	.byte	18,12
	.word	77367
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,20,196,17,25,16,13
	.byte	'CON',0
	.word	76773
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	78111
	.byte	12,2,35,4,0,14
	.word	78120
	.byte	32
	.byte	'Ifx_CPU_TPS',0,20,200,17,3
	.word	78168
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,20,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	76992
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	76914
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	77147
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	77070
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	76838
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	77295
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	77224
	.byte	4,2,35,24,0,14
	.word	78194
	.byte	32
	.byte	'Ifx_CPU_TPS_EXTIM',0,20,224,17,3
	.word	78343
	.byte	10
	.byte	'_Ifx_CPU_TR',0,20,239,17,25,8,13
	.byte	'EVT',0
	.word	77564
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	77500
	.byte	4,2,35,4,0,14
	.word	78375
	.byte	32
	.byte	'Ifx_CPU_TR',0,20,243,17,3
	.word	78420
	.byte	18,128,34
	.word	609
	.byte	19,255,33,0,18,236,253,2
	.word	609
	.byte	19,235,253,2,0,18,244,31
	.word	609
	.byte	19,243,31,0,18,128,1
	.word	77628
	.byte	19,7,0,14
	.word	78480
	.byte	18,232,1
	.word	609
	.byte	19,231,1,0,18,128,48
	.word	609
	.byte	19,255,47,0,18,128,3
	.word	77730
	.byte	19,31,0,14
	.word	78517
	.byte	18,160,39
	.word	609
	.byte	19,159,39,0,18,208,223,1
	.word	609
	.byte	19,207,223,1,0,18,248,1
	.word	609
	.byte	19,247,1,0,18,244,29
	.word	609
	.byte	19,243,29,0,18,188,3
	.word	609
	.byte	19,187,3,0,18,232,3
	.word	609
	.byte	19,231,3,0,18,252,23
	.word	609
	.byte	19,251,23,0,14
	.word	77819
	.byte	18,228,63
	.word	609
	.byte	19,227,63,0,18,144,1
	.word	77975
	.byte	19,17,0,14
	.word	78627
	.byte	18,240,30
	.word	609
	.byte	19,239,30,0,18,80
	.word	78043
	.byte	19,9,0,14
	.word	78653
	.byte	18,176,31
	.word	609
	.byte	19,175,31,0,18,152,7
	.word	609
	.byte	19,151,7,0,14
	.word	78120
	.byte	18,48
	.word	609
	.byte	19,47,0,14
	.word	78194
	.byte	18,164,23
	.word	609
	.byte	19,163,23,0,18,64
	.word	78375
	.byte	19,7,0,14
	.word	78719
	.byte	18,192,23
	.word	609
	.byte	19,191,23,0,18,28
	.word	609
	.byte	19,27,0,18,180,1
	.word	609
	.byte	19,179,1,0,18,172,1
	.word	609
	.byte	19,171,1,0,18,64
	.word	71948
	.byte	19,15,0,18,64
	.word	609
	.byte	19,63,0,18,64
	.word	70935
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,20,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	78445
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	73537
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	73604
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	73671
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	73738
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	73805
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	78456
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	74478
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	74541
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	74604
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	78469
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	78490
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4928
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	76422
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	76501
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4928
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	76422
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	76501
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4928
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	76422
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	76501
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4928
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	76422
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	76501
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4928
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	76422
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	76501
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4928
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	76422
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	76501
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4928
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	76422
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	76501
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4928
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	76422
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	76501
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	76206
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	76282
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4928
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	74730
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	74806
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	78495
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	72892
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	72966
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	72652
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	72812
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	72892
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	72966
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	72652
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	72812
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	72892
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	72966
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	72652
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	72812
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	72892
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	72966
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	72652
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	72812
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	72892
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	72966
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	72652
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	72812
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	72892
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	72966
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	72652
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	72812
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	72892
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	72966
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	72652
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	72812
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	72892
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	72966
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	72652
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	72812
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4928
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	72572
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	72732
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4928
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	72572
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	72732
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4928
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	72572
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	72732
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4928
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	72572
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	72732
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4928
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	72572
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	72732
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4928
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	72572
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	72732
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4928
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	72572
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	72732
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4928
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	72572
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	72732
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	78506
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	75071
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	5268
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	78527
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	78532
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	76143
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	78543
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	76707
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	78556
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	75570
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	75632
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	75694
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	78567
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	72259
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4928
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	76358
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	73351
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	3108
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	72007
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	72383
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	72446
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	72509
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	4299
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	72196
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	78578
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	75756
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	75256
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	75319
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	75193
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	75444
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	75507
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	78589
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	71440
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	78600
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	78611
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	78616
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	78637
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	78642
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	78662
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	78667
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	71759
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	71759
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	71759
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	71759
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	73101
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	73101
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	73101
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	73101
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	73289
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	73289
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	73289
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	73289
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	49754
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	71759
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	71759
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4928
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	73101
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	73101
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4928
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	73289
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	73289
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	78678
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	78689
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	78694
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	78703
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	78708
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	78728
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	78733
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	71377
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	71315
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	74294
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	74882
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	74945
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	75008
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	78495
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	72069
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	3108
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	73413
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	71821
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	76580
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	78744
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	77434
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	5268
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	73040
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	72322
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	72132
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	78753
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	75382
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	75818
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	75133
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4928
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	76643
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	71695
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	71504
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	70994
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	71254
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	74417
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	74356
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4928
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	73476
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	74669
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	49754
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	71884
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	78764
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	78775
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	78784
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	78793
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	78784
	.byte	64,4,35,192,255,7,0,14
	.word	78802
	.byte	32
	.byte	'Ifx_CPU',0,20,210,19,3
	.word	83900
	.byte	15,6,124,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_2',0,2,16
	.byte	'IfxCpu_Id_3',0,3,16
	.byte	'IfxCpu_Id_4',0,4,16
	.byte	'IfxCpu_Id_6',0,6,16
	.byte	'IfxCpu_Id_none',0,7,0,32
	.byte	'IfxCpu_Id',0,6,133,1,3
	.word	83922
	.byte	32
	.byte	'IfxCpu_ResourceCpu',0,6,170,1,3
	.word	1623
	.byte	32
	.byte	'Ifx_SRC_SRCR_Bits',0,11,85,3
	.word	10526
	.byte	32
	.byte	'Ifx_SRC_SRCR',0,11,98,3
	.word	10816
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,11,110,25,4,13
	.byte	'SB',0
	.word	10816
	.byte	4,2,35,0,0,14
	.word	84123
	.byte	32
	.byte	'Ifx_SRC_CPU_CPU',0,11,113,3
	.word	84158
	.byte	18,24
	.word	84123
	.byte	19,5,0,14
	.word	84187
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,11,128,1,25,24,13
	.byte	'CPU',0
	.word	84196
	.byte	24,2,35,0,0,14
	.word	84201
	.byte	32
	.byte	'Ifx_SRC_CPU',0,11,131,1,3
	.word	84234
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,11,146,1,25,4,13
	.byte	'SR',0
	.word	10816
	.byte	4,2,35,0,0,14
	.word	84260
	.byte	32
	.byte	'Ifx_SRC_AGBT_AGBT',0,11,149,1,3
	.word	84298
	.byte	18,4
	.word	84260
	.byte	19,0,0,14
	.word	84330
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,11,164,1,25,4,13
	.byte	'AGBT',0
	.word	84339
	.byte	4,2,35,0,0,14
	.word	84344
	.byte	32
	.byte	'Ifx_SRC_AGBT',0,11,167,1,3
	.word	84379
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,11,182,1,25,4,13
	.byte	'SR',0
	.word	10816
	.byte	4,2,35,0,0,14
	.word	84406
	.byte	32
	.byte	'Ifx_SRC_XBAR_XBAR',0,11,185,1,3
	.word	84444
	.byte	18,12
	.word	84406
	.byte	19,2,0,14
	.word	84476
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,11,200,1,25,12,13
	.byte	'XBAR',0
	.word	84485
	.byte	12,2,35,0,0,14
	.word	84490
	.byte	32
	.byte	'Ifx_SRC_XBAR',0,11,203,1,3
	.word	84525
	.byte	18,8
	.word	10816
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,11,218,1,25,8,13
	.byte	'SR',0
	.word	84552
	.byte	8,2,35,0,0,14
	.word	84561
	.byte	32
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,11,221,1,3
	.word	84607
	.byte	14
	.word	84561
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,11,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	84647
	.byte	8,2,35,0,0,14
	.word	84652
	.byte	32
	.byte	'Ifx_SRC_CERBERUS',0,11,239,1,3
	.word	84695
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,11,254,1,25,12,13
	.byte	'TX',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10816
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10816
	.byte	4,2,35,8,0,14
	.word	84726
	.byte	32
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,11,131,2,3
	.word	84793
	.byte	18,144,1
	.word	84726
	.byte	19,11,0,14
	.word	84829
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,11,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	84839
	.byte	144,1,2,35,0,0,14
	.word	84844
	.byte	32
	.byte	'Ifx_SRC_ASCLIN',0,11,149,2,3
	.word	84885
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,11,164,2,25,20,13
	.byte	'TX',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10816
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10816
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	10816
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	10816
	.byte	4,2,35,16,0,14
	.word	84914
	.byte	32
	.byte	'Ifx_SRC_QSPI_QSPI',0,11,171,2,3
	.word	85000
	.byte	18,120
	.word	84914
	.byte	19,5,0,14
	.word	85032
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,11,186,2,25,120,13
	.byte	'QSPI',0
	.word	85041
	.byte	120,2,35,0,0,14
	.word	85046
	.byte	32
	.byte	'Ifx_SRC_QSPI',0,11,189,2,3
	.word	85081
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,11,204,2,25,4,13
	.byte	'SR',0
	.word	10816
	.byte	4,2,35,0,0,14
	.word	85108
	.byte	32
	.byte	'Ifx_SRC_HSCT_HSCT',0,11,207,2,3
	.word	85146
	.byte	18,8
	.word	85108
	.byte	19,1,0,14
	.word	85178
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,11,222,2,25,8,13
	.byte	'HSCT',0
	.word	85187
	.byte	8,2,35,0,0,14
	.word	85192
	.byte	32
	.byte	'Ifx_SRC_HSCT',0,11,225,2,3
	.word	85227
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,11,240,2,25,16,13
	.byte	'COK',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	10816
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10816
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	10816
	.byte	4,2,35,12,0,14
	.word	85254
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,11,246,2,3
	.word	85335
	.byte	18,64
	.word	85254
	.byte	19,3,0,14
	.word	85370
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,11,133,3,25,68,13
	.byte	'CH',0
	.word	85379
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	10816
	.byte	4,2,35,64,0,14
	.word	85384
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL',0,11,137,3,3
	.word	85435
	.byte	18,136,1
	.word	85384
	.byte	19,1,0,14
	.word	85467
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,11,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	85477
	.byte	136,1,2,35,0,0,14
	.word	85482
	.byte	32
	.byte	'Ifx_SRC_HSSL',0,11,155,3,3
	.word	85519
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,11,170,3,25,16,13
	.byte	'DTR',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10816
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	10816
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3108
	.byte	4,2,35,12,0,14
	.word	85546
	.byte	32
	.byte	'Ifx_SRC_I2C_I2C',0,11,176,3,3
	.word	85627
	.byte	18,32
	.word	85546
	.byte	19,1,0,14
	.word	85657
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,11,191,3,25,32,13
	.byte	'I2C',0
	.word	85666
	.byte	32,2,35,0,0,14
	.word	85671
	.byte	32
	.byte	'Ifx_SRC_I2C',0,11,194,3,3
	.word	85704
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,11,209,3,25,4,13
	.byte	'SR',0
	.word	10816
	.byte	4,2,35,0,0,14
	.word	85730
	.byte	32
	.byte	'Ifx_SRC_SENT_SENT',0,11,212,3,3
	.word	85768
	.byte	18,40
	.word	85730
	.byte	19,9,0,14
	.word	85800
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,11,227,3,25,40,13
	.byte	'SENT',0
	.word	85809
	.byte	40,2,35,0,0,14
	.word	85814
	.byte	32
	.byte	'Ifx_SRC_SENT',0,11,230,3,3
	.word	85849
	.byte	18,20
	.word	10816
	.byte	19,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,11,245,3,25,20,13
	.byte	'SR',0
	.word	85876
	.byte	20,2,35,0,0,14
	.word	85885
	.byte	32
	.byte	'Ifx_SRC_MSC_MSC',0,11,248,3,3
	.word	85921
	.byte	18,80
	.word	85885
	.byte	19,3,0,14
	.word	85951
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,11,135,4,25,80,13
	.byte	'MSC',0
	.word	85960
	.byte	80,2,35,0,0,14
	.word	85965
	.byte	32
	.byte	'Ifx_SRC_MSC',0,11,138,4,3
	.word	85998
	.byte	18,16
	.word	10816
	.byte	19,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,11,153,4,25,16,13
	.byte	'SR',0
	.word	86024
	.byte	16,2,35,0,0,14
	.word	86033
	.byte	32
	.byte	'Ifx_SRC_CCU6_CCU',0,11,156,4,3
	.word	86070
	.byte	18,32
	.word	86033
	.byte	19,1,0,14
	.word	86101
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,11,171,4,25,32,13
	.byte	'CCU',0
	.word	86110
	.byte	32,2,35,0,0,14
	.word	86115
	.byte	32
	.byte	'Ifx_SRC_CCU6',0,11,174,4,3
	.word	86149
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,11,189,4,25,24,13
	.byte	'CIRQ',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	10816
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	10816
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	10816
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	10816
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	10816
	.byte	4,2,35,20,0,14
	.word	86176
	.byte	32
	.byte	'Ifx_SRC_GPT12_GPT12',0,11,197,4,3
	.word	86278
	.byte	18,24
	.word	86176
	.byte	19,0,0,14
	.word	86312
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,11,212,4,25,24,13
	.byte	'GPT12',0
	.word	86321
	.byte	24,2,35,0,0,14
	.word	86326
	.byte	32
	.byte	'Ifx_SRC_GPT12',0,11,215,4,3
	.word	86363
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,11,230,4,25,8,13
	.byte	'SR',0
	.word	84552
	.byte	8,2,35,0,0,14
	.word	86391
	.byte	32
	.byte	'Ifx_SRC_STM_STM',0,11,233,4,3
	.word	86427
	.byte	18,48
	.word	86391
	.byte	19,5,0,14
	.word	86457
	.byte	10
	.byte	'_Ifx_SRC_STM',0,11,248,4,25,48,13
	.byte	'STM',0
	.word	86466
	.byte	48,2,35,0,0,14
	.word	86471
	.byte	32
	.byte	'Ifx_SRC_STM',0,11,251,4,3
	.word	86504
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,11,138,5,25,4,13
	.byte	'SR',0
	.word	10816
	.byte	4,2,35,0,0,14
	.word	86530
	.byte	32
	.byte	'Ifx_SRC_FCE_FCE0',0,11,141,5,3
	.word	86567
	.byte	14
	.word	86530
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,11,156,5,25,4,13
	.byte	'FCE0',0
	.word	86598
	.byte	4,2,35,0,0,14
	.word	86603
	.byte	32
	.byte	'Ifx_SRC_FCE',0,11,159,5,3
	.word	86637
	.byte	18,32
	.word	609
	.byte	19,31,0,18,128,4
	.word	10816
	.byte	19,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,11,174,5,25,176,4,13
	.byte	'ERR',0
	.word	86024
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	86663
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	86672
	.byte	128,4,2,35,48,0,14
	.word	86682
	.byte	32
	.byte	'Ifx_SRC_DMA_DMA',0,11,179,5,3
	.word	86754
	.byte	18,176,4
	.word	86682
	.byte	19,0,0,14
	.word	86784
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,11,194,5,25,176,4,13
	.byte	'DMA',0
	.word	86794
	.byte	176,4,2,35,0,0,14
	.word	86799
	.byte	32
	.byte	'Ifx_SRC_DMA',0,11,197,5,3
	.word	86834
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,11,212,5,25,8,13
	.byte	'ERR',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	10816
	.byte	4,2,35,4,0,14
	.word	86860
	.byte	32
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,11,216,5,3
	.word	86914
	.byte	18,8
	.word	86860
	.byte	19,0,0,14
	.word	86948
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,11,231,5,25,8,13
	.byte	'SDMMC',0
	.word	86957
	.byte	8,2,35,0,0,14
	.word	86962
	.byte	32
	.byte	'Ifx_SRC_SDMMC',0,11,234,5,3
	.word	86999
	.byte	18,40
	.word	10816
	.byte	19,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,11,249,5,25,40,13
	.byte	'SR',0
	.word	87027
	.byte	40,2,35,0,0,14
	.word	87036
	.byte	32
	.byte	'Ifx_SRC_GETH_GETH',0,11,252,5,3
	.word	87074
	.byte	18,40
	.word	87036
	.byte	19,0,0,14
	.word	87106
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,11,139,6,25,40,13
	.byte	'GETH',0
	.word	87115
	.byte	40,2,35,0,0,14
	.word	87120
	.byte	32
	.byte	'Ifx_SRC_GETH',0,11,142,6,3
	.word	87155
	.byte	18,64
	.word	10816
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,11,157,6,25,64,13
	.byte	'INT',0
	.word	87182
	.byte	64,2,35,0,0,14
	.word	87191
	.byte	32
	.byte	'Ifx_SRC_CAN_CAN',0,11,160,6,3
	.word	87228
	.byte	18,192,1
	.word	87191
	.byte	19,2,0,14
	.word	87258
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,11,175,6,25,192,1,13
	.byte	'CAN',0
	.word	87268
	.byte	192,1,2,35,0,0,14
	.word	87273
	.byte	32
	.byte	'Ifx_SRC_CAN',0,11,178,6,3
	.word	87308
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,11,193,6,25,16,13
	.byte	'SR0',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10816
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10816
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10816
	.byte	4,2,35,12,0,14
	.word	87334
	.byte	32
	.byte	'Ifx_SRC_VADC_G',0,11,199,6,3
	.word	87409
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,11,214,6,25,4,13
	.byte	'SR0',0
	.word	10816
	.byte	4,2,35,0,0,14
	.word	87438
	.byte	32
	.byte	'Ifx_SRC_VADC_FC',0,11,217,6,3
	.word	87475
	.byte	18,192,1
	.word	87334
	.byte	19,11,0,14
	.word	87505
	.byte	18,32
	.word	87438
	.byte	19,7,0,14
	.word	87520
	.byte	18,32
	.word	87334
	.byte	19,1,0,14
	.word	87534
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,11,233,6,25,128,2,13
	.byte	'G',0
	.word	87515
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	87529
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	87543
	.byte	32,3,35,224,1,0,14
	.word	87548
	.byte	32
	.byte	'Ifx_SRC_VADC',0,11,238,6,3
	.word	87608
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,11,253,6,25,8,13
	.byte	'SRM',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	10816
	.byte	4,2,35,4,0,14
	.word	87635
	.byte	32
	.byte	'Ifx_SRC_DSADC_DSADC',0,11,129,7,3
	.word	87689
	.byte	18,112
	.word	87635
	.byte	19,13,0,14
	.word	87723
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,11,144,7,25,112,13
	.byte	'DSADC',0
	.word	87732
	.byte	112,2,35,0,0,14
	.word	87737
	.byte	32
	.byte	'Ifx_SRC_DSADC',0,11,147,7,3
	.word	87774
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,11,162,7,25,48,13
	.byte	'INT0',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	10816
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	10816
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	10816
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	10816
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	10816
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	10816
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	10816
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	10816
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	10816
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4928
	.byte	8,2,35,40,0,14
	.word	87802
	.byte	32
	.byte	'Ifx_SRC_ERAY_ERAY',0,11,175,7,3
	.word	87997
	.byte	18,96
	.word	87802
	.byte	19,1,0,14
	.word	88029
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,11,190,7,25,96,13
	.byte	'ERAY',0
	.word	88038
	.byte	96,2,35,0,0,14
	.word	88043
	.byte	32
	.byte	'Ifx_SRC_ERAY',0,11,193,7,3
	.word	88078
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,11,208,7,25,8,13
	.byte	'HSM',0
	.word	84552
	.byte	8,2,35,0,0,14
	.word	88105
	.byte	32
	.byte	'Ifx_SRC_HSM_HSM',0,11,211,7,3
	.word	88142
	.byte	18,8
	.word	88105
	.byte	19,0,0,14
	.word	88172
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,11,226,7,25,8,13
	.byte	'HSM',0
	.word	88181
	.byte	8,2,35,0,0,14
	.word	88186
	.byte	32
	.byte	'Ifx_SRC_HSM',0,11,229,7,3
	.word	88219
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,11,244,7,25,16,13
	.byte	'SCUERU',0
	.word	86024
	.byte	16,2,35,0,0,14
	.word	88245
	.byte	32
	.byte	'Ifx_SRC_SCU',0,11,247,7,3
	.word	88281
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,11,134,8,25,4,13
	.byte	'SR',0
	.word	10816
	.byte	4,2,35,0,0,14
	.word	88307
	.byte	32
	.byte	'Ifx_SRC_PMS_PMS',0,11,137,8,3
	.word	88343
	.byte	18,16
	.word	88307
	.byte	19,3,0,14
	.word	88373
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,11,152,8,25,16,13
	.byte	'PMS',0
	.word	88382
	.byte	16,2,35,0,0,14
	.word	88387
	.byte	32
	.byte	'Ifx_SRC_PMS',0,11,155,8,3
	.word	88420
	.byte	18,12
	.word	10816
	.byte	19,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,11,170,8,25,12,13
	.byte	'SR',0
	.word	88446
	.byte	12,2,35,0,0,14
	.word	88455
	.byte	32
	.byte	'Ifx_SRC_SMU_SMU',0,11,173,8,3
	.word	88491
	.byte	18,12
	.word	88455
	.byte	19,0,0,14
	.word	88521
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,11,188,8,25,12,13
	.byte	'SMU',0
	.word	88530
	.byte	12,2,35,0,0,14
	.word	88535
	.byte	32
	.byte	'Ifx_SRC_SMU',0,11,191,8,3
	.word	88568
	.byte	18,32
	.word	10816
	.byte	19,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,11,206,8,25,32,13
	.byte	'SR',0
	.word	88594
	.byte	32,2,35,0,0,14
	.word	88603
	.byte	32
	.byte	'Ifx_SRC_PSI5_PSI5',0,11,209,8,3
	.word	88641
	.byte	18,32
	.word	88603
	.byte	19,0,0,14
	.word	88673
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,11,224,8,25,32,13
	.byte	'PSI5',0
	.word	88682
	.byte	32,2,35,0,0,14
	.word	88687
	.byte	32
	.byte	'Ifx_SRC_PSI5',0,11,227,8,3
	.word	88722
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,11,242,8,25,12,13
	.byte	'BFR',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	10816
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10816
	.byte	4,2,35,8,0,14
	.word	88749
	.byte	32
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,11,247,8,3
	.word	88818
	.byte	14
	.word	88749
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,11,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	88853
	.byte	12,2,35,0,0,14
	.word	88858
	.byte	32
	.byte	'Ifx_SRC_HSPDM',0,11,137,9,3
	.word	88896
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,11,152,9,25,24,13
	.byte	'LI0',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	10816
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	10816
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	10816
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	10816
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	10816
	.byte	4,2,35,20,0,14
	.word	88924
	.byte	32
	.byte	'Ifx_SRC_DAM_DAM',0,11,160,9,3
	.word	89025
	.byte	18,48
	.word	88924
	.byte	19,1,0,14
	.word	89055
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,11,175,9,25,48,13
	.byte	'DAM',0
	.word	89064
	.byte	48,2,35,0,0,14
	.word	89069
	.byte	32
	.byte	'Ifx_SRC_DAM',0,11,178,9,3
	.word	89102
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,11,193,9,25,32,13
	.byte	'SR',0
	.word	88594
	.byte	32,2,35,0,0,14
	.word	89128
	.byte	32
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,11,196,9,3
	.word	89168
	.byte	18,32
	.word	89128
	.byte	19,0,0,14
	.word	89202
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,11,211,9,25,32,13
	.byte	'PSI5S',0
	.word	89211
	.byte	32,2,35,0,0,14
	.word	89216
	.byte	32
	.byte	'Ifx_SRC_PSI5S',0,11,214,9,3
	.word	89253
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,11,229,9,25,8,13
	.byte	'ERR',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	10816
	.byte	4,2,35,4,0,14
	.word	89281
	.byte	32
	.byte	'Ifx_SRC_RIF_RIF',0,11,233,9,3
	.word	89331
	.byte	18,16
	.word	89281
	.byte	19,1,0,14
	.word	89361
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,11,248,9,25,16,13
	.byte	'RIF',0
	.word	89370
	.byte	16,2,35,0,0,14
	.word	89375
	.byte	32
	.byte	'Ifx_SRC_RIF',0,11,251,9,3
	.word	89408
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,11,138,10,25,8,13
	.byte	'INT',0
	.word	10816
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10816
	.byte	4,2,35,4,0,14
	.word	89434
	.byte	32
	.byte	'Ifx_SRC_SPU_SPU',0,11,142,10,3
	.word	89484
	.byte	18,16
	.word	89434
	.byte	19,1,0,14
	.word	89514
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,11,157,10,25,16,13
	.byte	'SPU',0
	.word	89523
	.byte	16,2,35,0,0,14
	.word	89528
	.byte	32
	.byte	'Ifx_SRC_SPU',0,11,160,10,3
	.word	89561
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,11,175,10,25,32,13
	.byte	'SR',0
	.word	88594
	.byte	32,2,35,0,0,14
	.word	89587
	.byte	32
	.byte	'Ifx_SRC_GPSR_GPSR',0,11,178,10,3
	.word	89625
	.byte	18,192,1
	.word	89587
	.byte	19,5,0,14
	.word	89657
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,11,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	89667
	.byte	192,1,2,35,0,0,14
	.word	89672
	.byte	32
	.byte	'Ifx_SRC_GPSR',0,11,196,10,3
	.word	89709
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,21,68,16,4,11
	.byte	'EN0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_STM_ACCEN0_Bits',0,21,102,3
	.word	89736
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,21,105,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1_Bits',0,21,108,3
	.word	90293
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,21,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAP_Bits',0,21,114,3
	.word	90370
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,21,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV_Bits',0,21,120,3
	.word	90443
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,21,123,16,4,11
	.byte	'DISR',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	434
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_CLC_Bits',0,21,130,1,3
	.word	90520
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,21,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	609
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	609
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	609
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	609
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	609
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	609
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	609
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	609
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_STM_CMCON_Bits',0,21,143,1,3
	.word	90662
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,21,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CMP_Bits',0,21,149,1,3
	.word	90882
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,21,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	434
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_STM_ICR_Bits',0,21,162,1,3
	.word	90951
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,21,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	609
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_STM_ID_Bits',0,21,170,1,3
	.word	91154
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,21,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	434
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_ISCR_Bits',0,21,180,1,3
	.word	91258
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,21,183,1,16,4,11
	.byte	'RST',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	434
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST0_Bits',0,21,188,1,3
	.word	91409
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,21,191,1,16,4,11
	.byte	'RST',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	434
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST1_Bits',0,21,195,1,3
	.word	91520
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,21,198,1,16,4,11
	.byte	'CLR',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	434
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR_Bits',0,21,202,1,3
	.word	91612
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,21,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	609
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	434
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	609
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	609
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_STM_OCS_Bits',0,21,213,1,3
	.word	91708
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,21,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0_Bits',0,21,219,1,3
	.word	91876
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,21,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV_Bits',0,21,225,1,3
	.word	91949
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,21,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM1_Bits',0,21,231,1,3
	.word	92026
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,21,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM2_Bits',0,21,237,1,3
	.word	92099
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,21,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM3_Bits',0,21,243,1,3
	.word	92172
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,21,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM4_Bits',0,21,249,1,3
	.word	92246
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,21,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM5_Bits',0,21,255,1,3
	.word	92320
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,21,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM6_Bits',0,21,133,2,3
	.word	92394
	.byte	12,21,141,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89736
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN0',0,21,146,2,3
	.word	92468
	.byte	12,21,149,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90293
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1',0,21,154,2,3
	.word	92532
	.byte	12,21,157,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90370
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAP',0,21,162,2,3
	.word	92596
	.byte	12,21,165,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90443
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV',0,21,170,2,3
	.word	92657
	.byte	12,21,173,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90520
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CLC',0,21,178,2,3
	.word	92720
	.byte	12,21,181,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90662
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMCON',0,21,186,2,3
	.word	92781
	.byte	12,21,189,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90882
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMP',0,21,194,2,3
	.word	92844
	.byte	12,21,197,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90951
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ICR',0,21,202,2,3
	.word	92905
	.byte	12,21,205,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91154
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ID',0,21,210,2,3
	.word	92966
	.byte	12,21,213,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91258
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ISCR',0,21,218,2,3
	.word	93026
	.byte	12,21,221,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91409
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST0',0,21,226,2,3
	.word	93088
	.byte	12,21,229,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91520
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST1',0,21,234,2,3
	.word	93151
	.byte	12,21,237,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91612
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR',0,21,242,2,3
	.word	93214
	.byte	12,21,245,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91708
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_OCS',0,21,250,2,3
	.word	93279
	.byte	12,21,253,2,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91876
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0',0,21,130,3,3
	.word	93340
	.byte	12,21,133,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91949
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV',0,21,138,3,3
	.word	93402
	.byte	12,21,141,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92026
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM1',0,21,146,3,3
	.word	93466
	.byte	12,21,149,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92099
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM2',0,21,154,3,3
	.word	93528
	.byte	12,21,157,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92172
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM3',0,21,162,3,3
	.word	93590
	.byte	12,21,165,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92246
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM4',0,21,170,3,3
	.word	93652
	.byte	12,21,173,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92320
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM5',0,21,178,3,3
	.word	93714
	.byte	12,21,181,3,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92394
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM6',0,21,186,3,3
	.word	93776
	.byte	15,5,141,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,32
	.byte	'IfxCpu_CounterMode',0,5,145,1,3
	.word	93838
	.byte	34,5,198,1,9,6,13
	.byte	'counter',0
	.word	1870
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	609
	.byte	1,2,35,4,0,32
	.byte	'IfxCpu_Counter',0,5,202,1,3
	.word	93927
	.byte	34,5,210,1,9,32,13
	.byte	'instruction',0
	.word	93927
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	93927
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	93927
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	93927
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	93927
	.byte	6,2,35,24,0,32
	.byte	'IfxCpu_Perf',0,5,217,1,3
	.word	93993
	.byte	32
	.byte	'Ifx_P_ACCEN0_Bits',0,8,102,3
	.word	8456
	.byte	32
	.byte	'Ifx_P_ACCEN1_Bits',0,8,108,3
	.word	8369
	.byte	32
	.byte	'Ifx_P_ESR_Bits',0,8,130,1,3
	.word	4937
	.byte	32
	.byte	'Ifx_P_ID_Bits',0,8,138,1,3
	.word	2988
	.byte	32
	.byte	'Ifx_P_IN_Bits',0,8,160,1,3
	.word	3984
	.byte	32
	.byte	'Ifx_P_IOCR0_Bits',0,8,173,1,3
	.word	3117
	.byte	32
	.byte	'Ifx_P_IOCR12_Bits',0,8,186,1,3
	.word	3764
	.byte	32
	.byte	'Ifx_P_IOCR4_Bits',0,8,199,1,3
	.word	3332
	.byte	32
	.byte	'Ifx_P_IOCR8_Bits',0,8,212,1,3
	.word	3547
	.byte	32
	.byte	'Ifx_P_LPCR_Bits',0,8,231,1,3
	.word	8031
	.byte	32
	.byte	'Ifx_P_OMCR_Bits',0,8,253,1,3
	.word	7683
	.byte	32
	.byte	'Ifx_P_OMCR0_Bits',0,8,136,2,3
	.word	6670
	.byte	32
	.byte	'Ifx_P_OMCR12_Bits',0,8,146,2,3
	.word	7194
	.byte	32
	.byte	'Ifx_P_OMCR4_Bits',0,8,157,2,3
	.word	6844
	.byte	32
	.byte	'Ifx_P_OMCR8_Bits',0,8,168,2,3
	.word	7018
	.byte	32
	.byte	'Ifx_P_OMR_Bits',0,8,205,2,3
	.word	2417
	.byte	32
	.byte	'Ifx_P_OMSR_Bits',0,8,227,2,3
	.word	7350
	.byte	32
	.byte	'Ifx_P_OMSR0_Bits',0,8,237,2,3
	.word	6007
	.byte	32
	.byte	'Ifx_P_OMSR12_Bits',0,8,248,2,3
	.word	6495
	.byte	32
	.byte	'Ifx_P_OMSR4_Bits',0,8,131,3,3
	.word	6154
	.byte	32
	.byte	'Ifx_P_OMSR8_Bits',0,8,142,3,3
	.word	6323
	.byte	32
	.byte	'Ifx_P_OUT_Bits',0,8,164,3,3
	.word	2101
	.byte	32
	.byte	'Ifx_P_PCSR_Bits',0,8,187,3,3
	.word	5643
	.byte	32
	.byte	'Ifx_P_PDISC_Bits',0,8,209,3,3
	.word	5277
	.byte	32
	.byte	'Ifx_P_PDR0_Bits',0,8,230,3,3
	.word	4308
	.byte	32
	.byte	'Ifx_P_PDR1_Bits',0,8,251,3,3
	.word	4612
	.byte	32
	.byte	'Ifx_P_ACCEN0',0,8,136,4,3
	.word	8983
	.byte	32
	.byte	'Ifx_P_ACCEN1',0,8,144,4,3
	.word	8416
	.byte	32
	.byte	'Ifx_P_ESR',0,8,152,4,3
	.word	5228
	.byte	32
	.byte	'Ifx_P_ID',0,8,160,4,3
	.word	3068
	.byte	32
	.byte	'Ifx_P_IN',0,8,168,4,3
	.word	4259
	.byte	32
	.byte	'Ifx_P_IOCR0',0,8,176,4,3
	.word	3292
	.byte	32
	.byte	'Ifx_P_IOCR12',0,8,184,4,3
	.word	3944
	.byte	32
	.byte	'Ifx_P_IOCR4',0,8,192,4,3
	.word	3507
	.byte	32
	.byte	'Ifx_P_IOCR8',0,8,200,4,3
	.word	3724
	.byte	32
	.byte	'Ifx_P_LPCR',0,8,208,4,3
	.word	8311
	.byte	32
	.byte	'Ifx_P_OMCR',0,8,216,4,3
	.word	7991
	.byte	32
	.byte	'Ifx_P_OMCR0',0,8,224,4,3
	.word	6804
	.byte	32
	.byte	'Ifx_P_OMCR12',0,8,232,4,3
	.word	7310
	.byte	32
	.byte	'Ifx_P_OMCR4',0,8,240,4,3
	.word	6978
	.byte	32
	.byte	'Ifx_P_OMCR8',0,8,248,4,3
	.word	7154
	.byte	32
	.byte	'Ifx_P_OMR',0,8,128,5,3
	.word	2948
	.byte	32
	.byte	'Ifx_P_OMSR',0,8,136,5,3
	.word	7643
	.byte	32
	.byte	'Ifx_P_OMSR0',0,8,144,5,3
	.word	6114
	.byte	32
	.byte	'Ifx_P_OMSR12',0,8,152,5,3
	.word	6630
	.byte	32
	.byte	'Ifx_P_OMSR4',0,8,160,5,3
	.word	6283
	.byte	32
	.byte	'Ifx_P_OMSR8',0,8,168,5,3
	.word	6455
	.byte	32
	.byte	'Ifx_P_OUT',0,8,176,5,3
	.word	2377
	.byte	32
	.byte	'Ifx_P_PCSR',0,8,184,5,3
	.word	5967
	.byte	32
	.byte	'Ifx_P_PDISC',0,8,192,5,3
	.word	5603
	.byte	32
	.byte	'Ifx_P_PDR0',0,8,200,5,3
	.word	4572
	.byte	32
	.byte	'Ifx_P_PDR1',0,8,208,5,3
	.word	4888
	.byte	14
	.word	9023
	.byte	32
	.byte	'Ifx_P',0,8,128,6,3
	.word	95305
	.byte	15,7,73,9,1,16
	.byte	'IfxPort_ControlledBy_port',0,0,16
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,32
	.byte	'IfxPort_ControlledBy',0,7,77,3
	.word	95325
	.byte	32
	.byte	'IfxPort_InputMode',0,7,87,3
	.word	9603
	.byte	15,7,91,9,1,16
	.byte	'IfxPort_LvdsMode_high',0,0,16
	.byte	'IfxPort_LvdsMode_medium',0,1,0,32
	.byte	'IfxPort_LvdsMode',0,7,95,3
	.word	95442
	.byte	32
	.byte	'IfxPort_OutputIdx',0,7,136,1,3
	.word	9904
	.byte	32
	.byte	'IfxPort_OutputMode',0,7,145,1,3
	.word	9808
	.byte	15,7,151,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,32
	.byte	'IfxPort_PadDriver',0,7,165,1,3
	.word	95578
	.byte	15,7,169,1,9,1,16
	.byte	'IfxPort_PadSupply_3v',0,0,16
	.byte	'IfxPort_PadSupply_5v',0,1,0,32
	.byte	'IfxPort_PadSupply',0,7,173,1,3
	.word	96028
	.byte	15,7,177,1,9,1,16
	.byte	'IfxPort_PinFunctionMode_digital',0,0,16
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,32
	.byte	'IfxPort_PinFunctionMode',0,7,181,1,3
	.word	96108
	.byte	32
	.byte	'IfxPort_State',0,7,193,1,3
	.word	10217
	.byte	34,7,246,1,9,8,13
	.byte	'port',0
	.word	9598
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	609
	.byte	1,2,35,4,0,32
	.byte	'IfxPort_Pin',0,7,250,1,3
	.word	96238
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,22,68,16,4,11
	.byte	'EN0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_ACCEN0_Bits',0,22,102,3
	.word	96298
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,22,105,16,4,11
	.byte	'reserved_0',0,4
	.word	434
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1_Bits',0,22,108,3
	.word	96855
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,22,111,16,4,11
	.byte	'DF0',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	609
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	609
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	609
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	609
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AD_Bits',0,22,145,1,3
	.word	96932
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,22,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	609
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	609
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	609
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	609
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	609
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	609
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	609
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	609
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	609
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	609
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	609
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	609
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	609
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	609
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	609
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	609
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	609
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	609
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	609
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	609
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	609
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	609
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SMU_AEX_Bits',0,22,176,1,3
	.word	97482
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,22,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	457
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	457
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR_Bits',0,22,207,1,3
	.word	98039
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,22,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	609
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	626
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	626
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	609
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	609
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AFCNT_Bits',0,22,217,1,3
	.word	98635
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,22,220,1,16,4,11
	.byte	'SF0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AG_Bits',0,22,254,1,3
	.word	98775
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,22,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	457
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	457
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	457
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	457
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	457
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	457
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	457
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGC_Bits',0,22,142,2,3
	.word	99326
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,22,145,2,16,4,11
	.byte	'CF0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF_Bits',0,22,179,2,3
	.word	99588
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,22,182,2,16,4,11
	.byte	'FE0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP_Bits',0,22,216,2,3
	.word	100143
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,22,219,2,16,4,11
	.byte	'DISR',0,1
	.word	609
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	609
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	434
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SMU_CLC_Bits',0,22,226,2,3
	.word	100700
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,22,229,2,16,4,11
	.byte	'CMD',0,4
	.word	457
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	457
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	457
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_CMD_Bits',0,22,234,2,3
	.word	100843
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,22,237,2,16,4,11
	.byte	'SSM',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	434
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SMU_DBG_Bits',0,22,241,2,3
	.word	100946
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,22,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	457
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	457
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	457
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	457
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	457
	.byte	10,0,2,35,0,0,32
	.byte	'Ifx_SMU_FSP_Bits',0,22,252,2,3
	.word	101034
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,22,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	609
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	609
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	626
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SMU_ID_Bits',0,22,132,3,3
	.word	101189
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,22,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	457
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	457
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	457
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS_Bits',0,22,140,3,3
	.word	101299
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,22,143,3,16,4,11
	.byte	'TGS',0,1
	.word	609
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	609
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	609
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	434
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	609
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	609
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	609
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	609
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SMU_OCS_Bits',0,22,153,3,3
	.word	101411
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,22,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	457
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	457
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	457
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	457
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	457
	.byte	9,0,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL_Bits',0,22,167,3,3
	.word	101603
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,22,170,3,16,4,11
	.byte	'TE0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL_Bits',0,22,204,3,3
	.word	101834
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,22,207,3,16,4,11
	.byte	'EF0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF_Bits',0,22,241,3,3
	.word	102538
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,22,244,3,16,4,11
	.byte	'STS0',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	457
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	457
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	457
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	457
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	457
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	457
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	457
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	457
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	457
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	457
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	457
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	457
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	457
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	457
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	457
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	457
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	457
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	457
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	457
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	457
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	457
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	457
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS_Bits',0,22,150,4,3
	.word	103240
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,22,153,4,16,4,11
	.byte	'GID0',0,4
	.word	457
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	457
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	457
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	457
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	457
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00_Bits',0,22,161,4,3
	.word	103955
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,22,164,4,16,4,11
	.byte	'GID2',0,4
	.word	457
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	457
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	457
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	457
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	457
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01_Bits',0,22,172,4,3
	.word	104123
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,22,175,4,16,4,11
	.byte	'GID0',0,4
	.word	457
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	457
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	457
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	457
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	457
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10_Bits',0,22,183,4,3
	.word	104291
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,22,186,4,16,4,11
	.byte	'GID2',0,4
	.word	457
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	457
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	457
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	457
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	457
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	457
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11_Bits',0,22,194,4,3
	.word	104459
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,22,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	457
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	457
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	457
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	457
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTC_Bits',0,22,203,4,3
	.word	104627
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,22,206,4,16,4,11
	.byte	'CMD',0,4
	.word	457
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	457
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	457
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	457
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	457
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	457
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	457
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	457
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	457
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	457
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	457
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	457
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_SMU_STS_Bits',0,22,220,4,3
	.word	104747
	.byte	12,22,228,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96298
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN0',0,22,233,4,3
	.word	105002
	.byte	12,22,236,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96855
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1',0,22,241,4,3
	.word	105066
	.byte	12,22,244,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96932
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AD',0,22,249,4,3
	.word	105130
	.byte	12,22,252,4,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97482
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEX',0,22,129,5,3
	.word	105190
	.byte	12,22,132,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98039
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR',0,22,137,5,3
	.word	105251
	.byte	12,22,140,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98635
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AFCNT',0,22,145,5,3
	.word	105315
	.byte	12,22,148,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98775
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AG',0,22,153,5,3
	.word	105378
	.byte	12,22,156,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99326
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGC',0,22,161,5,3
	.word	105438
	.byte	12,22,164,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99588
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF',0,22,169,5,3
	.word	105499
	.byte	12,22,172,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100143
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP',0,22,177,5,3
	.word	105561
	.byte	12,22,180,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100700
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CLC',0,22,185,5,3
	.word	105624
	.byte	12,22,188,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100843
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CMD',0,22,193,5,3
	.word	105685
	.byte	12,22,196,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100946
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_DBG',0,22,201,5,3
	.word	105746
	.byte	12,22,204,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101034
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_FSP',0,22,209,5,3
	.word	105807
	.byte	12,22,212,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101189
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ID',0,22,217,5,3
	.word	105868
	.byte	12,22,220,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101299
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS',0,22,225,5,3
	.word	105928
	.byte	12,22,228,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101411
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_OCS',0,22,233,5,3
	.word	105990
	.byte	12,22,236,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101603
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL',0,22,241,5,3
	.word	106051
	.byte	12,22,244,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101834
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL',0,22,249,5,3
	.word	106113
	.byte	12,22,252,5,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102538
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF',0,22,129,6,3
	.word	106176
	.byte	12,22,132,6,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103240
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS',0,22,137,6,3
	.word	106238
	.byte	12,22,140,6,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103955
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00',0,22,145,6,3
	.word	106301
	.byte	12,22,148,6,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104123
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01',0,22,153,6,3
	.word	106365
	.byte	12,22,156,6,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104291
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10',0,22,161,6,3
	.word	106429
	.byte	12,22,164,6,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104459
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11',0,22,169,6,3
	.word	106493
	.byte	12,22,172,6,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104627
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTC',0,22,177,6,3
	.word	106557
	.byte	12,22,180,6,9,4,13
	.byte	'U',0
	.word	434
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	450
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104747
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_STS',0,22,185,6,3
	.word	106618
	.byte	32
	.byte	'IfxScuCcu_Fsource',0,9,177,2,3
	.word	19745
	.byte	15,9,210,2,9,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,32
	.byte	'IfxScuCcu_LowPowerDivRatio',0,9,216,2,3
	.word	106706
	.byte	15,9,220,2,9,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,16
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,32
	.byte	'IfxScuCcu_ModulationAmplitude',0,9,229,2,3
	.word	106899
	.byte	15,9,254,3,9,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,32
	.byte	'IfxScuCcu_PllInputClockSelection',0,9,131,4,3
	.word	107200
	.byte	15,9,135,4,9,1,16
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,16
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,16
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,16
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,32
	.byte	'IfxScuCcu_Traprequest',0,9,141,4,3
	.word	107374
	.byte	15,9,147,4,9,1,16
	.byte	'IfxScuCcu_ModEn_disabled',0,0,16
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,32
	.byte	'IfxScuCcu_ModEn',0,9,151,4,3
	.word	107528
	.byte	34,9,162,4,9,6,13
	.byte	'pDivider',0
	.word	609
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	609
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	609
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	609
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	609
	.byte	1,2,35,4,0,32
	.byte	'IfxScuCcu_PerPllConfig',0,9,171,4,3
	.word	107613
	.byte	34,9,176,4,9,4,13
	.byte	'pDivider',0
	.word	609
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	609
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	609
	.byte	1,2,35,2,0,32
	.byte	'IfxScuCcu_SysPllConfig',0,9,181,4,3
	.word	107751
	.byte	34,9,189,4,9,8,13
	.byte	'value',0
	.word	1870
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1870
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_CcuconRegConfig',0,9,193,4,3
	.word	107845
	.byte	34,9,197,4,9,6,13
	.byte	'k2Step',0
	.word	609
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	230
	.byte	4,2,35,2,0,32
	.byte	'IfxScuCcu_PllStepConfig',0,9,201,4,3
	.word	107916
	.byte	34,9,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	1870
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	107200
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	107751
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	107613
	.byte	6,2,35,10,0,32
	.byte	'IfxScuCcu_pllsParameterConfig',0,9,211,4,3
	.word	107990
	.byte	34,9,219,4,9,8,13
	.byte	'value',0
	.word	1870
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1870
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,9,223,4,3
	.word	108135
	.byte	34,9,231,4,9,80,13
	.byte	'ccucon0',0
	.word	107845
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	107845
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	107845
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	107845
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	107845
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	107845
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	107845
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	107845
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	107845
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	107845
	.byte	8,2,35,72,0,32
	.byte	'IfxScuCcu_ClockDistributionConfig',0,9,243,4,3
	.word	108211
	.byte	34,9,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	107990
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	230
	.byte	4,2,35,16,0,32
	.byte	'IfxScuCcu_InitialStepConfig',0,9,251,4,3
	.word	108433
	.byte	20
	.word	107916
	.byte	3
	.word	108519
	.byte	34,9,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	609
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	108524
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_PllThrottleConfig',0,9,131,5,3
	.word	108529
	.byte	34,9,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	107528
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	106899
	.byte	1,2,35,1,0,32
	.byte	'IfxScuCcu_Mod_Config',0,9,141,5,3
	.word	108611
	.byte	15,23,66,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_dma',0,1,16
	.byte	'IfxSrc_Tos_cpu1',0,2,16
	.byte	'IfxSrc_Tos_cpu2',0,3,16
	.byte	'IfxSrc_Tos_cpu3',0,4,16
	.byte	'IfxSrc_Tos_cpu4',0,5,16
	.byte	'IfxSrc_Tos_cpu5',0,6,0,32
	.byte	'IfxSrc_Tos',0,23,75,3
	.word	108685
	.byte	34,24,56,15,16,13
	.byte	'module',0
	.word	17470
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	96238
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	21428
	.byte	1,2,35,12,0,20
	.word	108835
	.byte	32
	.byte	'IfxAsclin_Cts_In',0,24,61,3
	.word	108886
	.byte	34,24,64,15,16,13
	.byte	'module',0
	.word	17470
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	96238
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	21428
	.byte	1,2,35,12,0,20
	.word	108916
	.byte	32
	.byte	'IfxAsclin_Rx_In',0,24,69,3
	.word	108967
	.byte	34,24,72,15,16,13
	.byte	'module',0
	.word	17470
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	96238
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9904
	.byte	1,2,35,12,0,20
	.word	108996
	.byte	32
	.byte	'IfxAsclin_Rts_Out',0,24,77,3
	.word	109047
	.byte	34,24,80,15,16,13
	.byte	'module',0
	.word	17470
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	96238
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9904
	.byte	1,2,35,12,0,20
	.word	109078
	.byte	32
	.byte	'IfxAsclin_Sclk_Out',0,24,85,3
	.word	109129
	.byte	34,24,88,15,16,13
	.byte	'module',0
	.word	17470
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	96238
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9904
	.byte	1,2,35,12,0,20
	.word	109161
	.byte	32
	.byte	'IfxAsclin_Slso_Out',0,24,93,3
	.word	109212
	.byte	34,24,96,15,16,13
	.byte	'module',0
	.word	17470
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	96238
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9904
	.byte	1,2,35,12,0,20
	.word	109244
	.byte	32
	.byte	'IfxAsclin_Tx_Out',0,24,101,3
	.word	109295
	.byte	15,12,81,9,1,16
	.byte	'IfxAsclin_Checksum_classic',0,0,16
	.byte	'IfxAsclin_Checksum_enhanced',0,1,0,32
	.byte	'IfxAsclin_Checksum',0,12,85,3
	.word	109325
	.byte	15,12,90,9,1,16
	.byte	'IfxAsclin_ChecksumInjection_notWritten',0,0,16
	.byte	'IfxAsclin_ChecksumInjection_written',0,1,0,32
	.byte	'IfxAsclin_ChecksumInjection',0,12,94,3
	.word	109417
	.byte	15,12,100,9,1,16
	.byte	'IfxAsclin_ClockPolarity_idleLow',0,0,16
	.byte	'IfxAsclin_ClockPolarity_idleHigh',0,1,0,32
	.byte	'IfxAsclin_ClockPolarity',0,12,104,3
	.word	109538
	.byte	32
	.byte	'IfxAsclin_ClockSource',0,12,114,3
	.word	20963
	.byte	32
	.byte	'IfxAsclin_CtsInputSelect',0,12,125,3
	.word	18639
	.byte	15,12,130,1,9,1,16
	.byte	'IfxAsclin_DataLength_1',0,0,16
	.byte	'IfxAsclin_DataLength_2',0,1,16
	.byte	'IfxAsclin_DataLength_3',0,2,16
	.byte	'IfxAsclin_DataLength_4',0,3,16
	.byte	'IfxAsclin_DataLength_5',0,4,16
	.byte	'IfxAsclin_DataLength_6',0,5,16
	.byte	'IfxAsclin_DataLength_7',0,6,16
	.byte	'IfxAsclin_DataLength_8',0,7,16
	.byte	'IfxAsclin_DataLength_9',0,8,16
	.byte	'IfxAsclin_DataLength_10',0,9,16
	.byte	'IfxAsclin_DataLength_11',0,10,16
	.byte	'IfxAsclin_DataLength_12',0,11,16
	.byte	'IfxAsclin_DataLength_13',0,12,16
	.byte	'IfxAsclin_DataLength_14',0,13,16
	.byte	'IfxAsclin_DataLength_15',0,14,16
	.byte	'IfxAsclin_DataLength_16',0,15,0,32
	.byte	'IfxAsclin_DataLength',0,12,148,1,3
	.word	109708
	.byte	15,12,153,1,9,1,16
	.byte	'IfxAsclin_FifoInterruptMode_combined',0,0,16
	.byte	'IfxAsclin_FifoInterruptMode_single',0,1,16
	.byte	'IfxAsclin_FifoInterruptMode_batch',0,2,0,32
	.byte	'IfxAsclin_FifoInterruptMode',0,12,158,1,3
	.word	110152
	.byte	15,12,163,1,9,1,16
	.byte	'IfxAsclin_FrameMode_initialise',0,0,16
	.byte	'IfxAsclin_FrameMode_asc',0,1,16
	.byte	'IfxAsclin_FrameMode_spi',0,2,16
	.byte	'IfxAsclin_FrameMode_lin',0,3,0,32
	.byte	'IfxAsclin_FrameMode',0,12,169,1,3
	.word	110308
	.byte	15,12,174,1,9,1,16
	.byte	'IfxAsclin_HeaderResponseSelect_headerAndResponse',0,0,16
	.byte	'IfxAsclin_HeaderResponseSelect_headerOnly',0,1,0,32
	.byte	'IfxAsclin_HeaderResponseSelect',0,12,178,1,3
	.word	110455
	.byte	15,12,185,1,9,1,16
	.byte	'IfxAsclin_IdleDelay_0',0,0,16
	.byte	'IfxAsclin_IdleDelay_1',0,1,16
	.byte	'IfxAsclin_IdleDelay_2',0,2,16
	.byte	'IfxAsclin_IdleDelay_3',0,3,16
	.byte	'IfxAsclin_IdleDelay_4',0,4,16
	.byte	'IfxAsclin_IdleDelay_5',0,5,16
	.byte	'IfxAsclin_IdleDelay_6',0,6,16
	.byte	'IfxAsclin_IdleDelay_7',0,7,0,32
	.byte	'IfxAsclin_IdleDelay',0,12,195,1,3
	.word	110597
	.byte	15,12,201,1,9,1,16
	.byte	'IfxAsclin_LeadDelay_0',0,0,16
	.byte	'IfxAsclin_LeadDelay_1',0,1,16
	.byte	'IfxAsclin_LeadDelay_2',0,2,16
	.byte	'IfxAsclin_LeadDelay_3',0,3,16
	.byte	'IfxAsclin_LeadDelay_4',0,4,16
	.byte	'IfxAsclin_LeadDelay_5',0,5,16
	.byte	'IfxAsclin_LeadDelay_6',0,6,16
	.byte	'IfxAsclin_LeadDelay_7',0,7,0,32
	.byte	'IfxAsclin_LeadDelay',0,12,211,1,3
	.word	110825
	.byte	15,12,216,1,9,1,16
	.byte	'IfxAsclin_LinMode_slave',0,0,16
	.byte	'IfxAsclin_LinMode_master',0,1,0,32
	.byte	'IfxAsclin_LinMode',0,12,220,1,3
	.word	111053
	.byte	15,12,225,1,9,1,16
	.byte	'IfxAsclin_LinResponseTimeoutMode_frameTimeout',0,0,16
	.byte	'IfxAsclin_LinResponseTimeoutMode_responseTimeout',0,1,0,32
	.byte	'IfxAsclin_LinResponseTimeoutMode',0,12,229,1,3
	.word	111140
	.byte	32
	.byte	'IfxAsclin_OversamplingFactor',0,12,249,1,3
	.word	17734
	.byte	15,12,254,1,9,1,16
	.byte	'IfxAsclin_ParityType_even',0,0,16
	.byte	'IfxAsclin_ParityType_odd',0,1,0,32
	.byte	'IfxAsclin_ParityType',0,12,130,2,3
	.word	111326
	.byte	15,12,135,2,9,1,16
	.byte	'IfxAsclin_ReceiveBufferMode_rxFifo',0,0,16
	.byte	'IfxAsclin_ReceiveBufferMode_rxBuffer',0,1,0,32
	.byte	'IfxAsclin_ReceiveBufferMode',0,12,139,2,3
	.word	111418
	.byte	15,12,144,2,9,1,16
	.byte	'IfxAsclin_RtsCtsPolarity_activeHigh',0,0,16
	.byte	'IfxAsclin_RtsCtsPolarity_activeLow',0,1,0,32
	.byte	'IfxAsclin_RtsCtsPolarity',0,12,148,2,3
	.word	111538
	.byte	15,12,153,2,9,1,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_1',0,0,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_2',0,1,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_3',0,2,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_4',0,3,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_5',0,4,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_6',0,5,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_7',0,6,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_8',0,7,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_9',0,8,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_10',0,9,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_11',0,10,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_12',0,11,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_13',0,12,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_14',0,13,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_15',0,14,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_16',0,15,0,32
	.byte	'IfxAsclin_RxFifoInterruptLevel',0,12,171,2,3
	.word	111654
	.byte	15,12,176,2,9,1,16
	.byte	'IfxAsclin_RxFifoOutletWidth_0',0,0,16
	.byte	'IfxAsclin_RxFifoOutletWidth_1',0,1,16
	.byte	'IfxAsclin_RxFifoOutletWidth_2',0,2,16
	.byte	'IfxAsclin_RxFifoOutletWidth_3',0,3,0,32
	.byte	'IfxAsclin_RxFifoOutletWidth',0,12,182,2,3
	.word	112268
	.byte	32
	.byte	'IfxAsclin_RxInputSelect',0,12,197,2,3
	.word	18823
	.byte	32
	.byte	'IfxAsclin_SamplePointPosition',0,12,219,2,3
	.word	20371
	.byte	32
	.byte	'IfxAsclin_SamplesPerBit',0,12,228,2,3
	.word	20894
	.byte	15,12,234,2,9,1,16
	.byte	'IfxAsclin_ShiftDirection_lsbFirst',0,0,16
	.byte	'IfxAsclin_ShiftDirection_msbFirst',0,1,0,32
	.byte	'IfxAsclin_ShiftDirection',0,12,238,2,3
	.word	112545
	.byte	15,12,244,2,9,1,16
	.byte	'IfxAsclin_SlavePolarity_idleLow',0,0,16
	.byte	'IfxAsclin_SlavePolarity_idlehigh',0,1,0,32
	.byte	'IfxAsclin_SlavePolarity',0,12,248,2,3
	.word	112658
	.byte	15,12,253,2,9,1,16
	.byte	'IfxAsclin_SleepMode_enable',0,0,16
	.byte	'IfxAsclin_SleepMode_disable',0,1,0,32
	.byte	'IfxAsclin_SleepMode',0,12,129,3,3
	.word	112767
	.byte	15,12,142,3,9,1,16
	.byte	'IfxAsclin_StopBit_0',0,0,16
	.byte	'IfxAsclin_StopBit_1',0,1,16
	.byte	'IfxAsclin_StopBit_2',0,2,16
	.byte	'IfxAsclin_StopBit_3',0,3,16
	.byte	'IfxAsclin_StopBit_4',0,4,16
	.byte	'IfxAsclin_StopBit_5',0,5,16
	.byte	'IfxAsclin_StopBit_6',0,6,16
	.byte	'IfxAsclin_StopBit_7',0,7,0,32
	.byte	'IfxAsclin_StopBit',0,12,152,3,3
	.word	112862
	.byte	15,12,156,3,9,1,16
	.byte	'IfxAsclin_SuspendMode_none',0,0,16
	.byte	'IfxAsclin_SuspendMode_hard',0,1,16
	.byte	'IfxAsclin_SuspendMode_soft',0,2,0,32
	.byte	'IfxAsclin_SuspendMode',0,12,161,3,3
	.word	113072
	.byte	15,12,166,3,9,1,16
	.byte	'IfxAsclin_TxFifoInletWidth_0',0,0,16
	.byte	'IfxAsclin_TxFifoInletWidth_1',0,1,16
	.byte	'IfxAsclin_TxFifoInletWidth_2',0,2,16
	.byte	'IfxAsclin_TxFifoInletWidth_3',0,3,0,32
	.byte	'IfxAsclin_TxFifoInletWidth',0,12,172,3,3
	.word	113197
	.byte	15,12,177,3,9,1,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_0',0,0,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_1',0,1,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_2',0,2,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_3',0,3,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_4',0,4,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_5',0,5,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_6',0,6,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_7',0,7,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_8',0,8,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_9',0,9,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_10',0,10,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_11',0,11,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_12',0,12,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_13',0,13,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_14',0,14,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_15',0,15,0,32
	.byte	'IfxAsclin_TxFifoInterruptLevel',0,12,195,3,3
	.word	113364
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L113:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,28,46,0,3,8,58,15,59
	.byte	15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,29,29,1,49,19,0,0,30,11,0,49,19,0,0,31,46,1,3,8,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,63,12,60,12,0,0,32,22,0,3,8,58,15,59,15,57,15,73,19,0,0,33,21,0,54,15,0,0,34,19
	.byte	1,58,15,59,15,57,15,11,15,0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L114:
	.word	.L522-.L521
.L521:
	.half	3
	.word	.L524-.L523
.L523:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxSrc.h',0,6,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0
	.byte	'IfxAsclin_regdef.h',0,3,0,0
	.byte	'IfxAsclin_cfg.h',0,4,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,4,0,0
	.byte	'IfxAsclin_PinMap.h',0,7,0,0,0
.L524:
.L522:
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_info'
.L115:
	.word	269
	.half	3
	.word	.L116
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L118,.L117
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_getAddress',0,1,79,13
	.word	.L240
	.byte	1,1,1
	.word	.L68,.L241,.L67
	.byte	4
	.byte	'asclin',0,1,79,50
	.word	.L242,.L243
	.byte	5
	.word	.L68,.L241
	.byte	6
	.byte	'module',0,1,81,17
	.word	.L240,.L244
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_abbrev'
.L116:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_line'
.L117:
	.word	.L526-.L525
.L525:
	.half	3
	.word	.L528-.L527
.L527:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L528:
	.byte	5,18,7,0,5,2
	.word	.L68
	.byte	3,210,0,1,5,5,9
	.half	.L529-.L68
	.byte	1,5,32,7,9
	.half	.L530-.L529
	.byte	3,2,1,5,54,9
	.half	.L531-.L530
	.byte	1,5,62,9
	.half	.L532-.L531
	.byte	1,5,1,9
	.half	.L460-.L532
	.byte	3,8,1,5,16,7,9
	.half	.L2-.L460
	.byte	3,124,1,5,1,9
	.half	.L461-.L2
	.byte	3,4,1,7,9
	.half	.L119-.L461
	.byte	0,1,1
.L526:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_ranges'
.L118:
	.word	-1,.L68,0,.L119-.L68,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_info'
.L120:
	.word	409
	.half	3
	.word	.L121
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L123,.L122
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_getFaFrequency',0,1,96,9
	.word	.L245
	.byte	1,1,1
	.word	.L70,.L246,.L69
	.byte	4
	.byte	'asclin',0,1,96,46
	.word	.L240,.L247
	.byte	5
	.word	.L70,.L246
	.byte	6
	.byte	'frequency',0,1,98,27
	.word	.L245,.L248
	.byte	7
	.word	.L249,.L70,.L250
	.byte	8
	.word	.L251,.L252
	.byte	9
	.word	.L253,.L254
	.byte	0,7
	.word	.L249,.L255,.L256
	.byte	8
	.word	.L251,.L252
	.byte	0,7
	.word	.L257,.L5,.L10
	.byte	10
	.word	.L258,.L259
	.byte	6
	.byte	'freq',0,2,209,12,13
	.word	.L245,.L260
	.byte	6
	.byte	'asclindiv',0,2,211,12,13
	.word	.L261,.L262
	.byte	0,0,11
	.word	.L257,.L6,.L246
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_abbrev'
.L121:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85
	.byte	6,0,0,10,11,1,49,16,85,6,0,0,11,29,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_line'
.L122:
	.word	.L534-.L533
.L533:
	.half	3
	.word	.L536-.L535
.L535:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'IfxScuCcu.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L536:
	.byte	4,3,5,25,7,0,5,2
	.word	.L70
	.byte	3,161,15,1,4,1,5,9,9
	.half	.L250-.L70
	.byte	3,190,113,1,4,3,5,25,9
	.half	.L255-.L250
	.byte	3,194,14,1,4,1,5,10,9
	.half	.L256-.L255
	.byte	3,200,113,1,7,9
	.half	.L537-.L256
	.byte	3,3,1,7,9
	.half	.L538-.L537
	.byte	1,4,2,5,27,9
	.half	.L5-.L538
	.byte	3,228,11,1,5,29,3,2,1,5,27,9
	.half	.L539-.L5
	.byte	1,5,22,9
	.half	.L540-.L539
	.byte	3,2,1,5,5,9
	.half	.L541-.L540
	.byte	1,5,45,7,9
	.half	.L542-.L541
	.byte	3,2,1,5,91,9
	.half	.L463-.L542
	.byte	1,5,77,9
	.half	.L543-.L463
	.byte	1,5,66,9
	.half	.L544-.L543
	.byte	1,4,1,5,1,9
	.half	.L10-.L544
	.byte	3,159,116,1,5,50,7,9
	.half	.L6-.L10
	.byte	3,120,1,5,19,7,9
	.half	.L7-.L6
	.byte	3,3,1,5,1,3,5,1,7,9
	.half	.L124-.L7
	.byte	0,1,1
.L534:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_ranges'
.L123:
	.word	-1,.L70,0,.L124-.L70,0,0
.L254:
	.word	-1,.L70,0,.L250-.L70,.L255-.L70,.L256-.L70,0,0
.L259:
	.word	-1,.L70,.L5-.L70,.L10-.L70,.L6-.L70,.L246-.L70,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_info'
.L125:
	.word	285
	.half	3
	.word	.L126
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L128,.L127
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_getIndex',0,1,121,17
	.word	.L242
	.byte	1,1,1
	.word	.L72,.L263,.L71
	.byte	4
	.byte	'asclin',0,1,121,48
	.word	.L240,.L264
	.byte	5
	.word	.L72,.L263
	.byte	6
	.byte	'index',0,1,123,21
	.word	.L265,.L266
	.byte	6
	.byte	'result',0,1,124,21
	.word	.L242,.L267
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_abbrev'
.L126:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_line'
.L127:
	.word	.L546-.L545
.L545:
	.half	3
	.word	.L548-.L547
.L547:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L548:
	.byte	5,12,7,0,5,2
	.word	.L72
	.byte	3,253,0,1,5,13,3,4,1,5,50,9
	.half	.L549-.L72
	.byte	3,126,1,5,42,9
	.half	.L13-.L549
	.byte	3,2,1,5,9,9
	.half	.L550-.L13
	.byte	1,5,68,7,9
	.half	.L551-.L550
	.byte	3,2,1,5,22,9
	.half	.L552-.L551
	.byte	1,5,1,3,6,1,5,57,7,9
	.half	.L14-.L552
	.byte	3,118,1,5,50,1,5,1,7,9
	.half	.L553-.L14
	.byte	3,10,1,7,9
	.half	.L129-.L553
	.byte	0,1,1
.L546:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_ranges'
.L128:
	.word	-1,.L72,0,.L129-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_info'
.L130:
	.word	256
	.half	3
	.word	.L131
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L133,.L132
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_getOvsFrequency',0,1,141,1,9
	.word	.L245
	.byte	1,1,1
	.word	.L74,.L268,.L73
	.byte	4
	.byte	'asclin',0,1,141,1,47
	.word	.L240,.L269
	.byte	5
	.word	.L74,.L268
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_abbrev'
.L131:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_line'
.L132:
	.word	.L555-.L554
.L554:
	.half	3
	.word	.L557-.L556
.L556:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L557:
	.byte	5,9,7,0,5,2
	.word	.L74
	.byte	3,140,1,1,5,38,9
	.half	.L466-.L74
	.byte	3,2,1,5,61,9
	.half	.L465-.L466
	.byte	1,5,88,9
	.half	.L558-.L465
	.byte	1,5,61,9
	.half	.L559-.L558
	.byte	1,5,46,9
	.half	.L560-.L559
	.byte	1,5,88,9
	.half	.L561-.L560
	.byte	1,5,73,9
	.half	.L562-.L561
	.byte	1,5,1,3,1,1,7,9
	.half	.L134-.L562
	.byte	0,1,1
.L555:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_ranges'
.L133:
	.word	-1,.L74,0,.L134-.L74,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_info'
.L135:
	.word	255
	.half	3
	.word	.L136
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L138,.L137
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_getPdFrequency',0,1,147,1,9
	.word	.L245
	.byte	1,1,1
	.word	.L76,.L270,.L75
	.byte	4
	.byte	'asclin',0,1,147,1,46
	.word	.L240,.L271
	.byte	5
	.word	.L76,.L270
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_abbrev'
.L136:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_line'
.L137:
	.word	.L564-.L563
.L563:
	.half	3
	.word	.L566-.L565
.L565:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L566:
	.byte	5,9,7,0,5,2
	.word	.L76
	.byte	3,146,1,1,5,37,9
	.half	.L468-.L76
	.byte	3,2,1,5,64,9
	.half	.L467-.L468
	.byte	1,5,75,9
	.half	.L567-.L467
	.byte	1,5,45,9
	.half	.L568-.L567
	.byte	1,5,1,3,1,1,7,9
	.half	.L139-.L568
	.byte	0,1,1
.L564:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_ranges'
.L138:
	.word	-1,.L76,0,.L139-.L76,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_info'
.L140:
	.word	258
	.half	3
	.word	.L141
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L143,.L142
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_getShiftFrequency',0,1,153,1,9
	.word	.L245
	.byte	1,1,1
	.word	.L78,.L272,.L77
	.byte	4
	.byte	'asclin',0,1,153,1,49
	.word	.L240,.L273
	.byte	5
	.word	.L78,.L272
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_abbrev'
.L141:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_line'
.L142:
	.word	.L570-.L569
.L569:
	.half	3
	.word	.L572-.L571
.L571:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L572:
	.byte	5,9,7,0,5,2
	.word	.L78
	.byte	3,152,1,1,5,38,9
	.half	.L470-.L78
	.byte	3,2,1,5,64,9
	.half	.L469-.L470
	.byte	1,5,46,9
	.half	.L573-.L469
	.byte	1,5,1,3,1,1,7,9
	.half	.L144-.L573
	.byte	0,1,1
.L570:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_ranges'
.L143:
	.word	-1,.L78,0,.L144-.L78,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_info'
.L145:
	.word	269
	.half	3
	.word	.L146
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L148,.L147
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_resetModule',0,1,219,1,6,1,1,1
	.word	.L96,.L274,.L95
	.byte	4
	.byte	'asclin',0,1,219,1,40
	.word	.L240,.L275
	.byte	5
	.word	.L96,.L274
	.byte	6
	.byte	'passwd',0,1,221,1,12
	.word	.L276,.L277
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_abbrev'
.L146:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_line'
.L147:
	.word	.L575-.L574
.L574:
	.half	3
	.word	.L577-.L576
.L576:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L577:
	.byte	5,6,7,0,5,2
	.word	.L96
	.byte	3,218,1,1,5,53,9
	.half	.L478-.L96
	.byte	3,2,1,5,19,9
	.half	.L477-.L478
	.byte	1,5,31,9
	.half	.L480-.L477
	.byte	3,1,1,5,20,9
	.half	.L479-.L480
	.byte	3,2,1,5,29,9
	.half	.L578-.L479
	.byte	3,2,1,5,25,9
	.half	.L481-.L578
	.byte	3,126,1,5,20,9
	.half	.L579-.L481
	.byte	3,1,1,5,25,9
	.half	.L580-.L579
	.byte	1,5,29,9
	.half	.L581-.L580
	.byte	3,1,1,5,32,9
	.half	.L32-.L581
	.byte	3,2,1,5,40,9
	.half	.L582-.L32
	.byte	1,5,31,7,9
	.half	.L583-.L582
	.byte	3,3,1,5,29,9
	.half	.L584-.L583
	.byte	3,3,1,5,22,3,126,1,5,27,9
	.half	.L482-.L584
	.byte	1,5,29,9
	.half	.L585-.L482
	.byte	3,2,1,5,1,7,9
	.half	.L149-.L585
	.byte	3,1,0,1,1
.L575:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_ranges'
.L148:
	.word	-1,.L96,0,.L149-.L96,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_info'
.L150:
	.word	714
	.half	3
	.word	.L151
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L153,.L152
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_setBitTiming',0,1,250,1,9
	.word	.L278
	.byte	1,1,1
	.word	.L102,.L279,.L101
	.byte	4
	.byte	'asclin',0,1,250,1,44
	.word	.L240,.L280
	.byte	4
	.byte	'baudrate',0,1,250,1,60
	.word	.L245,.L281
	.byte	4
	.byte	'oversampling',0,1,250,1,99
	.word	.L282,.L283
	.byte	4
	.byte	'samplepoint',0,1,250,1,143,1
	.word	.L284,.L285
	.byte	4
	.byte	'medianFilter',0,1,250,1,180,1
	.word	.L286,.L287
	.byte	5
	.word	.L102,.L279
	.byte	6
	.byte	'source',0,1,252,1,27
	.word	.L288,.L289
	.byte	6
	.byte	'fOvs',0,1,253,1,27
	.word	.L245,.L290
	.byte	6
	.byte	'd',0,1,254,1,27
	.word	.L265,.L291
	.byte	6
	.byte	'n',0,1,254,1,39
	.word	.L265,.L292
	.byte	6
	.byte	'dBest',0,1,254,1,42
	.word	.L265,.L293
	.byte	6
	.byte	'nBest',0,1,254,1,53
	.word	.L265,.L294
	.byte	6
	.byte	'f',0,1,255,1,27
	.word	.L245,.L295
	.byte	6
	.byte	'fpd',0,1,130,2,27
	.word	.L245,.L296
	.byte	7
	.word	.L249,.L297,.L298
	.byte	8
	.word	.L251,.L299
	.byte	9
	.word	.L253,.L300
	.byte	0,7
	.word	.L249,.L301,.L302
	.byte	8
	.word	.L251,.L299
	.byte	0,10
	.word	.L303
	.byte	6
	.byte	'relError',0,1,134,2,27
	.word	.L245,.L311
	.byte	6
	.byte	'limit',0,1,135,2,27
	.word	.L245,.L312
	.byte	6
	.byte	'terminated',0,1,137,2,27
	.word	.L278,.L313
	.byte	6
	.byte	'adder_facL',0,1,139,2,27
	.word	.L265,.L314
	.byte	6
	.byte	'adder_facH',0,1,139,2,39
	.word	.L265,.L315
	.byte	6
	.byte	'adder_facL_min',0,1,139,2,51
	.word	.L265,.L316
	.byte	6
	.byte	'count',0,1,139,2,67
	.word	.L265,.L317
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_abbrev'
.L151:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85
	.byte	6,0,0,10,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_line'
.L152:
	.word	.L587-.L586
.L586:
	.half	3
	.word	.L589-.L588
.L588:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L589:
	.byte	5,9,7,0,5,2
	.word	.L102
	.byte	3,249,1,1,4,2,5,25,9
	.half	.L297-.L102
	.byte	3,168,13,1,4,1,5,9,9
	.half	.L298-.L297
	.byte	3,216,114,1,4,2,5,25,9
	.half	.L301-.L298
	.byte	3,168,13,1,4,1,5,9,3,216,114,1,4,2,5,25,9
	.half	.L302-.L301
	.byte	3,168,13,1,4,1,5,9,9
	.half	.L489-.L302
	.byte	3,216,114,1,5,58,3,8,1,5,71,9
	.half	.L487-.L489
	.byte	3,1,1,5,56,9
	.half	.L590-.L487
	.byte	1,5,20,9
	.half	.L591-.L590
	.byte	1,5,57,9
	.half	.L491-.L591
	.byte	3,1,1,5,38,9
	.half	.L304-.L491
	.byte	3,5,1,5,31,9
	.half	.L305-.L304
	.byte	3,124,1,5,22,9
	.half	.L306-.L305
	.byte	3,29,1,5,31,9
	.half	.L307-.L306
	.byte	3,99,1,5,20,9
	.half	.L308-.L307
	.byte	3,27,1,5,29,9
	.half	.L309-.L308
	.byte	3,101,1,5,40,3,2,1,5,20,9
	.half	.L310-.L309
	.byte	3,24,1,5,22,9
	.half	.L493-.L310
	.byte	3,110,1,5,46,9
	.half	.L592-.L493
	.byte	3,122,1,5,9,9
	.half	.L494-.L592
	.byte	3,6,1,5,34,9
	.half	.L496-.L494
	.byte	3,20,1,5,20,9
	.half	.L593-.L496
	.byte	3,125,1,5,32,9
	.half	.L497-.L593
	.byte	3,3,1,5,22,9
	.half	.L498-.L497
	.byte	3,1,1,5,18,9
	.half	.L34-.L498
	.byte	3,2,1,5,12,9
	.half	.L499-.L34
	.byte	3,5,1,5,18,9
	.half	.L501-.L499
	.byte	3,123,1,5,20,9
	.half	.L594-.L501
	.byte	3,2,1,5,54,3,3,1,5,9,9
	.half	.L37-.L594
	.byte	3,2,1,5,24,7,9
	.half	.L595-.L37
	.byte	3,2,1,9
	.half	.L502-.L595
	.byte	3,1,1,5,27,3,127,1,5,42,9
	.half	.L38-.L502
	.byte	3,5,1,5,47,9
	.half	.L503-.L38
	.byte	1,5,37,9
	.half	.L504-.L503
	.byte	3,1,1,5,53,3,3,1,5,46,9
	.half	.L41-.L504
	.byte	3,2,1,5,34,9
	.half	.L596-.L41
	.byte	1,5,32,9
	.half	.L597-.L596
	.byte	1,5,46,9
	.half	.L598-.L597
	.byte	1,5,37,9
	.half	.L599-.L598
	.byte	1,5,27,9
	.half	.L505-.L599
	.byte	3,1,1,5,26,9
	.half	.L43-.L505
	.byte	3,2,1,5,13,9
	.half	.L600-.L43
	.byte	1,5,32,7,9
	.half	.L601-.L600
	.byte	3,2,1,9
	.half	.L602-.L601
	.byte	3,1,1,9
	.half	.L603-.L602
	.byte	3,2,1,5,60,9
	.half	.L44-.L603
	.byte	3,118,1,5,53,9
	.half	.L40-.L44
	.byte	1,5,22,7,9
	.half	.L604-.L40
	.byte	3,14,1,5,9,9
	.half	.L605-.L604
	.byte	1,5,57,7,9
	.half	.L606-.L605
	.byte	3,101,1,5,20,9
	.half	.L36-.L606
	.byte	1,5,39,7,9
	.half	.L607-.L36
	.byte	1,5,47,9
	.half	.L608-.L607
	.byte	1,5,44,9
	.half	.L609-.L608
	.byte	1,5,38,7,9
	.half	.L45-.L609
	.byte	3,33,1,5,18,9
	.half	.L490-.L45
	.byte	3,1,1,5,31,9
	.half	.L509-.L490
	.byte	1,5,18,9
	.half	.L488-.L509
	.byte	3,1,1,5,50,9
	.half	.L510-.L488
	.byte	3,3,1,5,21,9
	.half	.L511-.L510
	.byte	1,5,50,9
	.half	.L610-.L511
	.byte	1,5,38,3,8,1,5,35,9
	.half	.L512-.L610
	.byte	3,120,1,5,34,9
	.half	.L611-.L512
	.byte	3,3,1,5,21,9
	.half	.L514-.L611
	.byte	1,5,38,9
	.half	.L612-.L514
	.byte	3,5,1,5,34,9
	.half	.L613-.L612
	.byte	3,123,1,5,27,9
	.half	.L515-.L613
	.byte	3,3,1,5,21,9
	.half	.L516-.L515
	.byte	1,5,27,9
	.half	.L614-.L516
	.byte	1,5,25,9
	.half	.L517-.L614
	.byte	1,5,38,9
	.half	.L615-.L517
	.byte	3,2,1,5,12,9
	.half	.L513-.L615
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L154-.L513
	.byte	0,1,1
.L587:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_ranges'
.L153:
	.word	-1,.L102,0,.L154-.L102,0,0
.L300:
	.word	-1,.L102,.L297-.L102,.L298-.L102,.L301-.L102,.L302-.L102,0,0
.L303:
	.word	-1,.L102,.L304-.L102,.L305-.L102,.L306-.L102,.L307-.L102,.L308-.L102,.L309-.L102,.L310-.L102,.L279-.L102
	.word	0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_info'
.L155:
	.word	301
	.half	3
	.word	.L156
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L158,.L157
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_disableModule',0,1,54,6,1,1,1
	.word	.L62,.L318,.L61
	.byte	4
	.byte	'asclin',0,1,54,42
	.word	.L240,.L319
	.byte	5
	.word	.L62,.L318
	.byte	6
	.byte	'psw',0,1,56,12
	.word	.L276,.L320
	.byte	7
	.word	.L321,.L322,.L323
	.byte	8
	.word	.L324,.L325
	.byte	9
	.word	.L326,.L322,.L323
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_abbrev'
.L156:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_line'
.L157:
	.word	.L617-.L616
.L616:
	.half	3
	.word	.L619-.L618
.L618:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L619:
	.byte	5,6,7,0,5,2
	.word	.L62
	.byte	3,53,1,5,50,9
	.half	.L453-.L62
	.byte	3,2,1,5,16,9
	.half	.L452-.L453
	.byte	1,5,31,9
	.half	.L455-.L452
	.byte	3,1,1,5,29,9
	.half	.L454-.L455
	.byte	3,2,1,4,2,5,18,3,150,17,1,5,24,9
	.half	.L322-.L454
	.byte	1,4,1,5,29,9
	.half	.L323-.L322
	.byte	3,234,110,1,5,1,7,9
	.half	.L159-.L323
	.byte	3,1,0,1,1
.L617:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_ranges'
.L158:
	.word	-1,.L62,0,.L159-.L62,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_info'
.L160:
	.word	389
	.half	3
	.word	.L161
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L163,.L162
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_enableAscErrorFlags',0,1,63,6,1,1,1
	.word	.L64,.L327,.L63
	.byte	4
	.byte	'asclin',0,1,63,48
	.word	.L240,.L328
	.byte	4
	.byte	'parEnable',0,1,63,64
	.word	.L278,.L329
	.byte	4
	.byte	'rfoEnable',0,1,63,83
	.word	.L278,.L330
	.byte	5
	.word	.L64,.L327
	.byte	6
	.word	.L331,.L64,.L332
	.byte	7
	.word	.L333,.L334
	.byte	7
	.word	.L335,.L336
	.byte	8
	.word	.L337,.L64,.L332
	.byte	0,6
	.word	.L338,.L332,.L339
	.byte	7
	.word	.L340,.L341
	.byte	7
	.word	.L342,.L343
	.byte	8
	.word	.L344,.L332,.L339
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_abbrev'
.L161:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_line'
.L162:
	.word	.L621-.L620
.L620:
	.half	3
	.word	.L623-.L622
.L622:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L623:
	.byte	4,2,5,26,7,0,5,2
	.word	.L64
	.byte	3,181,14,1,5,33,9
	.half	.L624-.L64
	.byte	1,5,31,9
	.half	.L625-.L624
	.byte	1,5,26,9
	.half	.L332-.L625
	.byte	3,30,1,5,34,9
	.half	.L626-.L332
	.byte	1,5,32,9
	.half	.L627-.L626
	.byte	1,4,1,5,1,9
	.half	.L339-.L627
	.byte	3,239,113,1,7,9
	.half	.L164-.L339
	.byte	0,1,1
.L621:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_ranges'
.L163:
	.word	-1,.L64,0,.L164-.L64,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_info'
.L165:
	.word	300
	.half	3
	.word	.L166
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L168,.L167
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_enableModule',0,1,70,6,1,1,1
	.word	.L66,.L345,.L65
	.byte	4
	.byte	'asclin',0,1,70,41
	.word	.L240,.L346
	.byte	5
	.word	.L66,.L345
	.byte	6
	.byte	'psw',0,1,72,12
	.word	.L276,.L347
	.byte	7
	.word	.L348,.L349,.L350
	.byte	8
	.word	.L351,.L352
	.byte	9
	.word	.L353,.L349,.L350
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_abbrev'
.L166:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_line'
.L167:
	.word	.L629-.L628
.L628:
	.half	3
	.word	.L631-.L630
.L630:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L631:
	.byte	5,6,7,0,5,2
	.word	.L66
	.byte	3,197,0,1,5,50,9
	.half	.L457-.L66
	.byte	3,2,1,5,16,9
	.half	.L456-.L457
	.byte	1,5,31,9
	.half	.L459-.L456
	.byte	3,1,1,5,29,9
	.half	.L458-.L459
	.byte	3,2,1,4,2,5,18,3,140,17,1,5,24,9
	.half	.L349-.L458
	.byte	1,4,1,5,29,9
	.half	.L350-.L349
	.byte	3,244,110,1,5,1,7,9
	.half	.L169-.L350
	.byte	3,1,0,1,1
.L629:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_ranges'
.L168:
	.word	-1,.L66,0,.L169-.L66,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_info'
.L170:
	.word	252
	.half	3
	.word	.L171
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L173,.L172
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_getSrcPointerEr',0,1,159,1,24
	.word	.L354
	.byte	1,1,1
	.word	.L80,.L355,.L79
	.byte	4
	.byte	'asclin',0,1,159,1,62
	.word	.L240,.L356
	.byte	5
	.word	.L357
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_abbrev'
.L171:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_line'
.L172:
	.word	.L633-.L632
.L632:
	.half	3
	.word	.L635-.L634
.L634:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L635:
	.byte	5,83,7,0,5,2
	.word	.L80
	.byte	3,160,1,1,5,63,9
	.half	.L636-.L80
	.byte	1,5,91,9
	.half	.L471-.L636
	.byte	1,5,1,9
	.half	.L637-.L471
	.byte	3,1,1,7,9
	.half	.L174-.L637
	.byte	0,1,1
.L633:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_ranges'
.L173:
	.word	-1,.L80,0,.L174-.L80,0,0
.L357:
	.word	-1,.L80,0,.L355-.L80,-1,.L82,0,.L239-.L82,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_info'
.L175:
	.word	252
	.half	3
	.word	.L176
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L178,.L177
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_getSrcPointerRx',0,1,165,1,24
	.word	.L354
	.byte	1,1,1
	.word	.L84,.L358,.L83
	.byte	4
	.byte	'asclin',0,1,165,1,62
	.word	.L240,.L359
	.byte	5
	.word	.L360
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_abbrev'
.L176:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_line'
.L177:
	.word	.L639-.L638
.L638:
	.half	3
	.word	.L641-.L640
.L640:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L641:
	.byte	5,83,7,0,5,2
	.word	.L84
	.byte	3,166,1,1,5,63,9
	.half	.L642-.L84
	.byte	1,5,91,9
	.half	.L472-.L642
	.byte	1,5,1,9
	.half	.L643-.L472
	.byte	3,1,1,7,9
	.half	.L179-.L643
	.byte	0,1,1
.L639:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_ranges'
.L178:
	.word	-1,.L84,0,.L179-.L84,0,0
.L360:
	.word	-1,.L84,0,.L358-.L84,-1,.L86,0,.L229-.L86,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_info'
.L180:
	.word	256
	.half	3
	.word	.L181
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L183,.L182
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_getSrcPointerTx',0,1,171,1,24
	.word	.L354
	.byte	1,1,1
	.word	.L88,.L361,.L87
	.byte	4
	.byte	'asclin',0,1,171,1,62
	.word	.L240,.L362
	.byte	5
	.word	.L88,.L361
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_abbrev'
.L181:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_line'
.L182:
	.word	.L645-.L644
.L644:
	.half	3
	.word	.L647-.L646
.L646:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L647:
	.byte	5,83,7,0,5,2
	.word	.L88
	.byte	3,172,1,1,5,63,9
	.half	.L648-.L88
	.byte	1,5,1,9
	.half	.L473-.L648
	.byte	3,1,1,7,9
	.half	.L184-.L473
	.byte	0,1,1
.L645:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_ranges'
.L183:
	.word	-1,.L88,0,.L184-.L88,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_info'
.L185:
	.word	305
	.half	3
	.word	.L186
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L188,.L187
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_read16',0,1,177,1,8
	.word	.L265
	.byte	1,1,1
	.word	.L90,.L363,.L89
	.byte	4
	.byte	'asclin',0,1,177,1,37
	.word	.L240,.L364
	.byte	4
	.byte	'data',0,1,177,1,53
	.word	.L365,.L366
	.byte	4
	.byte	'count',0,1,177,1,66
	.word	.L265,.L367
	.byte	5
	.word	.L90,.L363
	.byte	6
	.byte	'rxData',0,1,179,1,33
	.word	.L368,.L369
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_abbrev'
.L186:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_line'
.L187:
	.word	.L650-.L649
.L649:
	.half	3
	.word	.L652-.L651
.L651:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L652:
	.byte	5,79,7,0,5,2
	.word	.L90
	.byte	3,178,1,1,5,21,9
	.half	.L474-.L90
	.byte	3,2,1,5,14,9
	.half	.L24-.L474
	.byte	3,3,1,5,33,3,127,1,5,17,9
	.half	.L653-.L24
	.byte	1,5,21,9
	.half	.L23-.L653
	.byte	3,126,1,5,12,7,9
	.half	.L654-.L23
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L189-.L654
	.byte	0,1,1
.L650:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_ranges'
.L188:
	.word	-1,.L90,0,.L189-.L90,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_info'
.L190:
	.word	305
	.half	3
	.word	.L191
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L193,.L192
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_read32',0,1,191,1,8
	.word	.L265
	.byte	1,1,1
	.word	.L92,.L370,.L91
	.byte	4
	.byte	'asclin',0,1,191,1,37
	.word	.L240,.L371
	.byte	4
	.byte	'data',0,1,191,1,53
	.word	.L372,.L373
	.byte	4
	.byte	'count',0,1,191,1,66
	.word	.L265,.L374
	.byte	5
	.word	.L92,.L370
	.byte	6
	.byte	'rxData',0,1,193,1,33
	.word	.L368,.L375
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_abbrev'
.L191:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_line'
.L192:
	.word	.L656-.L655
.L655:
	.half	3
	.word	.L658-.L657
.L657:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L658:
	.byte	5,79,7,0,5,2
	.word	.L92
	.byte	3,192,1,1,5,21,9
	.half	.L475-.L92
	.byte	3,2,1,5,14,9
	.half	.L27-.L475
	.byte	3,3,1,5,25,3,127,1,5,17,9
	.half	.L659-.L27
	.byte	1,5,21,9
	.half	.L26-.L659
	.byte	3,126,1,5,12,7,9
	.half	.L660-.L26
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L194-.L660
	.byte	0,1,1
.L656:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_ranges'
.L193:
	.word	-1,.L92,0,.L194-.L92,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_info'
.L195:
	.word	304
	.half	3
	.word	.L196
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L198,.L197
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_read8',0,1,205,1,8
	.word	.L265
	.byte	1,1,1
	.word	.L94,.L376,.L93
	.byte	4
	.byte	'asclin',0,1,205,1,36
	.word	.L240,.L377
	.byte	4
	.byte	'data',0,1,205,1,51
	.word	.L378,.L379
	.byte	4
	.byte	'count',0,1,205,1,64
	.word	.L265,.L380
	.byte	5
	.word	.L94,.L376
	.byte	6
	.byte	'rxData',0,1,207,1,33
	.word	.L368,.L381
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_abbrev'
.L196:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_line'
.L197:
	.word	.L662-.L661
.L661:
	.half	3
	.word	.L664-.L663
.L663:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L664:
	.byte	5,79,7,0,5,2
	.word	.L94
	.byte	3,206,1,1,5,21,9
	.half	.L476-.L94
	.byte	3,2,1,5,14,9
	.half	.L30-.L476
	.byte	3,3,1,5,32,3,127,1,5,17,9
	.half	.L665-.L30
	.byte	1,5,21,9
	.half	.L29-.L665
	.byte	3,126,1,5,12,7,9
	.half	.L666-.L29
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L199-.L666
	.byte	0,1,1
.L662:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_ranges'
.L198:
	.word	-1,.L94,0,.L199-.L94,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_info'
.L200:
	.word	615
	.half	3
	.word	.L201
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L203,.L202
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_setBaudrateBitFields',0,1,238,1,6,1,1,1
	.word	.L98,.L382,.L97
	.byte	4
	.byte	'asclin',0,1,238,1,49
	.word	.L240,.L383
	.byte	4
	.byte	'prescaler',0,1,238,1,64
	.word	.L276,.L384
	.byte	4
	.byte	'numerator',0,1,238,1,82
	.word	.L276,.L385
	.byte	4
	.byte	'denominator',0,1,238,1,100
	.word	.L276,.L386
	.byte	4
	.byte	'oversampling',0,1,238,1,142,1
	.word	.L282,.L387
	.byte	5
	.word	.L98,.L382
	.byte	6
	.word	.L249,.L388,.L389
	.byte	7
	.word	.L251,.L390
	.byte	8
	.word	.L253,.L391
	.byte	0,6
	.word	.L249,.L392,.L393
	.byte	7
	.word	.L251,.L390
	.byte	0,6
	.word	.L394,.L395,.L396
	.byte	7
	.word	.L397,.L398
	.byte	7
	.word	.L399,.L400
	.byte	9
	.word	.L401,.L395,.L396
	.byte	0,6
	.word	.L402,.L396,.L403
	.byte	7
	.word	.L404,.L405
	.byte	7
	.word	.L406,.L407
	.byte	8
	.word	.L408,.L409
	.byte	0,6
	.word	.L410,.L403,.L411
	.byte	7
	.word	.L412,.L413
	.byte	7
	.word	.L414,.L415
	.byte	8
	.word	.L416,.L417
	.byte	0,6
	.word	.L410,.L418,.L419
	.byte	7
	.word	.L412,.L413
	.byte	7
	.word	.L414,.L415
	.byte	0,6
	.word	.L420,.L419,.L421
	.byte	7
	.word	.L422,.L423
	.byte	7
	.word	.L424,.L425
	.byte	9
	.word	.L426,.L419,.L421
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_abbrev'
.L201:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,85,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_line'
.L202:
	.word	.L668-.L667
.L667:
	.half	3
	.word	.L670-.L669
.L669:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L670:
	.byte	5,6,7,0,5,2
	.word	.L98
	.byte	3,237,1,1,4,2,5,25,9
	.half	.L388-.L98
	.byte	3,180,13,1,4,1,5,6,9
	.half	.L389-.L388
	.byte	3,204,114,1,4,2,5,25,9
	.half	.L392-.L389
	.byte	3,180,13,1,4,1,5,38,9
	.half	.L393-.L392
	.byte	3,207,114,1,5,6,9
	.half	.L483-.L393
	.byte	3,125,1,5,38,3,3,1,4,2,5,21,9
	.half	.L395-.L483
	.byte	3,198,16,1,5,44,9
	.half	.L671-.L395
	.byte	1,5,32,9
	.half	.L672-.L671
	.byte	1,5,18,9
	.half	.L396-.L672
	.byte	3,110,1,9
	.half	.L403-.L396
	.byte	3,166,127,1,4,1,5,41,9
	.half	.L411-.L403
	.byte	3,165,112,1,4,2,5,31,9
	.half	.L418-.L411
	.byte	3,219,15,1,5,21,9
	.half	.L419-.L418
	.byte	3,224,0,1,5,35,9
	.half	.L486-.L419
	.byte	1,4,1,5,41,9
	.half	.L421-.L486
	.byte	3,197,111,1,5,1,7,9
	.half	.L204-.L421
	.byte	3,7,0,1,1
.L668:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_ranges'
.L203:
	.word	-1,.L98,0,.L204-.L98,0,0
.L391:
	.word	-1,.L98,.L388-.L98,.L389-.L98,.L392-.L98,.L393-.L98,0,0
.L409:
	.word	-1,.L98,.L396-.L98,.L403-.L98,-1,.L100,0,.L234-.L100,0,0
.L417:
	.word	-1,.L98,.L403-.L98,.L411-.L98,.L418-.L98,.L419-.L98,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_info'
.L205:
	.word	349
	.half	3
	.word	.L206
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L208,.L207
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_setClockSource',0,1,221,2,6,1,1,1
	.word	.L104,.L427,.L103
	.byte	4
	.byte	'asclin',0,1,221,2,43
	.word	.L240,.L428
	.byte	4
	.byte	'clockSource',0,1,221,2,73
	.word	.L288,.L429
	.byte	5
	.word	.L104,.L427
	.byte	6
	.word	.L430,.L49,.L431
	.byte	7
	.word	.L432,.L433
	.byte	8
	.word	.L434,.L49,.L431
	.byte	0,6
	.word	.L430,.L51,.L435
	.byte	7
	.word	.L432,.L433
	.byte	8
	.word	.L434,.L51,.L435
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_abbrev'
.L206:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_line'
.L207:
	.word	.L674-.L673
.L673:
	.half	3
	.word	.L676-.L675
.L675:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L676:
	.byte	5,18,7,0,5,2
	.word	.L104
	.byte	3,222,2,1,5,26,9
	.half	.L677-.L104
	.byte	1,5,5,9
	.half	.L678-.L677
	.byte	3,3,1,4,2,5,25,7,9
	.half	.L49-.L678
	.byte	3,198,12,1,4,1,5,54,9
	.half	.L431-.L49
	.byte	3,188,115,1,5,1,7,9
	.half	.L679-.L431
	.byte	3,8,1,4,2,5,25,7,9
	.half	.L51-.L679
	.byte	3,188,12,1,4,1,5,54,9
	.half	.L435-.L51
	.byte	3,193,115,1,5,1,7,9
	.half	.L680-.L435
	.byte	3,3,1,7,9
	.half	.L209-.L680
	.byte	0,1,1
.L674:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_ranges'
.L208:
	.word	-1,.L104,0,.L209-.L104,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_info'
.L210:
	.word	306
	.half	3
	.word	.L211
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L213,.L212
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_write16',0,1,239,2,8
	.word	.L265
	.byte	1,1,1
	.word	.L106,.L436,.L105
	.byte	4
	.byte	'asclin',0,1,239,2,38
	.word	.L240,.L437
	.byte	4
	.byte	'data',0,1,239,2,54
	.word	.L365,.L438
	.byte	4
	.byte	'count',0,1,239,2,67
	.word	.L265,.L439
	.byte	5
	.word	.L106,.L436
	.byte	6
	.byte	'txData',0,1,241,2,33
	.word	.L440,.L441
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_abbrev'
.L211:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_line'
.L212:
	.word	.L682-.L681
.L681:
	.half	3
	.word	.L684-.L683
.L683:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L684:
	.byte	5,79,7,0,5,2
	.word	.L106
	.byte	3,240,2,1,5,23,9
	.half	.L518-.L106
	.byte	3,2,1,5,14,9
	.half	.L53-.L518
	.byte	3,3,1,5,21,3,127,1,5,19,9
	.half	.L685-.L53
	.byte	1,5,23,9
	.half	.L52-.L685
	.byte	3,126,1,5,12,7,9
	.half	.L686-.L52
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L214-.L686
	.byte	0,1,1
.L682:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_ranges'
.L213:
	.word	-1,.L106,0,.L214-.L106,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_info'
.L215:
	.word	306
	.half	3
	.word	.L216
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L218,.L217
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_write32',0,1,253,2,8
	.word	.L265
	.byte	1,1,1
	.word	.L108,.L442,.L107
	.byte	4
	.byte	'asclin',0,1,253,2,38
	.word	.L240,.L443
	.byte	4
	.byte	'data',0,1,253,2,54
	.word	.L372,.L444
	.byte	4
	.byte	'count',0,1,253,2,67
	.word	.L265,.L445
	.byte	5
	.word	.L108,.L442
	.byte	6
	.byte	'txData',0,1,255,2,33
	.word	.L440,.L446
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_abbrev'
.L216:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_line'
.L217:
	.word	.L688-.L687
.L687:
	.half	3
	.word	.L690-.L689
.L689:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L690:
	.byte	5,79,7,0,5,2
	.word	.L108
	.byte	3,254,2,1,5,23,9
	.half	.L519-.L108
	.byte	3,2,1,5,14,9
	.half	.L56-.L519
	.byte	3,3,1,5,21,3,127,1,5,19,9
	.half	.L691-.L56
	.byte	1,5,23,9
	.half	.L55-.L691
	.byte	3,126,1,5,12,7,9
	.half	.L692-.L55
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L219-.L692
	.byte	0,1,1
.L688:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_ranges'
.L218:
	.word	-1,.L108,0,.L219-.L108,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_info'
.L220:
	.word	305
	.half	3
	.word	.L221
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L223,.L222
	.byte	2
	.word	.L111
	.byte	3
	.byte	'IfxAsclin_write8',0,1,139,3,8
	.word	.L265
	.byte	1,1,1
	.word	.L110,.L447,.L109
	.byte	4
	.byte	'asclin',0,1,139,3,37
	.word	.L240,.L448
	.byte	4
	.byte	'data',0,1,139,3,52
	.word	.L378,.L449
	.byte	4
	.byte	'count',0,1,139,3,65
	.word	.L265,.L450
	.byte	5
	.word	.L110,.L447
	.byte	6
	.byte	'txData',0,1,141,3,33
	.word	.L440,.L451
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_abbrev'
.L221:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_line'
.L222:
	.word	.L694-.L693
.L693:
	.half	3
	.word	.L696-.L695
.L695:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L696:
	.byte	5,79,7,0,5,2
	.word	.L110
	.byte	3,140,3,1,5,23,9
	.half	.L520-.L110
	.byte	3,2,1,5,14,9
	.half	.L59-.L520
	.byte	3,3,1,5,21,3,127,1,5,19,9
	.half	.L697-.L59
	.byte	1,5,23,9
	.half	.L58-.L697
	.byte	3,126,1,5,12,7,9
	.half	.L698-.L58
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L224-.L698
	.byte	0,1,1
.L694:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_ranges'
.L223:
	.word	-1,.L110,0,.L224-.L110,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L225:
	.word	205
	.half	3
	.word	.L226
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L228,.L227
	.byte	2
	.word	.L111
	.byte	3
	.byte	'.cocofun_4',0,1,165,1,24,1
	.word	.L86,.L229,.L85
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L226:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L227:
	.word	.L700-.L699
.L699:
	.half	3
	.word	.L702-.L701
.L701:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L702:
	.byte	5,63,7,0,5,2
	.word	.L86
	.byte	3,166,1,1,9
	.half	.L229-.L86
	.byte	0,1,1,5,63,0,5,2
	.word	.L86
	.byte	3,166,1,1,9
	.half	.L703-.L86
	.byte	3,6,1,9
	.half	.L704-.L703
	.byte	3,122,1,7,9
	.half	.L229-.L704
	.byte	0,1,1
.L700:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L228:
	.word	-1,.L86,0,.L229-.L86,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L230:
	.word	205
	.half	3
	.word	.L231
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L233,.L232
	.byte	2
	.word	.L111
	.byte	3
	.byte	'.cocofun_5',0,1,238,1,6,1
	.word	.L100,.L234,.L99
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L231:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L232:
	.word	.L706-.L705
.L705:
	.half	3
	.word	.L708-.L707
.L707:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L708:
	.byte	4,2,5,18,7,0,5,2
	.word	.L100
	.byte	3,164,18,1,5,29,9
	.half	.L485-.L100
	.byte	1,9
	.half	.L234-.L485
	.byte	0,1,1,5,18,0,5,2
	.word	.L100
	.byte	3,203,2,1,5,31,9
	.half	.L485-.L100
	.byte	1,4,2,5,29,9
	.half	.L484-.L485
	.byte	3,217,15,1,7,9
	.half	.L234-.L484
	.byte	0,1,1
.L706:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L233:
	.word	-1,.L100,0,.L234-.L100,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L235:
	.word	205
	.half	3
	.word	.L236
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L238,.L237
	.byte	2
	.word	.L111
	.byte	3
	.byte	'.cocofun_6',0,1,159,1,24,1
	.word	.L82,.L239,.L81
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L236:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L237:
	.word	.L710-.L709
.L709:
	.half	3
	.word	.L712-.L711
.L711:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L712:
	.byte	5,63,7,0,5,2
	.word	.L82
	.byte	3,160,1,1,9
	.half	.L239-.L82
	.byte	0,1,1,5,63,0,5,2
	.word	.L82
	.byte	3,166,1,1,9
	.half	.L713-.L82
	.byte	3,122,1,7,9
	.half	.L239-.L713
	.byte	0,1,1,5,63,0,5,2
	.word	.L82
	.byte	3,172,1,1,9
	.half	.L713-.L82
	.byte	3,116,1,7,9
	.half	.L239-.L713
	.byte	0,1,1
.L710:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L238:
	.word	-1,.L82,0,.L239-.L82,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L85:
	.word	-1,.L86,0,.L229-.L86
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L99:
	.word	-1,.L100,0,.L234-.L100
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L81:
	.word	-1,.L82,0,.L239-.L82
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_loc'
.L61:
	.word	-1,.L62,0,.L318-.L62
	.half	2
	.byte	138,0
	.word	0,0
.L319:
	.word	-1,.L62,0,.L452-.L62
	.half	1
	.byte	100
	.word	.L453-.L62,.L318-.L62
	.half	1
	.byte	111
	.word	0,0
.L325:
	.word	0,0
.L320:
	.word	-1,.L62,.L452-.L62,.L454-.L62
	.half	1
	.byte	82
	.word	.L455-.L62,.L318-.L62
	.half	1
	.byte	88
	.word	.L322-.L62,.L318-.L62
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_loc'
.L63:
	.word	-1,.L64,0,.L327-.L64
	.half	2
	.byte	138,0
	.word	0,0
.L328:
	.word	-1,.L64,0,.L327-.L64
	.half	1
	.byte	100
	.word	0,0
.L334:
	.word	0,0
.L341:
	.word	0,0
.L336:
	.word	0,0
.L343:
	.word	0,0
.L329:
	.word	-1,.L64,0,.L327-.L64
	.half	1
	.byte	84
	.word	0,0
.L330:
	.word	-1,.L64,0,.L327-.L64
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_loc'
.L65:
	.word	-1,.L66,0,.L345-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L346:
	.word	-1,.L66,0,.L456-.L66
	.half	1
	.byte	100
	.word	.L457-.L66,.L345-.L66
	.half	1
	.byte	111
	.word	0,0
.L352:
	.word	0,0
.L347:
	.word	-1,.L66,.L456-.L66,.L458-.L66
	.half	1
	.byte	82
	.word	.L459-.L66,.L345-.L66
	.half	1
	.byte	95
	.word	.L349-.L66,.L345-.L66
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_loc'
.L67:
	.word	-1,.L68,0,.L241-.L68
	.half	2
	.byte	138,0
	.word	0,0
.L243:
	.word	-1,.L68,0,.L241-.L68
	.half	1
	.byte	84
	.word	0,0
.L244:
	.word	-1,.L68,.L460-.L68,.L2-.L68
	.half	1
	.byte	98
	.word	.L461-.L68,.L241-.L68
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_loc'
.L69:
	.word	-1,.L70,0,.L255-.L70
	.half	2
	.byte	138,0
	.word	.L255-.L70,.L6-.L70
	.half	2
	.byte	138,16
	.word	.L6-.L70,.L6-.L70
	.half	2
	.byte	138,0
	.word	.L6-.L70,.L7-.L70
	.half	2
	.byte	138,16
	.word	.L7-.L70,.L7-.L70
	.half	2
	.byte	138,0
	.word	.L7-.L70,.L246-.L70
	.half	2
	.byte	138,16
	.word	.L246-.L70,.L246-.L70
	.half	2
	.byte	138,0
	.word	0,0
.L247:
	.word	-1,.L70,0,.L8-.L70
	.half	1
	.byte	100
	.word	.L6-.L70,.L246-.L70
	.half	1
	.byte	100
	.word	0,0
.L252:
	.word	0,0
.L262:
	.word	-1,.L70,0,.L246-.L70
	.half	2
	.byte	145,112
	.word	0,0
.L260:
	.word	-1,.L70,.L462-.L70,.L463-.L70
	.half	1
	.byte	82
	.word	.L10-.L70,.L6-.L70
	.half	1
	.byte	82
	.word	0,0
.L248:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_loc'
.L71:
	.word	-1,.L72,0,.L263-.L72
	.half	2
	.byte	138,0
	.word	0,0
.L264:
	.word	-1,.L72,0,.L263-.L72
	.half	1
	.byte	100
	.word	0,0
.L266:
	.word	0,0
.L267:
	.word	-1,.L72,.L464-.L72,.L263-.L72
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_loc'
.L73:
	.word	-1,.L74,0,.L268-.L74
	.half	2
	.byte	138,0
	.word	0,0
.L269:
	.word	-1,.L74,0,.L465-.L74
	.half	1
	.byte	100
	.word	.L466-.L74,.L268-.L74
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_loc'
.L75:
	.word	-1,.L76,0,.L270-.L76
	.half	2
	.byte	138,0
	.word	0,0
.L271:
	.word	-1,.L76,0,.L467-.L76
	.half	1
	.byte	100
	.word	.L468-.L76,.L270-.L76
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_loc'
.L77:
	.word	-1,.L78,0,.L272-.L78
	.half	2
	.byte	138,0
	.word	0,0
.L273:
	.word	-1,.L78,0,.L469-.L78
	.half	1
	.byte	100
	.word	.L470-.L78,.L272-.L78
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_loc'
.L79:
	.word	-1,.L80,0,.L355-.L80
	.half	2
	.byte	138,0
	.word	0,0
.L356:
	.word	-1,.L80,0,.L471-.L80
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_loc'
.L83:
	.word	-1,.L84,0,.L358-.L84
	.half	2
	.byte	138,0
	.word	0,0
.L359:
	.word	-1,.L84,0,.L472-.L84
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_loc'
.L87:
	.word	-1,.L88,0,.L361-.L88
	.half	2
	.byte	138,0
	.word	0,0
.L362:
	.word	-1,.L88,0,.L473-.L88
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_loc'
.L89:
	.word	-1,.L90,0,.L363-.L90
	.half	2
	.byte	138,0
	.word	0,0
.L364:
	.word	-1,.L90,0,.L363-.L90
	.half	1
	.byte	100
	.word	0,0
.L367:
	.word	-1,.L90,0,.L363-.L90
	.half	1
	.byte	84
	.word	0,0
.L366:
	.word	-1,.L90,0,.L363-.L90
	.half	1
	.byte	101
	.word	0,0
.L369:
	.word	-1,.L90,.L474-.L90,.L363-.L90
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_loc'
.L91:
	.word	-1,.L92,0,.L370-.L92
	.half	2
	.byte	138,0
	.word	0,0
.L371:
	.word	-1,.L92,0,.L370-.L92
	.half	1
	.byte	100
	.word	0,0
.L374:
	.word	-1,.L92,0,.L370-.L92
	.half	1
	.byte	84
	.word	0,0
.L373:
	.word	-1,.L92,0,.L370-.L92
	.half	1
	.byte	101
	.word	0,0
.L375:
	.word	-1,.L92,.L475-.L92,.L370-.L92
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_loc'
.L93:
	.word	-1,.L94,0,.L376-.L94
	.half	2
	.byte	138,0
	.word	0,0
.L377:
	.word	-1,.L94,0,.L376-.L94
	.half	1
	.byte	100
	.word	0,0
.L380:
	.word	-1,.L94,0,.L376-.L94
	.half	1
	.byte	84
	.word	0,0
.L379:
	.word	-1,.L94,0,.L376-.L94
	.half	1
	.byte	101
	.word	0,0
.L381:
	.word	-1,.L94,.L476-.L94,.L376-.L94
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_loc'
.L95:
	.word	-1,.L96,0,.L274-.L96
	.half	2
	.byte	138,0
	.word	0,0
.L275:
	.word	-1,.L96,0,.L477-.L96
	.half	1
	.byte	100
	.word	.L478-.L96,.L274-.L96
	.half	1
	.byte	111
	.word	0,0
.L277:
	.word	-1,.L96,.L477-.L96,.L479-.L96
	.half	1
	.byte	82
	.word	.L480-.L96,.L274-.L96
	.half	1
	.byte	88
	.word	.L481-.L96,.L32-.L96
	.half	1
	.byte	84
	.word	.L482-.L96,.L274-.L96
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_loc'
.L97:
	.word	-1,.L98,0,.L382-.L98
	.half	2
	.byte	138,0
	.word	0,0
.L383:
	.word	-1,.L98,0,.L395-.L98
	.half	1
	.byte	100
	.word	.L388-.L98,.L396-.L98
	.half	1
	.byte	111
	.word	.L100-.L98,.L484-.L98
	.half	1
	.byte	111
	.word	.L403-.L98,.L382-.L98
	.half	1
	.byte	111
	.word	.L418-.L98,.L382-.L98
	.half	1
	.byte	100
	.word	0,0
.L390:
	.word	0,0
.L413:
	.word	0,0
.L405:
	.word	0,0
.L423:
	.word	0,0
.L398:
	.word	0,0
.L386:
	.word	-1,.L98,0,.L395-.L98
	.half	1
	.byte	86
	.word	.L418-.L98,.L419-.L98
	.half	1
	.byte	90
	.word	0,0
.L415:
	.word	0,0
.L385:
	.word	-1,.L98,0,.L395-.L98
	.half	1
	.byte	85
	.word	.L485-.L98,.L484-.L98
	.half	1
	.byte	89
	.word	0,0
.L407:
	.word	0,0
.L387:
	.word	-1,.L98,0,.L395-.L98
	.half	1
	.byte	87
	.word	.L486-.L98,.L421-.L98
	.half	1
	.byte	91
	.word	0,0
.L425:
	.word	0,0
.L384:
	.word	-1,.L98,0,.L483-.L98
	.half	1
	.byte	84
	.word	0,0
.L400:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_loc'
.L101:
	.word	-1,.L102,0,.L301-.L102
	.half	2
	.byte	138,0
	.word	.L301-.L102,.L279-.L102
	.half	2
	.byte	138,24
	.word	.L279-.L102,.L279-.L102
	.half	2
	.byte	138,0
	.word	0,0
.L315:
	.word	-1,.L102,.L41-.L102,.L36-.L102
	.half	1
	.byte	92
	.word	0,0
.L314:
	.word	-1,.L102,.L502-.L102,.L38-.L102
	.half	1
	.byte	86
	.word	.L504-.L102,.L36-.L102
	.half	1
	.byte	86
	.word	0,0
.L316:
	.word	-1,.L102,.L309-.L102,.L490-.L102
	.half	1
	.byte	83
	.word	0,0
.L280:
	.word	-1,.L102,0,.L487-.L102
	.half	1
	.byte	100
	.word	.L297-.L102,.L488-.L102
	.half	1
	.byte	111
	.word	.L492-.L102,.L490-.L102
	.half	1
	.byte	100
	.word	.L100-.L102,.L234-.L102
	.half	1
	.byte	111
	.word	.L510-.L102,.L279-.L102
	.half	1
	.byte	111
	.word	.L512-.L102,.L513-.L102
	.half	1
	.byte	100
	.word	0,0
.L299:
	.word	0,0
.L281:
	.word	-1,.L102,0,.L487-.L102
	.half	1
	.byte	84
	.word	.L309-.L102,.L310-.L102
	.half	1
	.byte	89
	.word	0,0
.L317:
	.word	0,0
.L291:
	.word	-1,.L102,.L496-.L102,.L490-.L102
	.half	1
	.byte	81
	.word	0,0
.L293:
	.word	-1,.L102,.L497-.L102,.L37-.L102
	.half	1
	.byte	88
	.word	.L509-.L102,.L488-.L102
	.half	1
	.byte	88
	.word	0,0
.L295:
	.word	-1,.L102,.L498-.L102,.L499-.L102
	.half	5
	.byte	144,32,157,32,0
	.word	.L505-.L102,.L506-.L102
	.half	1
	.byte	95
	.word	0,0
.L290:
	.word	-1,.L102,.L310-.L102,.L492-.L102
	.half	1
	.byte	84
	.word	0,0
.L296:
	.word	-1,.L102,.L487-.L102,.L490-.L102
	.half	1
	.byte	82
	.word	0,0
.L312:
	.word	-1,.L102,.L494-.L102,.L495-.L102
	.half	1
	.byte	95
	.word	.L494-.L102,.L488-.L102
	.half	2
	.byte	145,104
	.word	.L499-.L102,.L37-.L102
	.half	5
	.byte	144,32,157,32,0
	.word	.L507-.L102,.L508-.L102
	.half	1
	.byte	95
	.word	.L100-.L102,.L234-.L102
	.half	2
	.byte	145,104
	.word	.L510-.L102,.L279-.L102
	.half	2
	.byte	145,104
	.word	0,0
.L287:
	.word	-1,.L102,0,.L487-.L102
	.half	1
	.byte	87
	.word	.L302-.L102,.L488-.L102
	.half	2
	.byte	145,116
	.word	.L100-.L102,.L234-.L102
	.half	2
	.byte	145,116
	.word	.L510-.L102,.L279-.L102
	.half	2
	.byte	145,116
	.word	.L516-.L102,.L517-.L102
	.half	1
	.byte	95
	.word	0,0
.L292:
	.word	-1,.L102,.L501-.L102,.L488-.L102
	.half	1
	.byte	93
	.word	.L100-.L102,.L234-.L102
	.half	1
	.byte	93
	.word	.L510-.L102,.L279-.L102
	.half	1
	.byte	93
	.word	0,0
.L294:
	.word	-1,.L102,.L493-.L102,.L37-.L102
	.half	1
	.byte	89
	.word	.L503-.L102,.L504-.L102
	.half	1
	.byte	89
	.word	.L485-.L102,.L485-.L102
	.half	1
	.byte	89
	.word	0,0
.L283:
	.word	-1,.L102,0,.L487-.L102
	.half	1
	.byte	85
	.word	.L491-.L102,.L304-.L102
	.half	1
	.byte	95
	.word	.L491-.L102,.L488-.L102
	.half	2
	.byte	145,108
	.word	.L306-.L102,.L308-.L102
	.half	1
	.byte	95
	.word	.L100-.L102,.L234-.L102
	.half	2
	.byte	145,108
	.word	.L510-.L102,.L279-.L102
	.half	2
	.byte	145,108
	.word	.L511-.L102,.L512-.L102
	.half	1
	.byte	95
	.word	0,0
.L311:
	.word	-1,.L102,.L500-.L102,.L488-.L102
	.half	1
	.byte	91
	.word	.L100-.L102,.L234-.L102
	.half	1
	.byte	91
	.word	.L510-.L102,.L279-.L102
	.half	1
	.byte	91
	.word	0,0
.L285:
	.word	-1,.L102,0,.L487-.L102
	.half	1
	.byte	86
	.word	.L489-.L102,.L304-.L102
	.half	1
	.byte	90
	.word	.L304-.L102,.L306-.L102
	.half	1
	.byte	95
	.word	.L304-.L102,.L488-.L102
	.half	2
	.byte	145,112
	.word	.L100-.L102,.L234-.L102
	.half	2
	.byte	145,112
	.word	.L510-.L102,.L279-.L102
	.half	2
	.byte	145,112
	.word	.L514-.L102,.L515-.L102
	.half	1
	.byte	95
	.word	0,0
.L289:
	.word	0,0
.L313:
	.word	-1,.L102,.L305-.L102,.L490-.L102
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_loc'
.L103:
	.word	-1,.L104,0,.L427-.L104
	.half	2
	.byte	138,0
	.word	0,0
.L428:
	.word	-1,.L104,0,.L427-.L104
	.half	1
	.byte	100
	.word	0,0
.L433:
	.word	0,0
.L429:
	.word	-1,.L104,0,.L427-.L104
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_loc'
.L105:
	.word	-1,.L106,0,.L436-.L106
	.half	2
	.byte	138,0
	.word	0,0
.L437:
	.word	-1,.L106,0,.L436-.L106
	.half	1
	.byte	100
	.word	0,0
.L439:
	.word	-1,.L106,0,.L436-.L106
	.half	1
	.byte	84
	.word	0,0
.L438:
	.word	-1,.L106,0,.L436-.L106
	.half	1
	.byte	101
	.word	0,0
.L441:
	.word	-1,.L106,.L518-.L106,.L436-.L106
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_loc'
.L107:
	.word	-1,.L108,0,.L442-.L108
	.half	2
	.byte	138,0
	.word	0,0
.L443:
	.word	-1,.L108,0,.L442-.L108
	.half	1
	.byte	100
	.word	0,0
.L445:
	.word	-1,.L108,0,.L442-.L108
	.half	1
	.byte	84
	.word	0,0
.L444:
	.word	-1,.L108,0,.L442-.L108
	.half	1
	.byte	101
	.word	0,0
.L446:
	.word	-1,.L108,.L519-.L108,.L442-.L108
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_loc'
.L109:
	.word	-1,.L110,0,.L447-.L110
	.half	2
	.byte	138,0
	.word	0,0
.L448:
	.word	-1,.L110,0,.L447-.L110
	.half	1
	.byte	100
	.word	0,0
.L450:
	.word	-1,.L110,0,.L447-.L110
	.half	1
	.byte	84
	.word	0,0
.L449:
	.word	-1,.L110,0,.L447-.L110
	.half	1
	.byte	101
	.word	0,0
.L451:
	.word	-1,.L110,.L520-.L110,.L447-.L110
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L714:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L62,.L318-.L62
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_frame'
	.word	24
	.word	.L714,.L64,.L327-.L64
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L66,.L345-.L66
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L714,.L68,.L241-.L68
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_frame'
	.word	68
	.word	.L714,.L70,.L246-.L70
	.byte	4
	.word	(.L255-.L70)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L6-.L255)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L7-.L6)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L246-.L7)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L714,.L72,.L263-.L72
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L74,.L268-.L74
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L76,.L270-.L76
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L78,.L272-.L78
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L80,.L355-.L80
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L84,.L358-.L84
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L88,.L361-.L88
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_frame'
	.word	20
	.word	.L714,.L90,.L363-.L90
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_frame'
	.word	20
	.word	.L714,.L92,.L370-.L92
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_frame'
	.word	20
	.word	.L714,.L94,.L376-.L94
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L96,.L274-.L96
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_frame'
	.word	12
	.word	.L714,.L98,.L382-.L98
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_frame'
	.word	36
	.word	.L714,.L102,.L279-.L102
	.byte	4
	.word	(.L301-.L102)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L279-.L301)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_frame'
	.word	24
	.word	.L714,.L104,.L427-.L104
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_frame'
	.word	20
	.word	.L714,.L106,.L436-.L106
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_frame'
	.word	20
	.word	.L714,.L108,.L442-.L108
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_frame'
	.word	20
	.word	.L714,.L110,.L447-.L110
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L715:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L715,.L82,.L239-.L82
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L715,.L86,.L229-.L86
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L715,.L100,.L234-.L100
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
