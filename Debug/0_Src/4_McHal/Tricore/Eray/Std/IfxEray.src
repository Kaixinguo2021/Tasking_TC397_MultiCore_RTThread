	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Eray\\Std\\.IfxEray.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.src ..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c'

	
$TC162
	.sdecl	'.zrodata.IfxEray..1.cnt',data,rom
	.sect	'.zrodata.IfxEray..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	2139062271
	.sdecl	'.zrodata.IfxEray..2.cnt',data,rom
	.sect	'.zrodata.IfxEray..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	50593791
	.sdecl	'.zrodata.IfxEray..3.cnt',data,rom
	.sect	'.zrodata.IfxEray..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	117903359
	
	.sdecl	'.text.IfxEray.IfxEray_calcHeaderCrc',code,cluster('IfxEray_calcHeaderCrc')
	.sect	'.text.IfxEray.IfxEray_calcHeaderCrc'
	.align	2
	
	.global	IfxEray_calcHeaderCrc

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	     2   * \file IfxEray.c
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	     3   * \brief ERAY  basic functionality
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	     4   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	     7   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	     8   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    10   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    15   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    17   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    24   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    31   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    39   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    40   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    41  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    42  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    43  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    44  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    45  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    46  #include "IfxEray.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    47  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    48  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    49  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    50  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    51  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    52  uint16 IfxEray_calcHeaderCrc(uint8 payloadLength, uint16 frameId, boolean startupFrameIndicator, boolean syncFrameIndicator)
; Function IfxEray_calcHeaderCrc
.L33:
IfxEray_calcHeaderCrc:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    53  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    54      uint32 headerValue = ((syncFrameIndicator & 0x1) << 19) | ((startupFrameIndicator & 0x1) << 18) | ((frameId & 0x7FF) << 7) | (payloadLength &
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    55                                                                                                                                    0x7F);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    56  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    57      uint32 crcInit = 0x1A;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    58      uint32 length  = 20;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    59      uint32 crcNext;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    60      uint32 crcPoly = 0x385;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    61      uint32 crcRegX = crcInit;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    62      uint32 headerTemp, regTemp;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    63  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    64      headerValue <<= 11;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    65      crcRegX     <<= 21;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    66      crcPoly     <<= 21;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    67  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    68      while (length)
	and	d15,d7,#1
	lea	a15,19
.L377:
	sha	d0,d15,#19
.L378:
	and	d15,d6,#1
.L379:
	sha	d15,d15,#18
.L380:
	or	d0,d15
.L381:
	insert	d15,d5,#0,#11,#21
.L382:
	movh	d1,#832
.L246:
	sha	d15,#7
.L383:
	or	d0,d15
.L384:
	and	d15,d4,#127
.L385:
	or	d0,d15
.L386:
	sh	d0,d0,#11
.L2:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    69      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    70          headerValue <<= 1;
	sh	d0,#1
.L387:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    71          headerTemp    = headerValue & 0x80000000;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    72          regTemp       = crcRegX & 0x80000000;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    73  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    74          if (headerTemp ^ regTemp) // Step 1
	xor	d15,d0,d1
.L388:
	insert	d15,d15,#0,#0,#31
.L389:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    75          {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    76              crcNext = 1;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    77          }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    78          else
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    79          {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    80              crcNext = 0;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    81          }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    82  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    83          crcRegX <<= 1;          // Step 2
	sh	d1,#1
.L390:
	ne	d15,d15,#0
.L247:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    84  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    85          if (crcNext)
	jeq	d15,#0,.L3
.L391:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    86          {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    87              crcRegX ^= crcPoly; // Step 3
	movh	d15,#28832
.L248:
	xor	d1,d15
.L3:
	loop	a15,.L2
.L392:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    88          }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    89  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    90          length--;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    91      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    92  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    93      crcRegX >>= 21;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    94  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    95      return (uint16)crcRegX;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    96  }
	sh	d2,d1,#-21
	ret
.L181:
	
__IfxEray_calcHeaderCrc_function_end:
	.size	IfxEray_calcHeaderCrc,__IfxEray_calcHeaderCrc_function_end-IfxEray_calcHeaderCrc
.L113:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_changePocState',code,cluster('IfxEray_changePocState')
	.sect	'.text.IfxEray.IfxEray_changePocState'
	.align	2
	
	.global	IfxEray_changePocState

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    97  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    98  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	    99  boolean IfxEray_changePocState(Ifx_ERAY *eray, IfxEray_PocCommand pocCommand)
; Function IfxEray_changePocState
IfxEray_changePocState:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   100  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   101      boolean result;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   102  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   103      // wait if Communication controller is busy
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   104      while (eray->SUCC1.B.PBSY == 1)
.L5:
	ld.bu	d15,[a4]128
.L358:
	jnz.t	d15:7,.L5
.L359:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   105      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   106  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   107      eray->SUCC1.B.CMD = pocCommand;
	ld.bu	d15,[a4]128
.L360:
	insert	d15,d15,d4,#0,#4
	st.b	[a4]128,d15
.L361:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   108  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   109      // if command not accepted, return FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   110      if (eray->SUCC1.B.CMD == 0)
	ld.bu	d15,[a4]128
	and	d15,#15
.L362:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   111      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   112          result = FALSE;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   113      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   114      else
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   115      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   116          result = TRUE;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   117      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   118  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   119      return result;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   120  }
	ne	d2,d15,#0
	ret
.L175:
	
__IfxEray_changePocState_function_end:
	.size	IfxEray_changePocState,__IfxEray_changePocState_function_end-IfxEray_changePocState
.L103:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_clearAllFlags',code,cluster('IfxEray_clearAllFlags')
	.sect	'.text.IfxEray.IfxEray_clearAllFlags'
	.align	2
	
	.global	IfxEray_clearAllFlags

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   121  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   122  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   123  void IfxEray_clearAllFlags(Ifx_ERAY *eray)
; Function IfxEray_clearAllFlags
.L36:
IfxEray_clearAllFlags:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   124  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   125      eray->EIR.U  = 0xFFFFFFFFU;   /* Clear Error Int.                        */
	mov	d15,#-1
	st.w	[a4]32,d15
.L295:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   126      eray->SIR.U  = 0xFFFFFFFFU;   /* Clear Status Int.                       */
	st.w	[a4]36,d15
.L296:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   127      eray->EIER.U = 0xFFFFFFFFU;   /* Disable all Error Int.                  */
	st.w	[a4]52,d15
.L297:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   128      eray->SIER.U = 0xFFFFFFFFU;   /* Disable all Status Int.                 */
	st.w	[a4]60,d15
.L298:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   129      eray->MHDS.U = 0x7F7F7FFFU;   /* Clear Error Int.                        */
	ld.w	d15,.1.cnt
.L299:
	st.w	[a4]784,d15
.L300:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   130  }
	ret
.L139:
	
__IfxEray_clearAllFlags_function_end:
	.size	IfxEray_clearAllFlags,__IfxEray_clearAllFlags_function_end-IfxEray_clearAllFlags
.L68:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_enableInterruptLines',code,cluster('IfxEray_enableInterruptLines')
	.sect	'.text.IfxEray.IfxEray_enableInterruptLines'
	.align	2
	
	.global	IfxEray_enableInterruptLines

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   131  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   132  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   133  void IfxEray_enableInterruptLines(Ifx_ERAY *eray)
; Function IfxEray_enableInterruptLines
.L38:
IfxEray_enableInterruptLines:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   134  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   135      eray->ILE.U   = 0x00000003U; //enable both the interrupt lines
	mov	d15,#3
	st.w	[a4]64,d15
.L305:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   136      eray->EILS.U  = 0x00000000U; // all interrupt lines to INT0SRC
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   137      eray->SILS.U  = 0x00000800U; // TOBC interrupt line to INT1SRC
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   138      eray->SIES.U  = 0x0303FFFFU; // all status interrupts are enabled
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   139      eray->EIES.U  = 0x07070FFFU; // all error interrupts are enabled
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   140      eray->NDIC1.U = 0x00000000U; // all interrupt lines to NADT0SRC
	mov	d0,#0
	lea	a15,[a4]936
.L306:
	mov	d15,#2048
	st.w	[a4]40,d0
.L307:
	st.w	[a4]44,d15
.L308:
	lea	a2,7
.L309:
	ld.w	d15,.2.cnt
.L310:
	st.w	[a4]56,d15
.L311:
	ld.w	d15,.3.cnt
.L312:
	st.w	[a4]48,d15
.L31:
	st.w	[a15+],d0
	loop	a2,.L31
.L313:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   141      eray->NDIC2.U = 0x00000000U; // all interrupt lines to NADT0SRC
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   142      eray->NDIC3.U = 0x00000000U; // all interrupt lines to NADT0SRC
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   143      eray->NDIC4.U = 0x00000000U; // all interrupt lines to NADT0SRC
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   144      eray->MSIC1.U = 0x00000000U; // all interrupt lines to MBSC0SRC
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   145      eray->MSIC2.U = 0x00000000U; // all interrupt lines to MBSC0SRC
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   146      eray->MSIC3.U = 0x00000000U; // all interrupt lines to MBSC0SRC
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   147      eray->MSIC4.U = 0x00000000U; // all interrupt lines to MBSC0SRC
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   148  }
	ret
.L142:
	
__IfxEray_enableInterruptLines_function_end:
	.size	IfxEray_enableInterruptLines,__IfxEray_enableInterruptLines_function_end-IfxEray_enableInterruptLines
.L73:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_getAddress',code,cluster('IfxEray_getAddress')
	.sect	'.text.IfxEray.IfxEray_getAddress'
	.align	2
	
	.global	IfxEray_getAddress

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   149  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   150  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   151  Ifx_ERAY *IfxEray_getAddress(IfxEray_Index eray)
; Function IfxEray_getAddress
.L40:
IfxEray_getAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   152  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   153      Ifx_ERAY *module;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   154  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   155      if (eray < IFXERAY_NUM_MODULES)
	jge	d4,#2,.L7
.L330:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   156      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   157          module = (Ifx_ERAY *)IfxEray_cfg_indexMap[eray].module;
	movh.a	a15,#@his(IfxEray_cfg_indexMap)
	lea	a15,[a15]@los(IfxEray_cfg_indexMap)
.L331:
	addsc.a	a15,a15,d4,#3
.L332:
	ld.a	a2,[a15]
.L249:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   158      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   159      else
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   160      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   161          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   162      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   163  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   164      return module;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   165  }
	ret
.L7:
	mov.a	a2,#0
.L250:
	ret
.L163:
	
__IfxEray_getAddress_function_end:
	.size	IfxEray_getAddress,__IfxEray_getAddress_function_end-IfxEray_getAddress
.L88:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_getIndex',code,cluster('IfxEray_getIndex')
	.sect	'.text.IfxEray.IfxEray_getIndex'
	.align	2
	
	.global	IfxEray_getIndex

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   166  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   167  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   168  IfxEray_Index IfxEray_getIndex(Ifx_ERAY *eray)
; Function IfxEray_getIndex
.L42:
IfxEray_getIndex:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   169  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   170      uint32        index;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   171      IfxEray_Index result;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   172  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   173      result = IfxEray_Index_none;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   174  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   175      for (index = 0; index < IFXERAY_NUM_MODULES; index++)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   176      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   177          if (IfxEray_cfg_indexMap[index].module == eray)
	mov	d2,#-1
	movh.a	a15,#@his(IfxEray_cfg_indexMap)
.L251:
	lea	a15,[a15]@los(IfxEray_cfg_indexMap)
.L337:
	mov.a	a2,#1
.L10:
	ld.a	a5,[a15]
.L338:
	jne.a	a5,a4,.L11
.L339:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   178          {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   179              result = (IfxEray_Index)IfxEray_cfg_indexMap[index].index;
	ld.w	d15,[a15]4
.L340:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   180              break;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   181          }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   182      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   183  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   184      return result;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   185  }
	extr	d2,d15,#0,#8
	ret
.L11:
	lea	a15,[a15]8
	loop	a2,.L10
.L341:
	ret
.L167:
	
__IfxEray_getIndex_function_end:
	.size	IfxEray_getIndex,__IfxEray_getIndex_function_end-IfxEray_getIndex
.L93:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_readData',code,cluster('IfxEray_readData')
	.sect	'.text.IfxEray.IfxEray_readData'
	.align	2
	
	.global	IfxEray_readData

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   186  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   187  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   188  void IfxEray_readData(Ifx_ERAY *eray, uint32 *data, uint8 payloadLength)
; Function IfxEray_readData
.L44:
IfxEray_readData:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   189  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   190      if (data != NULL_PTR)
	jz.a	a5,.L14
.L195:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   191      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   192          uint16 length = (payloadLength + 1) / 2;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   193          uint8  index;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   194  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   195          for (index = 0; index < length; index++)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   196          {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   197              *data++ = eray->RDDS_1S[index].U;
	add	d4,#1
	lea	a15,[a4]1536
.L252:
	sha	d4,#-1
.L397:
	mov	d15,#0
	j	.L15
.L16:
	add	d15,#1
	ld.w	d0,[a15+]
.L253:
	extr.u	d15,d15,#0,#8
	st.w	[a5+],d0
.L15:
	jlt.u	d15,d4,.L16
.L14:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   198          }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   199      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   200  }
	ret
.L190:
	
__IfxEray_readData_function_end:
	.size	IfxEray_readData,__IfxEray_readData_function_end-IfxEray_readData
.L118:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_readFrame',code,cluster('IfxEray_readFrame')
	.sect	'.text.IfxEray.IfxEray_readFrame'
	.align	2
	
	.global	IfxEray_readFrame

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   201  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   202  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   203  void IfxEray_readFrame(Ifx_ERAY *eray, IfxEray_ReceivedHeader *header, uint32 *data, Ifx_SizeT maxPayloadLength)
; Function IfxEray_readFrame
.L46:
IfxEray_readFrame:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   204  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   205      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   206          Ifx_ERAY_RDHS1 rdhs1;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   207          rdhs1.U                          = eray->RDHS1.U;
	ld.w	d15,[a4]1792
.L208:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   208          Ifx_ERAY_RDHS2 rdhs2;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   209          rdhs2.U                          = eray->RDHS2.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   210          Ifx_ERAY_RDHS3 rdhs3;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   211          rdhs3.U                          = eray->RDHS3.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   212  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   213          header->frameId                  = rdhs1.B.FID;
	ld.hu	d1,[a5]0
.L402:
	extr.u	d15,d15,#0,#11
	ld.w	d0,[a4]1796
.L256:
	ld.w	d2,[a4]1800
.L258:
	insert	d15,d1,d15,#0,#11
	st.h	[a5],d15
.L403:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   214          header->payloadLength            = rdhs2.B.PLR;
	extr.u	d1,d0,#24,#7
.L404:
	ld.bu	d15,[a5]2
.L405:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   215          header->headerCrc                = rdhs2.B.CRC;
	extr.u	d0,d0,#0,#11
.L257:
	insert	d6,d15,d1,#0,#7
	st.b	[a5]2,d6
.L406:
	ld.hu	d1,[a5]4
.L407:
	insert	d15,d1,d0,#0,#11
	st.h	[a5]4,d15
.L408:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   216          header->payloadPreambleIndicator = rdhs3.B.PPI;
	extr.u	d0,d2,#24,#8
.L409:
	ld.bu	d15,[a5]6
.L410:
	extr.u	d1,d0,#4,#1
.L411:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   217          header->nullFrameIndicator       = rdhs3.B.NFI;
	extr.u	d3,d0,#3,#1
.L412:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   218          header->syncFrame                = rdhs3.B.SYN;
	extr.u	d5,d0,#2,#1
.L413:
	insert	d1,d15,d1,#7,#1
	st.b	[a5]6,d1
.L414:
	ld.bu	d15,[a5]5
.L415:
	insert	d3,d15,d3,#3,#1
.L416:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   219          header->startupFrame             = rdhs3.B.SFI;
	extr.u	d15,d0,#1,#1
.L417:
	insert	d3,d3,d5,#4,#1
.L418:
	insert	d15,d3,d15,#5,#1
	st.b	[a5]5,d15
.L419:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   220          header->cycleNumber              = rdhs3.B.RCC;
	extr.u	d15,d2,#16,#6
.L420:
	insert	d15,d1,d15,#0,#7
	st.b	[a5]6,d15
.L205:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   221      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   222  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   223      IfxEray_readData(eray, data, (header->payloadLength > maxPayloadLength) ? maxPayloadLength : header->payloadLength);
	mov	d15,d6
	mov.aa	a5,a6
.L254:
	and	d15,#127
.L421:
	min	d15,d15,d4
.L422:
	extr.u	d4,d15,#0,#8
.L255:
	j	IfxEray_readData
.L198:
	
__IfxEray_readFrame_function_end:
	.size	IfxEray_readFrame,__IfxEray_readFrame_function_end-IfxEray_readFrame
.L123:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_resetModule',code,cluster('IfxEray_resetModule')
	.sect	'.text.IfxEray.IfxEray_resetModule'
	.align	2
	
	.global	IfxEray_resetModule

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   224  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   225  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   226  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   227  void IfxEray_resetModule(Ifx_ERAY *eray)
; Function IfxEray_resetModule
.L48:
IfxEray_resetModule:	.type	func
	mov.aa	a15,a4
.L260:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   228  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   229      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L259:
	mov	d8,d2
.L262:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   230      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L261:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   231      eray->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
	ld.bu	d15,[a15]2288
.L346:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   232      eray->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   233  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   234      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L263:
	or	d15,#1
	st.b	[a15]2288,d15
.L347:
	ld.bu	d15,[a15]2292
.L348:
	or	d15,#1
	st.b	[a15]2292,d15
.L349:
	call	IfxScuWdt_setCpuEndinit
.L264:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   235  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   236      while (eray->KRST0.B.RSTSTAT == 0)
	lea	a2,[a15]2292
.L17:
	ld.bu	d15,[a2]
.L350:
	jz.t	d15:1,.L17
.L351:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   237      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   238          /* Wait until reset is executed */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   239      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   240  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   241      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L352:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   242      eray->KRSTCLR.B.CLR = 1;     /* Clear Kernel reset status bit */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   243      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
	ld.bu	d15,[a15]2284
.L265:
	or	d15,#1
	st.b	[a15]2284,d15
.L353:
	j	IfxScuWdt_setCpuEndinit
.L171:
	
__IfxEray_resetModule_function_end:
	.size	IfxEray_resetModule,__IfxEray_resetModule_function_end-IfxEray_resetModule
.L98:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_setMessageBufferInterruptDestination',code,cluster('IfxEray_setMessageBufferInterruptDestination')
	.sect	'.text.IfxEray.IfxEray_setMessageBufferInterruptDestination'
	.align	2
	
	.global	IfxEray_setMessageBufferInterruptDestination

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   244  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   245  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   246  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   247  void IfxEray_setMessageBufferInterruptDestination(Ifx_ERAY *eray, uint8 messageBuffer, uint8 messageBufferDestination)
; Function IfxEray_setMessageBufferInterruptDestination
.L50:
IfxEray_setMessageBufferInterruptDestination:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   248  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   249      uint8           ix      = messageBuffer / 32;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   250      uint32          mask    = 1 << (messageBuffer % 32);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   251      Ifx_ERAY_MSIC1 *msicSFR = (Ifx_ERAY_MSIC1 *)((uint32)&eray->MSIC1 + 4 * ix);
	mov	d1,#1
	lea	a15,[a4]952
.L318:
	and	d15,d4,#31
.L319:
	sha	d0,d4,#-5
.L266:
	sha	d1,d1,d15
	fcall	.cocofun_4
.L267:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   252  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   253      if (messageBufferDestination == FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   254      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   255          msicSFR->U &= ~mask;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   256      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   257      else
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   258      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   259          msicSFR->U |= mask;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   260      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   261  }
	ret
.L144:
	
__IfxEray_setMessageBufferInterruptDestination_function_end:
	.size	IfxEray_setMessageBufferInterruptDestination,__IfxEray_setMessageBufferInterruptDestination_function_end-IfxEray_setMessageBufferInterruptDestination
.L78:
	; End of function
	
	.sdecl	'.text.IfxEray..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxEray..cocofun_4'
	.align	2
; Function .cocofun_4
.L52:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	mov.d	d15,a15
.L268:
	sh	d0,#2
.L269:
	add	d15,d0
.L464:
	mov.a	a15,d15
.L272:
	ld.w	d15,[a15]
.L271:
	jne	d5,#0,.L18
.L465:
	mov	d0,#-1
	xor	d1,d0
.L270:
	and	d15,d1
	j	.L19
.L18:
	or	d15,d1
.L19:
	st.w	[a15],d15
.L466:
	fret
.L138:
	; End of function
	.sdecl	'.text.IfxEray.IfxEray_setNewDataInterruptDestination',code,cluster('IfxEray_setNewDataInterruptDestination')
	.sect	'.text.IfxEray.IfxEray_setNewDataInterruptDestination'
	.align	2
	
	.global	IfxEray_setNewDataInterruptDestination

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   262  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   263  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   264  void IfxEray_setNewDataInterruptDestination(Ifx_ERAY *eray, uint8 ndat, uint8 ndatDestination)
; Function IfxEray_setNewDataInterruptDestination
.L54:
IfxEray_setNewDataInterruptDestination:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   265  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   266      IFX_UNUSED_PARAMETER(ndat);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   267      uint8           ix      = ndatDestination / 32;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   268      uint32          mask    = 1 << (ndatDestination % 32);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   269      Ifx_ERAY_NDIC1 *ndicSFR = (Ifx_ERAY_NDIC1 *)((uint32)&eray->NDIC1 + 4 * ix);
	mov	d1,#1
	lea	a15,[a4]936
.L324:
	and	d15,d5,#31
.L325:
	sha	d1,d1,d15
.L273:
	sha	d0,d5,#-5
	fcall	.cocofun_4
.L274:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   270  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   271      if (ndatDestination == FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   272      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   273          ndicSFR->U &= ~mask;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   274      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   275      else
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   276      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   277          ndicSFR->U |= mask;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   278      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   279  }
	ret
.L155:
	
__IfxEray_setNewDataInterruptDestination_function_end:
	.size	IfxEray_setNewDataInterruptDestination,__IfxEray_setNewDataInterruptDestination_function_end-IfxEray_setNewDataInterruptDestination
.L83:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_setPocReady',code,cluster('IfxEray_setPocReady')
	.sect	'.text.IfxEray.IfxEray_setPocReady'
	.align	2
	
	.global	IfxEray_setPocReady

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   280  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   281  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   282  void IfxEray_setPocReady(Ifx_ERAY *eray)
; Function IfxEray_setPocReady
IfxEray_setPocReady:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   283  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   284      // wait CC is busy
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   285      while (eray->SUCC1.B.PBSY == 1)
.L22:
	ld.bu	d15,[a4]128
.L367:
	jnz.t	d15:7,.L22
.L368:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   286      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   287  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   288      // Ready unlock sequence
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   289      eray->LCK.B.CLK   = 0xCE;
	mov	d15,#206
	st.b	[a4]28,d15
.L369:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   290      eray->LCK.B.CLK   = 0x31;
	mov	d15,#49
	st.b	[a4]28,d15
.L370:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   291      eray->SUCC1.B.CMD = IfxEray_PocCommand_ready;
	ld.bu	d15,[a4]128
.L371:
	insert	d15,d15,#2,#0,#4
	st.b	[a4]128,d15
.L372:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   292  }
	ret
.L179:
	
__IfxEray_setPocReady_function_end:
	.size	IfxEray_setPocReady,__IfxEray_setPocReady_function_end-IfxEray_setPocReady
.L108:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_setSlot',code,cluster('IfxEray_setSlot')
	.sect	'.text.IfxEray.IfxEray_setSlot'
	.align	2
	
	.global	IfxEray_setSlot

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   293  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   294  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   295  void IfxEray_setSlot(Ifx_ERAY *eray, const IfxEray_Header *header, const uint32 *data, const IfxEray_SlotConfig *slotConfig)
; Function IfxEray_setSlot
.L57:
IfxEray_setSlot:	.type	func
	mov.aa	a12,a4
.L276:
	mov.aa	a15,a5
.L277:
	mov.aa	a13,a6
.L278:
	mov.aa	a14,a7
.L279:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     2   * \file IfxEray.h
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     3   * \brief ERAY  basic functionality
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     4   * \ingroup IfxLld_Eray
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     5   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     8   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     9   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    11   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    16   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    18   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    25   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    32   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    40   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    41   * \defgroup IfxLld_Eray_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    42   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    43   * \defgroup IfxLld_Eray_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    44   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    45   * \defgroup IfxLld_Eray_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    46   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    47   * \defgroup IfxLld_Eray_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    48   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    49   * \defgroup IfxLld_Eray_Std_Status Status Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    50   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    51   * \defgroup IfxLld_Eray_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    52   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    53   * \defgroup IfxLld_Eray_Std_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    54   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    55   * \defgroup IfxLld_Eray_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    56   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    57   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    58  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    59  #ifndef IFXERAY_H
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    60  #define IFXERAY_H 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    61  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    65  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    66  #include "_Impl/IfxEray_cfg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    67  #include "_PinMap/IfxEray_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    68  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    69  #include "IfxEray_reg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    70  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    74  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    75  /** \addtogroup IfxLld_Eray_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    77  /** \brief Baudrate on the flexray bus, defined in MODULE_ERAY0.PRTC1.B.BRP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    78   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    79  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    80  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    81      IfxEray_Baudrate_10  = 0, /**< \brief baudrate is 10MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    82      IfxEray_Baudrate_5   = 1, /**< \brief baudrate is 5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    83      IfxEray_Baudrate_2_5 = 2  /**< \brief baudrate is 2.5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    84  } IfxEray_Baudrate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    85  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    86  /** \brief wheather transmit buffer or receive buffer, defined in MODULE_ERAY0.WRHS1.B.CFG.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    87   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    88  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    89  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    90      IfxEray_BufferDirection_receive  = 0, /**< \brief buffer is configured as receive buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    91      IfxEray_BufferDirection_transmit = 1  /**< \brief buffer is configured as transmit buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    92  } IfxEray_BufferDirection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    93  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    94  /** \brief Channel Id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    95   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    97  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    98      IfxEray_Channel_a = 0,  /**< \brief channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    99      IfxEray_Channel_b = 1   /**< \brief channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   100  } IfxEray_Channel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   101  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   102  /** \brief Selection of error flag to clear defined in MODULE_ERAY.EIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   103   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   104  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   105  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   106      IfxEray_ClearErrorFlag_pemc = 1,         /**< \brief POC error mode change bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   107      IfxEray_ClearErrorFlag_cna  = 2,         /**< \brief command not accepted event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   108      IfxEray_ClearErrorFlag_sfbm = 4,         /**< \brief sync frame below minimum bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   109      IfxEray_ClearErrorFlag_sfo  = 8,         /**< \brief sync frame overflow event bit */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   110      IfxEray_ClearErrorFlag_ccf  = 16,        /**< \brief clock correction failure event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   111      IfxEray_ClearErrorFlag_ccl  = 32,        /**< \brief CHI command locked event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   112      IfxEray_ClearErrorFlag_eerr = 64,        /**< \brief ECC error event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   113      IfxEray_ClearErrorFlag_rfo  = 128,       /**< \brief RxFIFO overrun event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   114      IfxEray_ClearErrorFlag_efa  = 256,       /**< \brief empty FIFO access event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   115      IfxEray_ClearErrorFlag_iiba = 512,       /**< \brief illegal input buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   116      IfxEray_ClearErrorFlag_ioba = 1024,      /**< \brief illegal output buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   117      IfxEray_ClearErrorFlag_mhf  = 2048,      /**< \brief message handler constraint flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   118      IfxEray_ClearErrorFlag_eda  = 65536,     /**< \brief error event on channel A. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   119      IfxEray_ClearErrorFlag_ltva = 131072,    /**< \brief latest transmit violation flag on channel A . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   120      IfxEray_ClearErrorFlag_taba = 262144,    /**< \brief transmission across channel A boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   121      IfxEray_ClearErrorFlag_edb  = 16777216,  /**< \brief error event on channel B. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   122      IfxEray_ClearErrorFlag_ltvb = 33554432,  /**< \brief latest transmit violation flag on channel B . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   123      IfxEray_ClearErrorFlag_tabb = 67108864   /**< \brief transmission across channel B boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   124  } IfxEray_ClearErrorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   125  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   126  /** \brief Selection of status flag to clear defined in MODULE_ERAY.SIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   127   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   129  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   130      IfxEray_ClearStatusFlag_wst  = 1,         /**< \brief wakeup status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   131      IfxEray_ClearStatusFlag_cas  = 2,         /**< \brief collision avoidance bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   132      IfxEray_ClearStatusFlag_cycs = 4,         /**< \brief cycle start service bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   133      IfxEray_ClearStatusFlag_txi  = 8,         /**< \brief transmit service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   134      IfxEray_ClearStatusFlag_rxi  = 16,        /**< \brief receive service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   135      IfxEray_ClearStatusFlag_rfne = 32,        /**< \brief receive fifo not empty bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   136      IfxEray_ClearStatusFlag_rfcl = 64,        /**< \brief RxFIFO critical level reached bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   137      IfxEray_ClearStatusFlag_nmvc = 128,       /**< \brief network management vector bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   138      IfxEray_ClearStatusFlag_ti0  = 256,       /**< \brief timer0 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   139      IfxEray_ClearStatusFlag_ti1  = 512,       /**< \brief timer1 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   140      IfxEray_ClearStatusFlag_tibc = 1024,      /**< \brief transfer input buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   141      IfxEray_ClearStatusFlag_tobc = 2048,      /**< \brief transfer output buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   142      IfxEray_ClearStatusFlag_swe  = 4096,      /**< \brief stop watch event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   143      IfxEray_ClearStatusFlag_sucs = 8192,      /**< \brief startup success event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   144      IfxEray_ClearStatusFlag_mbsi = 16384,     /**< \brief message buffer service status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   145      IfxEray_ClearStatusFlag_sds  = 32768,     /**< \brief dynamic segment start bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   146      IfxEray_ClearStatusFlag_wupa = 65536,     /**< \brief wakeup pattern channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   147      IfxEray_ClearStatusFlag_mtsa = 131072,    /**< \brief MTS receive channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   148      IfxEray_ClearStatusFlag_wupb = 16777216,  /**< \brief wakeup pattern channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   149      IfxEray_ClearStatusFlag_mtsb = 33554432   /**< \brief MTS receive channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   150  } IfxEray_ClearStatusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   151  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   152  /** \brief Clock divider in RUN mode, defined in MODULE_ERAY0.B.RMC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   154  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   155  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   156      IfxEray_ClockDivider_none = 0,  /**< \brief no clock signal */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   157      IfxEray_ClockDivider_1    = 1,  /**< \brief run mode clock divider 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   158      IfxEray_ClockDivider_2,         /**< \brief run mode clock divider 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   159      IfxEray_ClockDivider_3,         /**< \brief run mode clock divider 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   160      IfxEray_ClockDivider_4,         /**< \brief run mode clock divider 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   161      IfxEray_ClockDivider_5,         /**< \brief run mode clock divider 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   162      IfxEray_ClockDivider_6,         /**< \brief run mode clock divider 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   163      IfxEray_ClockDivider_7          /**< \brief run mode clock divider 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   164  } IfxEray_ClockDivider;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   165  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   166  /** \brief External offset correction control defined in MODULE_ERAY0.GTU11.B.EOCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   167   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   169  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   170      IfxEray_ExternalOffset_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   171      IfxEray_ExternalOffset_correctionSubtracted = 2,  /**< \brief External offset correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   172      IfxEray_ExternalOffset_correctionAdded      = 3   /**< \brief External offset correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   173  } IfxEray_ExternalOffset;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   174  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   175  /** \brief External clock offset correction value defined in MODULE_ERAY0.GTU11.B.EOC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   176   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   177  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   178  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   179      IfxEray_ExternalOffsetCorrection_0 = 0,      /**< \brief external clock offset correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   180      IfxEray_ExternalOffsetCorrection_1,          /**< \brief external clock offset correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   181      IfxEray_ExternalOffsetCorrection_2,          /**< \brief external clock offset correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   182      IfxEray_ExternalOffsetCorrection_3,          /**< \brief external clock offset correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   183      IfxEray_ExternalOffsetCorrection_4,          /**< \brief external clock offset correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   184      IfxEray_ExternalOffsetCorrection_5,          /**< \brief external clock offset correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   185      IfxEray_ExternalOffsetCorrection_6,          /**< \brief external clock offset correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   186      IfxEray_ExternalOffsetCorrection_7           /**< \brief external clock offset correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   187  } IfxEray_ExternalOffsetCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   188  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   189  /** \brief External rate correction control MODULE_ERAY0.GTU11.B.ERCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   190   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   191  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   192  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   193      IfxEray_ExternalRate_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   194      IfxEray_ExternalRate_correctionSubtracted = 2,  /**< \brief External rate correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   195      IfxEray_ExternalRate_correctionAdded      = 3   /**< \brief External rate correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   196  } IfxEray_ExternalRate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   197  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   198  /** \brief External clock rate correction value defined in MODULE_ERAY0.GTU11.B.ERC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   200  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   201  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   202      IfxEray_ExternalRateCorrection_0 = 0,      /**< \brief external clock rate correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   203      IfxEray_ExternalRateCorrection_1,          /**< \brief external clock rate correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   204      IfxEray_ExternalRateCorrection_2,          /**< \brief external clock rate correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   205      IfxEray_ExternalRateCorrection_3,          /**< \brief external clock rate correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   206      IfxEray_ExternalRateCorrection_4,          /**< \brief external clock rate correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   207      IfxEray_ExternalRateCorrection_5,          /**< \brief external clock rate correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   208      IfxEray_ExternalRateCorrection_6,          /**< \brief external clock rate correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   209      IfxEray_ExternalRateCorrection_7           /**< \brief external clock rate correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   210  } IfxEray_ExternalRateCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   211  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   212  /** \brief Duration of dynamic slot idle phase, defined in MODULE_ERAY0.B.DSI.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   213   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   215  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   216      IfxEray_IdleDynamicSlots_0 = 0,      /**< \brief duration of dynamic slot idle phase is 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   217      IfxEray_IdleDynamicSlots_1,          /**< \brief duration of dynamic slot idle phase is 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   218      IfxEray_IdleDynamicSlots_2           /**< \brief duration of dynamic slot idle phase is 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   219  } IfxEray_IdleDynamicSlots;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   220  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   221  /** \brief Interrupt lines
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   223  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   224  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   225      IfxEray_InterruptLine_0 = 0,  /**< \brief line 0 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   226      IfxEray_InterruptLine_1 = 1   /**< \brief line 1 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   227  } IfxEray_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   228  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   229  /** \brief Wakeup or Startup listen timeout in presence of noise, defined in MODULE_ERAY0.SUCC2.B.LTN.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   230   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   231  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   232  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   233      IfxEray_ListenTimeOutNoise_2 = 1,      /**< \brief listen Time-out noise 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   234      IfxEray_ListenTimeOutNoise_3,          /**< \brief listen Time-out noise 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   235      IfxEray_ListenTimeOutNoise_4,          /**< \brief listen Time-out noise 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   236      IfxEray_ListenTimeOutNoise_5,          /**< \brief listen Time-out noise 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   237      IfxEray_ListenTimeOutNoise_6,          /**< \brief listen Time-out noise 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   238      IfxEray_ListenTimeOutNoise_7,          /**< \brief listen Time-out noise 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   239      IfxEray_ListenTimeOutNoise_8,          /**< \brief listen Time-out noise 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   240      IfxEray_ListenTimeOutNoise_9,          /**< \brief listen Time-out noise 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   241      IfxEray_ListenTimeOutNoise_10,         /**< \brief listen Time-out noise 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   242      IfxEray_ListenTimeOutNoise_11,         /**< \brief listen Time-out noise 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   243      IfxEray_ListenTimeOutNoise_12,         /**< \brief listen Time-out noise 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   244      IfxEray_ListenTimeOutNoise_13,         /**< \brief listen Time-out noise 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   245      IfxEray_ListenTimeOutNoise_14,         /**< \brief listen Time-out noise 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   246      IfxEray_ListenTimeOutNoise_15,         /**< \brief listen Time-out noise 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   247      IfxEray_ListenTimeOutNoise_16          /**< \brief listen Time-out noise 16  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   248  } IfxEray_ListenTimeOutNoise;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   250  /** \brief Maximum number of sync frames in a cluster defined in MODULE_ERAY0.GTU02.B.SNM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   251   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   252  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   253  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   254      IfxEray_MaxSynchFrames_2 = 2,      /**< \brief Maximum number of sync frames in a cluster are 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   255      IfxEray_MaxSynchFrames_3,          /**< \brief Maximum number of sync frames in a cluster are 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   256      IfxEray_MaxSynchFrames_4,          /**< \brief Maximum number of sync frames in a cluster are 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   257      IfxEray_MaxSynchFrames_5,          /**< \brief Maximum number of sync frames in a cluster are 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   258      IfxEray_MaxSynchFrames_6,          /**< \brief Maximum number of sync frames in a cluster are 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   259      IfxEray_MaxSynchFrames_7,          /**< \brief Maximum number of sync frames in a cluster are 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   260      IfxEray_MaxSynchFrames_8,          /**< \brief Maximum number of sync frames in a cluster are 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   261      IfxEray_MaxSynchFrames_9,          /**< \brief Maximum number of sync frames in a cluster are 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   262      IfxEray_MaxSynchFrames_10,         /**< \brief Maximum number of sync frames in a cluster are 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   263      IfxEray_MaxSynchFrames_11,         /**< \brief Maximum number of sync frames in a cluster are 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   264      IfxEray_MaxSynchFrames_12,         /**< \brief Maximum number of sync frames in a cluster are 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   265      IfxEray_MaxSynchFrames_13,         /**< \brief Maximum number of sync frames in a cluster are 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   266      IfxEray_MaxSynchFrames_14,         /**< \brief Maximum number of sync frames in a cluster are 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   267      IfxEray_MaxSynchFrames_15          /**< \brief Maximum number of sync frames in a cluster are 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   268  } IfxEray_MaxSynchFrames;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   269  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   270  /** \brief Commmand to control the Communication, defined in MODULE_ERAY0.SUCC1.B.CMD.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   273  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   274      IfxEray_PocCommand_notAccepted = 0,  /**< \brief command not accepted. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   275      IfxEray_PocCommand_config      = 1,  /**< \brief command to controller to enter CONFIG */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   276      IfxEray_PocCommand_ready       = 2,  /**< \brief command to controller to enter READY. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   277      IfxEray_PocCommand_wakeup      = 3,  /**< \brief command to controller to enter WAKEUP */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   278      IfxEray_PocCommand_run         = 4,  /**< \brief command to controller to enter RUN */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   279      IfxEray_PocCommand_allSlots    = 5,  /**< \brief command to controller to enter ALL_SLOTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   280      IfxEray_PocCommand_halt        = 6,  /**< \brief command to controller to enter HALT */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   281      IfxEray_PocCommand_freeze      = 7,  /**< \brief command to controller to enter FREEZE */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   282      IfxEray_PocCommand_sendMts     = 8,  /**< \brief command to controller to enter SEND_MTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   283      IfxEray_PocCommand_coldStart   = 9,  /**< \brief command to controller to enter COLD_START */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   284      IfxEray_PocCommand_reset       = 10, /**< \brief command to controller to enter RESET */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   285      IfxEray_PocCommand_monitor     = 11, /**< \brief command to controller to enter MONITOR */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   286      IfxEray_PocCommand_clearRam    = 12  /**< \brief command to controller to enter CLEAR_RAM */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   287  } IfxEray_PocCommand;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   288  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   289  /** \brief State of Communication Controller Protocol operation control, defined in MODULE_ERAY0.CCSV.B.POCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   290   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   291  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   292  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   293      IfxEray_PocState_defaultConfig               = 0,   /**< \brief controller entered default config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   294      IfxEray_PocState_ready                       = 1,   /**< \brief controller entered ready state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   295      IfxEray_PocState_normalActive                = 2,   /**< \brief controller entered normal-active state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   296      IfxEray_PocState_normalPassive               = 3,   /**< \brief controller entered normal-passive state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   297      IfxEray_PocState_halt                        = 4,   /**< \brief controller entered halt state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   298      IfxEray_PocState_monitor                     = 5,   /**< \brief controller entered monitor state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   299      IfxEray_PocState_config                      = 15,  /**< \brief controller entered config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   300      IfxEray_PocState_wakeupStandby               = 16,  /**< \brief controller entered wakeup standby state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   301      IfxEray_PocState_wakeupListen                = 17,  /**< \brief controller entered wakeup-listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   302      IfxEray_PocState_wakeupSend                  = 18,  /**< \brief controller entered wakeup-send state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   303      IfxEray_PocState_wakeupDetect                = 19,  /**< \brief controller entered wakeup-detection state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   304      IfxEray_PocState_startup                     = 32,  /**< \brief controller entered startup state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   305      IfxEray_PocState_coldStartListen             = 33,  /**< \brief controller entered clod-start listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   306      IfxEray_PocState_collisionResolution         = 34,  /**< \brief controller entered collission-resolution state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   307      IfxEray_PocState_consistencyCheck            = 35,  /**< \brief controller entered consistency-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   308      IfxEray_PocState_gap                         = 36,  /**< \brief controller entered gap state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   309      IfxEray_PocState_join                        = 37,  /**< \brief controller entered join state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   310      IfxEray_PocState_integrationCheck            = 38,  /**< \brief controller entered integration-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   311      IfxEray_PocState_integrationListen           = 39,  /**< \brief controller entered integration-listen state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   312      IfxEray_PocState_integrationConsistencyCheck = 40,  /**< \brief controller entered integration consistency check state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   313      IfxEray_PocState_initializeSchedule          = 41,  /**< \brief controller entered initialise schedule state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   314      IfxEray_PocState_staruAborted                = 42,  /**< \brief controller entered startup-abort state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   315      IfxEray_PocState_startupSucced               = 43   /**< \brief controller entered startup succeed state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   316  } IfxEray_PocState;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   317  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   318  /** \brief Receiving channel, defined in MODULE_ERAY0.FRF.B.CH.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   319   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   320  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   322      IfxEray_ReceiveChannel_both = 0,  /**< \brief both channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   323      IfxEray_ReceiveChannel_b    = 1,  /**< \brief channel A for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   324      IfxEray_ReceiveChannel_a    = 2,  /**< \brief channel B for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   325      IfxEray_ReceiveChannel_none = 3   /**< \brief none channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   326  } IfxEray_ReceiveChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   328  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   329   * Definition in Ifx_ERAY.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   330   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   331  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   332  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   333      IfxEray_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   334      IfxEray_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   335  } IfxEray_SleepMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   336  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   337  /** \brief Sample count value for strobing, defined in MODULE_ERAY0.PRTC1.B.SPP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   338   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   339  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   340  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   341      IfxEray_StrobePosition_5 = 0,  /**< \brief Sample count 5 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   342      IfxEray_StrobePosition_4 = 1,  /**< \brief Sample count 4 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   343      IfxEray_StrobePosition_6 = 2   /**< \brief Sample count 6 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   344  } IfxEray_StrobePosition;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   345  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   346  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   347   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   348  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   349  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   350      IfxEray_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   351      IfxEray_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   352      IfxEray_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   353  } IfxEray_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   354  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   355  /** \brief Transmission mode of Header, defined in MODULE_ERAY0.WRHS1.B.TXM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   356   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   358  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   359      IfxEray_TransmissionMode_continuous = 0,  /**< \brief continuos transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   360      IfxEray_TransmissionMode_singleShot = 1   /**< \brief single transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   361  } IfxEray_TransmissionMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   362  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   363  /** \brief Initial transmission mode, defined in MODULE_ERAY0.SUCC1.B.TSM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   364   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   365  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   366  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   367      IfxEray_TransmissionSlotMode_all    = 0, /**< \brief transmission in all slots. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   368      IfxEray_TransmissionSlotMode_single = 1  /**< \brief transmission in key slot. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   369  } IfxEray_TransmissionSlotMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   370  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   371  /** \brief Wakeup pattern carry channel, defined in MODULE_ERAY0.SUCC1.B.WUCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   372   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   373  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   374  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   375      IfxEray_WakeupChannel_a = 0,  /**< \brief send wakeup channel pattern on channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   376      IfxEray_WakeupChannel_b = 1   /**< \brief send wakeup channel pattern on channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   377  } IfxEray_WakeupChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   378  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   379  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   380  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   381  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   382  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   383  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   384  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   385  /** \addtogroup IfxLld_Eray_Std_Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   386   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   387  /** \brief Header section in  a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   388   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   389  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   390  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   391      uint16                   frameId;                         /**< \brief slot ID of the selected Message Buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   392      uint8                    cycleCode;                       /**< \brief the cycle set used for cycle counter filtering. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   393      boolean                  channelAFiltered;                /**< \brief channel A serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   394      boolean                  channelBFiltered;                /**< \brief channel B serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   395      IfxEray_BufferDirection  bufferDirection;                 /**< \brief selects buffer as a transmit buffer or as a receive buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   396      boolean                  transmitPayloadIndicatior;       /**< \brief weather payload indicator is set or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   397      IfxEray_TransmissionMode transmissionMode;                /**< \brief transmission mode of Header. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   398      boolean                  bufferServiceEnabled;            /**< \brief wether buffer service request is enabled or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   399      uint8                    payloadLength;                   /**< \brief length of data section. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   400      uint16                   dataPointer;                     /**< \brief pointer to the data section of message buffer in RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   401      boolean                  startupFrameIndicator;           /**< \brief whether startup frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   402      boolean                  syncFrameIndicator;              /**< \brief whether sync frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   403  } IfxEray_Header;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   404  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   405  /** \brief Received header in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   406   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   407  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   408  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   409      uint16 frameId : 11;                     /**< \brief received frame id. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   410      uint8  payloadLength : 7;                /**< \brief received payload length. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   411      uint16 headerCrc : 11;                   /**< \brief received header crc. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   412      uint8  nullFrameIndicator : 1;           /**< \brief 0 : no data frame received; 1: atleast one data frame received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   413      uint8  syncFrame : 1;                    /**< \brief 0 : received frame is not a synch frame ; 1 : receive frame is a synch frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   414      uint8  startupFrame : 1;                 /**< \brief 0 : received frame is not a startup frame ; 1 : receive frame is a startup frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   415      uint8  cycleNumber : 7;                  /**< \brief cycle number in which frame is received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   416      uint8  payloadPreambleIndicator : 1;     /**< \brief 1 : received payload segment has network management and message id or not; 0 : It hasn't. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   417  } IfxEray_ReceivedHeader;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   418  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   419  /** \brief Transmit control structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   420   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   421  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   422  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   423      boolean headerTransfered;        /**< \brief whether header is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   424      boolean dataTransfered;          /**< \brief whether data is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   425      boolean transferRequested;       /**< \brief transmit buffer released for transmission or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   426      uint8   bufferIndex;             /**< \brief buffer index in the Message RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   427  } IfxEray_SlotConfig;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   428  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   429  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   430  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   431  /** \addtogroup IfxLld_Eray_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   432   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   433  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   434  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   435  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   436  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   437  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   438  /** \brief Clears the error flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   439   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   440   * \param errorFlag error flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   442   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   443  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   444  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   445  /** \brief Clears the status flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   446   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   447   * \param statusFlag status flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   449   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   450  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   451  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   452  /** \brief Gets the error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   453   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   454   * \return error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   455   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   456  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   457  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   458  /** \brief Gets the IBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   459   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   460   * \return address of IBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   461   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   462  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   463  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   464  /** \brief Gets the INT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   465   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   466   * \return address of INT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   467   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   468  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   469  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   470  /** \brief Gets the INT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   471   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   472   * \return address of INT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   473   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   474  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   475  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   476  /** \brief Gets the message buffers interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   477   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   478   * \param messageBuffer message buffer to which interrupt status be checked.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   479   * \return message buffer interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   480   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   481  IFX_INLINE boolean IfxEray_getMessageBufferInterruptStatus(Ifx_ERAY *eray, uint8 messageBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   482  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   483  /** \brief Gets the MBSC0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   484   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   485   * \return address of MBSC0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   486   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   487  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   488  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   489  /** \brief Gets the MBSC1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   490   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   491   * \return address of MBSC1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   492   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   493  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   494  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   495  /** \brief Gets the NDAT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   496   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   497   * \return address of NDAT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   498   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   499  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   500  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   501  /** \brief Gets the NDAT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   502   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   503   * \return address of NDAT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   504   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   505  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   506  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   507  /** \brief Gets the new data interrupt buffers status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   508   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   509   * \param ndat message buffer number configured to which ndat occurs.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   510   * \return ndat interrupt buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   511   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   512  IFX_INLINE boolean IfxEray_getNewDataInterruptStatus(Ifx_ERAY *eray, uint8 ndat);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   513  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   514  /** \brief Gets the OBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   515   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   516   * \return address of OBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   517   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   518  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getOutputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   519  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   520  /** \brief Gets the status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   521   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   522   * \return status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   523   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   524  IFX_INLINE Ifx_ERAY_SIR IfxEray_getStatusInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   525  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   526  /** \brief Gets the TINT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   527   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   528   * \return address of TINT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   529   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   531  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   532  /** \brief Gets the TINT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   533   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   534   * \return address of TINT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   535   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   536  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   537  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   538  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   539  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   540  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   541  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   542  /** \brief Clears all the error flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   543   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   544   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   545   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   546  IFX_EXTERN void IfxEray_clearAllFlags(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   547  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   548  /** \brief Enables all the Interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   549   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   550   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   551   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   552  IFX_EXTERN void IfxEray_enableInterruptLines(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   553  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   554  /** \brief Selects between MBSC0 and MBSC1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   555   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   556   * \param messageBuffer message buffer interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   557   * \param messageBufferDestination selects MBSC0 or MBSC1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   558   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   559   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   560  IFX_EXTERN void IfxEray_setMessageBufferInterruptDestination(Ifx_ERAY *eray, uint8 messageBuffer, uint8 messageBufferDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   561  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   562  /** \brief Selects between NDAT0 and NDAT1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   563   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   564   * \param ndat NDAT interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   565   * \param ndatDestination selects NDAT0 or NDAT1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   567   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   568  IFX_EXTERN void IfxEray_setNewDataInterruptDestination(Ifx_ERAY *eray, uint8 ndat, uint8 ndatDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   569  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   571  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   572  /** \addtogroup IfxLld_Eray_Std_IO
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   574  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   578  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   579  /** \brief Initialises a RX pin.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   580   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   581   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   583   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   584  IFX_INLINE void IfxEray_initRxPin(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   585  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   586  /** \brief Initializes a TX Enable output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   587   * \param txEn the TX Enable Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   588   * \param txEnMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   589   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   591   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   592  IFX_INLINE void IfxEray_initTxEnPin(const IfxEray_Txen_Out *txEn, IfxPort_OutputMode txEnMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   593  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   594  /** \brief Initializes a TX output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   595   * \param tx the TX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   596   * \param txMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   597   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   599   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   600  IFX_INLINE void IfxEray_initTxPin(const IfxEray_Txd_Out *tx, IfxPort_OutputMode txMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   601  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   602  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   603  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   604  /** \addtogroup IfxLld_Eray_Std_Module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   605   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   606  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   607  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   608  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   609  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   610  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   611  /** \brief Disables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   612   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   613   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   614   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   615  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   616  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   617  /** \brief Enables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   618   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   619   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   620   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   621  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   622  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   623  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   624   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   625   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   626   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   627   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   628   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   629  IFX_INLINE boolean IfxEray_isModuleSuspended(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   630  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   631  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   632   * \param eray pointer to ERAY registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   633   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   635   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   636  IFX_INLINE void IfxEray_setSleepMode(Ifx_ERAY *eray, IfxEray_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   637  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   638  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   639  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   640  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   641  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   642  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   643   * \param eray Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   644   * \return ERAY module register address
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   645   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   646  IFX_EXTERN Ifx_ERAY *IfxEray_getAddress(IfxEray_Index eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   647  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   648  /** \brief API to get the resource index of the ERAY specified.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   649   * \param eray Pointer to the ERAY HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   650   * \return Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   651   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   652  IFX_EXTERN IfxEray_Index IfxEray_getIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   653  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   654  /** \brief Resets the ERAY kernel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   655   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   657   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   658  IFX_EXTERN void IfxEray_resetModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   659  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   660  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   661  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   662  /** \addtogroup IfxLld_Eray_Std_Status
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   663   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   664  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   665  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   666  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   668  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   669  /** \brief Gets the FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   670   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   671   * \return FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   672   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   673  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   674  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   675  /** \brief Gets the Input Buffer Host Busy status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   676   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   677   * \return TRUE if Host is Busy otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   678   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   679  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   680  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   681  /** \brief Gets the Input Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   682   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   683   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   684   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   685  IFX_INLINE uint8 IfxEray_getInputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   686  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   687  /** \brief Gets the output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   688   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   689   * \return output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   690   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   691  IFX_INLINE uint8 IfxEray_getOutputBuffer(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   692  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   693  /** \brief Gets the Output Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   694   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   695   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   696   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   697  IFX_INLINE boolean IfxEray_getOutputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   698  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   699  /** \brief Gets the current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   700   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   701   * \return current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   702   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   703  IFX_INLINE IfxEray_PocState IfxEray_getPocState(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   704  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   705  /** \brief Gets the received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   706   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   707   * \return received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   708   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   709  IFX_INLINE IfxEray_WakeupChannel IfxEray_getWakeupPatternReceivedChannel(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   710  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   711  /** \brief Waits until the controller enters required POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   712   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   713   * \param pocState POC state upto which controller waits.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   714   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   715   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   716  IFX_INLINE void IfxEray_waitForPocState(Ifx_ERAY *eray, IfxEray_PocState pocState);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   717  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   718  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   719  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   720  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   721  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   722  /** \brief Changes the Commmunication Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   723   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   724   * \param pocCommand POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   725   * \return TRUE if command accepted otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   726   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   727  IFX_EXTERN boolean IfxEray_changePocState(Ifx_ERAY *eray, IfxEray_PocCommand pocCommand);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   728  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   729  /** \brief Sets the POC state to Ready state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   730   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   732   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   733  IFX_EXTERN void IfxEray_setPocReady(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   734  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   735  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   736  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   737  /** \addtogroup IfxLld_Eray_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   738   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   739  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   742  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   743  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   744  /** \brief request to receive header section from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   745   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   746   * \param headerReceived whether header is received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   748   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   749  IFX_INLINE void IfxEray_receiveHeader(Ifx_ERAY *eray, boolean headerReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   750  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   751  /** \brief sets the bit to send header in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   752   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   753   * \param headerTransfered whether header transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   754   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   755   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   756  IFX_INLINE void IfxEray_sendHeader(Ifx_ERAY *eray, boolean headerTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   757  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   758  /** \brief Sets number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   759   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   760   * \param numberOfCyclePairsForActive number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   761   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   762   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   763  IFX_INLINE void IfxEray_setActiveCyclePairs(Ifx_ERAY *eray, uint8 numberOfCyclePairsForActive);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   764  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   765  /** \brief Sets auto delays between input, output buffers and message RAM
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   766   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   767   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   768   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   769  IFX_INLINE void IfxEray_setAutoDelayBuffers(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   770  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   771  /** \brief Sets baudrate on Flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   772   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   773   * \param baudrate baudrate on flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   774   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   775   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   776  IFX_INLINE void IfxEray_setBaudrate(Ifx_ERAY *eray, IfxEray_Baudrate baudrate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   777  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   778  /** \brief Sets secured buffers in message RAM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   779   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   780   * \param secureValue secure value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   782   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   783  IFX_INLINE void IfxEray_setBufferReconfigSecure(Ifx_ERAY *eray, uint8 secureValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   784  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   785  /** \brief Sets channel A initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   786   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   787   * \param channelAMicrotickInitialOffset difference between reference points on channel A in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   788   * \param channelAMacrotickInitialOffset difference between reference points on channel A in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   789   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   790   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   791  IFX_INLINE void IfxEray_setChannelAInitialOffsets(Ifx_ERAY *eray, uint8 channelAMicrotickInitialOffset, uint8 channelAMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   792  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   793  /** \brief Sets channel B initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   794   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   795   * \param channelBMicrotickInitialOffset difference between reference points on channel B in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   796   * \param channelBMacrotickInitialOffset difference between reference points on channel B in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   798   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   799  IFX_INLINE void IfxEray_setChannelBInitialOffsets(Ifx_ERAY *eray, uint8 channelBMicrotickInitialOffset, uint8 channelBMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   800  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   801  /** \brief Sets receive delays on channels.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   802   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   803   * \param channelAReceptionDelay reception delay on channel A.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   804   * \param channelBReceptionDelay reception delay on channel B.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   805   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   806   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   807  IFX_INLINE void IfxEray_setChannelsReceiveDelay(Ifx_ERAY *eray, uint8 channelAReceptionDelay, uint8 channelBReceptionDelay);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   808  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   809  /** \brief Sets clock correction cycles for Passive and Halt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   810   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   811   * \param clockCorrectionCyclesPassive maximum number of cycles missing clock correction leading for passive state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   812   * \param clockCorrectionCyclesHalt maximum number of cycles missing clock correction leading for halt state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   813   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   814   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   815  IFX_INLINE void IfxEray_setClockCorrectionCycles(Ifx_ERAY *eray, uint8 clockCorrectionCyclesPassive, uint8 clockCorrectionCyclesHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   816  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   817  /** \brief lead to halt state in clock synch error.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   818   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   819   * \param clockSyncErrorHalt whether to enter halt in clock synch error or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   821   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   822  IFX_INLINE void IfxEray_setClockSynchErrorHalt(Ifx_ERAY *eray, boolean clockSyncErrorHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   823  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   824  /** \brief Sets cluster drift values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   825   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   826   * \param clusterDrift cluster drift damping value used in clock synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   827   * \param maxDriftOffset maximum drift offset between two nodes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   828   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   829   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   830  IFX_INLINE void IfxEray_setClusterDriftValues(Ifx_ERAY *eray, uint8 clusterDrift, uint16 maxDriftOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   831  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   832  /** \brief Sets cluster startup deviation.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   833   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   834   * \param acceptedStartupDeviation deviation for startup Frames during integration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   835   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   836   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   837  IFX_INLINE void IfxEray_setClusterStartupDeviation(Ifx_ERAY *eray, uint16 acceptedStartupDeviation);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   838  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   839  /** \brief Sets CAS symbol window duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   840   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   841   * \param collisionAvoidanceDuration accepted duration of CAS symbol.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   842   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   843   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   844  IFX_INLINE void IfxEray_setCollisionAvoidanceDuration(Ifx_ERAY *eray, uint8 collisionAvoidanceDuration);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   845  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   846  /** \brief sets duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   847   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   848   * \param macroticks duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   849   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   850   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   851  IFX_INLINE void IfxEray_setCycleDurationMacroticks(Ifx_ERAY *eray, uint16 macroticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   852  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   853  /** \brief sets duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   854   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   855   * \param microticks duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   856   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   857   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   858  IFX_INLINE void IfxEray_setCycleDurationMicroticks(Ifx_ERAY *eray, uint32 microticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   859  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   860  /** \brief Sets decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   861   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   862   * \param decodingCorrection decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   863   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   864   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   865  IFX_INLINE void IfxEray_setDecodingCorrectionValue(Ifx_ERAY *eray, uint8 decodingCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   866  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   867  /** \brief Sets dynamic slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   868   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   869   * \param dynamicSlotLength duration of dynamic slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   870   * \param dynamicSlotCount number of dynamic slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   871   * \param idleDynamicSlots duration of dynamic slot idle phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   872   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   873   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   874  IFX_INLINE void IfxEray_setDynamicSlots(Ifx_ERAY *eray, uint8 dynamicSlotLength, uint16 dynamicSlotCount, IfxEray_IdleDynamicSlots idleDynamicSlots);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   875  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   876  /** \brief Sets external correction controls.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   877   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   878   * \param externalOffset External offset correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   879   * \param externalRate External rate correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   880   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   881   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   882  IFX_INLINE void IfxEray_setExternalCorrectionControl(Ifx_ERAY *eray, IfxEray_ExternalOffset externalOffset, IfxEray_ExternalRate externalRate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   883  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   884  /** \brief Sets external correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   885   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   886   * \param externalOffsetCorrection external clock offset correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   887   * \param externalRateCorrection external clock rate correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   888   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   889   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   890  IFX_INLINE void IfxEray_setExternalCorrectionValues(Ifx_ERAY *eray, IfxEray_ExternalOffsetCorrection externalOffsetCorrection, IfxEray_ExternalRateCorrection externalRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   891  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   892  /** \brief Sets FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   893   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   894   * \param fifoBufferStartIndex FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   895   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   896   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   897  IFX_INLINE void IfxEray_setFifoBufferStartIndex(Ifx_ERAY *eray, uint8 fifoBufferStartIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   898  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   899  /** \brief Sets FIFO filter configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   900   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   901   * \param rejectedFrameId rejected frameId by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   902   * \param filteredCycleNumber filtered cycle number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   903   * \param fifoNullFramesRejected null frames rejection selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   904   * \param frameIdFilter filtered frameid by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   905   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   906   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   907  IFX_INLINE void IfxEray_setFifoFilterConfigurations(Ifx_ERAY *eray, uint16 rejectedFrameId, uint8 filteredCycleNumber, boolean fifoNullFramesRejected, uint16 frameIdFilter);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   908  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   909  /** \brief Sets FIFO configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   910   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   911   * \param receiveChannel FIFO receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   912   * \param staticFifoDisabled static FIFO selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   913   * \param fifoDepth FIFO depth.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   914   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   915   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   916  IFX_INLINE void IfxEray_setFifoMessageBufferConfigurations(Ifx_ERAY *eray, IfxEray_ReceiveChannel receiveChannel, boolean staticFifoDisabled, uint8 fifoDepth);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   917  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   918  /** \brief Sets first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   919   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   920   * \param firstDynamicBuffer first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   921   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   922   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   923  IFX_INLINE void IfxEray_setFirstDynamicBuffer(Ifx_ERAY *eray, uint8 firstDynamicBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   924  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   925  /** \brief Sets startup or wakeup listen timeouts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   926   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   927   * \param listenTimeOut wakeup or startup listen timeout in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   928   * \param listenTimeOutNoise upper limit for startup or wakeup listen timeout in presence of noise.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   929   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   930   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   931  IFX_INLINE void IfxEray_setListenTimeOuts(Ifx_ERAY *eray, uint32 listenTimeOut, IfxEray_ListenTimeOutNoise listenTimeOutNoise);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   932  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   933  /** \brief Sets the maximum cold start attempts for active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   934   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   935   * \param maxColdStartAttempts maximum number of attempts that a cold start node allows.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   936   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   937   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   938  IFX_INLINE void IfxEray_setMaxColdStartAttempts(Ifx_ERAY *eray, uint8 maxColdStartAttempts);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   939  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   940  /** \brief Sets max limit correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   941   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   942   * \param maxOffsetCorrection maximum offset correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   943   * \param maxRateCorrection maximum rate correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   945   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   946  IFX_INLINE void IfxEray_setMaxCorrectionValues(Ifx_ERAY *eray, uint16 maxOffsetCorrection, uint16 maxRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   947  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   948  /** \brief Sets maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   949   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   950   * \param maxSyncFrames maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   952   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   953  IFX_INLINE void IfxEray_setMaxSynchFrames(Ifx_ERAY *eray, IfxEray_MaxSynchFrames maxSyncFrames);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   954  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   955  /** \brief Sets number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   956   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   957   * \param numberOfMessageBuffers number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   959   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   960  IFX_INLINE void IfxEray_setMessageBufferCount(Ifx_ERAY *eray, uint8 numberOfMessageBuffers);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   961  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   962  /** \brief Sets Message Handler configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   963   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   964   * \param staticFramepayload payload length of static frames in double bytes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   965   * \param latestTransmissionStart dynamic slots befor transmission of inhibit frame in dynamic segment.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   966   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   967   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   968  IFX_INLINE void IfxEray_setMessageHandlerConfigurations(Ifx_ERAY *eray, uint8 staticFramepayload, uint8 latestTransmissionStart);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   969  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   970  /** \brief Sets network start Idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   971   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   972   * \param networkStartIdleTime starting point of Network Idle Time Phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   973   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   974   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   975  IFX_INLINE void IfxEray_setNetworkStartIdleTime(Ifx_ERAY *eray, uint16 networkStartIdleTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   976  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   977  /** \brief Sets network management vector length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   978   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   979   * \param networkVectorLength length of network management vector.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   980   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   981   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   982  IFX_INLINE void IfxEray_setNetworkVectorLength(Ifx_ERAY *eray, uint32 networkVectorLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   983  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   984  /** \brief Sets channels connected to node.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   985   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   986   * \param channelAConnectedNode whether node connected to channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   987   * \param channelBConnectedNode whether node connected to channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   988   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   989   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   990  IFX_INLINE void IfxEray_setNodeChannels(Ifx_ERAY *eray, boolean channelAConnectedNode, boolean channelBConnectedNode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   991  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   992  /** \brief Sets offset correction starting point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   993   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   994   * \param correctionOffset offset correction start point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   995   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   996   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   997  IFX_INLINE void IfxEray_setOffsetCorrection(Ifx_ERAY *eray, uint16 correctionOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   998  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   999  /** \brief requests to receive the frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1000   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1001   * \param receiveRequested whether frame to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1002   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1003   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1004  IFX_INLINE void IfxEray_setReceiveRequest(Ifx_ERAY *eray, boolean receiveRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1005  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1006  /** \brief Sets receive wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1007   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1008   * \param receiveWakeupTestDuration duration of receive wakeup pattern.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1009   * \param receiveWakeupIdleTime duration of receive wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1010   * \param receiveWakeupLowTime duration of receive wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1013  IFX_INLINE void IfxEray_setReceiveWakeupTimes(Ifx_ERAY *eray, uint16 receiveWakeupTestDuration, uint8 receiveWakeupIdleTime, uint8 receiveWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1014  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1015  /** \brief sets buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1016   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1017   * \param bufferIndex buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1020  IFX_INLINE void IfxEray_setRxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1021  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1022  /** \brief Sets slots action points.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1023   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1024   * \param staticActionPoint static slots and symbol window action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1025   * \param dynamicActionPoint dynamic slots action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1026   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1028  IFX_INLINE void IfxEray_setSlotActionPoints(Ifx_ERAY *eray, uint8 staticActionPoint, uint8 dynamicActionPoint);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1029  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1030  /** \brief Sets static slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1031   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1032   * \param staticSlotLength duration of static slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1033   * \param staticSlotsCount number of static slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1034   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1035   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1036  IFX_INLINE void IfxEray_setStaticSlots(Ifx_ERAY *eray, uint16 staticSlotLength, uint16 staticSlotsCount);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1037  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1038  /** \brief Sets sample point for strobing.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1039   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1040   * \param strobePosition strobing sample count.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1041   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1043  IFX_INLINE void IfxEray_setStrobePosition(Ifx_ERAY *eray, IfxEray_StrobePosition strobePosition);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1044  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1045  /** \brief Sets channels which transmits symbols.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1046   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1047   * \param channelASymbolTransmitted whether symbol is transmitted in Channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1048   * \param channelBSymbolTransmitted whether symbol is transmitted in Channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1049   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1050   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1051  IFX_INLINE void IfxEray_setSymbolChannels(Ifx_ERAY *eray, boolean channelASymbolTransmitted, boolean channelBSymbolTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1052  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1053  /** \brief Sets the transmit slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1054   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1055   * \param transmissionSlotMode transmission slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1058  IFX_INLINE void IfxEray_setTransmissionSlotMode(Ifx_ERAY *eray, IfxEray_TransmissionSlotMode transmissionSlotMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1059  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1060  /** \brief Sets transmission start time duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1061   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1062   * \param transmissionStartTime transmission start time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1065  IFX_INLINE void IfxEray_setTransmissionStartTime(Ifx_ERAY *eray, uint8 transmissionStartTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1066  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1067  /** \brief Sets transfer request to send frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1068   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1069   * \param transferRequested whether transfer requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1072  IFX_INLINE void IfxEray_setTransmitRequest(Ifx_ERAY *eray, boolean transferRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1073  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1074  /** \brief Sets transmit wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1075   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1076   * \param transmitWakeupRepetitions transmission wakeup repetitions.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1077   * \param transmitWakeupIdleTime duration of transmit wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1078   * \param transmitWakeupLowTime duration of transmit wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1079   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1081  IFX_INLINE void IfxEray_setTransmitWakeupTimes(Ifx_ERAY *eray, uint8 transmitWakeupRepetitions, uint8 transmitWakeupIdleTime, uint8 transmitWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1082  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1083  /** \brief Configures transmitted frames for startup and synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1084   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1085   * \param startupFrameTransmitted whether startup Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1086   * \param synchFrameTransmitted whether synch Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1087   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1089  IFX_INLINE void IfxEray_setTransmittedFrames(Ifx_ERAY *eray, boolean startupFrameTransmitted, boolean synchFrameTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1090  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1091  /** \brief Sets the transmit buffer number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1092   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1093   * \param bufferIndex buffer number in which frame is sent.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1094   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1095   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1096  IFX_INLINE void IfxEray_setTxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1097  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1098  /** \brief Swaps the shadow and Host output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1099   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1100   * \param swapRequested whether swap is requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1101   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1102   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1103  IFX_INLINE void IfxEray_setViewData(Ifx_ERAY *eray, boolean swapRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1104  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1105  /** \brief Sets the cluster wakeup channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1106   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1107   * \param wakeupPatternChannel cluster wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1108   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1109   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1110  IFX_INLINE void IfxEray_setWakeupPatternChannel(Ifx_ERAY *eray, IfxEray_WakeupChannel wakeupPatternChannel);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1111  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1112  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1113  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1114  /** \addtogroup IfxLld_Eray_Std_Operative
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1115   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1116  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1117  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1118  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1119  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1120  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1121  /** \brief requests to receive data from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1122   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1123   * \param dataReceived whether data to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1126  IFX_INLINE void IfxEray_receiveData(Ifx_ERAY *eray, boolean dataReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1127  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1128  /** \brief sets the bit to send data in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1129   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1130   * \param dataTransfered whether data transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1133  IFX_INLINE void IfxEray_sendData(Ifx_ERAY *eray, boolean dataTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1134  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1135  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1136  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1138  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1139  /** \brief Calculate and returns the CRC for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1140   * \param payloadLength payload length configured for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1141   * \param frameId slot id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1142   * \param startupFrameIndicator whether startup frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1143   * \param syncFrameIndicator whether sync frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1144   * \return calculated CRC value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1145   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1146  IFX_EXTERN uint16 IfxEray_calcHeaderCrc(uint8 payloadLength, uint16 frameId, boolean startupFrameIndicator, boolean syncFrameIndicator);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1147  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1148  /** \brief Reads the received data from output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1149   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1150   * \param data pointer to received data buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1151   * \param payloadLength payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1154  IFX_EXTERN void IfxEray_readData(Ifx_ERAY *eray, uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1155  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1156  /** \brief Reads header and data from output buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1157   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1158   * \param header header received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1159   * \param data data received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1160   * \param maxPayloadLength maximum payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1161   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1162   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1163  IFX_EXTERN void IfxEray_readFrame(Ifx_ERAY *eray, IfxEray_ReceivedHeader *header, uint32 *data, Ifx_SizeT maxPayloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1164  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1165  /** \brief Writes header and data to Input buffers and set the slots.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1166   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1167   * \param header Header section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1168   * \param data data section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1169   * \param slotConfig pointer slot allocation configuration structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1172  IFX_EXTERN void IfxEray_setSlot(Ifx_ERAY *eray, const IfxEray_Header *header, const uint32 *data, const IfxEray_SlotConfig *slotConfig);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1173  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1174  /** \brief Writes data section of a frame to input data registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1175   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1176   * \param data data segment in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1177   * \param payloadLength payload length configured for slot buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1178   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1179   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1180  IFX_EXTERN void IfxEray_writeData(Ifx_ERAY *eray, const uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1181  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1182  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1183  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1184  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1185  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1187  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1188  /** \brief Gets the FIFO index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1189   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1190   * \return FIFO buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1191   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1192  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1193  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1194  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1195   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1196   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1197   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1200  IFX_INLINE void IfxEray_setSuspendMode(Ifx_ERAY *eray, IfxEray_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1201  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1202  /** \brief Provides functionality for both setting of pin direction as input and configuring pad driver.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1203   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1204   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1205   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1206   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1207   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1208  IFX_INLINE void IfxEray_initRxPinWithPadLevel(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1209  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1210  /** \brief Provides functionality to select the receiver channel input
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1211   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1212   * \param nodeId ERAY node id.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1213   * \param select receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1214   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1215   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1216  IFX_INLINE void IfxEray_selectRecieveInput(Ifx_ERAY *eray, IfxEray_NodeId nodeId, Ifx_RxSel select);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1217  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1218  /** \brief Provides functionality to provide the command to change the transmit mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1219   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1220   * \param cmd POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1221   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1223  IFX_INLINE void IfxEray_setPocCommand(Ifx_ERAY *eray, IfxEray_PocCommand cmd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1224  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1225  /** \brief Provides functionality to find out that any CHI command is being executed or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1226   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1227   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1228   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1229  IFX_INLINE boolean IfxEray_isRamsCleared(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1230  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1231  /** \brief Provides functionality to check whether POC is busy or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1232   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1233   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1235  IFX_INLINE boolean IfxEray_isPocBusy(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1236  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1237  /** \brief Provides functionality to enble the interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1238   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1239   * \param intLine interrupt line.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1242  IFX_INLINE void IfxEray_enableInterruptLine(Ifx_ERAY *eray, IfxEray_InterruptLine intLine);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1243  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1244  /** \brief Provides functionality to enable the transmit interrupt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1245   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1248  IFX_INLINE void IfxEray_enableTransmitInterrupt(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1250  /** \brief Provides functionality to enable all the error iterrupts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1251   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1252   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1253   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1254  IFX_INLINE void IfxEray_enableAllErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1255  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1256  /** \brief Provides functionality to enable the test mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1257   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1258   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1259   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1260  IFX_INLINE void IfxEray_unlockTestModeKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1261  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1262  /** \brief Provides functionality to enable write to the test mode registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1263   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1266  IFX_INLINE void IfxEray_enableWriteTestRegister(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1267  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1268  /** \brief Provides functionality to enable the external loopback.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1269   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1270   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1272  IFX_INLINE void IfxEray_enableExternalLoopback(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1273  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1274  /** \brief Provides functionality to unlock the test mode configuration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1275   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1276   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1277   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1278  IFX_INLINE void IfxEray_unlockConfigurationKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1279  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1280  /** \brief Provides functionality to configure SUC configuration registers 1.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1281   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1282   * \param configValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1283   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1284   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1285  IFX_INLINE void IfxEray_configureSuc1Register(Ifx_ERAY *eray, uint32 configValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1286  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1287  /** \brief Provides functionality to configure MTCCV register.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1288   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1289   * \param tickValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1290   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1291   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1292  IFX_INLINE void IfxEray_setMacroTickValue(Ifx_ERAY *eray, uint32 tickValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1293  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1294  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1295  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1296  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1297  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1298  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1299  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1300      eray->EIR.U = errorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1301  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1302  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1303  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1304  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1305  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1306      eray->SIR.U = statusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1307  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1308  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1309  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1310  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1311  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1312      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1313      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1314      //disable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1315      eray->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1316      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1317  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1318  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1319  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1320  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1322      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1323      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1324      // Run Mode Clock divider to 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1325      //enable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1326      eray->CLC.U = 0x00000100;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1328      // ensure that write access finished before leaving this function
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1329      if (eray->CLC.U)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1330      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1331  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1332      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1333  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1334  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1335  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1336  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1337  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1338      Ifx_ERAY_EIR interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1339      interruptFlags.U = eray->EIR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1340      return interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1341  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1342  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1343  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1344  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1345  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1346      return eray->MRC.B.FFB;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1347  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1348  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1349  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1350  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1351  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1352      Ifx_ERAY_FSR fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1353      fifoStatus.U = eray->FSR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1354      return fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1355  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1356  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1357  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1358  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1359  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1360      return (eray->IBCR.B.IBSYH == 1) ? TRUE : FALSE;
	lea	a2,[a12]1301

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   296  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   297      // wait if Host is busy with another transfer
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   298      while (IfxEray_getInputBufferBusyHostStatus(eray) == TRUE)
.L23:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     2   * \file IfxEray.h
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     3   * \brief ERAY  basic functionality
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     4   * \ingroup IfxLld_Eray
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     5   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     8   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     9   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    11   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    16   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    18   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    25   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    32   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    40   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    41   * \defgroup IfxLld_Eray_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    42   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    43   * \defgroup IfxLld_Eray_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    44   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    45   * \defgroup IfxLld_Eray_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    46   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    47   * \defgroup IfxLld_Eray_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    48   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    49   * \defgroup IfxLld_Eray_Std_Status Status Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    50   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    51   * \defgroup IfxLld_Eray_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    52   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    53   * \defgroup IfxLld_Eray_Std_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    54   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    55   * \defgroup IfxLld_Eray_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    56   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    57   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    58  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    59  #ifndef IFXERAY_H
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    60  #define IFXERAY_H 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    61  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    65  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    66  #include "_Impl/IfxEray_cfg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    67  #include "_PinMap/IfxEray_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    68  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    69  #include "IfxEray_reg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    70  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    74  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    75  /** \addtogroup IfxLld_Eray_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    77  /** \brief Baudrate on the flexray bus, defined in MODULE_ERAY0.PRTC1.B.BRP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    78   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    79  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    80  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    81      IfxEray_Baudrate_10  = 0, /**< \brief baudrate is 10MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    82      IfxEray_Baudrate_5   = 1, /**< \brief baudrate is 5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    83      IfxEray_Baudrate_2_5 = 2  /**< \brief baudrate is 2.5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    84  } IfxEray_Baudrate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    85  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    86  /** \brief wheather transmit buffer or receive buffer, defined in MODULE_ERAY0.WRHS1.B.CFG.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    87   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    88  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    89  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    90      IfxEray_BufferDirection_receive  = 0, /**< \brief buffer is configured as receive buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    91      IfxEray_BufferDirection_transmit = 1  /**< \brief buffer is configured as transmit buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    92  } IfxEray_BufferDirection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    93  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    94  /** \brief Channel Id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    95   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    97  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    98      IfxEray_Channel_a = 0,  /**< \brief channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    99      IfxEray_Channel_b = 1   /**< \brief channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   100  } IfxEray_Channel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   101  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   102  /** \brief Selection of error flag to clear defined in MODULE_ERAY.EIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   103   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   104  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   105  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   106      IfxEray_ClearErrorFlag_pemc = 1,         /**< \brief POC error mode change bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   107      IfxEray_ClearErrorFlag_cna  = 2,         /**< \brief command not accepted event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   108      IfxEray_ClearErrorFlag_sfbm = 4,         /**< \brief sync frame below minimum bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   109      IfxEray_ClearErrorFlag_sfo  = 8,         /**< \brief sync frame overflow event bit */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   110      IfxEray_ClearErrorFlag_ccf  = 16,        /**< \brief clock correction failure event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   111      IfxEray_ClearErrorFlag_ccl  = 32,        /**< \brief CHI command locked event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   112      IfxEray_ClearErrorFlag_eerr = 64,        /**< \brief ECC error event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   113      IfxEray_ClearErrorFlag_rfo  = 128,       /**< \brief RxFIFO overrun event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   114      IfxEray_ClearErrorFlag_efa  = 256,       /**< \brief empty FIFO access event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   115      IfxEray_ClearErrorFlag_iiba = 512,       /**< \brief illegal input buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   116      IfxEray_ClearErrorFlag_ioba = 1024,      /**< \brief illegal output buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   117      IfxEray_ClearErrorFlag_mhf  = 2048,      /**< \brief message handler constraint flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   118      IfxEray_ClearErrorFlag_eda  = 65536,     /**< \brief error event on channel A. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   119      IfxEray_ClearErrorFlag_ltva = 131072,    /**< \brief latest transmit violation flag on channel A . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   120      IfxEray_ClearErrorFlag_taba = 262144,    /**< \brief transmission across channel A boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   121      IfxEray_ClearErrorFlag_edb  = 16777216,  /**< \brief error event on channel B. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   122      IfxEray_ClearErrorFlag_ltvb = 33554432,  /**< \brief latest transmit violation flag on channel B . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   123      IfxEray_ClearErrorFlag_tabb = 67108864   /**< \brief transmission across channel B boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   124  } IfxEray_ClearErrorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   125  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   126  /** \brief Selection of status flag to clear defined in MODULE_ERAY.SIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   127   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   129  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   130      IfxEray_ClearStatusFlag_wst  = 1,         /**< \brief wakeup status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   131      IfxEray_ClearStatusFlag_cas  = 2,         /**< \brief collision avoidance bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   132      IfxEray_ClearStatusFlag_cycs = 4,         /**< \brief cycle start service bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   133      IfxEray_ClearStatusFlag_txi  = 8,         /**< \brief transmit service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   134      IfxEray_ClearStatusFlag_rxi  = 16,        /**< \brief receive service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   135      IfxEray_ClearStatusFlag_rfne = 32,        /**< \brief receive fifo not empty bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   136      IfxEray_ClearStatusFlag_rfcl = 64,        /**< \brief RxFIFO critical level reached bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   137      IfxEray_ClearStatusFlag_nmvc = 128,       /**< \brief network management vector bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   138      IfxEray_ClearStatusFlag_ti0  = 256,       /**< \brief timer0 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   139      IfxEray_ClearStatusFlag_ti1  = 512,       /**< \brief timer1 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   140      IfxEray_ClearStatusFlag_tibc = 1024,      /**< \brief transfer input buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   141      IfxEray_ClearStatusFlag_tobc = 2048,      /**< \brief transfer output buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   142      IfxEray_ClearStatusFlag_swe  = 4096,      /**< \brief stop watch event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   143      IfxEray_ClearStatusFlag_sucs = 8192,      /**< \brief startup success event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   144      IfxEray_ClearStatusFlag_mbsi = 16384,     /**< \brief message buffer service status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   145      IfxEray_ClearStatusFlag_sds  = 32768,     /**< \brief dynamic segment start bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   146      IfxEray_ClearStatusFlag_wupa = 65536,     /**< \brief wakeup pattern channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   147      IfxEray_ClearStatusFlag_mtsa = 131072,    /**< \brief MTS receive channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   148      IfxEray_ClearStatusFlag_wupb = 16777216,  /**< \brief wakeup pattern channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   149      IfxEray_ClearStatusFlag_mtsb = 33554432   /**< \brief MTS receive channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   150  } IfxEray_ClearStatusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   151  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   152  /** \brief Clock divider in RUN mode, defined in MODULE_ERAY0.B.RMC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   154  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   155  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   156      IfxEray_ClockDivider_none = 0,  /**< \brief no clock signal */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   157      IfxEray_ClockDivider_1    = 1,  /**< \brief run mode clock divider 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   158      IfxEray_ClockDivider_2,         /**< \brief run mode clock divider 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   159      IfxEray_ClockDivider_3,         /**< \brief run mode clock divider 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   160      IfxEray_ClockDivider_4,         /**< \brief run mode clock divider 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   161      IfxEray_ClockDivider_5,         /**< \brief run mode clock divider 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   162      IfxEray_ClockDivider_6,         /**< \brief run mode clock divider 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   163      IfxEray_ClockDivider_7          /**< \brief run mode clock divider 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   164  } IfxEray_ClockDivider;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   165  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   166  /** \brief External offset correction control defined in MODULE_ERAY0.GTU11.B.EOCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   167   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   169  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   170      IfxEray_ExternalOffset_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   171      IfxEray_ExternalOffset_correctionSubtracted = 2,  /**< \brief External offset correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   172      IfxEray_ExternalOffset_correctionAdded      = 3   /**< \brief External offset correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   173  } IfxEray_ExternalOffset;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   174  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   175  /** \brief External clock offset correction value defined in MODULE_ERAY0.GTU11.B.EOC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   176   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   177  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   178  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   179      IfxEray_ExternalOffsetCorrection_0 = 0,      /**< \brief external clock offset correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   180      IfxEray_ExternalOffsetCorrection_1,          /**< \brief external clock offset correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   181      IfxEray_ExternalOffsetCorrection_2,          /**< \brief external clock offset correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   182      IfxEray_ExternalOffsetCorrection_3,          /**< \brief external clock offset correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   183      IfxEray_ExternalOffsetCorrection_4,          /**< \brief external clock offset correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   184      IfxEray_ExternalOffsetCorrection_5,          /**< \brief external clock offset correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   185      IfxEray_ExternalOffsetCorrection_6,          /**< \brief external clock offset correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   186      IfxEray_ExternalOffsetCorrection_7           /**< \brief external clock offset correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   187  } IfxEray_ExternalOffsetCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   188  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   189  /** \brief External rate correction control MODULE_ERAY0.GTU11.B.ERCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   190   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   191  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   192  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   193      IfxEray_ExternalRate_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   194      IfxEray_ExternalRate_correctionSubtracted = 2,  /**< \brief External rate correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   195      IfxEray_ExternalRate_correctionAdded      = 3   /**< \brief External rate correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   196  } IfxEray_ExternalRate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   197  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   198  /** \brief External clock rate correction value defined in MODULE_ERAY0.GTU11.B.ERC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   200  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   201  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   202      IfxEray_ExternalRateCorrection_0 = 0,      /**< \brief external clock rate correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   203      IfxEray_ExternalRateCorrection_1,          /**< \brief external clock rate correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   204      IfxEray_ExternalRateCorrection_2,          /**< \brief external clock rate correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   205      IfxEray_ExternalRateCorrection_3,          /**< \brief external clock rate correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   206      IfxEray_ExternalRateCorrection_4,          /**< \brief external clock rate correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   207      IfxEray_ExternalRateCorrection_5,          /**< \brief external clock rate correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   208      IfxEray_ExternalRateCorrection_6,          /**< \brief external clock rate correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   209      IfxEray_ExternalRateCorrection_7           /**< \brief external clock rate correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   210  } IfxEray_ExternalRateCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   211  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   212  /** \brief Duration of dynamic slot idle phase, defined in MODULE_ERAY0.B.DSI.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   213   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   215  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   216      IfxEray_IdleDynamicSlots_0 = 0,      /**< \brief duration of dynamic slot idle phase is 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   217      IfxEray_IdleDynamicSlots_1,          /**< \brief duration of dynamic slot idle phase is 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   218      IfxEray_IdleDynamicSlots_2           /**< \brief duration of dynamic slot idle phase is 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   219  } IfxEray_IdleDynamicSlots;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   220  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   221  /** \brief Interrupt lines
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   223  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   224  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   225      IfxEray_InterruptLine_0 = 0,  /**< \brief line 0 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   226      IfxEray_InterruptLine_1 = 1   /**< \brief line 1 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   227  } IfxEray_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   228  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   229  /** \brief Wakeup or Startup listen timeout in presence of noise, defined in MODULE_ERAY0.SUCC2.B.LTN.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   230   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   231  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   232  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   233      IfxEray_ListenTimeOutNoise_2 = 1,      /**< \brief listen Time-out noise 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   234      IfxEray_ListenTimeOutNoise_3,          /**< \brief listen Time-out noise 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   235      IfxEray_ListenTimeOutNoise_4,          /**< \brief listen Time-out noise 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   236      IfxEray_ListenTimeOutNoise_5,          /**< \brief listen Time-out noise 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   237      IfxEray_ListenTimeOutNoise_6,          /**< \brief listen Time-out noise 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   238      IfxEray_ListenTimeOutNoise_7,          /**< \brief listen Time-out noise 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   239      IfxEray_ListenTimeOutNoise_8,          /**< \brief listen Time-out noise 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   240      IfxEray_ListenTimeOutNoise_9,          /**< \brief listen Time-out noise 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   241      IfxEray_ListenTimeOutNoise_10,         /**< \brief listen Time-out noise 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   242      IfxEray_ListenTimeOutNoise_11,         /**< \brief listen Time-out noise 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   243      IfxEray_ListenTimeOutNoise_12,         /**< \brief listen Time-out noise 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   244      IfxEray_ListenTimeOutNoise_13,         /**< \brief listen Time-out noise 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   245      IfxEray_ListenTimeOutNoise_14,         /**< \brief listen Time-out noise 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   246      IfxEray_ListenTimeOutNoise_15,         /**< \brief listen Time-out noise 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   247      IfxEray_ListenTimeOutNoise_16          /**< \brief listen Time-out noise 16  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   248  } IfxEray_ListenTimeOutNoise;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   250  /** \brief Maximum number of sync frames in a cluster defined in MODULE_ERAY0.GTU02.B.SNM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   251   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   252  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   253  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   254      IfxEray_MaxSynchFrames_2 = 2,      /**< \brief Maximum number of sync frames in a cluster are 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   255      IfxEray_MaxSynchFrames_3,          /**< \brief Maximum number of sync frames in a cluster are 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   256      IfxEray_MaxSynchFrames_4,          /**< \brief Maximum number of sync frames in a cluster are 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   257      IfxEray_MaxSynchFrames_5,          /**< \brief Maximum number of sync frames in a cluster are 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   258      IfxEray_MaxSynchFrames_6,          /**< \brief Maximum number of sync frames in a cluster are 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   259      IfxEray_MaxSynchFrames_7,          /**< \brief Maximum number of sync frames in a cluster are 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   260      IfxEray_MaxSynchFrames_8,          /**< \brief Maximum number of sync frames in a cluster are 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   261      IfxEray_MaxSynchFrames_9,          /**< \brief Maximum number of sync frames in a cluster are 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   262      IfxEray_MaxSynchFrames_10,         /**< \brief Maximum number of sync frames in a cluster are 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   263      IfxEray_MaxSynchFrames_11,         /**< \brief Maximum number of sync frames in a cluster are 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   264      IfxEray_MaxSynchFrames_12,         /**< \brief Maximum number of sync frames in a cluster are 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   265      IfxEray_MaxSynchFrames_13,         /**< \brief Maximum number of sync frames in a cluster are 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   266      IfxEray_MaxSynchFrames_14,         /**< \brief Maximum number of sync frames in a cluster are 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   267      IfxEray_MaxSynchFrames_15          /**< \brief Maximum number of sync frames in a cluster are 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   268  } IfxEray_MaxSynchFrames;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   269  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   270  /** \brief Commmand to control the Communication, defined in MODULE_ERAY0.SUCC1.B.CMD.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   273  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   274      IfxEray_PocCommand_notAccepted = 0,  /**< \brief command not accepted. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   275      IfxEray_PocCommand_config      = 1,  /**< \brief command to controller to enter CONFIG */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   276      IfxEray_PocCommand_ready       = 2,  /**< \brief command to controller to enter READY. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   277      IfxEray_PocCommand_wakeup      = 3,  /**< \brief command to controller to enter WAKEUP */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   278      IfxEray_PocCommand_run         = 4,  /**< \brief command to controller to enter RUN */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   279      IfxEray_PocCommand_allSlots    = 5,  /**< \brief command to controller to enter ALL_SLOTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   280      IfxEray_PocCommand_halt        = 6,  /**< \brief command to controller to enter HALT */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   281      IfxEray_PocCommand_freeze      = 7,  /**< \brief command to controller to enter FREEZE */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   282      IfxEray_PocCommand_sendMts     = 8,  /**< \brief command to controller to enter SEND_MTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   283      IfxEray_PocCommand_coldStart   = 9,  /**< \brief command to controller to enter COLD_START */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   284      IfxEray_PocCommand_reset       = 10, /**< \brief command to controller to enter RESET */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   285      IfxEray_PocCommand_monitor     = 11, /**< \brief command to controller to enter MONITOR */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   286      IfxEray_PocCommand_clearRam    = 12  /**< \brief command to controller to enter CLEAR_RAM */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   287  } IfxEray_PocCommand;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   288  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   289  /** \brief State of Communication Controller Protocol operation control, defined in MODULE_ERAY0.CCSV.B.POCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   290   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   291  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   292  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   293      IfxEray_PocState_defaultConfig               = 0,   /**< \brief controller entered default config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   294      IfxEray_PocState_ready                       = 1,   /**< \brief controller entered ready state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   295      IfxEray_PocState_normalActive                = 2,   /**< \brief controller entered normal-active state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   296      IfxEray_PocState_normalPassive               = 3,   /**< \brief controller entered normal-passive state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   297      IfxEray_PocState_halt                        = 4,   /**< \brief controller entered halt state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   298      IfxEray_PocState_monitor                     = 5,   /**< \brief controller entered monitor state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   299      IfxEray_PocState_config                      = 15,  /**< \brief controller entered config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   300      IfxEray_PocState_wakeupStandby               = 16,  /**< \brief controller entered wakeup standby state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   301      IfxEray_PocState_wakeupListen                = 17,  /**< \brief controller entered wakeup-listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   302      IfxEray_PocState_wakeupSend                  = 18,  /**< \brief controller entered wakeup-send state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   303      IfxEray_PocState_wakeupDetect                = 19,  /**< \brief controller entered wakeup-detection state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   304      IfxEray_PocState_startup                     = 32,  /**< \brief controller entered startup state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   305      IfxEray_PocState_coldStartListen             = 33,  /**< \brief controller entered clod-start listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   306      IfxEray_PocState_collisionResolution         = 34,  /**< \brief controller entered collission-resolution state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   307      IfxEray_PocState_consistencyCheck            = 35,  /**< \brief controller entered consistency-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   308      IfxEray_PocState_gap                         = 36,  /**< \brief controller entered gap state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   309      IfxEray_PocState_join                        = 37,  /**< \brief controller entered join state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   310      IfxEray_PocState_integrationCheck            = 38,  /**< \brief controller entered integration-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   311      IfxEray_PocState_integrationListen           = 39,  /**< \brief controller entered integration-listen state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   312      IfxEray_PocState_integrationConsistencyCheck = 40,  /**< \brief controller entered integration consistency check state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   313      IfxEray_PocState_initializeSchedule          = 41,  /**< \brief controller entered initialise schedule state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   314      IfxEray_PocState_staruAborted                = 42,  /**< \brief controller entered startup-abort state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   315      IfxEray_PocState_startupSucced               = 43   /**< \brief controller entered startup succeed state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   316  } IfxEray_PocState;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   317  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   318  /** \brief Receiving channel, defined in MODULE_ERAY0.FRF.B.CH.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   319   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   320  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   322      IfxEray_ReceiveChannel_both = 0,  /**< \brief both channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   323      IfxEray_ReceiveChannel_b    = 1,  /**< \brief channel A for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   324      IfxEray_ReceiveChannel_a    = 2,  /**< \brief channel B for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   325      IfxEray_ReceiveChannel_none = 3   /**< \brief none channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   326  } IfxEray_ReceiveChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   328  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   329   * Definition in Ifx_ERAY.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   330   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   331  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   332  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   333      IfxEray_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   334      IfxEray_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   335  } IfxEray_SleepMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   336  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   337  /** \brief Sample count value for strobing, defined in MODULE_ERAY0.PRTC1.B.SPP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   338   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   339  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   340  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   341      IfxEray_StrobePosition_5 = 0,  /**< \brief Sample count 5 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   342      IfxEray_StrobePosition_4 = 1,  /**< \brief Sample count 4 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   343      IfxEray_StrobePosition_6 = 2   /**< \brief Sample count 6 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   344  } IfxEray_StrobePosition;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   345  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   346  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   347   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   348  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   349  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   350      IfxEray_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   351      IfxEray_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   352      IfxEray_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   353  } IfxEray_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   354  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   355  /** \brief Transmission mode of Header, defined in MODULE_ERAY0.WRHS1.B.TXM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   356   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   358  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   359      IfxEray_TransmissionMode_continuous = 0,  /**< \brief continuos transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   360      IfxEray_TransmissionMode_singleShot = 1   /**< \brief single transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   361  } IfxEray_TransmissionMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   362  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   363  /** \brief Initial transmission mode, defined in MODULE_ERAY0.SUCC1.B.TSM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   364   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   365  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   366  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   367      IfxEray_TransmissionSlotMode_all    = 0, /**< \brief transmission in all slots. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   368      IfxEray_TransmissionSlotMode_single = 1  /**< \brief transmission in key slot. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   369  } IfxEray_TransmissionSlotMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   370  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   371  /** \brief Wakeup pattern carry channel, defined in MODULE_ERAY0.SUCC1.B.WUCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   372   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   373  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   374  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   375      IfxEray_WakeupChannel_a = 0,  /**< \brief send wakeup channel pattern on channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   376      IfxEray_WakeupChannel_b = 1   /**< \brief send wakeup channel pattern on channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   377  } IfxEray_WakeupChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   378  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   379  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   380  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   381  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   382  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   383  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   384  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   385  /** \addtogroup IfxLld_Eray_Std_Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   386   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   387  /** \brief Header section in  a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   388   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   389  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   390  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   391      uint16                   frameId;                         /**< \brief slot ID of the selected Message Buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   392      uint8                    cycleCode;                       /**< \brief the cycle set used for cycle counter filtering. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   393      boolean                  channelAFiltered;                /**< \brief channel A serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   394      boolean                  channelBFiltered;                /**< \brief channel B serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   395      IfxEray_BufferDirection  bufferDirection;                 /**< \brief selects buffer as a transmit buffer or as a receive buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   396      boolean                  transmitPayloadIndicatior;       /**< \brief weather payload indicator is set or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   397      IfxEray_TransmissionMode transmissionMode;                /**< \brief transmission mode of Header. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   398      boolean                  bufferServiceEnabled;            /**< \brief wether buffer service request is enabled or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   399      uint8                    payloadLength;                   /**< \brief length of data section. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   400      uint16                   dataPointer;                     /**< \brief pointer to the data section of message buffer in RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   401      boolean                  startupFrameIndicator;           /**< \brief whether startup frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   402      boolean                  syncFrameIndicator;              /**< \brief whether sync frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   403  } IfxEray_Header;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   404  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   405  /** \brief Received header in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   406   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   407  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   408  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   409      uint16 frameId : 11;                     /**< \brief received frame id. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   410      uint8  payloadLength : 7;                /**< \brief received payload length. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   411      uint16 headerCrc : 11;                   /**< \brief received header crc. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   412      uint8  nullFrameIndicator : 1;           /**< \brief 0 : no data frame received; 1: atleast one data frame received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   413      uint8  syncFrame : 1;                    /**< \brief 0 : received frame is not a synch frame ; 1 : receive frame is a synch frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   414      uint8  startupFrame : 1;                 /**< \brief 0 : received frame is not a startup frame ; 1 : receive frame is a startup frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   415      uint8  cycleNumber : 7;                  /**< \brief cycle number in which frame is received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   416      uint8  payloadPreambleIndicator : 1;     /**< \brief 1 : received payload segment has network management and message id or not; 0 : It hasn't. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   417  } IfxEray_ReceivedHeader;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   418  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   419  /** \brief Transmit control structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   420   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   421  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   422  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   423      boolean headerTransfered;        /**< \brief whether header is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   424      boolean dataTransfered;          /**< \brief whether data is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   425      boolean transferRequested;       /**< \brief transmit buffer released for transmission or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   426      uint8   bufferIndex;             /**< \brief buffer index in the Message RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   427  } IfxEray_SlotConfig;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   428  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   429  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   430  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   431  /** \addtogroup IfxLld_Eray_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   432   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   433  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   434  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   435  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   436  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   437  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   438  /** \brief Clears the error flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   439   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   440   * \param errorFlag error flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   442   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   443  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   444  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   445  /** \brief Clears the status flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   446   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   447   * \param statusFlag status flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   449   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   450  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   451  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   452  /** \brief Gets the error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   453   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   454   * \return error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   455   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   456  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   457  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   458  /** \brief Gets the IBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   459   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   460   * \return address of IBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   461   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   462  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   463  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   464  /** \brief Gets the INT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   465   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   466   * \return address of INT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   467   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   468  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   469  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   470  /** \brief Gets the INT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   471   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   472   * \return address of INT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   473   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   474  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   475  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   476  /** \brief Gets the message buffers interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   477   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   478   * \param messageBuffer message buffer to which interrupt status be checked.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   479   * \return message buffer interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   480   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   481  IFX_INLINE boolean IfxEray_getMessageBufferInterruptStatus(Ifx_ERAY *eray, uint8 messageBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   482  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   483  /** \brief Gets the MBSC0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   484   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   485   * \return address of MBSC0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   486   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   487  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   488  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   489  /** \brief Gets the MBSC1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   490   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   491   * \return address of MBSC1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   492   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   493  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   494  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   495  /** \brief Gets the NDAT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   496   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   497   * \return address of NDAT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   498   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   499  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   500  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   501  /** \brief Gets the NDAT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   502   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   503   * \return address of NDAT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   504   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   505  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   506  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   507  /** \brief Gets the new data interrupt buffers status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   508   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   509   * \param ndat message buffer number configured to which ndat occurs.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   510   * \return ndat interrupt buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   511   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   512  IFX_INLINE boolean IfxEray_getNewDataInterruptStatus(Ifx_ERAY *eray, uint8 ndat);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   513  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   514  /** \brief Gets the OBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   515   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   516   * \return address of OBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   517   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   518  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getOutputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   519  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   520  /** \brief Gets the status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   521   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   522   * \return status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   523   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   524  IFX_INLINE Ifx_ERAY_SIR IfxEray_getStatusInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   525  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   526  /** \brief Gets the TINT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   527   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   528   * \return address of TINT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   529   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   531  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   532  /** \brief Gets the TINT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   533   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   534   * \return address of TINT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   535   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   536  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   537  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   538  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   539  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   540  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   541  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   542  /** \brief Clears all the error flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   543   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   544   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   545   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   546  IFX_EXTERN void IfxEray_clearAllFlags(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   547  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   548  /** \brief Enables all the Interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   549   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   550   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   551   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   552  IFX_EXTERN void IfxEray_enableInterruptLines(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   553  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   554  /** \brief Selects between MBSC0 and MBSC1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   555   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   556   * \param messageBuffer message buffer interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   557   * \param messageBufferDestination selects MBSC0 or MBSC1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   558   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   559   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   560  IFX_EXTERN void IfxEray_setMessageBufferInterruptDestination(Ifx_ERAY *eray, uint8 messageBuffer, uint8 messageBufferDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   561  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   562  /** \brief Selects between NDAT0 and NDAT1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   563   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   564   * \param ndat NDAT interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   565   * \param ndatDestination selects NDAT0 or NDAT1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   567   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   568  IFX_EXTERN void IfxEray_setNewDataInterruptDestination(Ifx_ERAY *eray, uint8 ndat, uint8 ndatDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   569  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   571  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   572  /** \addtogroup IfxLld_Eray_Std_IO
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   574  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   578  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   579  /** \brief Initialises a RX pin.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   580   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   581   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   583   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   584  IFX_INLINE void IfxEray_initRxPin(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   585  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   586  /** \brief Initializes a TX Enable output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   587   * \param txEn the TX Enable Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   588   * \param txEnMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   589   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   591   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   592  IFX_INLINE void IfxEray_initTxEnPin(const IfxEray_Txen_Out *txEn, IfxPort_OutputMode txEnMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   593  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   594  /** \brief Initializes a TX output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   595   * \param tx the TX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   596   * \param txMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   597   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   599   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   600  IFX_INLINE void IfxEray_initTxPin(const IfxEray_Txd_Out *tx, IfxPort_OutputMode txMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   601  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   602  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   603  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   604  /** \addtogroup IfxLld_Eray_Std_Module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   605   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   606  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   607  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   608  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   609  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   610  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   611  /** \brief Disables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   612   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   613   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   614   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   615  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   616  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   617  /** \brief Enables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   618   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   619   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   620   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   621  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   622  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   623  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   624   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   625   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   626   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   627   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   628   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   629  IFX_INLINE boolean IfxEray_isModuleSuspended(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   630  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   631  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   632   * \param eray pointer to ERAY registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   633   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   635   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   636  IFX_INLINE void IfxEray_setSleepMode(Ifx_ERAY *eray, IfxEray_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   637  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   638  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   639  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   640  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   641  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   642  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   643   * \param eray Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   644   * \return ERAY module register address
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   645   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   646  IFX_EXTERN Ifx_ERAY *IfxEray_getAddress(IfxEray_Index eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   647  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   648  /** \brief API to get the resource index of the ERAY specified.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   649   * \param eray Pointer to the ERAY HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   650   * \return Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   651   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   652  IFX_EXTERN IfxEray_Index IfxEray_getIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   653  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   654  /** \brief Resets the ERAY kernel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   655   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   657   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   658  IFX_EXTERN void IfxEray_resetModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   659  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   660  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   661  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   662  /** \addtogroup IfxLld_Eray_Std_Status
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   663   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   664  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   665  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   666  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   668  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   669  /** \brief Gets the FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   670   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   671   * \return FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   672   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   673  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   674  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   675  /** \brief Gets the Input Buffer Host Busy status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   676   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   677   * \return TRUE if Host is Busy otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   678   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   679  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   680  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   681  /** \brief Gets the Input Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   682   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   683   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   684   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   685  IFX_INLINE uint8 IfxEray_getInputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   686  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   687  /** \brief Gets the output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   688   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   689   * \return output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   690   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   691  IFX_INLINE uint8 IfxEray_getOutputBuffer(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   692  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   693  /** \brief Gets the Output Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   694   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   695   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   696   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   697  IFX_INLINE boolean IfxEray_getOutputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   698  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   699  /** \brief Gets the current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   700   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   701   * \return current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   702   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   703  IFX_INLINE IfxEray_PocState IfxEray_getPocState(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   704  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   705  /** \brief Gets the received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   706   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   707   * \return received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   708   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   709  IFX_INLINE IfxEray_WakeupChannel IfxEray_getWakeupPatternReceivedChannel(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   710  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   711  /** \brief Waits until the controller enters required POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   712   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   713   * \param pocState POC state upto which controller waits.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   714   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   715   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   716  IFX_INLINE void IfxEray_waitForPocState(Ifx_ERAY *eray, IfxEray_PocState pocState);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   717  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   718  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   719  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   720  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   721  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   722  /** \brief Changes the Commmunication Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   723   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   724   * \param pocCommand POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   725   * \return TRUE if command accepted otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   726   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   727  IFX_EXTERN boolean IfxEray_changePocState(Ifx_ERAY *eray, IfxEray_PocCommand pocCommand);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   728  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   729  /** \brief Sets the POC state to Ready state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   730   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   732   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   733  IFX_EXTERN void IfxEray_setPocReady(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   734  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   735  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   736  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   737  /** \addtogroup IfxLld_Eray_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   738   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   739  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   742  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   743  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   744  /** \brief request to receive header section from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   745   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   746   * \param headerReceived whether header is received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   748   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   749  IFX_INLINE void IfxEray_receiveHeader(Ifx_ERAY *eray, boolean headerReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   750  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   751  /** \brief sets the bit to send header in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   752   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   753   * \param headerTransfered whether header transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   754   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   755   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   756  IFX_INLINE void IfxEray_sendHeader(Ifx_ERAY *eray, boolean headerTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   757  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   758  /** \brief Sets number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   759   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   760   * \param numberOfCyclePairsForActive number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   761   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   762   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   763  IFX_INLINE void IfxEray_setActiveCyclePairs(Ifx_ERAY *eray, uint8 numberOfCyclePairsForActive);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   764  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   765  /** \brief Sets auto delays between input, output buffers and message RAM
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   766   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   767   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   768   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   769  IFX_INLINE void IfxEray_setAutoDelayBuffers(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   770  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   771  /** \brief Sets baudrate on Flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   772   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   773   * \param baudrate baudrate on flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   774   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   775   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   776  IFX_INLINE void IfxEray_setBaudrate(Ifx_ERAY *eray, IfxEray_Baudrate baudrate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   777  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   778  /** \brief Sets secured buffers in message RAM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   779   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   780   * \param secureValue secure value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   782   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   783  IFX_INLINE void IfxEray_setBufferReconfigSecure(Ifx_ERAY *eray, uint8 secureValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   784  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   785  /** \brief Sets channel A initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   786   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   787   * \param channelAMicrotickInitialOffset difference between reference points on channel A in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   788   * \param channelAMacrotickInitialOffset difference between reference points on channel A in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   789   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   790   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   791  IFX_INLINE void IfxEray_setChannelAInitialOffsets(Ifx_ERAY *eray, uint8 channelAMicrotickInitialOffset, uint8 channelAMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   792  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   793  /** \brief Sets channel B initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   794   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   795   * \param channelBMicrotickInitialOffset difference between reference points on channel B in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   796   * \param channelBMacrotickInitialOffset difference between reference points on channel B in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   798   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   799  IFX_INLINE void IfxEray_setChannelBInitialOffsets(Ifx_ERAY *eray, uint8 channelBMicrotickInitialOffset, uint8 channelBMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   800  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   801  /** \brief Sets receive delays on channels.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   802   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   803   * \param channelAReceptionDelay reception delay on channel A.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   804   * \param channelBReceptionDelay reception delay on channel B.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   805   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   806   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   807  IFX_INLINE void IfxEray_setChannelsReceiveDelay(Ifx_ERAY *eray, uint8 channelAReceptionDelay, uint8 channelBReceptionDelay);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   808  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   809  /** \brief Sets clock correction cycles for Passive and Halt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   810   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   811   * \param clockCorrectionCyclesPassive maximum number of cycles missing clock correction leading for passive state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   812   * \param clockCorrectionCyclesHalt maximum number of cycles missing clock correction leading for halt state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   813   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   814   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   815  IFX_INLINE void IfxEray_setClockCorrectionCycles(Ifx_ERAY *eray, uint8 clockCorrectionCyclesPassive, uint8 clockCorrectionCyclesHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   816  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   817  /** \brief lead to halt state in clock synch error.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   818   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   819   * \param clockSyncErrorHalt whether to enter halt in clock synch error or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   821   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   822  IFX_INLINE void IfxEray_setClockSynchErrorHalt(Ifx_ERAY *eray, boolean clockSyncErrorHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   823  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   824  /** \brief Sets cluster drift values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   825   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   826   * \param clusterDrift cluster drift damping value used in clock synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   827   * \param maxDriftOffset maximum drift offset between two nodes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   828   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   829   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   830  IFX_INLINE void IfxEray_setClusterDriftValues(Ifx_ERAY *eray, uint8 clusterDrift, uint16 maxDriftOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   831  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   832  /** \brief Sets cluster startup deviation.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   833   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   834   * \param acceptedStartupDeviation deviation for startup Frames during integration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   835   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   836   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   837  IFX_INLINE void IfxEray_setClusterStartupDeviation(Ifx_ERAY *eray, uint16 acceptedStartupDeviation);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   838  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   839  /** \brief Sets CAS symbol window duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   840   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   841   * \param collisionAvoidanceDuration accepted duration of CAS symbol.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   842   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   843   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   844  IFX_INLINE void IfxEray_setCollisionAvoidanceDuration(Ifx_ERAY *eray, uint8 collisionAvoidanceDuration);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   845  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   846  /** \brief sets duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   847   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   848   * \param macroticks duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   849   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   850   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   851  IFX_INLINE void IfxEray_setCycleDurationMacroticks(Ifx_ERAY *eray, uint16 macroticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   852  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   853  /** \brief sets duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   854   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   855   * \param microticks duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   856   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   857   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   858  IFX_INLINE void IfxEray_setCycleDurationMicroticks(Ifx_ERAY *eray, uint32 microticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   859  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   860  /** \brief Sets decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   861   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   862   * \param decodingCorrection decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   863   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   864   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   865  IFX_INLINE void IfxEray_setDecodingCorrectionValue(Ifx_ERAY *eray, uint8 decodingCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   866  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   867  /** \brief Sets dynamic slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   868   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   869   * \param dynamicSlotLength duration of dynamic slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   870   * \param dynamicSlotCount number of dynamic slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   871   * \param idleDynamicSlots duration of dynamic slot idle phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   872   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   873   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   874  IFX_INLINE void IfxEray_setDynamicSlots(Ifx_ERAY *eray, uint8 dynamicSlotLength, uint16 dynamicSlotCount, IfxEray_IdleDynamicSlots idleDynamicSlots);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   875  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   876  /** \brief Sets external correction controls.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   877   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   878   * \param externalOffset External offset correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   879   * \param externalRate External rate correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   880   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   881   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   882  IFX_INLINE void IfxEray_setExternalCorrectionControl(Ifx_ERAY *eray, IfxEray_ExternalOffset externalOffset, IfxEray_ExternalRate externalRate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   883  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   884  /** \brief Sets external correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   885   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   886   * \param externalOffsetCorrection external clock offset correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   887   * \param externalRateCorrection external clock rate correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   888   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   889   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   890  IFX_INLINE void IfxEray_setExternalCorrectionValues(Ifx_ERAY *eray, IfxEray_ExternalOffsetCorrection externalOffsetCorrection, IfxEray_ExternalRateCorrection externalRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   891  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   892  /** \brief Sets FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   893   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   894   * \param fifoBufferStartIndex FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   895   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   896   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   897  IFX_INLINE void IfxEray_setFifoBufferStartIndex(Ifx_ERAY *eray, uint8 fifoBufferStartIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   898  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   899  /** \brief Sets FIFO filter configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   900   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   901   * \param rejectedFrameId rejected frameId by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   902   * \param filteredCycleNumber filtered cycle number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   903   * \param fifoNullFramesRejected null frames rejection selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   904   * \param frameIdFilter filtered frameid by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   905   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   906   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   907  IFX_INLINE void IfxEray_setFifoFilterConfigurations(Ifx_ERAY *eray, uint16 rejectedFrameId, uint8 filteredCycleNumber, boolean fifoNullFramesRejected, uint16 frameIdFilter);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   908  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   909  /** \brief Sets FIFO configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   910   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   911   * \param receiveChannel FIFO receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   912   * \param staticFifoDisabled static FIFO selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   913   * \param fifoDepth FIFO depth.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   914   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   915   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   916  IFX_INLINE void IfxEray_setFifoMessageBufferConfigurations(Ifx_ERAY *eray, IfxEray_ReceiveChannel receiveChannel, boolean staticFifoDisabled, uint8 fifoDepth);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   917  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   918  /** \brief Sets first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   919   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   920   * \param firstDynamicBuffer first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   921   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   922   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   923  IFX_INLINE void IfxEray_setFirstDynamicBuffer(Ifx_ERAY *eray, uint8 firstDynamicBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   924  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   925  /** \brief Sets startup or wakeup listen timeouts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   926   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   927   * \param listenTimeOut wakeup or startup listen timeout in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   928   * \param listenTimeOutNoise upper limit for startup or wakeup listen timeout in presence of noise.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   929   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   930   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   931  IFX_INLINE void IfxEray_setListenTimeOuts(Ifx_ERAY *eray, uint32 listenTimeOut, IfxEray_ListenTimeOutNoise listenTimeOutNoise);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   932  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   933  /** \brief Sets the maximum cold start attempts for active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   934   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   935   * \param maxColdStartAttempts maximum number of attempts that a cold start node allows.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   936   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   937   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   938  IFX_INLINE void IfxEray_setMaxColdStartAttempts(Ifx_ERAY *eray, uint8 maxColdStartAttempts);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   939  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   940  /** \brief Sets max limit correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   941   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   942   * \param maxOffsetCorrection maximum offset correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   943   * \param maxRateCorrection maximum rate correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   945   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   946  IFX_INLINE void IfxEray_setMaxCorrectionValues(Ifx_ERAY *eray, uint16 maxOffsetCorrection, uint16 maxRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   947  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   948  /** \brief Sets maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   949   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   950   * \param maxSyncFrames maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   952   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   953  IFX_INLINE void IfxEray_setMaxSynchFrames(Ifx_ERAY *eray, IfxEray_MaxSynchFrames maxSyncFrames);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   954  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   955  /** \brief Sets number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   956   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   957   * \param numberOfMessageBuffers number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   959   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   960  IFX_INLINE void IfxEray_setMessageBufferCount(Ifx_ERAY *eray, uint8 numberOfMessageBuffers);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   961  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   962  /** \brief Sets Message Handler configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   963   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   964   * \param staticFramepayload payload length of static frames in double bytes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   965   * \param latestTransmissionStart dynamic slots befor transmission of inhibit frame in dynamic segment.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   966   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   967   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   968  IFX_INLINE void IfxEray_setMessageHandlerConfigurations(Ifx_ERAY *eray, uint8 staticFramepayload, uint8 latestTransmissionStart);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   969  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   970  /** \brief Sets network start Idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   971   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   972   * \param networkStartIdleTime starting point of Network Idle Time Phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   973   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   974   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   975  IFX_INLINE void IfxEray_setNetworkStartIdleTime(Ifx_ERAY *eray, uint16 networkStartIdleTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   976  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   977  /** \brief Sets network management vector length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   978   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   979   * \param networkVectorLength length of network management vector.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   980   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   981   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   982  IFX_INLINE void IfxEray_setNetworkVectorLength(Ifx_ERAY *eray, uint32 networkVectorLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   983  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   984  /** \brief Sets channels connected to node.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   985   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   986   * \param channelAConnectedNode whether node connected to channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   987   * \param channelBConnectedNode whether node connected to channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   988   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   989   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   990  IFX_INLINE void IfxEray_setNodeChannels(Ifx_ERAY *eray, boolean channelAConnectedNode, boolean channelBConnectedNode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   991  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   992  /** \brief Sets offset correction starting point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   993   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   994   * \param correctionOffset offset correction start point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   995   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   996   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   997  IFX_INLINE void IfxEray_setOffsetCorrection(Ifx_ERAY *eray, uint16 correctionOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   998  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   999  /** \brief requests to receive the frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1000   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1001   * \param receiveRequested whether frame to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1002   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1003   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1004  IFX_INLINE void IfxEray_setReceiveRequest(Ifx_ERAY *eray, boolean receiveRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1005  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1006  /** \brief Sets receive wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1007   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1008   * \param receiveWakeupTestDuration duration of receive wakeup pattern.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1009   * \param receiveWakeupIdleTime duration of receive wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1010   * \param receiveWakeupLowTime duration of receive wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1013  IFX_INLINE void IfxEray_setReceiveWakeupTimes(Ifx_ERAY *eray, uint16 receiveWakeupTestDuration, uint8 receiveWakeupIdleTime, uint8 receiveWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1014  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1015  /** \brief sets buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1016   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1017   * \param bufferIndex buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1020  IFX_INLINE void IfxEray_setRxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1021  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1022  /** \brief Sets slots action points.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1023   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1024   * \param staticActionPoint static slots and symbol window action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1025   * \param dynamicActionPoint dynamic slots action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1026   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1028  IFX_INLINE void IfxEray_setSlotActionPoints(Ifx_ERAY *eray, uint8 staticActionPoint, uint8 dynamicActionPoint);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1029  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1030  /** \brief Sets static slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1031   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1032   * \param staticSlotLength duration of static slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1033   * \param staticSlotsCount number of static slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1034   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1035   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1036  IFX_INLINE void IfxEray_setStaticSlots(Ifx_ERAY *eray, uint16 staticSlotLength, uint16 staticSlotsCount);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1037  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1038  /** \brief Sets sample point for strobing.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1039   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1040   * \param strobePosition strobing sample count.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1041   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1043  IFX_INLINE void IfxEray_setStrobePosition(Ifx_ERAY *eray, IfxEray_StrobePosition strobePosition);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1044  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1045  /** \brief Sets channels which transmits symbols.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1046   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1047   * \param channelASymbolTransmitted whether symbol is transmitted in Channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1048   * \param channelBSymbolTransmitted whether symbol is transmitted in Channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1049   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1050   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1051  IFX_INLINE void IfxEray_setSymbolChannels(Ifx_ERAY *eray, boolean channelASymbolTransmitted, boolean channelBSymbolTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1052  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1053  /** \brief Sets the transmit slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1054   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1055   * \param transmissionSlotMode transmission slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1058  IFX_INLINE void IfxEray_setTransmissionSlotMode(Ifx_ERAY *eray, IfxEray_TransmissionSlotMode transmissionSlotMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1059  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1060  /** \brief Sets transmission start time duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1061   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1062   * \param transmissionStartTime transmission start time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1065  IFX_INLINE void IfxEray_setTransmissionStartTime(Ifx_ERAY *eray, uint8 transmissionStartTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1066  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1067  /** \brief Sets transfer request to send frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1068   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1069   * \param transferRequested whether transfer requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1072  IFX_INLINE void IfxEray_setTransmitRequest(Ifx_ERAY *eray, boolean transferRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1073  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1074  /** \brief Sets transmit wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1075   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1076   * \param transmitWakeupRepetitions transmission wakeup repetitions.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1077   * \param transmitWakeupIdleTime duration of transmit wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1078   * \param transmitWakeupLowTime duration of transmit wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1079   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1081  IFX_INLINE void IfxEray_setTransmitWakeupTimes(Ifx_ERAY *eray, uint8 transmitWakeupRepetitions, uint8 transmitWakeupIdleTime, uint8 transmitWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1082  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1083  /** \brief Configures transmitted frames for startup and synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1084   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1085   * \param startupFrameTransmitted whether startup Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1086   * \param synchFrameTransmitted whether synch Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1087   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1089  IFX_INLINE void IfxEray_setTransmittedFrames(Ifx_ERAY *eray, boolean startupFrameTransmitted, boolean synchFrameTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1090  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1091  /** \brief Sets the transmit buffer number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1092   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1093   * \param bufferIndex buffer number in which frame is sent.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1094   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1095   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1096  IFX_INLINE void IfxEray_setTxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1097  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1098  /** \brief Swaps the shadow and Host output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1099   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1100   * \param swapRequested whether swap is requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1101   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1102   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1103  IFX_INLINE void IfxEray_setViewData(Ifx_ERAY *eray, boolean swapRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1104  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1105  /** \brief Sets the cluster wakeup channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1106   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1107   * \param wakeupPatternChannel cluster wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1108   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1109   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1110  IFX_INLINE void IfxEray_setWakeupPatternChannel(Ifx_ERAY *eray, IfxEray_WakeupChannel wakeupPatternChannel);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1111  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1112  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1113  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1114  /** \addtogroup IfxLld_Eray_Std_Operative
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1115   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1116  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1117  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1118  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1119  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1120  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1121  /** \brief requests to receive data from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1122   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1123   * \param dataReceived whether data to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1126  IFX_INLINE void IfxEray_receiveData(Ifx_ERAY *eray, boolean dataReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1127  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1128  /** \brief sets the bit to send data in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1129   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1130   * \param dataTransfered whether data transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1133  IFX_INLINE void IfxEray_sendData(Ifx_ERAY *eray, boolean dataTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1134  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1135  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1136  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1138  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1139  /** \brief Calculate and returns the CRC for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1140   * \param payloadLength payload length configured for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1141   * \param frameId slot id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1142   * \param startupFrameIndicator whether startup frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1143   * \param syncFrameIndicator whether sync frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1144   * \return calculated CRC value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1145   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1146  IFX_EXTERN uint16 IfxEray_calcHeaderCrc(uint8 payloadLength, uint16 frameId, boolean startupFrameIndicator, boolean syncFrameIndicator);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1147  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1148  /** \brief Reads the received data from output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1149   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1150   * \param data pointer to received data buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1151   * \param payloadLength payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1154  IFX_EXTERN void IfxEray_readData(Ifx_ERAY *eray, uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1155  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1156  /** \brief Reads header and data from output buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1157   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1158   * \param header header received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1159   * \param data data received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1160   * \param maxPayloadLength maximum payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1161   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1162   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1163  IFX_EXTERN void IfxEray_readFrame(Ifx_ERAY *eray, IfxEray_ReceivedHeader *header, uint32 *data, Ifx_SizeT maxPayloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1164  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1165  /** \brief Writes header and data to Input buffers and set the slots.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1166   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1167   * \param header Header section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1168   * \param data data section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1169   * \param slotConfig pointer slot allocation configuration structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1172  IFX_EXTERN void IfxEray_setSlot(Ifx_ERAY *eray, const IfxEray_Header *header, const uint32 *data, const IfxEray_SlotConfig *slotConfig);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1173  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1174  /** \brief Writes data section of a frame to input data registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1175   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1176   * \param data data segment in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1177   * \param payloadLength payload length configured for slot buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1178   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1179   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1180  IFX_EXTERN void IfxEray_writeData(Ifx_ERAY *eray, const uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1181  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1182  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1183  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1184  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1185  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1187  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1188  /** \brief Gets the FIFO index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1189   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1190   * \return FIFO buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1191   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1192  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1193  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1194  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1195   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1196   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1197   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1200  IFX_INLINE void IfxEray_setSuspendMode(Ifx_ERAY *eray, IfxEray_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1201  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1202  /** \brief Provides functionality for both setting of pin direction as input and configuring pad driver.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1203   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1204   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1205   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1206   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1207   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1208  IFX_INLINE void IfxEray_initRxPinWithPadLevel(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1209  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1210  /** \brief Provides functionality to select the receiver channel input
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1211   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1212   * \param nodeId ERAY node id.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1213   * \param select receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1214   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1215   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1216  IFX_INLINE void IfxEray_selectRecieveInput(Ifx_ERAY *eray, IfxEray_NodeId nodeId, Ifx_RxSel select);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1217  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1218  /** \brief Provides functionality to provide the command to change the transmit mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1219   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1220   * \param cmd POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1221   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1223  IFX_INLINE void IfxEray_setPocCommand(Ifx_ERAY *eray, IfxEray_PocCommand cmd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1224  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1225  /** \brief Provides functionality to find out that any CHI command is being executed or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1226   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1227   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1228   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1229  IFX_INLINE boolean IfxEray_isRamsCleared(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1230  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1231  /** \brief Provides functionality to check whether POC is busy or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1232   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1233   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1235  IFX_INLINE boolean IfxEray_isPocBusy(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1236  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1237  /** \brief Provides functionality to enble the interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1238   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1239   * \param intLine interrupt line.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1242  IFX_INLINE void IfxEray_enableInterruptLine(Ifx_ERAY *eray, IfxEray_InterruptLine intLine);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1243  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1244  /** \brief Provides functionality to enable the transmit interrupt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1245   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1248  IFX_INLINE void IfxEray_enableTransmitInterrupt(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1250  /** \brief Provides functionality to enable all the error iterrupts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1251   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1252   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1253   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1254  IFX_INLINE void IfxEray_enableAllErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1255  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1256  /** \brief Provides functionality to enable the test mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1257   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1258   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1259   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1260  IFX_INLINE void IfxEray_unlockTestModeKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1261  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1262  /** \brief Provides functionality to enable write to the test mode registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1263   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1266  IFX_INLINE void IfxEray_enableWriteTestRegister(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1267  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1268  /** \brief Provides functionality to enable the external loopback.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1269   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1270   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1272  IFX_INLINE void IfxEray_enableExternalLoopback(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1273  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1274  /** \brief Provides functionality to unlock the test mode configuration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1275   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1276   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1277   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1278  IFX_INLINE void IfxEray_unlockConfigurationKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1279  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1280  /** \brief Provides functionality to configure SUC configuration registers 1.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1281   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1282   * \param configValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1283   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1284   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1285  IFX_INLINE void IfxEray_configureSuc1Register(Ifx_ERAY *eray, uint32 configValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1286  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1287  /** \brief Provides functionality to configure MTCCV register.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1288   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1289   * \param tickValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1290   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1291   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1292  IFX_INLINE void IfxEray_setMacroTickValue(Ifx_ERAY *eray, uint32 tickValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1293  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1294  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1295  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1296  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1297  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1298  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1299  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1300      eray->EIR.U = errorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1301  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1302  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1303  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1304  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1305  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1306      eray->SIR.U = statusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1307  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1308  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1309  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1310  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1311  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1312      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1313      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1314      //disable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1315      eray->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1316      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1317  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1318  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1319  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1320  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1322      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1323      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1324      // Run Mode Clock divider to 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1325      //enable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1326      eray->CLC.U = 0x00000100;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1328      // ensure that write access finished before leaving this function
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1329      if (eray->CLC.U)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1330      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1331  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1332      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1333  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1334  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1335  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1336  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1337  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1338      Ifx_ERAY_EIR interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1339      interruptFlags.U = eray->EIR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1340      return interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1341  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1342  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1343  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1344  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1345  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1346      return eray->MRC.B.FFB;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1347  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1348  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1349  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1350  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1351  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1352      Ifx_ERAY_FSR fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1353      fifoStatus.U = eray->FSR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1354      return fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1355  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1356  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1357  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1358  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1359  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1360      return (eray->IBCR.B.IBSYH == 1) ? TRUE : FALSE;
	ld.bu	d15,[a2]
.L222:
	jnz.t	d15:7,.L23
.L427:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   299      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   300  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   301      if (header != NULL_PTR)
	jz.a	a15,.L24
.L226:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   302      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   303          {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   304              Ifx_ERAY_WRHS1 wrhs1;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   305              wrhs1.U       = 0;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   306              wrhs1.B.FID   = header->frameId;
	mov	d0,#0
	ld.hu	d15,[a15]0
.L280:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   307              wrhs1.B.CYC   = header->cycleCode;
	insert	d0,d0,d15,#0,#11
	ld.bu	d15,[a15]2
.L428:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   308              wrhs1.B.CHA   = header->channelAFiltered;
	insert	d0,d0,d15,#16,#7
	ld.bu	d15,[a15]3
.L429:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   309              wrhs1.B.CHB   = header->channelBFiltered;
	insert	d0,d0,d15,#24,#1
	ld.bu	d15,[a15]4
.L430:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   310              wrhs1.B.CFG   = header->bufferDirection;
	insert	d0,d0,d15,#25,#1
	ld.bu	d15,[a15]5
.L431:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   311              wrhs1.B.PPIT  = header->transmitPayloadIndicatior;
	insert	d0,d0,d15,#26,#1
	ld.bu	d15,[a15]6
.L432:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   312              wrhs1.B.TXM   = header->transmissionMode;
	insert	d0,d0,d15,#27,#1
	ld.bu	d15,[a15]7
.L433:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   313              wrhs1.B.MBI   = header->bufferServiceEnabled;
	insert	d0,d0,d15,#28,#1
	ld.bu	d15,[a15]8
.L434:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   314              eray->WRHS1.U = wrhs1.U;
	insert	d0,d0,d15,#29,#1
	st.w	[a12]1280,d0
.L227:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   315          }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   316          {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   317              Ifx_ERAY_WRHS2 wrhs2;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   318              wrhs2.U = 0;
	mov	d8,#0
.L281:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   319  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   320              if (header->bufferDirection == IfxEray_BufferDirection_transmit)
	ld.bu	d15,[a15]5
.L435:
	jne	d15,#1,.L25
.L436:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   321              {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   322                  wrhs2.B.CRC = IfxEray_calcHeaderCrc(header->payloadLength, header->frameId, header->startupFrameIndicator, header->syncFrameIndicator);
	ld.bu	d4,[a15]9
.L437:
	ld.hu	d5,[a15]0
.L438:
	ld.bu	d6,[a15]12
.L439:
	ld.bu	d7,[a15]13
	call	IfxEray_calcHeaderCrc
.L275:
	insert	d8,d8,d2,#0,#11
.L25:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   323              }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   324  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   325              wrhs2.B.PLC   = header->payloadLength;
	ld.bu	d15,[a15]9
.L440:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   326              eray->WRHS2.U = wrhs2.U;
	insert	d8,d8,d15,#16,#7
	st.w	[a12]1284,d8
.L230:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   327          }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   328  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   329          eray->WRHS3.U = header->dataPointer;
	ld.hu	d15,[a15]10
.L441:
	st.w	[a12]1288,d15
.L24:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   330      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   331  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   332      IfxEray_writeData(eray, data, header->payloadLength);
	ld.bu	d4,[a15]9
	mov.aa	a4,a12
.L282:
	mov.aa	a5,a13
.L284:
	call	IfxEray_writeData
.L283:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   333  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   334      eray->IBCM.B.LHSH  = slotConfig->headerTransfered;
	ld.bu	d15,[a12]1296
.L442:
	ld.bu	d0,[a14]
.L443:
	insert	d15,d15,d0,#0,#1
	st.b	[a12]1296,d15
.L444:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   335      eray->IBCM.B.LDSH  = slotConfig->dataTransfered;
	ld.bu	d0,[a12]1296
.L445:
	ld.bu	d15,[a14]1
.L446:
	insert	d15,d0,d15,#1,#1
	st.b	[a12]1296,d15
.L447:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   336      eray->IBCM.B.STXRH = slotConfig->transferRequested;
	ld.bu	d0,[a12]1296
.L448:
	ld.bu	d15,[a14]2
.L449:
	insert	d15,d0,d15,#2,#1
	st.b	[a12]1296,d15
.L450:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   337      eray->IBCR.B.IBRH  = slotConfig->bufferIndex;
	ld.bu	d0,[a12]1300
.L451:
	ld.bu	d15,[a14]3
.L452:
	insert	d15,d0,d15,#0,#7
	st.b	[a12]1300,d15

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   338  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   339      // wait if Shadow is busy with another transfer
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   340      while (IfxEray_getInputBufferBusyShadowStatus(eray) == TRUE)
.L26:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     2   * \file IfxEray.h
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     3   * \brief ERAY  basic functionality
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     4   * \ingroup IfxLld_Eray
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     5   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     8   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     9   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    11   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    16   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    18   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    25   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    32   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    40   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    41   * \defgroup IfxLld_Eray_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    42   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    43   * \defgroup IfxLld_Eray_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    44   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    45   * \defgroup IfxLld_Eray_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    46   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    47   * \defgroup IfxLld_Eray_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    48   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    49   * \defgroup IfxLld_Eray_Std_Status Status Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    50   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    51   * \defgroup IfxLld_Eray_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    52   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    53   * \defgroup IfxLld_Eray_Std_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    54   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    55   * \defgroup IfxLld_Eray_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    56   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    57   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    58  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    59  #ifndef IFXERAY_H
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    60  #define IFXERAY_H 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    61  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    65  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    66  #include "_Impl/IfxEray_cfg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    67  #include "_PinMap/IfxEray_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    68  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    69  #include "IfxEray_reg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    70  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    74  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    75  /** \addtogroup IfxLld_Eray_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    77  /** \brief Baudrate on the flexray bus, defined in MODULE_ERAY0.PRTC1.B.BRP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    78   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    79  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    80  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    81      IfxEray_Baudrate_10  = 0, /**< \brief baudrate is 10MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    82      IfxEray_Baudrate_5   = 1, /**< \brief baudrate is 5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    83      IfxEray_Baudrate_2_5 = 2  /**< \brief baudrate is 2.5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    84  } IfxEray_Baudrate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    85  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    86  /** \brief wheather transmit buffer or receive buffer, defined in MODULE_ERAY0.WRHS1.B.CFG.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    87   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    88  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    89  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    90      IfxEray_BufferDirection_receive  = 0, /**< \brief buffer is configured as receive buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    91      IfxEray_BufferDirection_transmit = 1  /**< \brief buffer is configured as transmit buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    92  } IfxEray_BufferDirection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    93  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    94  /** \brief Channel Id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    95   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    97  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    98      IfxEray_Channel_a = 0,  /**< \brief channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    99      IfxEray_Channel_b = 1   /**< \brief channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   100  } IfxEray_Channel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   101  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   102  /** \brief Selection of error flag to clear defined in MODULE_ERAY.EIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   103   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   104  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   105  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   106      IfxEray_ClearErrorFlag_pemc = 1,         /**< \brief POC error mode change bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   107      IfxEray_ClearErrorFlag_cna  = 2,         /**< \brief command not accepted event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   108      IfxEray_ClearErrorFlag_sfbm = 4,         /**< \brief sync frame below minimum bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   109      IfxEray_ClearErrorFlag_sfo  = 8,         /**< \brief sync frame overflow event bit */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   110      IfxEray_ClearErrorFlag_ccf  = 16,        /**< \brief clock correction failure event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   111      IfxEray_ClearErrorFlag_ccl  = 32,        /**< \brief CHI command locked event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   112      IfxEray_ClearErrorFlag_eerr = 64,        /**< \brief ECC error event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   113      IfxEray_ClearErrorFlag_rfo  = 128,       /**< \brief RxFIFO overrun event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   114      IfxEray_ClearErrorFlag_efa  = 256,       /**< \brief empty FIFO access event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   115      IfxEray_ClearErrorFlag_iiba = 512,       /**< \brief illegal input buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   116      IfxEray_ClearErrorFlag_ioba = 1024,      /**< \brief illegal output buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   117      IfxEray_ClearErrorFlag_mhf  = 2048,      /**< \brief message handler constraint flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   118      IfxEray_ClearErrorFlag_eda  = 65536,     /**< \brief error event on channel A. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   119      IfxEray_ClearErrorFlag_ltva = 131072,    /**< \brief latest transmit violation flag on channel A . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   120      IfxEray_ClearErrorFlag_taba = 262144,    /**< \brief transmission across channel A boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   121      IfxEray_ClearErrorFlag_edb  = 16777216,  /**< \brief error event on channel B. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   122      IfxEray_ClearErrorFlag_ltvb = 33554432,  /**< \brief latest transmit violation flag on channel B . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   123      IfxEray_ClearErrorFlag_tabb = 67108864   /**< \brief transmission across channel B boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   124  } IfxEray_ClearErrorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   125  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   126  /** \brief Selection of status flag to clear defined in MODULE_ERAY.SIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   127   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   129  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   130      IfxEray_ClearStatusFlag_wst  = 1,         /**< \brief wakeup status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   131      IfxEray_ClearStatusFlag_cas  = 2,         /**< \brief collision avoidance bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   132      IfxEray_ClearStatusFlag_cycs = 4,         /**< \brief cycle start service bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   133      IfxEray_ClearStatusFlag_txi  = 8,         /**< \brief transmit service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   134      IfxEray_ClearStatusFlag_rxi  = 16,        /**< \brief receive service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   135      IfxEray_ClearStatusFlag_rfne = 32,        /**< \brief receive fifo not empty bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   136      IfxEray_ClearStatusFlag_rfcl = 64,        /**< \brief RxFIFO critical level reached bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   137      IfxEray_ClearStatusFlag_nmvc = 128,       /**< \brief network management vector bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   138      IfxEray_ClearStatusFlag_ti0  = 256,       /**< \brief timer0 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   139      IfxEray_ClearStatusFlag_ti1  = 512,       /**< \brief timer1 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   140      IfxEray_ClearStatusFlag_tibc = 1024,      /**< \brief transfer input buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   141      IfxEray_ClearStatusFlag_tobc = 2048,      /**< \brief transfer output buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   142      IfxEray_ClearStatusFlag_swe  = 4096,      /**< \brief stop watch event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   143      IfxEray_ClearStatusFlag_sucs = 8192,      /**< \brief startup success event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   144      IfxEray_ClearStatusFlag_mbsi = 16384,     /**< \brief message buffer service status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   145      IfxEray_ClearStatusFlag_sds  = 32768,     /**< \brief dynamic segment start bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   146      IfxEray_ClearStatusFlag_wupa = 65536,     /**< \brief wakeup pattern channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   147      IfxEray_ClearStatusFlag_mtsa = 131072,    /**< \brief MTS receive channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   148      IfxEray_ClearStatusFlag_wupb = 16777216,  /**< \brief wakeup pattern channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   149      IfxEray_ClearStatusFlag_mtsb = 33554432   /**< \brief MTS receive channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   150  } IfxEray_ClearStatusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   151  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   152  /** \brief Clock divider in RUN mode, defined in MODULE_ERAY0.B.RMC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   154  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   155  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   156      IfxEray_ClockDivider_none = 0,  /**< \brief no clock signal */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   157      IfxEray_ClockDivider_1    = 1,  /**< \brief run mode clock divider 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   158      IfxEray_ClockDivider_2,         /**< \brief run mode clock divider 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   159      IfxEray_ClockDivider_3,         /**< \brief run mode clock divider 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   160      IfxEray_ClockDivider_4,         /**< \brief run mode clock divider 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   161      IfxEray_ClockDivider_5,         /**< \brief run mode clock divider 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   162      IfxEray_ClockDivider_6,         /**< \brief run mode clock divider 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   163      IfxEray_ClockDivider_7          /**< \brief run mode clock divider 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   164  } IfxEray_ClockDivider;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   165  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   166  /** \brief External offset correction control defined in MODULE_ERAY0.GTU11.B.EOCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   167   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   169  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   170      IfxEray_ExternalOffset_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   171      IfxEray_ExternalOffset_correctionSubtracted = 2,  /**< \brief External offset correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   172      IfxEray_ExternalOffset_correctionAdded      = 3   /**< \brief External offset correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   173  } IfxEray_ExternalOffset;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   174  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   175  /** \brief External clock offset correction value defined in MODULE_ERAY0.GTU11.B.EOC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   176   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   177  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   178  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   179      IfxEray_ExternalOffsetCorrection_0 = 0,      /**< \brief external clock offset correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   180      IfxEray_ExternalOffsetCorrection_1,          /**< \brief external clock offset correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   181      IfxEray_ExternalOffsetCorrection_2,          /**< \brief external clock offset correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   182      IfxEray_ExternalOffsetCorrection_3,          /**< \brief external clock offset correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   183      IfxEray_ExternalOffsetCorrection_4,          /**< \brief external clock offset correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   184      IfxEray_ExternalOffsetCorrection_5,          /**< \brief external clock offset correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   185      IfxEray_ExternalOffsetCorrection_6,          /**< \brief external clock offset correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   186      IfxEray_ExternalOffsetCorrection_7           /**< \brief external clock offset correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   187  } IfxEray_ExternalOffsetCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   188  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   189  /** \brief External rate correction control MODULE_ERAY0.GTU11.B.ERCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   190   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   191  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   192  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   193      IfxEray_ExternalRate_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   194      IfxEray_ExternalRate_correctionSubtracted = 2,  /**< \brief External rate correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   195      IfxEray_ExternalRate_correctionAdded      = 3   /**< \brief External rate correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   196  } IfxEray_ExternalRate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   197  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   198  /** \brief External clock rate correction value defined in MODULE_ERAY0.GTU11.B.ERC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   200  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   201  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   202      IfxEray_ExternalRateCorrection_0 = 0,      /**< \brief external clock rate correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   203      IfxEray_ExternalRateCorrection_1,          /**< \brief external clock rate correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   204      IfxEray_ExternalRateCorrection_2,          /**< \brief external clock rate correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   205      IfxEray_ExternalRateCorrection_3,          /**< \brief external clock rate correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   206      IfxEray_ExternalRateCorrection_4,          /**< \brief external clock rate correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   207      IfxEray_ExternalRateCorrection_5,          /**< \brief external clock rate correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   208      IfxEray_ExternalRateCorrection_6,          /**< \brief external clock rate correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   209      IfxEray_ExternalRateCorrection_7           /**< \brief external clock rate correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   210  } IfxEray_ExternalRateCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   211  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   212  /** \brief Duration of dynamic slot idle phase, defined in MODULE_ERAY0.B.DSI.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   213   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   215  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   216      IfxEray_IdleDynamicSlots_0 = 0,      /**< \brief duration of dynamic slot idle phase is 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   217      IfxEray_IdleDynamicSlots_1,          /**< \brief duration of dynamic slot idle phase is 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   218      IfxEray_IdleDynamicSlots_2           /**< \brief duration of dynamic slot idle phase is 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   219  } IfxEray_IdleDynamicSlots;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   220  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   221  /** \brief Interrupt lines
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   223  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   224  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   225      IfxEray_InterruptLine_0 = 0,  /**< \brief line 0 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   226      IfxEray_InterruptLine_1 = 1   /**< \brief line 1 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   227  } IfxEray_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   228  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   229  /** \brief Wakeup or Startup listen timeout in presence of noise, defined in MODULE_ERAY0.SUCC2.B.LTN.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   230   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   231  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   232  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   233      IfxEray_ListenTimeOutNoise_2 = 1,      /**< \brief listen Time-out noise 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   234      IfxEray_ListenTimeOutNoise_3,          /**< \brief listen Time-out noise 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   235      IfxEray_ListenTimeOutNoise_4,          /**< \brief listen Time-out noise 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   236      IfxEray_ListenTimeOutNoise_5,          /**< \brief listen Time-out noise 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   237      IfxEray_ListenTimeOutNoise_6,          /**< \brief listen Time-out noise 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   238      IfxEray_ListenTimeOutNoise_7,          /**< \brief listen Time-out noise 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   239      IfxEray_ListenTimeOutNoise_8,          /**< \brief listen Time-out noise 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   240      IfxEray_ListenTimeOutNoise_9,          /**< \brief listen Time-out noise 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   241      IfxEray_ListenTimeOutNoise_10,         /**< \brief listen Time-out noise 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   242      IfxEray_ListenTimeOutNoise_11,         /**< \brief listen Time-out noise 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   243      IfxEray_ListenTimeOutNoise_12,         /**< \brief listen Time-out noise 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   244      IfxEray_ListenTimeOutNoise_13,         /**< \brief listen Time-out noise 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   245      IfxEray_ListenTimeOutNoise_14,         /**< \brief listen Time-out noise 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   246      IfxEray_ListenTimeOutNoise_15,         /**< \brief listen Time-out noise 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   247      IfxEray_ListenTimeOutNoise_16          /**< \brief listen Time-out noise 16  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   248  } IfxEray_ListenTimeOutNoise;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   250  /** \brief Maximum number of sync frames in a cluster defined in MODULE_ERAY0.GTU02.B.SNM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   251   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   252  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   253  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   254      IfxEray_MaxSynchFrames_2 = 2,      /**< \brief Maximum number of sync frames in a cluster are 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   255      IfxEray_MaxSynchFrames_3,          /**< \brief Maximum number of sync frames in a cluster are 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   256      IfxEray_MaxSynchFrames_4,          /**< \brief Maximum number of sync frames in a cluster are 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   257      IfxEray_MaxSynchFrames_5,          /**< \brief Maximum number of sync frames in a cluster are 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   258      IfxEray_MaxSynchFrames_6,          /**< \brief Maximum number of sync frames in a cluster are 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   259      IfxEray_MaxSynchFrames_7,          /**< \brief Maximum number of sync frames in a cluster are 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   260      IfxEray_MaxSynchFrames_8,          /**< \brief Maximum number of sync frames in a cluster are 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   261      IfxEray_MaxSynchFrames_9,          /**< \brief Maximum number of sync frames in a cluster are 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   262      IfxEray_MaxSynchFrames_10,         /**< \brief Maximum number of sync frames in a cluster are 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   263      IfxEray_MaxSynchFrames_11,         /**< \brief Maximum number of sync frames in a cluster are 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   264      IfxEray_MaxSynchFrames_12,         /**< \brief Maximum number of sync frames in a cluster are 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   265      IfxEray_MaxSynchFrames_13,         /**< \brief Maximum number of sync frames in a cluster are 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   266      IfxEray_MaxSynchFrames_14,         /**< \brief Maximum number of sync frames in a cluster are 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   267      IfxEray_MaxSynchFrames_15          /**< \brief Maximum number of sync frames in a cluster are 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   268  } IfxEray_MaxSynchFrames;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   269  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   270  /** \brief Commmand to control the Communication, defined in MODULE_ERAY0.SUCC1.B.CMD.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   273  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   274      IfxEray_PocCommand_notAccepted = 0,  /**< \brief command not accepted. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   275      IfxEray_PocCommand_config      = 1,  /**< \brief command to controller to enter CONFIG */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   276      IfxEray_PocCommand_ready       = 2,  /**< \brief command to controller to enter READY. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   277      IfxEray_PocCommand_wakeup      = 3,  /**< \brief command to controller to enter WAKEUP */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   278      IfxEray_PocCommand_run         = 4,  /**< \brief command to controller to enter RUN */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   279      IfxEray_PocCommand_allSlots    = 5,  /**< \brief command to controller to enter ALL_SLOTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   280      IfxEray_PocCommand_halt        = 6,  /**< \brief command to controller to enter HALT */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   281      IfxEray_PocCommand_freeze      = 7,  /**< \brief command to controller to enter FREEZE */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   282      IfxEray_PocCommand_sendMts     = 8,  /**< \brief command to controller to enter SEND_MTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   283      IfxEray_PocCommand_coldStart   = 9,  /**< \brief command to controller to enter COLD_START */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   284      IfxEray_PocCommand_reset       = 10, /**< \brief command to controller to enter RESET */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   285      IfxEray_PocCommand_monitor     = 11, /**< \brief command to controller to enter MONITOR */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   286      IfxEray_PocCommand_clearRam    = 12  /**< \brief command to controller to enter CLEAR_RAM */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   287  } IfxEray_PocCommand;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   288  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   289  /** \brief State of Communication Controller Protocol operation control, defined in MODULE_ERAY0.CCSV.B.POCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   290   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   291  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   292  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   293      IfxEray_PocState_defaultConfig               = 0,   /**< \brief controller entered default config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   294      IfxEray_PocState_ready                       = 1,   /**< \brief controller entered ready state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   295      IfxEray_PocState_normalActive                = 2,   /**< \brief controller entered normal-active state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   296      IfxEray_PocState_normalPassive               = 3,   /**< \brief controller entered normal-passive state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   297      IfxEray_PocState_halt                        = 4,   /**< \brief controller entered halt state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   298      IfxEray_PocState_monitor                     = 5,   /**< \brief controller entered monitor state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   299      IfxEray_PocState_config                      = 15,  /**< \brief controller entered config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   300      IfxEray_PocState_wakeupStandby               = 16,  /**< \brief controller entered wakeup standby state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   301      IfxEray_PocState_wakeupListen                = 17,  /**< \brief controller entered wakeup-listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   302      IfxEray_PocState_wakeupSend                  = 18,  /**< \brief controller entered wakeup-send state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   303      IfxEray_PocState_wakeupDetect                = 19,  /**< \brief controller entered wakeup-detection state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   304      IfxEray_PocState_startup                     = 32,  /**< \brief controller entered startup state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   305      IfxEray_PocState_coldStartListen             = 33,  /**< \brief controller entered clod-start listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   306      IfxEray_PocState_collisionResolution         = 34,  /**< \brief controller entered collission-resolution state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   307      IfxEray_PocState_consistencyCheck            = 35,  /**< \brief controller entered consistency-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   308      IfxEray_PocState_gap                         = 36,  /**< \brief controller entered gap state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   309      IfxEray_PocState_join                        = 37,  /**< \brief controller entered join state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   310      IfxEray_PocState_integrationCheck            = 38,  /**< \brief controller entered integration-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   311      IfxEray_PocState_integrationListen           = 39,  /**< \brief controller entered integration-listen state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   312      IfxEray_PocState_integrationConsistencyCheck = 40,  /**< \brief controller entered integration consistency check state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   313      IfxEray_PocState_initializeSchedule          = 41,  /**< \brief controller entered initialise schedule state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   314      IfxEray_PocState_staruAborted                = 42,  /**< \brief controller entered startup-abort state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   315      IfxEray_PocState_startupSucced               = 43   /**< \brief controller entered startup succeed state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   316  } IfxEray_PocState;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   317  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   318  /** \brief Receiving channel, defined in MODULE_ERAY0.FRF.B.CH.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   319   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   320  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   322      IfxEray_ReceiveChannel_both = 0,  /**< \brief both channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   323      IfxEray_ReceiveChannel_b    = 1,  /**< \brief channel A for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   324      IfxEray_ReceiveChannel_a    = 2,  /**< \brief channel B for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   325      IfxEray_ReceiveChannel_none = 3   /**< \brief none channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   326  } IfxEray_ReceiveChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   328  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   329   * Definition in Ifx_ERAY.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   330   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   331  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   332  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   333      IfxEray_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   334      IfxEray_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   335  } IfxEray_SleepMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   336  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   337  /** \brief Sample count value for strobing, defined in MODULE_ERAY0.PRTC1.B.SPP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   338   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   339  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   340  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   341      IfxEray_StrobePosition_5 = 0,  /**< \brief Sample count 5 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   342      IfxEray_StrobePosition_4 = 1,  /**< \brief Sample count 4 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   343      IfxEray_StrobePosition_6 = 2   /**< \brief Sample count 6 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   344  } IfxEray_StrobePosition;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   345  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   346  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   347   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   348  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   349  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   350      IfxEray_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   351      IfxEray_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   352      IfxEray_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   353  } IfxEray_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   354  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   355  /** \brief Transmission mode of Header, defined in MODULE_ERAY0.WRHS1.B.TXM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   356   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   358  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   359      IfxEray_TransmissionMode_continuous = 0,  /**< \brief continuos transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   360      IfxEray_TransmissionMode_singleShot = 1   /**< \brief single transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   361  } IfxEray_TransmissionMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   362  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   363  /** \brief Initial transmission mode, defined in MODULE_ERAY0.SUCC1.B.TSM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   364   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   365  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   366  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   367      IfxEray_TransmissionSlotMode_all    = 0, /**< \brief transmission in all slots. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   368      IfxEray_TransmissionSlotMode_single = 1  /**< \brief transmission in key slot. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   369  } IfxEray_TransmissionSlotMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   370  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   371  /** \brief Wakeup pattern carry channel, defined in MODULE_ERAY0.SUCC1.B.WUCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   372   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   373  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   374  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   375      IfxEray_WakeupChannel_a = 0,  /**< \brief send wakeup channel pattern on channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   376      IfxEray_WakeupChannel_b = 1   /**< \brief send wakeup channel pattern on channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   377  } IfxEray_WakeupChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   378  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   379  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   380  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   381  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   382  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   383  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   384  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   385  /** \addtogroup IfxLld_Eray_Std_Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   386   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   387  /** \brief Header section in  a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   388   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   389  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   390  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   391      uint16                   frameId;                         /**< \brief slot ID of the selected Message Buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   392      uint8                    cycleCode;                       /**< \brief the cycle set used for cycle counter filtering. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   393      boolean                  channelAFiltered;                /**< \brief channel A serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   394      boolean                  channelBFiltered;                /**< \brief channel B serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   395      IfxEray_BufferDirection  bufferDirection;                 /**< \brief selects buffer as a transmit buffer or as a receive buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   396      boolean                  transmitPayloadIndicatior;       /**< \brief weather payload indicator is set or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   397      IfxEray_TransmissionMode transmissionMode;                /**< \brief transmission mode of Header. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   398      boolean                  bufferServiceEnabled;            /**< \brief wether buffer service request is enabled or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   399      uint8                    payloadLength;                   /**< \brief length of data section. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   400      uint16                   dataPointer;                     /**< \brief pointer to the data section of message buffer in RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   401      boolean                  startupFrameIndicator;           /**< \brief whether startup frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   402      boolean                  syncFrameIndicator;              /**< \brief whether sync frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   403  } IfxEray_Header;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   404  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   405  /** \brief Received header in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   406   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   407  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   408  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   409      uint16 frameId : 11;                     /**< \brief received frame id. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   410      uint8  payloadLength : 7;                /**< \brief received payload length. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   411      uint16 headerCrc : 11;                   /**< \brief received header crc. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   412      uint8  nullFrameIndicator : 1;           /**< \brief 0 : no data frame received; 1: atleast one data frame received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   413      uint8  syncFrame : 1;                    /**< \brief 0 : received frame is not a synch frame ; 1 : receive frame is a synch frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   414      uint8  startupFrame : 1;                 /**< \brief 0 : received frame is not a startup frame ; 1 : receive frame is a startup frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   415      uint8  cycleNumber : 7;                  /**< \brief cycle number in which frame is received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   416      uint8  payloadPreambleIndicator : 1;     /**< \brief 1 : received payload segment has network management and message id or not; 0 : It hasn't. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   417  } IfxEray_ReceivedHeader;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   418  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   419  /** \brief Transmit control structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   420   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   421  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   422  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   423      boolean headerTransfered;        /**< \brief whether header is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   424      boolean dataTransfered;          /**< \brief whether data is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   425      boolean transferRequested;       /**< \brief transmit buffer released for transmission or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   426      uint8   bufferIndex;             /**< \brief buffer index in the Message RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   427  } IfxEray_SlotConfig;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   428  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   429  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   430  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   431  /** \addtogroup IfxLld_Eray_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   432   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   433  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   434  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   435  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   436  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   437  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   438  /** \brief Clears the error flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   439   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   440   * \param errorFlag error flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   442   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   443  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   444  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   445  /** \brief Clears the status flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   446   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   447   * \param statusFlag status flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   449   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   450  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   451  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   452  /** \brief Gets the error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   453   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   454   * \return error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   455   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   456  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   457  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   458  /** \brief Gets the IBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   459   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   460   * \return address of IBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   461   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   462  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   463  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   464  /** \brief Gets the INT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   465   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   466   * \return address of INT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   467   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   468  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   469  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   470  /** \brief Gets the INT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   471   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   472   * \return address of INT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   473   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   474  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   475  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   476  /** \brief Gets the message buffers interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   477   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   478   * \param messageBuffer message buffer to which interrupt status be checked.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   479   * \return message buffer interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   480   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   481  IFX_INLINE boolean IfxEray_getMessageBufferInterruptStatus(Ifx_ERAY *eray, uint8 messageBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   482  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   483  /** \brief Gets the MBSC0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   484   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   485   * \return address of MBSC0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   486   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   487  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   488  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   489  /** \brief Gets the MBSC1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   490   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   491   * \return address of MBSC1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   492   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   493  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   494  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   495  /** \brief Gets the NDAT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   496   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   497   * \return address of NDAT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   498   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   499  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   500  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   501  /** \brief Gets the NDAT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   502   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   503   * \return address of NDAT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   504   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   505  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   506  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   507  /** \brief Gets the new data interrupt buffers status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   508   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   509   * \param ndat message buffer number configured to which ndat occurs.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   510   * \return ndat interrupt buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   511   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   512  IFX_INLINE boolean IfxEray_getNewDataInterruptStatus(Ifx_ERAY *eray, uint8 ndat);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   513  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   514  /** \brief Gets the OBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   515   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   516   * \return address of OBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   517   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   518  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getOutputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   519  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   520  /** \brief Gets the status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   521   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   522   * \return status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   523   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   524  IFX_INLINE Ifx_ERAY_SIR IfxEray_getStatusInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   525  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   526  /** \brief Gets the TINT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   527   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   528   * \return address of TINT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   529   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   531  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   532  /** \brief Gets the TINT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   533   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   534   * \return address of TINT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   535   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   536  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   537  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   538  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   539  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   540  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   541  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   542  /** \brief Clears all the error flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   543   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   544   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   545   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   546  IFX_EXTERN void IfxEray_clearAllFlags(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   547  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   548  /** \brief Enables all the Interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   549   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   550   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   551   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   552  IFX_EXTERN void IfxEray_enableInterruptLines(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   553  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   554  /** \brief Selects between MBSC0 and MBSC1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   555   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   556   * \param messageBuffer message buffer interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   557   * \param messageBufferDestination selects MBSC0 or MBSC1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   558   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   559   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   560  IFX_EXTERN void IfxEray_setMessageBufferInterruptDestination(Ifx_ERAY *eray, uint8 messageBuffer, uint8 messageBufferDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   561  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   562  /** \brief Selects between NDAT0 and NDAT1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   563   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   564   * \param ndat NDAT interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   565   * \param ndatDestination selects NDAT0 or NDAT1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   567   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   568  IFX_EXTERN void IfxEray_setNewDataInterruptDestination(Ifx_ERAY *eray, uint8 ndat, uint8 ndatDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   569  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   571  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   572  /** \addtogroup IfxLld_Eray_Std_IO
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   574  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   578  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   579  /** \brief Initialises a RX pin.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   580   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   581   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   583   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   584  IFX_INLINE void IfxEray_initRxPin(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   585  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   586  /** \brief Initializes a TX Enable output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   587   * \param txEn the TX Enable Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   588   * \param txEnMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   589   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   591   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   592  IFX_INLINE void IfxEray_initTxEnPin(const IfxEray_Txen_Out *txEn, IfxPort_OutputMode txEnMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   593  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   594  /** \brief Initializes a TX output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   595   * \param tx the TX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   596   * \param txMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   597   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   599   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   600  IFX_INLINE void IfxEray_initTxPin(const IfxEray_Txd_Out *tx, IfxPort_OutputMode txMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   601  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   602  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   603  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   604  /** \addtogroup IfxLld_Eray_Std_Module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   605   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   606  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   607  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   608  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   609  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   610  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   611  /** \brief Disables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   612   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   613   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   614   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   615  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   616  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   617  /** \brief Enables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   618   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   619   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   620   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   621  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   622  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   623  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   624   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   625   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   626   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   627   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   628   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   629  IFX_INLINE boolean IfxEray_isModuleSuspended(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   630  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   631  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   632   * \param eray pointer to ERAY registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   633   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   635   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   636  IFX_INLINE void IfxEray_setSleepMode(Ifx_ERAY *eray, IfxEray_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   637  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   638  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   639  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   640  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   641  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   642  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   643   * \param eray Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   644   * \return ERAY module register address
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   645   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   646  IFX_EXTERN Ifx_ERAY *IfxEray_getAddress(IfxEray_Index eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   647  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   648  /** \brief API to get the resource index of the ERAY specified.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   649   * \param eray Pointer to the ERAY HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   650   * \return Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   651   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   652  IFX_EXTERN IfxEray_Index IfxEray_getIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   653  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   654  /** \brief Resets the ERAY kernel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   655   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   657   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   658  IFX_EXTERN void IfxEray_resetModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   659  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   660  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   661  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   662  /** \addtogroup IfxLld_Eray_Std_Status
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   663   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   664  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   665  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   666  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   668  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   669  /** \brief Gets the FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   670   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   671   * \return FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   672   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   673  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   674  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   675  /** \brief Gets the Input Buffer Host Busy status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   676   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   677   * \return TRUE if Host is Busy otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   678   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   679  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   680  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   681  /** \brief Gets the Input Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   682   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   683   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   684   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   685  IFX_INLINE uint8 IfxEray_getInputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   686  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   687  /** \brief Gets the output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   688   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   689   * \return output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   690   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   691  IFX_INLINE uint8 IfxEray_getOutputBuffer(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   692  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   693  /** \brief Gets the Output Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   694   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   695   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   696   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   697  IFX_INLINE boolean IfxEray_getOutputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   698  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   699  /** \brief Gets the current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   700   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   701   * \return current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   702   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   703  IFX_INLINE IfxEray_PocState IfxEray_getPocState(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   704  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   705  /** \brief Gets the received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   706   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   707   * \return received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   708   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   709  IFX_INLINE IfxEray_WakeupChannel IfxEray_getWakeupPatternReceivedChannel(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   710  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   711  /** \brief Waits until the controller enters required POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   712   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   713   * \param pocState POC state upto which controller waits.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   714   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   715   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   716  IFX_INLINE void IfxEray_waitForPocState(Ifx_ERAY *eray, IfxEray_PocState pocState);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   717  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   718  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   719  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   720  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   721  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   722  /** \brief Changes the Commmunication Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   723   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   724   * \param pocCommand POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   725   * \return TRUE if command accepted otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   726   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   727  IFX_EXTERN boolean IfxEray_changePocState(Ifx_ERAY *eray, IfxEray_PocCommand pocCommand);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   728  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   729  /** \brief Sets the POC state to Ready state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   730   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   732   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   733  IFX_EXTERN void IfxEray_setPocReady(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   734  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   735  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   736  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   737  /** \addtogroup IfxLld_Eray_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   738   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   739  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   742  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   743  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   744  /** \brief request to receive header section from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   745   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   746   * \param headerReceived whether header is received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   748   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   749  IFX_INLINE void IfxEray_receiveHeader(Ifx_ERAY *eray, boolean headerReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   750  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   751  /** \brief sets the bit to send header in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   752   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   753   * \param headerTransfered whether header transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   754   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   755   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   756  IFX_INLINE void IfxEray_sendHeader(Ifx_ERAY *eray, boolean headerTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   757  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   758  /** \brief Sets number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   759   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   760   * \param numberOfCyclePairsForActive number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   761   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   762   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   763  IFX_INLINE void IfxEray_setActiveCyclePairs(Ifx_ERAY *eray, uint8 numberOfCyclePairsForActive);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   764  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   765  /** \brief Sets auto delays between input, output buffers and message RAM
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   766   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   767   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   768   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   769  IFX_INLINE void IfxEray_setAutoDelayBuffers(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   770  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   771  /** \brief Sets baudrate on Flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   772   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   773   * \param baudrate baudrate on flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   774   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   775   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   776  IFX_INLINE void IfxEray_setBaudrate(Ifx_ERAY *eray, IfxEray_Baudrate baudrate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   777  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   778  /** \brief Sets secured buffers in message RAM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   779   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   780   * \param secureValue secure value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   782   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   783  IFX_INLINE void IfxEray_setBufferReconfigSecure(Ifx_ERAY *eray, uint8 secureValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   784  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   785  /** \brief Sets channel A initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   786   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   787   * \param channelAMicrotickInitialOffset difference between reference points on channel A in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   788   * \param channelAMacrotickInitialOffset difference between reference points on channel A in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   789   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   790   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   791  IFX_INLINE void IfxEray_setChannelAInitialOffsets(Ifx_ERAY *eray, uint8 channelAMicrotickInitialOffset, uint8 channelAMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   792  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   793  /** \brief Sets channel B initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   794   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   795   * \param channelBMicrotickInitialOffset difference between reference points on channel B in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   796   * \param channelBMacrotickInitialOffset difference between reference points on channel B in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   798   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   799  IFX_INLINE void IfxEray_setChannelBInitialOffsets(Ifx_ERAY *eray, uint8 channelBMicrotickInitialOffset, uint8 channelBMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   800  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   801  /** \brief Sets receive delays on channels.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   802   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   803   * \param channelAReceptionDelay reception delay on channel A.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   804   * \param channelBReceptionDelay reception delay on channel B.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   805   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   806   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   807  IFX_INLINE void IfxEray_setChannelsReceiveDelay(Ifx_ERAY *eray, uint8 channelAReceptionDelay, uint8 channelBReceptionDelay);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   808  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   809  /** \brief Sets clock correction cycles for Passive and Halt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   810   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   811   * \param clockCorrectionCyclesPassive maximum number of cycles missing clock correction leading for passive state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   812   * \param clockCorrectionCyclesHalt maximum number of cycles missing clock correction leading for halt state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   813   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   814   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   815  IFX_INLINE void IfxEray_setClockCorrectionCycles(Ifx_ERAY *eray, uint8 clockCorrectionCyclesPassive, uint8 clockCorrectionCyclesHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   816  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   817  /** \brief lead to halt state in clock synch error.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   818   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   819   * \param clockSyncErrorHalt whether to enter halt in clock synch error or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   821   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   822  IFX_INLINE void IfxEray_setClockSynchErrorHalt(Ifx_ERAY *eray, boolean clockSyncErrorHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   823  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   824  /** \brief Sets cluster drift values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   825   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   826   * \param clusterDrift cluster drift damping value used in clock synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   827   * \param maxDriftOffset maximum drift offset between two nodes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   828   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   829   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   830  IFX_INLINE void IfxEray_setClusterDriftValues(Ifx_ERAY *eray, uint8 clusterDrift, uint16 maxDriftOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   831  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   832  /** \brief Sets cluster startup deviation.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   833   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   834   * \param acceptedStartupDeviation deviation for startup Frames during integration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   835   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   836   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   837  IFX_INLINE void IfxEray_setClusterStartupDeviation(Ifx_ERAY *eray, uint16 acceptedStartupDeviation);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   838  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   839  /** \brief Sets CAS symbol window duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   840   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   841   * \param collisionAvoidanceDuration accepted duration of CAS symbol.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   842   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   843   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   844  IFX_INLINE void IfxEray_setCollisionAvoidanceDuration(Ifx_ERAY *eray, uint8 collisionAvoidanceDuration);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   845  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   846  /** \brief sets duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   847   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   848   * \param macroticks duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   849   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   850   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   851  IFX_INLINE void IfxEray_setCycleDurationMacroticks(Ifx_ERAY *eray, uint16 macroticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   852  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   853  /** \brief sets duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   854   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   855   * \param microticks duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   856   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   857   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   858  IFX_INLINE void IfxEray_setCycleDurationMicroticks(Ifx_ERAY *eray, uint32 microticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   859  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   860  /** \brief Sets decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   861   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   862   * \param decodingCorrection decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   863   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   864   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   865  IFX_INLINE void IfxEray_setDecodingCorrectionValue(Ifx_ERAY *eray, uint8 decodingCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   866  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   867  /** \brief Sets dynamic slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   868   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   869   * \param dynamicSlotLength duration of dynamic slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   870   * \param dynamicSlotCount number of dynamic slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   871   * \param idleDynamicSlots duration of dynamic slot idle phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   872   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   873   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   874  IFX_INLINE void IfxEray_setDynamicSlots(Ifx_ERAY *eray, uint8 dynamicSlotLength, uint16 dynamicSlotCount, IfxEray_IdleDynamicSlots idleDynamicSlots);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   875  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   876  /** \brief Sets external correction controls.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   877   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   878   * \param externalOffset External offset correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   879   * \param externalRate External rate correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   880   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   881   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   882  IFX_INLINE void IfxEray_setExternalCorrectionControl(Ifx_ERAY *eray, IfxEray_ExternalOffset externalOffset, IfxEray_ExternalRate externalRate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   883  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   884  /** \brief Sets external correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   885   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   886   * \param externalOffsetCorrection external clock offset correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   887   * \param externalRateCorrection external clock rate correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   888   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   889   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   890  IFX_INLINE void IfxEray_setExternalCorrectionValues(Ifx_ERAY *eray, IfxEray_ExternalOffsetCorrection externalOffsetCorrection, IfxEray_ExternalRateCorrection externalRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   891  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   892  /** \brief Sets FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   893   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   894   * \param fifoBufferStartIndex FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   895   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   896   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   897  IFX_INLINE void IfxEray_setFifoBufferStartIndex(Ifx_ERAY *eray, uint8 fifoBufferStartIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   898  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   899  /** \brief Sets FIFO filter configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   900   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   901   * \param rejectedFrameId rejected frameId by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   902   * \param filteredCycleNumber filtered cycle number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   903   * \param fifoNullFramesRejected null frames rejection selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   904   * \param frameIdFilter filtered frameid by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   905   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   906   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   907  IFX_INLINE void IfxEray_setFifoFilterConfigurations(Ifx_ERAY *eray, uint16 rejectedFrameId, uint8 filteredCycleNumber, boolean fifoNullFramesRejected, uint16 frameIdFilter);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   908  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   909  /** \brief Sets FIFO configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   910   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   911   * \param receiveChannel FIFO receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   912   * \param staticFifoDisabled static FIFO selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   913   * \param fifoDepth FIFO depth.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   914   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   915   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   916  IFX_INLINE void IfxEray_setFifoMessageBufferConfigurations(Ifx_ERAY *eray, IfxEray_ReceiveChannel receiveChannel, boolean staticFifoDisabled, uint8 fifoDepth);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   917  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   918  /** \brief Sets first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   919   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   920   * \param firstDynamicBuffer first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   921   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   922   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   923  IFX_INLINE void IfxEray_setFirstDynamicBuffer(Ifx_ERAY *eray, uint8 firstDynamicBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   924  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   925  /** \brief Sets startup or wakeup listen timeouts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   926   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   927   * \param listenTimeOut wakeup or startup listen timeout in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   928   * \param listenTimeOutNoise upper limit for startup or wakeup listen timeout in presence of noise.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   929   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   930   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   931  IFX_INLINE void IfxEray_setListenTimeOuts(Ifx_ERAY *eray, uint32 listenTimeOut, IfxEray_ListenTimeOutNoise listenTimeOutNoise);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   932  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   933  /** \brief Sets the maximum cold start attempts for active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   934   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   935   * \param maxColdStartAttempts maximum number of attempts that a cold start node allows.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   936   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   937   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   938  IFX_INLINE void IfxEray_setMaxColdStartAttempts(Ifx_ERAY *eray, uint8 maxColdStartAttempts);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   939  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   940  /** \brief Sets max limit correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   941   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   942   * \param maxOffsetCorrection maximum offset correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   943   * \param maxRateCorrection maximum rate correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   945   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   946  IFX_INLINE void IfxEray_setMaxCorrectionValues(Ifx_ERAY *eray, uint16 maxOffsetCorrection, uint16 maxRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   947  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   948  /** \brief Sets maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   949   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   950   * \param maxSyncFrames maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   952   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   953  IFX_INLINE void IfxEray_setMaxSynchFrames(Ifx_ERAY *eray, IfxEray_MaxSynchFrames maxSyncFrames);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   954  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   955  /** \brief Sets number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   956   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   957   * \param numberOfMessageBuffers number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   959   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   960  IFX_INLINE void IfxEray_setMessageBufferCount(Ifx_ERAY *eray, uint8 numberOfMessageBuffers);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   961  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   962  /** \brief Sets Message Handler configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   963   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   964   * \param staticFramepayload payload length of static frames in double bytes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   965   * \param latestTransmissionStart dynamic slots befor transmission of inhibit frame in dynamic segment.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   966   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   967   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   968  IFX_INLINE void IfxEray_setMessageHandlerConfigurations(Ifx_ERAY *eray, uint8 staticFramepayload, uint8 latestTransmissionStart);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   969  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   970  /** \brief Sets network start Idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   971   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   972   * \param networkStartIdleTime starting point of Network Idle Time Phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   973   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   974   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   975  IFX_INLINE void IfxEray_setNetworkStartIdleTime(Ifx_ERAY *eray, uint16 networkStartIdleTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   976  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   977  /** \brief Sets network management vector length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   978   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   979   * \param networkVectorLength length of network management vector.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   980   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   981   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   982  IFX_INLINE void IfxEray_setNetworkVectorLength(Ifx_ERAY *eray, uint32 networkVectorLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   983  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   984  /** \brief Sets channels connected to node.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   985   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   986   * \param channelAConnectedNode whether node connected to channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   987   * \param channelBConnectedNode whether node connected to channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   988   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   989   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   990  IFX_INLINE void IfxEray_setNodeChannels(Ifx_ERAY *eray, boolean channelAConnectedNode, boolean channelBConnectedNode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   991  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   992  /** \brief Sets offset correction starting point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   993   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   994   * \param correctionOffset offset correction start point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   995   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   996   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   997  IFX_INLINE void IfxEray_setOffsetCorrection(Ifx_ERAY *eray, uint16 correctionOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   998  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   999  /** \brief requests to receive the frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1000   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1001   * \param receiveRequested whether frame to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1002   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1003   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1004  IFX_INLINE void IfxEray_setReceiveRequest(Ifx_ERAY *eray, boolean receiveRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1005  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1006  /** \brief Sets receive wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1007   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1008   * \param receiveWakeupTestDuration duration of receive wakeup pattern.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1009   * \param receiveWakeupIdleTime duration of receive wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1010   * \param receiveWakeupLowTime duration of receive wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1013  IFX_INLINE void IfxEray_setReceiveWakeupTimes(Ifx_ERAY *eray, uint16 receiveWakeupTestDuration, uint8 receiveWakeupIdleTime, uint8 receiveWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1014  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1015  /** \brief sets buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1016   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1017   * \param bufferIndex buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1020  IFX_INLINE void IfxEray_setRxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1021  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1022  /** \brief Sets slots action points.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1023   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1024   * \param staticActionPoint static slots and symbol window action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1025   * \param dynamicActionPoint dynamic slots action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1026   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1028  IFX_INLINE void IfxEray_setSlotActionPoints(Ifx_ERAY *eray, uint8 staticActionPoint, uint8 dynamicActionPoint);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1029  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1030  /** \brief Sets static slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1031   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1032   * \param staticSlotLength duration of static slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1033   * \param staticSlotsCount number of static slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1034   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1035   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1036  IFX_INLINE void IfxEray_setStaticSlots(Ifx_ERAY *eray, uint16 staticSlotLength, uint16 staticSlotsCount);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1037  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1038  /** \brief Sets sample point for strobing.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1039   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1040   * \param strobePosition strobing sample count.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1041   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1043  IFX_INLINE void IfxEray_setStrobePosition(Ifx_ERAY *eray, IfxEray_StrobePosition strobePosition);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1044  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1045  /** \brief Sets channels which transmits symbols.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1046   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1047   * \param channelASymbolTransmitted whether symbol is transmitted in Channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1048   * \param channelBSymbolTransmitted whether symbol is transmitted in Channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1049   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1050   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1051  IFX_INLINE void IfxEray_setSymbolChannels(Ifx_ERAY *eray, boolean channelASymbolTransmitted, boolean channelBSymbolTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1052  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1053  /** \brief Sets the transmit slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1054   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1055   * \param transmissionSlotMode transmission slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1058  IFX_INLINE void IfxEray_setTransmissionSlotMode(Ifx_ERAY *eray, IfxEray_TransmissionSlotMode transmissionSlotMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1059  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1060  /** \brief Sets transmission start time duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1061   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1062   * \param transmissionStartTime transmission start time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1065  IFX_INLINE void IfxEray_setTransmissionStartTime(Ifx_ERAY *eray, uint8 transmissionStartTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1066  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1067  /** \brief Sets transfer request to send frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1068   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1069   * \param transferRequested whether transfer requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1072  IFX_INLINE void IfxEray_setTransmitRequest(Ifx_ERAY *eray, boolean transferRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1073  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1074  /** \brief Sets transmit wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1075   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1076   * \param transmitWakeupRepetitions transmission wakeup repetitions.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1077   * \param transmitWakeupIdleTime duration of transmit wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1078   * \param transmitWakeupLowTime duration of transmit wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1079   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1081  IFX_INLINE void IfxEray_setTransmitWakeupTimes(Ifx_ERAY *eray, uint8 transmitWakeupRepetitions, uint8 transmitWakeupIdleTime, uint8 transmitWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1082  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1083  /** \brief Configures transmitted frames for startup and synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1084   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1085   * \param startupFrameTransmitted whether startup Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1086   * \param synchFrameTransmitted whether synch Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1087   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1089  IFX_INLINE void IfxEray_setTransmittedFrames(Ifx_ERAY *eray, boolean startupFrameTransmitted, boolean synchFrameTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1090  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1091  /** \brief Sets the transmit buffer number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1092   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1093   * \param bufferIndex buffer number in which frame is sent.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1094   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1095   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1096  IFX_INLINE void IfxEray_setTxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1097  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1098  /** \brief Swaps the shadow and Host output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1099   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1100   * \param swapRequested whether swap is requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1101   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1102   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1103  IFX_INLINE void IfxEray_setViewData(Ifx_ERAY *eray, boolean swapRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1104  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1105  /** \brief Sets the cluster wakeup channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1106   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1107   * \param wakeupPatternChannel cluster wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1108   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1109   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1110  IFX_INLINE void IfxEray_setWakeupPatternChannel(Ifx_ERAY *eray, IfxEray_WakeupChannel wakeupPatternChannel);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1111  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1112  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1113  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1114  /** \addtogroup IfxLld_Eray_Std_Operative
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1115   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1116  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1117  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1118  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1119  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1120  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1121  /** \brief requests to receive data from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1122   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1123   * \param dataReceived whether data to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1126  IFX_INLINE void IfxEray_receiveData(Ifx_ERAY *eray, boolean dataReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1127  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1128  /** \brief sets the bit to send data in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1129   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1130   * \param dataTransfered whether data transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1133  IFX_INLINE void IfxEray_sendData(Ifx_ERAY *eray, boolean dataTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1134  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1135  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1136  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1138  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1139  /** \brief Calculate and returns the CRC for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1140   * \param payloadLength payload length configured for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1141   * \param frameId slot id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1142   * \param startupFrameIndicator whether startup frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1143   * \param syncFrameIndicator whether sync frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1144   * \return calculated CRC value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1145   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1146  IFX_EXTERN uint16 IfxEray_calcHeaderCrc(uint8 payloadLength, uint16 frameId, boolean startupFrameIndicator, boolean syncFrameIndicator);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1147  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1148  /** \brief Reads the received data from output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1149   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1150   * \param data pointer to received data buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1151   * \param payloadLength payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1154  IFX_EXTERN void IfxEray_readData(Ifx_ERAY *eray, uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1155  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1156  /** \brief Reads header and data from output buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1157   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1158   * \param header header received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1159   * \param data data received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1160   * \param maxPayloadLength maximum payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1161   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1162   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1163  IFX_EXTERN void IfxEray_readFrame(Ifx_ERAY *eray, IfxEray_ReceivedHeader *header, uint32 *data, Ifx_SizeT maxPayloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1164  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1165  /** \brief Writes header and data to Input buffers and set the slots.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1166   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1167   * \param header Header section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1168   * \param data data section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1169   * \param slotConfig pointer slot allocation configuration structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1172  IFX_EXTERN void IfxEray_setSlot(Ifx_ERAY *eray, const IfxEray_Header *header, const uint32 *data, const IfxEray_SlotConfig *slotConfig);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1173  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1174  /** \brief Writes data section of a frame to input data registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1175   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1176   * \param data data segment in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1177   * \param payloadLength payload length configured for slot buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1178   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1179   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1180  IFX_EXTERN void IfxEray_writeData(Ifx_ERAY *eray, const uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1181  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1182  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1183  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1184  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1185  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1187  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1188  /** \brief Gets the FIFO index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1189   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1190   * \return FIFO buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1191   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1192  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1193  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1194  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1195   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1196   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1197   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1200  IFX_INLINE void IfxEray_setSuspendMode(Ifx_ERAY *eray, IfxEray_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1201  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1202  /** \brief Provides functionality for both setting of pin direction as input and configuring pad driver.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1203   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1204   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1205   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1206   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1207   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1208  IFX_INLINE void IfxEray_initRxPinWithPadLevel(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1209  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1210  /** \brief Provides functionality to select the receiver channel input
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1211   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1212   * \param nodeId ERAY node id.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1213   * \param select receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1214   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1215   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1216  IFX_INLINE void IfxEray_selectRecieveInput(Ifx_ERAY *eray, IfxEray_NodeId nodeId, Ifx_RxSel select);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1217  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1218  /** \brief Provides functionality to provide the command to change the transmit mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1219   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1220   * \param cmd POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1221   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1223  IFX_INLINE void IfxEray_setPocCommand(Ifx_ERAY *eray, IfxEray_PocCommand cmd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1224  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1225  /** \brief Provides functionality to find out that any CHI command is being executed or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1226   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1227   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1228   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1229  IFX_INLINE boolean IfxEray_isRamsCleared(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1230  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1231  /** \brief Provides functionality to check whether POC is busy or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1232   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1233   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1235  IFX_INLINE boolean IfxEray_isPocBusy(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1236  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1237  /** \brief Provides functionality to enble the interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1238   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1239   * \param intLine interrupt line.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1242  IFX_INLINE void IfxEray_enableInterruptLine(Ifx_ERAY *eray, IfxEray_InterruptLine intLine);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1243  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1244  /** \brief Provides functionality to enable the transmit interrupt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1245   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1248  IFX_INLINE void IfxEray_enableTransmitInterrupt(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1250  /** \brief Provides functionality to enable all the error iterrupts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1251   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1252   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1253   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1254  IFX_INLINE void IfxEray_enableAllErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1255  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1256  /** \brief Provides functionality to enable the test mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1257   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1258   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1259   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1260  IFX_INLINE void IfxEray_unlockTestModeKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1261  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1262  /** \brief Provides functionality to enable write to the test mode registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1263   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1266  IFX_INLINE void IfxEray_enableWriteTestRegister(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1267  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1268  /** \brief Provides functionality to enable the external loopback.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1269   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1270   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1272  IFX_INLINE void IfxEray_enableExternalLoopback(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1273  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1274  /** \brief Provides functionality to unlock the test mode configuration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1275   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1276   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1277   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1278  IFX_INLINE void IfxEray_unlockConfigurationKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1279  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1280  /** \brief Provides functionality to configure SUC configuration registers 1.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1281   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1282   * \param configValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1283   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1284   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1285  IFX_INLINE void IfxEray_configureSuc1Register(Ifx_ERAY *eray, uint32 configValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1286  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1287  /** \brief Provides functionality to configure MTCCV register.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1288   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1289   * \param tickValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1290   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1291   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1292  IFX_INLINE void IfxEray_setMacroTickValue(Ifx_ERAY *eray, uint32 tickValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1293  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1294  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1295  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1296  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1297  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1298  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1299  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1300      eray->EIR.U = errorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1301  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1302  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1303  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1304  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1305  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1306      eray->SIR.U = statusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1307  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1308  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1309  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1310  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1311  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1312      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1313      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1314      //disable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1315      eray->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1316      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1317  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1318  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1319  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1320  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1322      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1323      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1324      // Run Mode Clock divider to 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1325      //enable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1326      eray->CLC.U = 0x00000100;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1328      // ensure that write access finished before leaving this function
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1329      if (eray->CLC.U)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1330      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1331  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1332      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1333  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1334  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1335  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1336  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1337  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1338      Ifx_ERAY_EIR interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1339      interruptFlags.U = eray->EIR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1340      return interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1341  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1342  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1343  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1344  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1345  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1346      return eray->MRC.B.FFB;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1347  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1348  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1349  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1350  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1351  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1352      Ifx_ERAY_FSR fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1353      fifoStatus.U = eray->FSR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1354      return fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1355  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1356  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1357  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1358  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1359  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1360      return (eray->IBCR.B.IBSYH == 1) ? TRUE : FALSE;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1361  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1362  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1363  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1364  IFX_INLINE uint8 IfxEray_getInputBufferBusyShadowStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1365  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1366      return (eray->IBCR.B.IBSYS == 1) ? TRUE : FALSE;
	ld.bu	d15,[a12]1303
.L234:
	jnz.t	d15:7,.L26
.L453:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     2   * \file IfxEray.h
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     3   * \brief ERAY  basic functionality
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     4   * \ingroup IfxLld_Eray
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     5   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     8   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     9   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    11   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    16   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    18   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    25   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    32   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    40   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    41   * \defgroup IfxLld_Eray_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    42   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    43   * \defgroup IfxLld_Eray_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    44   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    45   * \defgroup IfxLld_Eray_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    46   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    47   * \defgroup IfxLld_Eray_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    48   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    49   * \defgroup IfxLld_Eray_Std_Status Status Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    50   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    51   * \defgroup IfxLld_Eray_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    52   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    53   * \defgroup IfxLld_Eray_Std_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    54   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    55   * \defgroup IfxLld_Eray_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    56   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    57   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    58  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    59  #ifndef IFXERAY_H
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    60  #define IFXERAY_H 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    61  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    65  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    66  #include "_Impl/IfxEray_cfg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    67  #include "_PinMap/IfxEray_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    68  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    69  #include "IfxEray_reg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    70  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    74  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    75  /** \addtogroup IfxLld_Eray_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    77  /** \brief Baudrate on the flexray bus, defined in MODULE_ERAY0.PRTC1.B.BRP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    78   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    79  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    80  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    81      IfxEray_Baudrate_10  = 0, /**< \brief baudrate is 10MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    82      IfxEray_Baudrate_5   = 1, /**< \brief baudrate is 5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    83      IfxEray_Baudrate_2_5 = 2  /**< \brief baudrate is 2.5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    84  } IfxEray_Baudrate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    85  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    86  /** \brief wheather transmit buffer or receive buffer, defined in MODULE_ERAY0.WRHS1.B.CFG.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    87   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    88  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    89  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    90      IfxEray_BufferDirection_receive  = 0, /**< \brief buffer is configured as receive buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    91      IfxEray_BufferDirection_transmit = 1  /**< \brief buffer is configured as transmit buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    92  } IfxEray_BufferDirection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    93  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    94  /** \brief Channel Id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    95   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    97  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    98      IfxEray_Channel_a = 0,  /**< \brief channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    99      IfxEray_Channel_b = 1   /**< \brief channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   100  } IfxEray_Channel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   101  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   102  /** \brief Selection of error flag to clear defined in MODULE_ERAY.EIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   103   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   104  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   105  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   106      IfxEray_ClearErrorFlag_pemc = 1,         /**< \brief POC error mode change bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   107      IfxEray_ClearErrorFlag_cna  = 2,         /**< \brief command not accepted event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   108      IfxEray_ClearErrorFlag_sfbm = 4,         /**< \brief sync frame below minimum bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   109      IfxEray_ClearErrorFlag_sfo  = 8,         /**< \brief sync frame overflow event bit */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   110      IfxEray_ClearErrorFlag_ccf  = 16,        /**< \brief clock correction failure event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   111      IfxEray_ClearErrorFlag_ccl  = 32,        /**< \brief CHI command locked event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   112      IfxEray_ClearErrorFlag_eerr = 64,        /**< \brief ECC error event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   113      IfxEray_ClearErrorFlag_rfo  = 128,       /**< \brief RxFIFO overrun event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   114      IfxEray_ClearErrorFlag_efa  = 256,       /**< \brief empty FIFO access event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   115      IfxEray_ClearErrorFlag_iiba = 512,       /**< \brief illegal input buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   116      IfxEray_ClearErrorFlag_ioba = 1024,      /**< \brief illegal output buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   117      IfxEray_ClearErrorFlag_mhf  = 2048,      /**< \brief message handler constraint flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   118      IfxEray_ClearErrorFlag_eda  = 65536,     /**< \brief error event on channel A. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   119      IfxEray_ClearErrorFlag_ltva = 131072,    /**< \brief latest transmit violation flag on channel A . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   120      IfxEray_ClearErrorFlag_taba = 262144,    /**< \brief transmission across channel A boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   121      IfxEray_ClearErrorFlag_edb  = 16777216,  /**< \brief error event on channel B. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   122      IfxEray_ClearErrorFlag_ltvb = 33554432,  /**< \brief latest transmit violation flag on channel B . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   123      IfxEray_ClearErrorFlag_tabb = 67108864   /**< \brief transmission across channel B boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   124  } IfxEray_ClearErrorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   125  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   126  /** \brief Selection of status flag to clear defined in MODULE_ERAY.SIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   127   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   129  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   130      IfxEray_ClearStatusFlag_wst  = 1,         /**< \brief wakeup status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   131      IfxEray_ClearStatusFlag_cas  = 2,         /**< \brief collision avoidance bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   132      IfxEray_ClearStatusFlag_cycs = 4,         /**< \brief cycle start service bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   133      IfxEray_ClearStatusFlag_txi  = 8,         /**< \brief transmit service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   134      IfxEray_ClearStatusFlag_rxi  = 16,        /**< \brief receive service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   135      IfxEray_ClearStatusFlag_rfne = 32,        /**< \brief receive fifo not empty bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   136      IfxEray_ClearStatusFlag_rfcl = 64,        /**< \brief RxFIFO critical level reached bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   137      IfxEray_ClearStatusFlag_nmvc = 128,       /**< \brief network management vector bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   138      IfxEray_ClearStatusFlag_ti0  = 256,       /**< \brief timer0 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   139      IfxEray_ClearStatusFlag_ti1  = 512,       /**< \brief timer1 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   140      IfxEray_ClearStatusFlag_tibc = 1024,      /**< \brief transfer input buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   141      IfxEray_ClearStatusFlag_tobc = 2048,      /**< \brief transfer output buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   142      IfxEray_ClearStatusFlag_swe  = 4096,      /**< \brief stop watch event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   143      IfxEray_ClearStatusFlag_sucs = 8192,      /**< \brief startup success event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   144      IfxEray_ClearStatusFlag_mbsi = 16384,     /**< \brief message buffer service status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   145      IfxEray_ClearStatusFlag_sds  = 32768,     /**< \brief dynamic segment start bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   146      IfxEray_ClearStatusFlag_wupa = 65536,     /**< \brief wakeup pattern channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   147      IfxEray_ClearStatusFlag_mtsa = 131072,    /**< \brief MTS receive channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   148      IfxEray_ClearStatusFlag_wupb = 16777216,  /**< \brief wakeup pattern channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   149      IfxEray_ClearStatusFlag_mtsb = 33554432   /**< \brief MTS receive channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   150  } IfxEray_ClearStatusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   151  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   152  /** \brief Clock divider in RUN mode, defined in MODULE_ERAY0.B.RMC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   154  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   155  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   156      IfxEray_ClockDivider_none = 0,  /**< \brief no clock signal */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   157      IfxEray_ClockDivider_1    = 1,  /**< \brief run mode clock divider 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   158      IfxEray_ClockDivider_2,         /**< \brief run mode clock divider 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   159      IfxEray_ClockDivider_3,         /**< \brief run mode clock divider 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   160      IfxEray_ClockDivider_4,         /**< \brief run mode clock divider 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   161      IfxEray_ClockDivider_5,         /**< \brief run mode clock divider 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   162      IfxEray_ClockDivider_6,         /**< \brief run mode clock divider 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   163      IfxEray_ClockDivider_7          /**< \brief run mode clock divider 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   164  } IfxEray_ClockDivider;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   165  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   166  /** \brief External offset correction control defined in MODULE_ERAY0.GTU11.B.EOCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   167   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   169  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   170      IfxEray_ExternalOffset_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   171      IfxEray_ExternalOffset_correctionSubtracted = 2,  /**< \brief External offset correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   172      IfxEray_ExternalOffset_correctionAdded      = 3   /**< \brief External offset correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   173  } IfxEray_ExternalOffset;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   174  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   175  /** \brief External clock offset correction value defined in MODULE_ERAY0.GTU11.B.EOC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   176   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   177  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   178  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   179      IfxEray_ExternalOffsetCorrection_0 = 0,      /**< \brief external clock offset correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   180      IfxEray_ExternalOffsetCorrection_1,          /**< \brief external clock offset correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   181      IfxEray_ExternalOffsetCorrection_2,          /**< \brief external clock offset correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   182      IfxEray_ExternalOffsetCorrection_3,          /**< \brief external clock offset correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   183      IfxEray_ExternalOffsetCorrection_4,          /**< \brief external clock offset correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   184      IfxEray_ExternalOffsetCorrection_5,          /**< \brief external clock offset correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   185      IfxEray_ExternalOffsetCorrection_6,          /**< \brief external clock offset correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   186      IfxEray_ExternalOffsetCorrection_7           /**< \brief external clock offset correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   187  } IfxEray_ExternalOffsetCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   188  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   189  /** \brief External rate correction control MODULE_ERAY0.GTU11.B.ERCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   190   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   191  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   192  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   193      IfxEray_ExternalRate_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   194      IfxEray_ExternalRate_correctionSubtracted = 2,  /**< \brief External rate correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   195      IfxEray_ExternalRate_correctionAdded      = 3   /**< \brief External rate correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   196  } IfxEray_ExternalRate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   197  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   198  /** \brief External clock rate correction value defined in MODULE_ERAY0.GTU11.B.ERC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   200  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   201  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   202      IfxEray_ExternalRateCorrection_0 = 0,      /**< \brief external clock rate correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   203      IfxEray_ExternalRateCorrection_1,          /**< \brief external clock rate correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   204      IfxEray_ExternalRateCorrection_2,          /**< \brief external clock rate correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   205      IfxEray_ExternalRateCorrection_3,          /**< \brief external clock rate correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   206      IfxEray_ExternalRateCorrection_4,          /**< \brief external clock rate correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   207      IfxEray_ExternalRateCorrection_5,          /**< \brief external clock rate correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   208      IfxEray_ExternalRateCorrection_6,          /**< \brief external clock rate correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   209      IfxEray_ExternalRateCorrection_7           /**< \brief external clock rate correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   210  } IfxEray_ExternalRateCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   211  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   212  /** \brief Duration of dynamic slot idle phase, defined in MODULE_ERAY0.B.DSI.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   213   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   215  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   216      IfxEray_IdleDynamicSlots_0 = 0,      /**< \brief duration of dynamic slot idle phase is 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   217      IfxEray_IdleDynamicSlots_1,          /**< \brief duration of dynamic slot idle phase is 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   218      IfxEray_IdleDynamicSlots_2           /**< \brief duration of dynamic slot idle phase is 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   219  } IfxEray_IdleDynamicSlots;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   220  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   221  /** \brief Interrupt lines
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   223  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   224  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   225      IfxEray_InterruptLine_0 = 0,  /**< \brief line 0 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   226      IfxEray_InterruptLine_1 = 1   /**< \brief line 1 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   227  } IfxEray_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   228  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   229  /** \brief Wakeup or Startup listen timeout in presence of noise, defined in MODULE_ERAY0.SUCC2.B.LTN.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   230   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   231  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   232  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   233      IfxEray_ListenTimeOutNoise_2 = 1,      /**< \brief listen Time-out noise 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   234      IfxEray_ListenTimeOutNoise_3,          /**< \brief listen Time-out noise 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   235      IfxEray_ListenTimeOutNoise_4,          /**< \brief listen Time-out noise 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   236      IfxEray_ListenTimeOutNoise_5,          /**< \brief listen Time-out noise 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   237      IfxEray_ListenTimeOutNoise_6,          /**< \brief listen Time-out noise 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   238      IfxEray_ListenTimeOutNoise_7,          /**< \brief listen Time-out noise 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   239      IfxEray_ListenTimeOutNoise_8,          /**< \brief listen Time-out noise 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   240      IfxEray_ListenTimeOutNoise_9,          /**< \brief listen Time-out noise 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   241      IfxEray_ListenTimeOutNoise_10,         /**< \brief listen Time-out noise 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   242      IfxEray_ListenTimeOutNoise_11,         /**< \brief listen Time-out noise 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   243      IfxEray_ListenTimeOutNoise_12,         /**< \brief listen Time-out noise 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   244      IfxEray_ListenTimeOutNoise_13,         /**< \brief listen Time-out noise 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   245      IfxEray_ListenTimeOutNoise_14,         /**< \brief listen Time-out noise 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   246      IfxEray_ListenTimeOutNoise_15,         /**< \brief listen Time-out noise 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   247      IfxEray_ListenTimeOutNoise_16          /**< \brief listen Time-out noise 16  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   248  } IfxEray_ListenTimeOutNoise;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   250  /** \brief Maximum number of sync frames in a cluster defined in MODULE_ERAY0.GTU02.B.SNM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   251   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   252  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   253  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   254      IfxEray_MaxSynchFrames_2 = 2,      /**< \brief Maximum number of sync frames in a cluster are 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   255      IfxEray_MaxSynchFrames_3,          /**< \brief Maximum number of sync frames in a cluster are 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   256      IfxEray_MaxSynchFrames_4,          /**< \brief Maximum number of sync frames in a cluster are 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   257      IfxEray_MaxSynchFrames_5,          /**< \brief Maximum number of sync frames in a cluster are 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   258      IfxEray_MaxSynchFrames_6,          /**< \brief Maximum number of sync frames in a cluster are 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   259      IfxEray_MaxSynchFrames_7,          /**< \brief Maximum number of sync frames in a cluster are 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   260      IfxEray_MaxSynchFrames_8,          /**< \brief Maximum number of sync frames in a cluster are 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   261      IfxEray_MaxSynchFrames_9,          /**< \brief Maximum number of sync frames in a cluster are 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   262      IfxEray_MaxSynchFrames_10,         /**< \brief Maximum number of sync frames in a cluster are 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   263      IfxEray_MaxSynchFrames_11,         /**< \brief Maximum number of sync frames in a cluster are 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   264      IfxEray_MaxSynchFrames_12,         /**< \brief Maximum number of sync frames in a cluster are 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   265      IfxEray_MaxSynchFrames_13,         /**< \brief Maximum number of sync frames in a cluster are 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   266      IfxEray_MaxSynchFrames_14,         /**< \brief Maximum number of sync frames in a cluster are 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   267      IfxEray_MaxSynchFrames_15          /**< \brief Maximum number of sync frames in a cluster are 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   268  } IfxEray_MaxSynchFrames;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   269  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   270  /** \brief Commmand to control the Communication, defined in MODULE_ERAY0.SUCC1.B.CMD.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   273  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   274      IfxEray_PocCommand_notAccepted = 0,  /**< \brief command not accepted. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   275      IfxEray_PocCommand_config      = 1,  /**< \brief command to controller to enter CONFIG */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   276      IfxEray_PocCommand_ready       = 2,  /**< \brief command to controller to enter READY. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   277      IfxEray_PocCommand_wakeup      = 3,  /**< \brief command to controller to enter WAKEUP */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   278      IfxEray_PocCommand_run         = 4,  /**< \brief command to controller to enter RUN */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   279      IfxEray_PocCommand_allSlots    = 5,  /**< \brief command to controller to enter ALL_SLOTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   280      IfxEray_PocCommand_halt        = 6,  /**< \brief command to controller to enter HALT */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   281      IfxEray_PocCommand_freeze      = 7,  /**< \brief command to controller to enter FREEZE */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   282      IfxEray_PocCommand_sendMts     = 8,  /**< \brief command to controller to enter SEND_MTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   283      IfxEray_PocCommand_coldStart   = 9,  /**< \brief command to controller to enter COLD_START */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   284      IfxEray_PocCommand_reset       = 10, /**< \brief command to controller to enter RESET */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   285      IfxEray_PocCommand_monitor     = 11, /**< \brief command to controller to enter MONITOR */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   286      IfxEray_PocCommand_clearRam    = 12  /**< \brief command to controller to enter CLEAR_RAM */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   287  } IfxEray_PocCommand;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   288  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   289  /** \brief State of Communication Controller Protocol operation control, defined in MODULE_ERAY0.CCSV.B.POCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   290   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   291  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   292  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   293      IfxEray_PocState_defaultConfig               = 0,   /**< \brief controller entered default config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   294      IfxEray_PocState_ready                       = 1,   /**< \brief controller entered ready state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   295      IfxEray_PocState_normalActive                = 2,   /**< \brief controller entered normal-active state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   296      IfxEray_PocState_normalPassive               = 3,   /**< \brief controller entered normal-passive state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   297      IfxEray_PocState_halt                        = 4,   /**< \brief controller entered halt state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   298      IfxEray_PocState_monitor                     = 5,   /**< \brief controller entered monitor state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   299      IfxEray_PocState_config                      = 15,  /**< \brief controller entered config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   300      IfxEray_PocState_wakeupStandby               = 16,  /**< \brief controller entered wakeup standby state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   301      IfxEray_PocState_wakeupListen                = 17,  /**< \brief controller entered wakeup-listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   302      IfxEray_PocState_wakeupSend                  = 18,  /**< \brief controller entered wakeup-send state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   303      IfxEray_PocState_wakeupDetect                = 19,  /**< \brief controller entered wakeup-detection state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   304      IfxEray_PocState_startup                     = 32,  /**< \brief controller entered startup state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   305      IfxEray_PocState_coldStartListen             = 33,  /**< \brief controller entered clod-start listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   306      IfxEray_PocState_collisionResolution         = 34,  /**< \brief controller entered collission-resolution state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   307      IfxEray_PocState_consistencyCheck            = 35,  /**< \brief controller entered consistency-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   308      IfxEray_PocState_gap                         = 36,  /**< \brief controller entered gap state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   309      IfxEray_PocState_join                        = 37,  /**< \brief controller entered join state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   310      IfxEray_PocState_integrationCheck            = 38,  /**< \brief controller entered integration-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   311      IfxEray_PocState_integrationListen           = 39,  /**< \brief controller entered integration-listen state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   312      IfxEray_PocState_integrationConsistencyCheck = 40,  /**< \brief controller entered integration consistency check state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   313      IfxEray_PocState_initializeSchedule          = 41,  /**< \brief controller entered initialise schedule state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   314      IfxEray_PocState_staruAborted                = 42,  /**< \brief controller entered startup-abort state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   315      IfxEray_PocState_startupSucced               = 43   /**< \brief controller entered startup succeed state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   316  } IfxEray_PocState;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   317  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   318  /** \brief Receiving channel, defined in MODULE_ERAY0.FRF.B.CH.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   319   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   320  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   322      IfxEray_ReceiveChannel_both = 0,  /**< \brief both channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   323      IfxEray_ReceiveChannel_b    = 1,  /**< \brief channel A for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   324      IfxEray_ReceiveChannel_a    = 2,  /**< \brief channel B for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   325      IfxEray_ReceiveChannel_none = 3   /**< \brief none channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   326  } IfxEray_ReceiveChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   328  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   329   * Definition in Ifx_ERAY.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   330   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   331  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   332  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   333      IfxEray_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   334      IfxEray_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   335  } IfxEray_SleepMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   336  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   337  /** \brief Sample count value for strobing, defined in MODULE_ERAY0.PRTC1.B.SPP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   338   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   339  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   340  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   341      IfxEray_StrobePosition_5 = 0,  /**< \brief Sample count 5 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   342      IfxEray_StrobePosition_4 = 1,  /**< \brief Sample count 4 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   343      IfxEray_StrobePosition_6 = 2   /**< \brief Sample count 6 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   344  } IfxEray_StrobePosition;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   345  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   346  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   347   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   348  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   349  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   350      IfxEray_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   351      IfxEray_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   352      IfxEray_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   353  } IfxEray_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   354  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   355  /** \brief Transmission mode of Header, defined in MODULE_ERAY0.WRHS1.B.TXM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   356   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   358  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   359      IfxEray_TransmissionMode_continuous = 0,  /**< \brief continuos transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   360      IfxEray_TransmissionMode_singleShot = 1   /**< \brief single transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   361  } IfxEray_TransmissionMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   362  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   363  /** \brief Initial transmission mode, defined in MODULE_ERAY0.SUCC1.B.TSM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   364   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   365  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   366  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   367      IfxEray_TransmissionSlotMode_all    = 0, /**< \brief transmission in all slots. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   368      IfxEray_TransmissionSlotMode_single = 1  /**< \brief transmission in key slot. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   369  } IfxEray_TransmissionSlotMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   370  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   371  /** \brief Wakeup pattern carry channel, defined in MODULE_ERAY0.SUCC1.B.WUCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   372   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   373  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   374  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   375      IfxEray_WakeupChannel_a = 0,  /**< \brief send wakeup channel pattern on channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   376      IfxEray_WakeupChannel_b = 1   /**< \brief send wakeup channel pattern on channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   377  } IfxEray_WakeupChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   378  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   379  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   380  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   381  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   382  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   383  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   384  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   385  /** \addtogroup IfxLld_Eray_Std_Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   386   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   387  /** \brief Header section in  a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   388   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   389  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   390  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   391      uint16                   frameId;                         /**< \brief slot ID of the selected Message Buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   392      uint8                    cycleCode;                       /**< \brief the cycle set used for cycle counter filtering. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   393      boolean                  channelAFiltered;                /**< \brief channel A serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   394      boolean                  channelBFiltered;                /**< \brief channel B serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   395      IfxEray_BufferDirection  bufferDirection;                 /**< \brief selects buffer as a transmit buffer or as a receive buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   396      boolean                  transmitPayloadIndicatior;       /**< \brief weather payload indicator is set or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   397      IfxEray_TransmissionMode transmissionMode;                /**< \brief transmission mode of Header. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   398      boolean                  bufferServiceEnabled;            /**< \brief wether buffer service request is enabled or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   399      uint8                    payloadLength;                   /**< \brief length of data section. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   400      uint16                   dataPointer;                     /**< \brief pointer to the data section of message buffer in RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   401      boolean                  startupFrameIndicator;           /**< \brief whether startup frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   402      boolean                  syncFrameIndicator;              /**< \brief whether sync frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   403  } IfxEray_Header;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   404  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   405  /** \brief Received header in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   406   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   407  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   408  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   409      uint16 frameId : 11;                     /**< \brief received frame id. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   410      uint8  payloadLength : 7;                /**< \brief received payload length. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   411      uint16 headerCrc : 11;                   /**< \brief received header crc. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   412      uint8  nullFrameIndicator : 1;           /**< \brief 0 : no data frame received; 1: atleast one data frame received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   413      uint8  syncFrame : 1;                    /**< \brief 0 : received frame is not a synch frame ; 1 : receive frame is a synch frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   414      uint8  startupFrame : 1;                 /**< \brief 0 : received frame is not a startup frame ; 1 : receive frame is a startup frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   415      uint8  cycleNumber : 7;                  /**< \brief cycle number in which frame is received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   416      uint8  payloadPreambleIndicator : 1;     /**< \brief 1 : received payload segment has network management and message id or not; 0 : It hasn't. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   417  } IfxEray_ReceivedHeader;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   418  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   419  /** \brief Transmit control structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   420   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   421  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   422  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   423      boolean headerTransfered;        /**< \brief whether header is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   424      boolean dataTransfered;          /**< \brief whether data is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   425      boolean transferRequested;       /**< \brief transmit buffer released for transmission or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   426      uint8   bufferIndex;             /**< \brief buffer index in the Message RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   427  } IfxEray_SlotConfig;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   428  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   429  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   430  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   431  /** \addtogroup IfxLld_Eray_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   432   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   433  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   434  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   435  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   436  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   437  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   438  /** \brief Clears the error flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   439   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   440   * \param errorFlag error flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   442   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   443  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   444  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   445  /** \brief Clears the status flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   446   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   447   * \param statusFlag status flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   449   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   450  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   451  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   452  /** \brief Gets the error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   453   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   454   * \return error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   455   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   456  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   457  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   458  /** \brief Gets the IBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   459   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   460   * \return address of IBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   461   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   462  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   463  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   464  /** \brief Gets the INT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   465   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   466   * \return address of INT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   467   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   468  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   469  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   470  /** \brief Gets the INT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   471   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   472   * \return address of INT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   473   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   474  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   475  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   476  /** \brief Gets the message buffers interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   477   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   478   * \param messageBuffer message buffer to which interrupt status be checked.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   479   * \return message buffer interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   480   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   481  IFX_INLINE boolean IfxEray_getMessageBufferInterruptStatus(Ifx_ERAY *eray, uint8 messageBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   482  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   483  /** \brief Gets the MBSC0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   484   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   485   * \return address of MBSC0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   486   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   487  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   488  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   489  /** \brief Gets the MBSC1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   490   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   491   * \return address of MBSC1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   492   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   493  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   494  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   495  /** \brief Gets the NDAT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   496   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   497   * \return address of NDAT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   498   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   499  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   500  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   501  /** \brief Gets the NDAT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   502   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   503   * \return address of NDAT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   504   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   505  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   506  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   507  /** \brief Gets the new data interrupt buffers status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   508   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   509   * \param ndat message buffer number configured to which ndat occurs.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   510   * \return ndat interrupt buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   511   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   512  IFX_INLINE boolean IfxEray_getNewDataInterruptStatus(Ifx_ERAY *eray, uint8 ndat);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   513  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   514  /** \brief Gets the OBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   515   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   516   * \return address of OBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   517   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   518  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getOutputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   519  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   520  /** \brief Gets the status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   521   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   522   * \return status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   523   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   524  IFX_INLINE Ifx_ERAY_SIR IfxEray_getStatusInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   525  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   526  /** \brief Gets the TINT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   527   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   528   * \return address of TINT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   529   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   531  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   532  /** \brief Gets the TINT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   533   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   534   * \return address of TINT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   535   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   536  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   537  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   538  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   539  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   540  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   541  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   542  /** \brief Clears all the error flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   543   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   544   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   545   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   546  IFX_EXTERN void IfxEray_clearAllFlags(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   547  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   548  /** \brief Enables all the Interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   549   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   550   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   551   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   552  IFX_EXTERN void IfxEray_enableInterruptLines(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   553  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   554  /** \brief Selects between MBSC0 and MBSC1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   555   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   556   * \param messageBuffer message buffer interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   557   * \param messageBufferDestination selects MBSC0 or MBSC1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   558   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   559   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   560  IFX_EXTERN void IfxEray_setMessageBufferInterruptDestination(Ifx_ERAY *eray, uint8 messageBuffer, uint8 messageBufferDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   561  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   562  /** \brief Selects between NDAT0 and NDAT1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   563   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   564   * \param ndat NDAT interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   565   * \param ndatDestination selects NDAT0 or NDAT1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   567   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   568  IFX_EXTERN void IfxEray_setNewDataInterruptDestination(Ifx_ERAY *eray, uint8 ndat, uint8 ndatDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   569  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   571  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   572  /** \addtogroup IfxLld_Eray_Std_IO
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   574  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   578  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   579  /** \brief Initialises a RX pin.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   580   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   581   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   583   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   584  IFX_INLINE void IfxEray_initRxPin(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   585  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   586  /** \brief Initializes a TX Enable output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   587   * \param txEn the TX Enable Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   588   * \param txEnMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   589   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   591   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   592  IFX_INLINE void IfxEray_initTxEnPin(const IfxEray_Txen_Out *txEn, IfxPort_OutputMode txEnMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   593  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   594  /** \brief Initializes a TX output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   595   * \param tx the TX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   596   * \param txMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   597   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   599   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   600  IFX_INLINE void IfxEray_initTxPin(const IfxEray_Txd_Out *tx, IfxPort_OutputMode txMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   601  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   602  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   603  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   604  /** \addtogroup IfxLld_Eray_Std_Module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   605   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   606  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   607  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   608  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   609  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   610  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   611  /** \brief Disables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   612   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   613   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   614   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   615  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   616  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   617  /** \brief Enables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   618   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   619   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   620   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   621  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   622  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   623  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   624   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   625   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   626   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   627   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   628   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   629  IFX_INLINE boolean IfxEray_isModuleSuspended(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   630  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   631  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   632   * \param eray pointer to ERAY registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   633   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   635   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   636  IFX_INLINE void IfxEray_setSleepMode(Ifx_ERAY *eray, IfxEray_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   637  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   638  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   639  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   640  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   641  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   642  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   643   * \param eray Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   644   * \return ERAY module register address
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   645   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   646  IFX_EXTERN Ifx_ERAY *IfxEray_getAddress(IfxEray_Index eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   647  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   648  /** \brief API to get the resource index of the ERAY specified.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   649   * \param eray Pointer to the ERAY HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   650   * \return Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   651   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   652  IFX_EXTERN IfxEray_Index IfxEray_getIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   653  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   654  /** \brief Resets the ERAY kernel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   655   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   657   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   658  IFX_EXTERN void IfxEray_resetModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   659  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   660  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   661  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   662  /** \addtogroup IfxLld_Eray_Std_Status
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   663   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   664  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   665  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   666  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   668  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   669  /** \brief Gets the FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   670   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   671   * \return FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   672   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   673  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   674  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   675  /** \brief Gets the Input Buffer Host Busy status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   676   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   677   * \return TRUE if Host is Busy otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   678   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   679  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   680  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   681  /** \brief Gets the Input Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   682   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   683   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   684   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   685  IFX_INLINE uint8 IfxEray_getInputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   686  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   687  /** \brief Gets the output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   688   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   689   * \return output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   690   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   691  IFX_INLINE uint8 IfxEray_getOutputBuffer(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   692  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   693  /** \brief Gets the Output Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   694   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   695   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   696   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   697  IFX_INLINE boolean IfxEray_getOutputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   698  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   699  /** \brief Gets the current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   700   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   701   * \return current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   702   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   703  IFX_INLINE IfxEray_PocState IfxEray_getPocState(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   704  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   705  /** \brief Gets the received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   706   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   707   * \return received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   708   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   709  IFX_INLINE IfxEray_WakeupChannel IfxEray_getWakeupPatternReceivedChannel(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   710  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   711  /** \brief Waits until the controller enters required POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   712   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   713   * \param pocState POC state upto which controller waits.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   714   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   715   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   716  IFX_INLINE void IfxEray_waitForPocState(Ifx_ERAY *eray, IfxEray_PocState pocState);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   717  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   718  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   719  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   720  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   721  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   722  /** \brief Changes the Commmunication Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   723   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   724   * \param pocCommand POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   725   * \return TRUE if command accepted otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   726   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   727  IFX_EXTERN boolean IfxEray_changePocState(Ifx_ERAY *eray, IfxEray_PocCommand pocCommand);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   728  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   729  /** \brief Sets the POC state to Ready state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   730   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   732   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   733  IFX_EXTERN void IfxEray_setPocReady(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   734  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   735  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   736  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   737  /** \addtogroup IfxLld_Eray_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   738   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   739  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   742  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   743  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   744  /** \brief request to receive header section from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   745   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   746   * \param headerReceived whether header is received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   748   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   749  IFX_INLINE void IfxEray_receiveHeader(Ifx_ERAY *eray, boolean headerReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   750  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   751  /** \brief sets the bit to send header in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   752   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   753   * \param headerTransfered whether header transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   754   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   755   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   756  IFX_INLINE void IfxEray_sendHeader(Ifx_ERAY *eray, boolean headerTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   757  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   758  /** \brief Sets number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   759   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   760   * \param numberOfCyclePairsForActive number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   761   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   762   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   763  IFX_INLINE void IfxEray_setActiveCyclePairs(Ifx_ERAY *eray, uint8 numberOfCyclePairsForActive);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   764  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   765  /** \brief Sets auto delays between input, output buffers and message RAM
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   766   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   767   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   768   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   769  IFX_INLINE void IfxEray_setAutoDelayBuffers(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   770  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   771  /** \brief Sets baudrate on Flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   772   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   773   * \param baudrate baudrate on flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   774   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   775   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   776  IFX_INLINE void IfxEray_setBaudrate(Ifx_ERAY *eray, IfxEray_Baudrate baudrate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   777  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   778  /** \brief Sets secured buffers in message RAM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   779   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   780   * \param secureValue secure value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   782   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   783  IFX_INLINE void IfxEray_setBufferReconfigSecure(Ifx_ERAY *eray, uint8 secureValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   784  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   785  /** \brief Sets channel A initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   786   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   787   * \param channelAMicrotickInitialOffset difference between reference points on channel A in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   788   * \param channelAMacrotickInitialOffset difference between reference points on channel A in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   789   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   790   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   791  IFX_INLINE void IfxEray_setChannelAInitialOffsets(Ifx_ERAY *eray, uint8 channelAMicrotickInitialOffset, uint8 channelAMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   792  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   793  /** \brief Sets channel B initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   794   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   795   * \param channelBMicrotickInitialOffset difference between reference points on channel B in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   796   * \param channelBMacrotickInitialOffset difference between reference points on channel B in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   798   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   799  IFX_INLINE void IfxEray_setChannelBInitialOffsets(Ifx_ERAY *eray, uint8 channelBMicrotickInitialOffset, uint8 channelBMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   800  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   801  /** \brief Sets receive delays on channels.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   802   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   803   * \param channelAReceptionDelay reception delay on channel A.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   804   * \param channelBReceptionDelay reception delay on channel B.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   805   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   806   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   807  IFX_INLINE void IfxEray_setChannelsReceiveDelay(Ifx_ERAY *eray, uint8 channelAReceptionDelay, uint8 channelBReceptionDelay);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   808  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   809  /** \brief Sets clock correction cycles for Passive and Halt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   810   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   811   * \param clockCorrectionCyclesPassive maximum number of cycles missing clock correction leading for passive state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   812   * \param clockCorrectionCyclesHalt maximum number of cycles missing clock correction leading for halt state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   813   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   814   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   815  IFX_INLINE void IfxEray_setClockCorrectionCycles(Ifx_ERAY *eray, uint8 clockCorrectionCyclesPassive, uint8 clockCorrectionCyclesHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   816  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   817  /** \brief lead to halt state in clock synch error.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   818   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   819   * \param clockSyncErrorHalt whether to enter halt in clock synch error or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   821   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   822  IFX_INLINE void IfxEray_setClockSynchErrorHalt(Ifx_ERAY *eray, boolean clockSyncErrorHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   823  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   824  /** \brief Sets cluster drift values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   825   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   826   * \param clusterDrift cluster drift damping value used in clock synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   827   * \param maxDriftOffset maximum drift offset between two nodes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   828   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   829   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   830  IFX_INLINE void IfxEray_setClusterDriftValues(Ifx_ERAY *eray, uint8 clusterDrift, uint16 maxDriftOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   831  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   832  /** \brief Sets cluster startup deviation.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   833   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   834   * \param acceptedStartupDeviation deviation for startup Frames during integration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   835   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   836   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   837  IFX_INLINE void IfxEray_setClusterStartupDeviation(Ifx_ERAY *eray, uint16 acceptedStartupDeviation);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   838  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   839  /** \brief Sets CAS symbol window duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   840   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   841   * \param collisionAvoidanceDuration accepted duration of CAS symbol.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   842   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   843   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   844  IFX_INLINE void IfxEray_setCollisionAvoidanceDuration(Ifx_ERAY *eray, uint8 collisionAvoidanceDuration);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   845  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   846  /** \brief sets duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   847   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   848   * \param macroticks duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   849   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   850   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   851  IFX_INLINE void IfxEray_setCycleDurationMacroticks(Ifx_ERAY *eray, uint16 macroticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   852  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   853  /** \brief sets duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   854   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   855   * \param microticks duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   856   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   857   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   858  IFX_INLINE void IfxEray_setCycleDurationMicroticks(Ifx_ERAY *eray, uint32 microticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   859  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   860  /** \brief Sets decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   861   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   862   * \param decodingCorrection decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   863   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   864   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   865  IFX_INLINE void IfxEray_setDecodingCorrectionValue(Ifx_ERAY *eray, uint8 decodingCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   866  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   867  /** \brief Sets dynamic slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   868   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   869   * \param dynamicSlotLength duration of dynamic slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   870   * \param dynamicSlotCount number of dynamic slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   871   * \param idleDynamicSlots duration of dynamic slot idle phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   872   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   873   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   874  IFX_INLINE void IfxEray_setDynamicSlots(Ifx_ERAY *eray, uint8 dynamicSlotLength, uint16 dynamicSlotCount, IfxEray_IdleDynamicSlots idleDynamicSlots);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   875  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   876  /** \brief Sets external correction controls.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   877   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   878   * \param externalOffset External offset correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   879   * \param externalRate External rate correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   880   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   881   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   882  IFX_INLINE void IfxEray_setExternalCorrectionControl(Ifx_ERAY *eray, IfxEray_ExternalOffset externalOffset, IfxEray_ExternalRate externalRate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   883  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   884  /** \brief Sets external correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   885   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   886   * \param externalOffsetCorrection external clock offset correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   887   * \param externalRateCorrection external clock rate correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   888   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   889   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   890  IFX_INLINE void IfxEray_setExternalCorrectionValues(Ifx_ERAY *eray, IfxEray_ExternalOffsetCorrection externalOffsetCorrection, IfxEray_ExternalRateCorrection externalRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   891  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   892  /** \brief Sets FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   893   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   894   * \param fifoBufferStartIndex FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   895   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   896   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   897  IFX_INLINE void IfxEray_setFifoBufferStartIndex(Ifx_ERAY *eray, uint8 fifoBufferStartIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   898  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   899  /** \brief Sets FIFO filter configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   900   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   901   * \param rejectedFrameId rejected frameId by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   902   * \param filteredCycleNumber filtered cycle number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   903   * \param fifoNullFramesRejected null frames rejection selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   904   * \param frameIdFilter filtered frameid by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   905   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   906   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   907  IFX_INLINE void IfxEray_setFifoFilterConfigurations(Ifx_ERAY *eray, uint16 rejectedFrameId, uint8 filteredCycleNumber, boolean fifoNullFramesRejected, uint16 frameIdFilter);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   908  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   909  /** \brief Sets FIFO configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   910   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   911   * \param receiveChannel FIFO receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   912   * \param staticFifoDisabled static FIFO selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   913   * \param fifoDepth FIFO depth.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   914   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   915   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   916  IFX_INLINE void IfxEray_setFifoMessageBufferConfigurations(Ifx_ERAY *eray, IfxEray_ReceiveChannel receiveChannel, boolean staticFifoDisabled, uint8 fifoDepth);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   917  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   918  /** \brief Sets first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   919   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   920   * \param firstDynamicBuffer first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   921   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   922   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   923  IFX_INLINE void IfxEray_setFirstDynamicBuffer(Ifx_ERAY *eray, uint8 firstDynamicBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   924  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   925  /** \brief Sets startup or wakeup listen timeouts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   926   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   927   * \param listenTimeOut wakeup or startup listen timeout in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   928   * \param listenTimeOutNoise upper limit for startup or wakeup listen timeout in presence of noise.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   929   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   930   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   931  IFX_INLINE void IfxEray_setListenTimeOuts(Ifx_ERAY *eray, uint32 listenTimeOut, IfxEray_ListenTimeOutNoise listenTimeOutNoise);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   932  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   933  /** \brief Sets the maximum cold start attempts for active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   934   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   935   * \param maxColdStartAttempts maximum number of attempts that a cold start node allows.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   936   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   937   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   938  IFX_INLINE void IfxEray_setMaxColdStartAttempts(Ifx_ERAY *eray, uint8 maxColdStartAttempts);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   939  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   940  /** \brief Sets max limit correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   941   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   942   * \param maxOffsetCorrection maximum offset correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   943   * \param maxRateCorrection maximum rate correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   945   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   946  IFX_INLINE void IfxEray_setMaxCorrectionValues(Ifx_ERAY *eray, uint16 maxOffsetCorrection, uint16 maxRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   947  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   948  /** \brief Sets maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   949   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   950   * \param maxSyncFrames maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   952   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   953  IFX_INLINE void IfxEray_setMaxSynchFrames(Ifx_ERAY *eray, IfxEray_MaxSynchFrames maxSyncFrames);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   954  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   955  /** \brief Sets number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   956   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   957   * \param numberOfMessageBuffers number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   959   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   960  IFX_INLINE void IfxEray_setMessageBufferCount(Ifx_ERAY *eray, uint8 numberOfMessageBuffers);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   961  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   962  /** \brief Sets Message Handler configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   963   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   964   * \param staticFramepayload payload length of static frames in double bytes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   965   * \param latestTransmissionStart dynamic slots befor transmission of inhibit frame in dynamic segment.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   966   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   967   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   968  IFX_INLINE void IfxEray_setMessageHandlerConfigurations(Ifx_ERAY *eray, uint8 staticFramepayload, uint8 latestTransmissionStart);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   969  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   970  /** \brief Sets network start Idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   971   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   972   * \param networkStartIdleTime starting point of Network Idle Time Phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   973   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   974   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   975  IFX_INLINE void IfxEray_setNetworkStartIdleTime(Ifx_ERAY *eray, uint16 networkStartIdleTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   976  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   977  /** \brief Sets network management vector length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   978   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   979   * \param networkVectorLength length of network management vector.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   980   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   981   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   982  IFX_INLINE void IfxEray_setNetworkVectorLength(Ifx_ERAY *eray, uint32 networkVectorLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   983  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   984  /** \brief Sets channels connected to node.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   985   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   986   * \param channelAConnectedNode whether node connected to channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   987   * \param channelBConnectedNode whether node connected to channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   988   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   989   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   990  IFX_INLINE void IfxEray_setNodeChannels(Ifx_ERAY *eray, boolean channelAConnectedNode, boolean channelBConnectedNode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   991  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   992  /** \brief Sets offset correction starting point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   993   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   994   * \param correctionOffset offset correction start point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   995   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   996   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   997  IFX_INLINE void IfxEray_setOffsetCorrection(Ifx_ERAY *eray, uint16 correctionOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   998  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   999  /** \brief requests to receive the frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1000   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1001   * \param receiveRequested whether frame to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1002   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1003   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1004  IFX_INLINE void IfxEray_setReceiveRequest(Ifx_ERAY *eray, boolean receiveRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1005  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1006  /** \brief Sets receive wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1007   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1008   * \param receiveWakeupTestDuration duration of receive wakeup pattern.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1009   * \param receiveWakeupIdleTime duration of receive wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1010   * \param receiveWakeupLowTime duration of receive wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1013  IFX_INLINE void IfxEray_setReceiveWakeupTimes(Ifx_ERAY *eray, uint16 receiveWakeupTestDuration, uint8 receiveWakeupIdleTime, uint8 receiveWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1014  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1015  /** \brief sets buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1016   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1017   * \param bufferIndex buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1020  IFX_INLINE void IfxEray_setRxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1021  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1022  /** \brief Sets slots action points.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1023   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1024   * \param staticActionPoint static slots and symbol window action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1025   * \param dynamicActionPoint dynamic slots action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1026   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1028  IFX_INLINE void IfxEray_setSlotActionPoints(Ifx_ERAY *eray, uint8 staticActionPoint, uint8 dynamicActionPoint);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1029  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1030  /** \brief Sets static slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1031   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1032   * \param staticSlotLength duration of static slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1033   * \param staticSlotsCount number of static slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1034   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1035   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1036  IFX_INLINE void IfxEray_setStaticSlots(Ifx_ERAY *eray, uint16 staticSlotLength, uint16 staticSlotsCount);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1037  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1038  /** \brief Sets sample point for strobing.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1039   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1040   * \param strobePosition strobing sample count.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1041   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1043  IFX_INLINE void IfxEray_setStrobePosition(Ifx_ERAY *eray, IfxEray_StrobePosition strobePosition);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1044  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1045  /** \brief Sets channels which transmits symbols.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1046   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1047   * \param channelASymbolTransmitted whether symbol is transmitted in Channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1048   * \param channelBSymbolTransmitted whether symbol is transmitted in Channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1049   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1050   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1051  IFX_INLINE void IfxEray_setSymbolChannels(Ifx_ERAY *eray, boolean channelASymbolTransmitted, boolean channelBSymbolTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1052  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1053  /** \brief Sets the transmit slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1054   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1055   * \param transmissionSlotMode transmission slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1058  IFX_INLINE void IfxEray_setTransmissionSlotMode(Ifx_ERAY *eray, IfxEray_TransmissionSlotMode transmissionSlotMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1059  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1060  /** \brief Sets transmission start time duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1061   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1062   * \param transmissionStartTime transmission start time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1065  IFX_INLINE void IfxEray_setTransmissionStartTime(Ifx_ERAY *eray, uint8 transmissionStartTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1066  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1067  /** \brief Sets transfer request to send frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1068   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1069   * \param transferRequested whether transfer requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1072  IFX_INLINE void IfxEray_setTransmitRequest(Ifx_ERAY *eray, boolean transferRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1073  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1074  /** \brief Sets transmit wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1075   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1076   * \param transmitWakeupRepetitions transmission wakeup repetitions.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1077   * \param transmitWakeupIdleTime duration of transmit wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1078   * \param transmitWakeupLowTime duration of transmit wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1079   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1081  IFX_INLINE void IfxEray_setTransmitWakeupTimes(Ifx_ERAY *eray, uint8 transmitWakeupRepetitions, uint8 transmitWakeupIdleTime, uint8 transmitWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1082  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1083  /** \brief Configures transmitted frames for startup and synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1084   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1085   * \param startupFrameTransmitted whether startup Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1086   * \param synchFrameTransmitted whether synch Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1087   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1089  IFX_INLINE void IfxEray_setTransmittedFrames(Ifx_ERAY *eray, boolean startupFrameTransmitted, boolean synchFrameTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1090  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1091  /** \brief Sets the transmit buffer number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1092   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1093   * \param bufferIndex buffer number in which frame is sent.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1094   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1095   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1096  IFX_INLINE void IfxEray_setTxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1097  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1098  /** \brief Swaps the shadow and Host output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1099   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1100   * \param swapRequested whether swap is requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1101   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1102   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1103  IFX_INLINE void IfxEray_setViewData(Ifx_ERAY *eray, boolean swapRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1104  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1105  /** \brief Sets the cluster wakeup channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1106   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1107   * \param wakeupPatternChannel cluster wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1108   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1109   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1110  IFX_INLINE void IfxEray_setWakeupPatternChannel(Ifx_ERAY *eray, IfxEray_WakeupChannel wakeupPatternChannel);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1111  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1112  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1113  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1114  /** \addtogroup IfxLld_Eray_Std_Operative
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1115   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1116  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1117  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1118  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1119  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1120  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1121  /** \brief requests to receive data from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1122   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1123   * \param dataReceived whether data to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1126  IFX_INLINE void IfxEray_receiveData(Ifx_ERAY *eray, boolean dataReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1127  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1128  /** \brief sets the bit to send data in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1129   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1130   * \param dataTransfered whether data transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1133  IFX_INLINE void IfxEray_sendData(Ifx_ERAY *eray, boolean dataTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1134  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1135  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1136  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1138  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1139  /** \brief Calculate and returns the CRC for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1140   * \param payloadLength payload length configured for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1141   * \param frameId slot id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1142   * \param startupFrameIndicator whether startup frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1143   * \param syncFrameIndicator whether sync frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1144   * \return calculated CRC value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1145   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1146  IFX_EXTERN uint16 IfxEray_calcHeaderCrc(uint8 payloadLength, uint16 frameId, boolean startupFrameIndicator, boolean syncFrameIndicator);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1147  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1148  /** \brief Reads the received data from output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1149   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1150   * \param data pointer to received data buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1151   * \param payloadLength payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1154  IFX_EXTERN void IfxEray_readData(Ifx_ERAY *eray, uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1155  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1156  /** \brief Reads header and data from output buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1157   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1158   * \param header header received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1159   * \param data data received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1160   * \param maxPayloadLength maximum payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1161   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1162   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1163  IFX_EXTERN void IfxEray_readFrame(Ifx_ERAY *eray, IfxEray_ReceivedHeader *header, uint32 *data, Ifx_SizeT maxPayloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1164  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1165  /** \brief Writes header and data to Input buffers and set the slots.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1166   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1167   * \param header Header section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1168   * \param data data section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1169   * \param slotConfig pointer slot allocation configuration structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1172  IFX_EXTERN void IfxEray_setSlot(Ifx_ERAY *eray, const IfxEray_Header *header, const uint32 *data, const IfxEray_SlotConfig *slotConfig);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1173  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1174  /** \brief Writes data section of a frame to input data registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1175   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1176   * \param data data segment in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1177   * \param payloadLength payload length configured for slot buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1178   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1179   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1180  IFX_EXTERN void IfxEray_writeData(Ifx_ERAY *eray, const uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1181  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1182  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1183  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1184  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1185  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1187  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1188  /** \brief Gets the FIFO index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1189   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1190   * \return FIFO buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1191   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1192  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1193  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1194  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1195   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1196   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1197   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1200  IFX_INLINE void IfxEray_setSuspendMode(Ifx_ERAY *eray, IfxEray_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1201  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1202  /** \brief Provides functionality for both setting of pin direction as input and configuring pad driver.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1203   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1204   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1205   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1206   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1207   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1208  IFX_INLINE void IfxEray_initRxPinWithPadLevel(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1209  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1210  /** \brief Provides functionality to select the receiver channel input
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1211   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1212   * \param nodeId ERAY node id.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1213   * \param select receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1214   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1215   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1216  IFX_INLINE void IfxEray_selectRecieveInput(Ifx_ERAY *eray, IfxEray_NodeId nodeId, Ifx_RxSel select);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1217  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1218  /** \brief Provides functionality to provide the command to change the transmit mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1219   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1220   * \param cmd POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1221   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1223  IFX_INLINE void IfxEray_setPocCommand(Ifx_ERAY *eray, IfxEray_PocCommand cmd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1224  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1225  /** \brief Provides functionality to find out that any CHI command is being executed or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1226   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1227   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1228   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1229  IFX_INLINE boolean IfxEray_isRamsCleared(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1230  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1231  /** \brief Provides functionality to check whether POC is busy or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1232   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1233   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1235  IFX_INLINE boolean IfxEray_isPocBusy(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1236  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1237  /** \brief Provides functionality to enble the interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1238   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1239   * \param intLine interrupt line.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1242  IFX_INLINE void IfxEray_enableInterruptLine(Ifx_ERAY *eray, IfxEray_InterruptLine intLine);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1243  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1244  /** \brief Provides functionality to enable the transmit interrupt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1245   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1248  IFX_INLINE void IfxEray_enableTransmitInterrupt(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1250  /** \brief Provides functionality to enable all the error iterrupts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1251   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1252   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1253   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1254  IFX_INLINE void IfxEray_enableAllErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1255  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1256  /** \brief Provides functionality to enable the test mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1257   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1258   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1259   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1260  IFX_INLINE void IfxEray_unlockTestModeKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1261  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1262  /** \brief Provides functionality to enable write to the test mode registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1263   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1266  IFX_INLINE void IfxEray_enableWriteTestRegister(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1267  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1268  /** \brief Provides functionality to enable the external loopback.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1269   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1270   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1272  IFX_INLINE void IfxEray_enableExternalLoopback(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1273  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1274  /** \brief Provides functionality to unlock the test mode configuration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1275   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1276   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1277   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1278  IFX_INLINE void IfxEray_unlockConfigurationKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1279  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1280  /** \brief Provides functionality to configure SUC configuration registers 1.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1281   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1282   * \param configValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1283   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1284   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1285  IFX_INLINE void IfxEray_configureSuc1Register(Ifx_ERAY *eray, uint32 configValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1286  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1287  /** \brief Provides functionality to configure MTCCV register.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1288   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1289   * \param tickValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1290   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1291   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1292  IFX_INLINE void IfxEray_setMacroTickValue(Ifx_ERAY *eray, uint32 tickValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1293  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1294  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1295  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1296  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1297  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1298  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1299  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1300      eray->EIR.U = errorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1301  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1302  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1303  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1304  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1305  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1306      eray->SIR.U = statusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1307  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1308  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1309  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1310  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1311  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1312      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1313      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1314      //disable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1315      eray->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1316      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1317  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1318  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1319  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1320  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1322      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1323      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1324      // Run Mode Clock divider to 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1325      //enable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1326      eray->CLC.U = 0x00000100;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1328      // ensure that write access finished before leaving this function
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1329      if (eray->CLC.U)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1330      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1331  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1332      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1333  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1334  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1335  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1336  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1337  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1338      Ifx_ERAY_EIR interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1339      interruptFlags.U = eray->EIR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1340      return interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1341  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1342  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1343  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1344  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1345  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1346      return eray->MRC.B.FFB;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1347  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1348  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1349  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1350  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1351  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1352      Ifx_ERAY_FSR fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1353      fifoStatus.U = eray->FSR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1354      return fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1355  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1356  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1357  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1358  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1359  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1360      return (eray->IBCR.B.IBSYH == 1) ? TRUE : FALSE;
	lea	a15,[a12]1301

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   341      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   342  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   343      while (IfxEray_getInputBufferBusyHostStatus(eray) == TRUE)
.L27:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     2   * \file IfxEray.h
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     3   * \brief ERAY  basic functionality
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     4   * \ingroup IfxLld_Eray
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     5   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     8   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	     9   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    11   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    16   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    18   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    25   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    32   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    40   *
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    41   * \defgroup IfxLld_Eray_Std_Enumerations Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    42   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    43   * \defgroup IfxLld_Eray_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    44   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    45   * \defgroup IfxLld_Eray_Std_IO IO Pin Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    46   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    47   * \defgroup IfxLld_Eray_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    48   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    49   * \defgroup IfxLld_Eray_Std_Status Status Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    50   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    51   * \defgroup IfxLld_Eray_Std_Configuration Configuration Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    52   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    53   * \defgroup IfxLld_Eray_Std_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    54   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    55   * \defgroup IfxLld_Eray_Std_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    56   * \ingroup IfxLld_Eray_Std
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    57   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    58  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    59  #ifndef IFXERAY_H
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    60  #define IFXERAY_H 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    61  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    62  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    65  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    66  #include "_Impl/IfxEray_cfg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    67  #include "_PinMap/IfxEray_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    68  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    69  #include "IfxEray_reg.h"
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    70  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    71  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    72  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    73  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    74  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    75  /** \addtogroup IfxLld_Eray_Std_Enumerations
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    76   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    77  /** \brief Baudrate on the flexray bus, defined in MODULE_ERAY0.PRTC1.B.BRP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    78   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    79  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    80  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    81      IfxEray_Baudrate_10  = 0, /**< \brief baudrate is 10MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    82      IfxEray_Baudrate_5   = 1, /**< \brief baudrate is 5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    83      IfxEray_Baudrate_2_5 = 2  /**< \brief baudrate is 2.5MBits/Sec */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    84  } IfxEray_Baudrate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    85  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    86  /** \brief wheather transmit buffer or receive buffer, defined in MODULE_ERAY0.WRHS1.B.CFG.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    87   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    88  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    89  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    90      IfxEray_BufferDirection_receive  = 0, /**< \brief buffer is configured as receive buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    91      IfxEray_BufferDirection_transmit = 1  /**< \brief buffer is configured as transmit buffer */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    92  } IfxEray_BufferDirection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    93  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    94  /** \brief Channel Id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    95   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    96  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    97  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    98      IfxEray_Channel_a = 0,  /**< \brief channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	    99      IfxEray_Channel_b = 1   /**< \brief channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   100  } IfxEray_Channel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   101  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   102  /** \brief Selection of error flag to clear defined in MODULE_ERAY.EIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   103   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   104  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   105  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   106      IfxEray_ClearErrorFlag_pemc = 1,         /**< \brief POC error mode change bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   107      IfxEray_ClearErrorFlag_cna  = 2,         /**< \brief command not accepted event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   108      IfxEray_ClearErrorFlag_sfbm = 4,         /**< \brief sync frame below minimum bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   109      IfxEray_ClearErrorFlag_sfo  = 8,         /**< \brief sync frame overflow event bit */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   110      IfxEray_ClearErrorFlag_ccf  = 16,        /**< \brief clock correction failure event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   111      IfxEray_ClearErrorFlag_ccl  = 32,        /**< \brief CHI command locked event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   112      IfxEray_ClearErrorFlag_eerr = 64,        /**< \brief ECC error event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   113      IfxEray_ClearErrorFlag_rfo  = 128,       /**< \brief RxFIFO overrun event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   114      IfxEray_ClearErrorFlag_efa  = 256,       /**< \brief empty FIFO access event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   115      IfxEray_ClearErrorFlag_iiba = 512,       /**< \brief illegal input buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   116      IfxEray_ClearErrorFlag_ioba = 1024,      /**< \brief illegal output buffer access event. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   117      IfxEray_ClearErrorFlag_mhf  = 2048,      /**< \brief message handler constraint flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   118      IfxEray_ClearErrorFlag_eda  = 65536,     /**< \brief error event on channel A. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   119      IfxEray_ClearErrorFlag_ltva = 131072,    /**< \brief latest transmit violation flag on channel A . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   120      IfxEray_ClearErrorFlag_taba = 262144,    /**< \brief transmission across channel A boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   121      IfxEray_ClearErrorFlag_edb  = 16777216,  /**< \brief error event on channel B. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   122      IfxEray_ClearErrorFlag_ltvb = 33554432,  /**< \brief latest transmit violation flag on channel B . */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   123      IfxEray_ClearErrorFlag_tabb = 67108864   /**< \brief transmission across channel B boundary flag. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   124  } IfxEray_ClearErrorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   125  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   126  /** \brief Selection of status flag to clear defined in MODULE_ERAY.SIR.U
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   127   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   128  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   129  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   130      IfxEray_ClearStatusFlag_wst  = 1,         /**< \brief wakeup status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   131      IfxEray_ClearStatusFlag_cas  = 2,         /**< \brief collision avoidance bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   132      IfxEray_ClearStatusFlag_cycs = 4,         /**< \brief cycle start service bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   133      IfxEray_ClearStatusFlag_txi  = 8,         /**< \brief transmit service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   134      IfxEray_ClearStatusFlag_rxi  = 16,        /**< \brief receive service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   135      IfxEray_ClearStatusFlag_rfne = 32,        /**< \brief receive fifo not empty bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   136      IfxEray_ClearStatusFlag_rfcl = 64,        /**< \brief RxFIFO critical level reached bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   137      IfxEray_ClearStatusFlag_nmvc = 128,       /**< \brief network management vector bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   138      IfxEray_ClearStatusFlag_ti0  = 256,       /**< \brief timer0 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   139      IfxEray_ClearStatusFlag_ti1  = 512,       /**< \brief timer1 service request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   140      IfxEray_ClearStatusFlag_tibc = 1024,      /**< \brief transfer input buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   141      IfxEray_ClearStatusFlag_tobc = 2048,      /**< \brief transfer output buffer completion request bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   142      IfxEray_ClearStatusFlag_swe  = 4096,      /**< \brief stop watch event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   143      IfxEray_ClearStatusFlag_sucs = 8192,      /**< \brief startup success event bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   144      IfxEray_ClearStatusFlag_mbsi = 16384,     /**< \brief message buffer service status bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   145      IfxEray_ClearStatusFlag_sds  = 32768,     /**< \brief dynamic segment start bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   146      IfxEray_ClearStatusFlag_wupa = 65536,     /**< \brief wakeup pattern channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   147      IfxEray_ClearStatusFlag_mtsa = 131072,    /**< \brief MTS receive channel A bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   148      IfxEray_ClearStatusFlag_wupb = 16777216,  /**< \brief wakeup pattern channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   149      IfxEray_ClearStatusFlag_mtsb = 33554432   /**< \brief MTS receive channel B bit. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   150  } IfxEray_ClearStatusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   151  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   152  /** \brief Clock divider in RUN mode, defined in MODULE_ERAY0.B.RMC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   154  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   155  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   156      IfxEray_ClockDivider_none = 0,  /**< \brief no clock signal */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   157      IfxEray_ClockDivider_1    = 1,  /**< \brief run mode clock divider 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   158      IfxEray_ClockDivider_2,         /**< \brief run mode clock divider 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   159      IfxEray_ClockDivider_3,         /**< \brief run mode clock divider 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   160      IfxEray_ClockDivider_4,         /**< \brief run mode clock divider 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   161      IfxEray_ClockDivider_5,         /**< \brief run mode clock divider 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   162      IfxEray_ClockDivider_6,         /**< \brief run mode clock divider 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   163      IfxEray_ClockDivider_7          /**< \brief run mode clock divider 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   164  } IfxEray_ClockDivider;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   165  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   166  /** \brief External offset correction control defined in MODULE_ERAY0.GTU11.B.EOCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   167   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   169  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   170      IfxEray_ExternalOffset_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   171      IfxEray_ExternalOffset_correctionSubtracted = 2,  /**< \brief External offset correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   172      IfxEray_ExternalOffset_correctionAdded      = 3   /**< \brief External offset correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   173  } IfxEray_ExternalOffset;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   174  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   175  /** \brief External clock offset correction value defined in MODULE_ERAY0.GTU11.B.EOC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   176   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   177  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   178  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   179      IfxEray_ExternalOffsetCorrection_0 = 0,      /**< \brief external clock offset correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   180      IfxEray_ExternalOffsetCorrection_1,          /**< \brief external clock offset correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   181      IfxEray_ExternalOffsetCorrection_2,          /**< \brief external clock offset correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   182      IfxEray_ExternalOffsetCorrection_3,          /**< \brief external clock offset correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   183      IfxEray_ExternalOffsetCorrection_4,          /**< \brief external clock offset correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   184      IfxEray_ExternalOffsetCorrection_5,          /**< \brief external clock offset correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   185      IfxEray_ExternalOffsetCorrection_6,          /**< \brief external clock offset correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   186      IfxEray_ExternalOffsetCorrection_7           /**< \brief external clock offset correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   187  } IfxEray_ExternalOffsetCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   188  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   189  /** \brief External rate correction control MODULE_ERAY0.GTU11.B.ERCC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   190   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   191  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   192  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   193      IfxEray_ExternalRate_noCorrection         = 1,  /**< \brief No external correction control. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   194      IfxEray_ExternalRate_correctionSubtracted = 2,  /**< \brief External rate correction subtracted from calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   195      IfxEray_ExternalRate_correctionAdded      = 3   /**< \brief External rate correction added to calculated correction. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   196  } IfxEray_ExternalRate;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   197  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   198  /** \brief External clock rate correction value defined in MODULE_ERAY0.GTU11.B.ERC.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   200  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   201  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   202      IfxEray_ExternalRateCorrection_0 = 0,      /**< \brief external clock rate correction value 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   203      IfxEray_ExternalRateCorrection_1,          /**< \brief external clock rate correction value 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   204      IfxEray_ExternalRateCorrection_2,          /**< \brief external clock rate correction value 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   205      IfxEray_ExternalRateCorrection_3,          /**< \brief external clock rate correction value 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   206      IfxEray_ExternalRateCorrection_4,          /**< \brief external clock rate correction value 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   207      IfxEray_ExternalRateCorrection_5,          /**< \brief external clock rate correction value 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   208      IfxEray_ExternalRateCorrection_6,          /**< \brief external clock rate correction value 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   209      IfxEray_ExternalRateCorrection_7           /**< \brief external clock rate correction value 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   210  } IfxEray_ExternalRateCorrection;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   211  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   212  /** \brief Duration of dynamic slot idle phase, defined in MODULE_ERAY0.B.DSI.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   213   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   215  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   216      IfxEray_IdleDynamicSlots_0 = 0,      /**< \brief duration of dynamic slot idle phase is 0  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   217      IfxEray_IdleDynamicSlots_1,          /**< \brief duration of dynamic slot idle phase is 1  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   218      IfxEray_IdleDynamicSlots_2           /**< \brief duration of dynamic slot idle phase is 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   219  } IfxEray_IdleDynamicSlots;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   220  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   221  /** \brief Interrupt lines
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   223  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   224  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   225      IfxEray_InterruptLine_0 = 0,  /**< \brief line 0 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   226      IfxEray_InterruptLine_1 = 1   /**< \brief line 1 */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   227  } IfxEray_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   228  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   229  /** \brief Wakeup or Startup listen timeout in presence of noise, defined in MODULE_ERAY0.SUCC2.B.LTN.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   230   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   231  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   232  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   233      IfxEray_ListenTimeOutNoise_2 = 1,      /**< \brief listen Time-out noise 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   234      IfxEray_ListenTimeOutNoise_3,          /**< \brief listen Time-out noise 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   235      IfxEray_ListenTimeOutNoise_4,          /**< \brief listen Time-out noise 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   236      IfxEray_ListenTimeOutNoise_5,          /**< \brief listen Time-out noise 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   237      IfxEray_ListenTimeOutNoise_6,          /**< \brief listen Time-out noise 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   238      IfxEray_ListenTimeOutNoise_7,          /**< \brief listen Time-out noise 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   239      IfxEray_ListenTimeOutNoise_8,          /**< \brief listen Time-out noise 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   240      IfxEray_ListenTimeOutNoise_9,          /**< \brief listen Time-out noise 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   241      IfxEray_ListenTimeOutNoise_10,         /**< \brief listen Time-out noise 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   242      IfxEray_ListenTimeOutNoise_11,         /**< \brief listen Time-out noise 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   243      IfxEray_ListenTimeOutNoise_12,         /**< \brief listen Time-out noise 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   244      IfxEray_ListenTimeOutNoise_13,         /**< \brief listen Time-out noise 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   245      IfxEray_ListenTimeOutNoise_14,         /**< \brief listen Time-out noise 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   246      IfxEray_ListenTimeOutNoise_15,         /**< \brief listen Time-out noise 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   247      IfxEray_ListenTimeOutNoise_16          /**< \brief listen Time-out noise 16  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   248  } IfxEray_ListenTimeOutNoise;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   250  /** \brief Maximum number of sync frames in a cluster defined in MODULE_ERAY0.GTU02.B.SNM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   251   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   252  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   253  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   254      IfxEray_MaxSynchFrames_2 = 2,      /**< \brief Maximum number of sync frames in a cluster are 2  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   255      IfxEray_MaxSynchFrames_3,          /**< \brief Maximum number of sync frames in a cluster are 3  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   256      IfxEray_MaxSynchFrames_4,          /**< \brief Maximum number of sync frames in a cluster are 4  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   257      IfxEray_MaxSynchFrames_5,          /**< \brief Maximum number of sync frames in a cluster are 5  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   258      IfxEray_MaxSynchFrames_6,          /**< \brief Maximum number of sync frames in a cluster are 6  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   259      IfxEray_MaxSynchFrames_7,          /**< \brief Maximum number of sync frames in a cluster are 7  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   260      IfxEray_MaxSynchFrames_8,          /**< \brief Maximum number of sync frames in a cluster are 8  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   261      IfxEray_MaxSynchFrames_9,          /**< \brief Maximum number of sync frames in a cluster are 9  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   262      IfxEray_MaxSynchFrames_10,         /**< \brief Maximum number of sync frames in a cluster are 10  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   263      IfxEray_MaxSynchFrames_11,         /**< \brief Maximum number of sync frames in a cluster are 11  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   264      IfxEray_MaxSynchFrames_12,         /**< \brief Maximum number of sync frames in a cluster are 12  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   265      IfxEray_MaxSynchFrames_13,         /**< \brief Maximum number of sync frames in a cluster are 13  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   266      IfxEray_MaxSynchFrames_14,         /**< \brief Maximum number of sync frames in a cluster are 14  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   267      IfxEray_MaxSynchFrames_15          /**< \brief Maximum number of sync frames in a cluster are 15  */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   268  } IfxEray_MaxSynchFrames;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   269  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   270  /** \brief Commmand to control the Communication, defined in MODULE_ERAY0.SUCC1.B.CMD.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   272  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   273  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   274      IfxEray_PocCommand_notAccepted = 0,  /**< \brief command not accepted. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   275      IfxEray_PocCommand_config      = 1,  /**< \brief command to controller to enter CONFIG */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   276      IfxEray_PocCommand_ready       = 2,  /**< \brief command to controller to enter READY. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   277      IfxEray_PocCommand_wakeup      = 3,  /**< \brief command to controller to enter WAKEUP */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   278      IfxEray_PocCommand_run         = 4,  /**< \brief command to controller to enter RUN */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   279      IfxEray_PocCommand_allSlots    = 5,  /**< \brief command to controller to enter ALL_SLOTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   280      IfxEray_PocCommand_halt        = 6,  /**< \brief command to controller to enter HALT */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   281      IfxEray_PocCommand_freeze      = 7,  /**< \brief command to controller to enter FREEZE */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   282      IfxEray_PocCommand_sendMts     = 8,  /**< \brief command to controller to enter SEND_MTS */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   283      IfxEray_PocCommand_coldStart   = 9,  /**< \brief command to controller to enter COLD_START */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   284      IfxEray_PocCommand_reset       = 10, /**< \brief command to controller to enter RESET */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   285      IfxEray_PocCommand_monitor     = 11, /**< \brief command to controller to enter MONITOR */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   286      IfxEray_PocCommand_clearRam    = 12  /**< \brief command to controller to enter CLEAR_RAM */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   287  } IfxEray_PocCommand;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   288  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   289  /** \brief State of Communication Controller Protocol operation control, defined in MODULE_ERAY0.CCSV.B.POCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   290   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   291  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   292  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   293      IfxEray_PocState_defaultConfig               = 0,   /**< \brief controller entered default config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   294      IfxEray_PocState_ready                       = 1,   /**< \brief controller entered ready state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   295      IfxEray_PocState_normalActive                = 2,   /**< \brief controller entered normal-active state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   296      IfxEray_PocState_normalPassive               = 3,   /**< \brief controller entered normal-passive state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   297      IfxEray_PocState_halt                        = 4,   /**< \brief controller entered halt state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   298      IfxEray_PocState_monitor                     = 5,   /**< \brief controller entered monitor state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   299      IfxEray_PocState_config                      = 15,  /**< \brief controller entered config state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   300      IfxEray_PocState_wakeupStandby               = 16,  /**< \brief controller entered wakeup standby state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   301      IfxEray_PocState_wakeupListen                = 17,  /**< \brief controller entered wakeup-listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   302      IfxEray_PocState_wakeupSend                  = 18,  /**< \brief controller entered wakeup-send state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   303      IfxEray_PocState_wakeupDetect                = 19,  /**< \brief controller entered wakeup-detection state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   304      IfxEray_PocState_startup                     = 32,  /**< \brief controller entered startup state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   305      IfxEray_PocState_coldStartListen             = 33,  /**< \brief controller entered clod-start listen state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   306      IfxEray_PocState_collisionResolution         = 34,  /**< \brief controller entered collission-resolution state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   307      IfxEray_PocState_consistencyCheck            = 35,  /**< \brief controller entered consistency-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   308      IfxEray_PocState_gap                         = 36,  /**< \brief controller entered gap state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   309      IfxEray_PocState_join                        = 37,  /**< \brief controller entered join state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   310      IfxEray_PocState_integrationCheck            = 38,  /**< \brief controller entered integration-check. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   311      IfxEray_PocState_integrationListen           = 39,  /**< \brief controller entered integration-listen state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   312      IfxEray_PocState_integrationConsistencyCheck = 40,  /**< \brief controller entered integration consistency check state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   313      IfxEray_PocState_initializeSchedule          = 41,  /**< \brief controller entered initialise schedule state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   314      IfxEray_PocState_staruAborted                = 42,  /**< \brief controller entered startup-abort state */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   315      IfxEray_PocState_startupSucced               = 43   /**< \brief controller entered startup succeed state. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   316  } IfxEray_PocState;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   317  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   318  /** \brief Receiving channel, defined in MODULE_ERAY0.FRF.B.CH.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   319   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   320  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   322      IfxEray_ReceiveChannel_both = 0,  /**< \brief both channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   323      IfxEray_ReceiveChannel_b    = 1,  /**< \brief channel A for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   324      IfxEray_ReceiveChannel_a    = 2,  /**< \brief channel B for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   325      IfxEray_ReceiveChannel_none = 3   /**< \brief none channels for reception */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   326  } IfxEray_ReceiveChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   328  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   329   * Definition in Ifx_ERAY.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   330   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   331  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   332  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   333      IfxEray_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   334      IfxEray_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   335  } IfxEray_SleepMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   336  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   337  /** \brief Sample count value for strobing, defined in MODULE_ERAY0.PRTC1.B.SPP.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   338   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   339  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   340  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   341      IfxEray_StrobePosition_5 = 0,  /**< \brief Sample count 5 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   342      IfxEray_StrobePosition_4 = 1,  /**< \brief Sample count 4 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   343      IfxEray_StrobePosition_6 = 2   /**< \brief Sample count 6 for strobing */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   344  } IfxEray_StrobePosition;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   345  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   346  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   347   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   348  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   349  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   350      IfxEray_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   351      IfxEray_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   352      IfxEray_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   353  } IfxEray_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   354  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   355  /** \brief Transmission mode of Header, defined in MODULE_ERAY0.WRHS1.B.TXM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   356   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   357  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   358  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   359      IfxEray_TransmissionMode_continuous = 0,  /**< \brief continuos transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   360      IfxEray_TransmissionMode_singleShot = 1   /**< \brief single transmission mode */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   361  } IfxEray_TransmissionMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   362  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   363  /** \brief Initial transmission mode, defined in MODULE_ERAY0.SUCC1.B.TSM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   364   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   365  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   366  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   367      IfxEray_TransmissionSlotMode_all    = 0, /**< \brief transmission in all slots. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   368      IfxEray_TransmissionSlotMode_single = 1  /**< \brief transmission in key slot. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   369  } IfxEray_TransmissionSlotMode;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   370  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   371  /** \brief Wakeup pattern carry channel, defined in MODULE_ERAY0.SUCC1.B.WUCS.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   372   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   373  typedef enum
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   374  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   375      IfxEray_WakeupChannel_a = 0,  /**< \brief send wakeup channel pattern on channel A */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   376      IfxEray_WakeupChannel_b = 1   /**< \brief send wakeup channel pattern on channel B */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   377  } IfxEray_WakeupChannel;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   378  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   379  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   380  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   381  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   382  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   383  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   384  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   385  /** \addtogroup IfxLld_Eray_Std_Structures
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   386   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   387  /** \brief Header section in  a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   388   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   389  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   390  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   391      uint16                   frameId;                         /**< \brief slot ID of the selected Message Buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   392      uint8                    cycleCode;                       /**< \brief the cycle set used for cycle counter filtering. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   393      boolean                  channelAFiltered;                /**< \brief channel A serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   394      boolean                  channelBFiltered;                /**< \brief channel B serves as a control for transmit and filter for receive buffers. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   395      IfxEray_BufferDirection  bufferDirection;                 /**< \brief selects buffer as a transmit buffer or as a receive buffer. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   396      boolean                  transmitPayloadIndicatior;       /**< \brief weather payload indicator is set or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   397      IfxEray_TransmissionMode transmissionMode;                /**< \brief transmission mode of Header. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   398      boolean                  bufferServiceEnabled;            /**< \brief wether buffer service request is enabled or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   399      uint8                    payloadLength;                   /**< \brief length of data section. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   400      uint16                   dataPointer;                     /**< \brief pointer to the data section of message buffer in RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   401      boolean                  startupFrameIndicator;           /**< \brief whether startup frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   402      boolean                  syncFrameIndicator;              /**< \brief whether sync frame is indicated or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   403  } IfxEray_Header;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   404  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   405  /** \brief Received header in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   406   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   407  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   408  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   409      uint16 frameId : 11;                     /**< \brief received frame id. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   410      uint8  payloadLength : 7;                /**< \brief received payload length. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   411      uint16 headerCrc : 11;                   /**< \brief received header crc. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   412      uint8  nullFrameIndicator : 1;           /**< \brief 0 : no data frame received; 1: atleast one data frame received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   413      uint8  syncFrame : 1;                    /**< \brief 0 : received frame is not a synch frame ; 1 : receive frame is a synch frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   414      uint8  startupFrame : 1;                 /**< \brief 0 : received frame is not a startup frame ; 1 : receive frame is a startup frame. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   415      uint8  cycleNumber : 7;                  /**< \brief cycle number in which frame is received. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   416      uint8  payloadPreambleIndicator : 1;     /**< \brief 1 : received payload segment has network management and message id or not; 0 : It hasn't. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   417  } IfxEray_ReceivedHeader;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   418  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   419  /** \brief Transmit control structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   420   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   421  typedef struct
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   422  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   423      boolean headerTransfered;        /**< \brief whether header is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   424      boolean dataTransfered;          /**< \brief whether data is transfered from input buffers to Message RAM or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   425      boolean transferRequested;       /**< \brief transmit buffer released for transmission or not. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   426      uint8   bufferIndex;             /**< \brief buffer index in the Message RAM. */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   427  } IfxEray_SlotConfig;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   428  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   429  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   430  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   431  /** \addtogroup IfxLld_Eray_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   432   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   433  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   434  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   435  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   436  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   437  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   438  /** \brief Clears the error flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   439   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   440   * \param errorFlag error flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   441   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   442   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   443  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   444  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   445  /** \brief Clears the status flag requested.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   446   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   447   * \param statusFlag status flag to be cleared.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   448   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   449   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   450  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   451  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   452  /** \brief Gets the error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   453   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   454   * \return error interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   455   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   456  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   457  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   458  /** \brief Gets the IBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   459   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   460   * \return address of IBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   461   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   462  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   463  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   464  /** \brief Gets the INT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   465   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   466   * \return address of INT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   467   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   468  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   469  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   470  /** \brief Gets the INT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   471   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   472   * \return address of INT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   473   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   474  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getInterruptLine1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   475  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   476  /** \brief Gets the message buffers interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   477   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   478   * \param messageBuffer message buffer to which interrupt status be checked.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   479   * \return message buffer interrupt status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   480   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   481  IFX_INLINE boolean IfxEray_getMessageBufferInterruptStatus(Ifx_ERAY *eray, uint8 messageBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   482  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   483  /** \brief Gets the MBSC0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   484   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   485   * \return address of MBSC0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   486   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   487  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   488  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   489  /** \brief Gets the MBSC1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   490   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   491   * \return address of MBSC1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   492   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   493  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getMessageBufferStatus1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   494  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   495  /** \brief Gets the NDAT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   496   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   497   * \return address of NDAT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   498   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   499  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   500  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   501  /** \brief Gets the NDAT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   502   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   503   * \return address of NDAT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   504   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   505  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getNewDataInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   506  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   507  /** \brief Gets the new data interrupt buffers status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   508   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   509   * \param ndat message buffer number configured to which ndat occurs.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   510   * \return ndat interrupt buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   511   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   512  IFX_INLINE boolean IfxEray_getNewDataInterruptStatus(Ifx_ERAY *eray, uint8 ndat);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   513  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   514  /** \brief Gets the OBUSY service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   515   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   516   * \return address of OBUSY service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   517   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   518  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getOutputBufferBusySrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   519  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   520  /** \brief Gets the status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   521   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   522   * \return status interrupt flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   523   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   524  IFX_INLINE Ifx_ERAY_SIR IfxEray_getStatusInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   525  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   526  /** \brief Gets the TINT0 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   527   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   528   * \return address of TINT0 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   529   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt0SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   531  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   532  /** \brief Gets the TINT1 service request.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   533   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   534   * \return address of TINT1 service request value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   535   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   536  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEray_getTimerInterrupt1SrcPtr(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   537  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   538  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   539  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   540  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   541  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   542  /** \brief Clears all the error flags.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   543   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   544   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   545   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   546  IFX_EXTERN void IfxEray_clearAllFlags(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   547  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   548  /** \brief Enables all the Interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   549   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   550   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   551   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   552  IFX_EXTERN void IfxEray_enableInterruptLines(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   553  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   554  /** \brief Selects between MBSC0 and MBSC1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   555   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   556   * \param messageBuffer message buffer interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   557   * \param messageBufferDestination selects MBSC0 or MBSC1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   558   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   559   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   560  IFX_EXTERN void IfxEray_setMessageBufferInterruptDestination(Ifx_ERAY *eray, uint8 messageBuffer, uint8 messageBufferDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   561  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   562  /** \brief Selects between NDAT0 and NDAT1 interrupt destination
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   563   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   564   * \param ndat NDAT interrupt which should be configured
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   565   * \param ndatDestination selects NDAT0 or NDAT1 interrupt output
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   566   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   567   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   568  IFX_EXTERN void IfxEray_setNewDataInterruptDestination(Ifx_ERAY *eray, uint8 ndat, uint8 ndatDestination);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   569  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   570  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   571  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   572  /** \addtogroup IfxLld_Eray_Std_IO
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   573   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   574  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   578  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   579  /** \brief Initialises a RX pin.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   580   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   581   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   582   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   583   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   584  IFX_INLINE void IfxEray_initRxPin(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   585  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   586  /** \brief Initializes a TX Enable output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   587   * \param txEn the TX Enable Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   588   * \param txEnMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   589   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   591   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   592  IFX_INLINE void IfxEray_initTxEnPin(const IfxEray_Txen_Out *txEn, IfxPort_OutputMode txEnMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   593  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   594  /** \brief Initializes a TX output.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   595   * \param tx the TX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   596   * \param txMode the pin output mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   597   * \param padDriver the pad driver mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   599   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   600  IFX_INLINE void IfxEray_initTxPin(const IfxEray_Txd_Out *tx, IfxPort_OutputMode txMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   601  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   602  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   603  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   604  /** \addtogroup IfxLld_Eray_Std_Module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   605   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   606  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   607  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   608  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   609  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   610  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   611  /** \brief Disables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   612   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   613   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   614   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   615  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   616  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   617  /** \brief Enables the ERAY module.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   618   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   619   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   620   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   621  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   622  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   623  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   624   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   625   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   626   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   627   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   628   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   629  IFX_INLINE boolean IfxEray_isModuleSuspended(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   630  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   631  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   632   * \param eray pointer to ERAY registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   633   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   634   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   635   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   636  IFX_INLINE void IfxEray_setSleepMode(Ifx_ERAY *eray, IfxEray_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   637  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   638  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   639  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   640  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   641  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   642  /**
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   643   * \param eray Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   644   * \return ERAY module register address
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   645   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   646  IFX_EXTERN Ifx_ERAY *IfxEray_getAddress(IfxEray_Index eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   647  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   648  /** \brief API to get the resource index of the ERAY specified.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   649   * \param eray Pointer to the ERAY HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   650   * \return Resource index of the ERAY
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   651   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   652  IFX_EXTERN IfxEray_Index IfxEray_getIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   653  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   654  /** \brief Resets the ERAY kernel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   655   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   656   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   657   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   658  IFX_EXTERN void IfxEray_resetModule(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   659  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   660  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   661  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   662  /** \addtogroup IfxLld_Eray_Std_Status
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   663   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   664  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   665  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   666  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   667  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   668  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   669  /** \brief Gets the FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   670   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   671   * \return FIFO status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   672   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   673  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   674  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   675  /** \brief Gets the Input Buffer Host Busy status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   676   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   677   * \return TRUE if Host is Busy otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   678   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   679  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   680  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   681  /** \brief Gets the Input Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   682   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   683   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   684   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   685  IFX_INLINE uint8 IfxEray_getInputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   686  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   687  /** \brief Gets the output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   688   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   689   * \return output buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   690   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   691  IFX_INLINE uint8 IfxEray_getOutputBuffer(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   692  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   693  /** \brief Gets the Output Buffer Shadow status.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   694   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   695   * \return TRUE if busy otherwise FALSE
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   696   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   697  IFX_INLINE boolean IfxEray_getOutputBufferBusyShadowStatus(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   698  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   699  /** \brief Gets the current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   700   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   701   * \return current POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   702   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   703  IFX_INLINE IfxEray_PocState IfxEray_getPocState(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   704  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   705  /** \brief Gets the received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   706   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   707   * \return received wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   708   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   709  IFX_INLINE IfxEray_WakeupChannel IfxEray_getWakeupPatternReceivedChannel(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   710  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   711  /** \brief Waits until the controller enters required POC state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   712   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   713   * \param pocState POC state upto which controller waits.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   714   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   715   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   716  IFX_INLINE void IfxEray_waitForPocState(Ifx_ERAY *eray, IfxEray_PocState pocState);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   717  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   718  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   719  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   720  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   721  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   722  /** \brief Changes the Commmunication Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   723   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   724   * \param pocCommand POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   725   * \return TRUE if command accepted otherwise FALSE.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   726   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   727  IFX_EXTERN boolean IfxEray_changePocState(Ifx_ERAY *eray, IfxEray_PocCommand pocCommand);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   728  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   729  /** \brief Sets the POC state to Ready state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   730   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   732   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   733  IFX_EXTERN void IfxEray_setPocReady(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   734  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   735  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   736  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   737  /** \addtogroup IfxLld_Eray_Std_Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   738   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   739  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   742  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   743  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   744  /** \brief request to receive header section from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   745   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   746   * \param headerReceived whether header is received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   747   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   748   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   749  IFX_INLINE void IfxEray_receiveHeader(Ifx_ERAY *eray, boolean headerReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   750  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   751  /** \brief sets the bit to send header in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   752   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   753   * \param headerTransfered whether header transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   754   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   755   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   756  IFX_INLINE void IfxEray_sendHeader(Ifx_ERAY *eray, boolean headerTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   757  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   758  /** \brief Sets number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   759   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   760   * \param numberOfCyclePairsForActive number of cycle pairs for Active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   761   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   762   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   763  IFX_INLINE void IfxEray_setActiveCyclePairs(Ifx_ERAY *eray, uint8 numberOfCyclePairsForActive);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   764  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   765  /** \brief Sets auto delays between input, output buffers and message RAM
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   766   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   767   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   768   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   769  IFX_INLINE void IfxEray_setAutoDelayBuffers(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   770  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   771  /** \brief Sets baudrate on Flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   772   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   773   * \param baudrate baudrate on flexray bus.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   774   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   775   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   776  IFX_INLINE void IfxEray_setBaudrate(Ifx_ERAY *eray, IfxEray_Baudrate baudrate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   777  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   778  /** \brief Sets secured buffers in message RAM.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   779   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   780   * \param secureValue secure value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   782   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   783  IFX_INLINE void IfxEray_setBufferReconfigSecure(Ifx_ERAY *eray, uint8 secureValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   784  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   785  /** \brief Sets channel A initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   786   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   787   * \param channelAMicrotickInitialOffset difference between reference points on channel A in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   788   * \param channelAMacrotickInitialOffset difference between reference points on channel A in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   789   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   790   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   791  IFX_INLINE void IfxEray_setChannelAInitialOffsets(Ifx_ERAY *eray, uint8 channelAMicrotickInitialOffset, uint8 channelAMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   792  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   793  /** \brief Sets channel B initial offstes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   794   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   795   * \param channelBMicrotickInitialOffset difference between reference points on channel B in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   796   * \param channelBMacrotickInitialOffset difference between reference points on channel B in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   797   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   798   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   799  IFX_INLINE void IfxEray_setChannelBInitialOffsets(Ifx_ERAY *eray, uint8 channelBMicrotickInitialOffset, uint8 channelBMacrotickInitialOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   800  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   801  /** \brief Sets receive delays on channels.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   802   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   803   * \param channelAReceptionDelay reception delay on channel A.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   804   * \param channelBReceptionDelay reception delay on channel B.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   805   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   806   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   807  IFX_INLINE void IfxEray_setChannelsReceiveDelay(Ifx_ERAY *eray, uint8 channelAReceptionDelay, uint8 channelBReceptionDelay);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   808  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   809  /** \brief Sets clock correction cycles for Passive and Halt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   810   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   811   * \param clockCorrectionCyclesPassive maximum number of cycles missing clock correction leading for passive state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   812   * \param clockCorrectionCyclesHalt maximum number of cycles missing clock correction leading for halt state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   813   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   814   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   815  IFX_INLINE void IfxEray_setClockCorrectionCycles(Ifx_ERAY *eray, uint8 clockCorrectionCyclesPassive, uint8 clockCorrectionCyclesHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   816  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   817  /** \brief lead to halt state in clock synch error.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   818   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   819   * \param clockSyncErrorHalt whether to enter halt in clock synch error or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   820   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   821   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   822  IFX_INLINE void IfxEray_setClockSynchErrorHalt(Ifx_ERAY *eray, boolean clockSyncErrorHalt);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   823  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   824  /** \brief Sets cluster drift values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   825   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   826   * \param clusterDrift cluster drift damping value used in clock synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   827   * \param maxDriftOffset maximum drift offset between two nodes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   828   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   829   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   830  IFX_INLINE void IfxEray_setClusterDriftValues(Ifx_ERAY *eray, uint8 clusterDrift, uint16 maxDriftOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   831  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   832  /** \brief Sets cluster startup deviation.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   833   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   834   * \param acceptedStartupDeviation deviation for startup Frames during integration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   835   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   836   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   837  IFX_INLINE void IfxEray_setClusterStartupDeviation(Ifx_ERAY *eray, uint16 acceptedStartupDeviation);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   838  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   839  /** \brief Sets CAS symbol window duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   840   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   841   * \param collisionAvoidanceDuration accepted duration of CAS symbol.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   842   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   843   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   844  IFX_INLINE void IfxEray_setCollisionAvoidanceDuration(Ifx_ERAY *eray, uint8 collisionAvoidanceDuration);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   845  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   846  /** \brief sets duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   847   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   848   * \param macroticks duration of the communication cycle in Macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   849   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   850   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   851  IFX_INLINE void IfxEray_setCycleDurationMacroticks(Ifx_ERAY *eray, uint16 macroticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   852  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   853  /** \brief sets duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   854   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   855   * \param microticks duration of the communication cycle in Microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   856   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   857   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   858  IFX_INLINE void IfxEray_setCycleDurationMicroticks(Ifx_ERAY *eray, uint32 microticks);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   859  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   860  /** \brief Sets decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   861   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   862   * \param decodingCorrection decoding correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   863   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   864   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   865  IFX_INLINE void IfxEray_setDecodingCorrectionValue(Ifx_ERAY *eray, uint8 decodingCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   866  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   867  /** \brief Sets dynamic slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   868   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   869   * \param dynamicSlotLength duration of dynamic slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   870   * \param dynamicSlotCount number of dynamic slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   871   * \param idleDynamicSlots duration of dynamic slot idle phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   872   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   873   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   874  IFX_INLINE void IfxEray_setDynamicSlots(Ifx_ERAY *eray, uint8 dynamicSlotLength, uint16 dynamicSlotCount, IfxEray_IdleDynamicSlots idleDynamicSlots);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   875  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   876  /** \brief Sets external correction controls.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   877   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   878   * \param externalOffset External offset correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   879   * \param externalRate External rate correction control.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   880   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   881   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   882  IFX_INLINE void IfxEray_setExternalCorrectionControl(Ifx_ERAY *eray, IfxEray_ExternalOffset externalOffset, IfxEray_ExternalRate externalRate);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   883  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   884  /** \brief Sets external correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   885   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   886   * \param externalOffsetCorrection external clock offset correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   887   * \param externalRateCorrection external clock rate correction value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   888   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   889   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   890  IFX_INLINE void IfxEray_setExternalCorrectionValues(Ifx_ERAY *eray, IfxEray_ExternalOffsetCorrection externalOffsetCorrection, IfxEray_ExternalRateCorrection externalRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   891  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   892  /** \brief Sets FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   893   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   894   * \param fifoBufferStartIndex FIFO buffer start idex.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   895   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   896   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   897  IFX_INLINE void IfxEray_setFifoBufferStartIndex(Ifx_ERAY *eray, uint8 fifoBufferStartIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   898  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   899  /** \brief Sets FIFO filter configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   900   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   901   * \param rejectedFrameId rejected frameId by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   902   * \param filteredCycleNumber filtered cycle number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   903   * \param fifoNullFramesRejected null frames rejection selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   904   * \param frameIdFilter filtered frameid by FIFO.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   905   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   906   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   907  IFX_INLINE void IfxEray_setFifoFilterConfigurations(Ifx_ERAY *eray, uint16 rejectedFrameId, uint8 filteredCycleNumber, boolean fifoNullFramesRejected, uint16 frameIdFilter);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   908  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   909  /** \brief Sets FIFO configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   910   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   911   * \param receiveChannel FIFO receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   912   * \param staticFifoDisabled static FIFO selection.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   913   * \param fifoDepth FIFO depth.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   914   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   915   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   916  IFX_INLINE void IfxEray_setFifoMessageBufferConfigurations(Ifx_ERAY *eray, IfxEray_ReceiveChannel receiveChannel, boolean staticFifoDisabled, uint8 fifoDepth);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   917  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   918  /** \brief Sets first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   919   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   920   * \param firstDynamicBuffer first dynamic buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   921   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   922   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   923  IFX_INLINE void IfxEray_setFirstDynamicBuffer(Ifx_ERAY *eray, uint8 firstDynamicBuffer);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   924  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   925  /** \brief Sets startup or wakeup listen timeouts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   926   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   927   * \param listenTimeOut wakeup or startup listen timeout in microticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   928   * \param listenTimeOutNoise upper limit for startup or wakeup listen timeout in presence of noise.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   929   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   930   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   931  IFX_INLINE void IfxEray_setListenTimeOuts(Ifx_ERAY *eray, uint32 listenTimeOut, IfxEray_ListenTimeOutNoise listenTimeOutNoise);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   932  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   933  /** \brief Sets the maximum cold start attempts for active state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   934   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   935   * \param maxColdStartAttempts maximum number of attempts that a cold start node allows.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   936   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   937   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   938  IFX_INLINE void IfxEray_setMaxColdStartAttempts(Ifx_ERAY *eray, uint8 maxColdStartAttempts);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   939  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   940  /** \brief Sets max limit correction values.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   941   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   942   * \param maxOffsetCorrection maximum offset correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   943   * \param maxRateCorrection maximum rate correction.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   945   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   946  IFX_INLINE void IfxEray_setMaxCorrectionValues(Ifx_ERAY *eray, uint16 maxOffsetCorrection, uint16 maxRateCorrection);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   947  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   948  /** \brief Sets maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   949   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   950   * \param maxSyncFrames maximum synch frames in a cluster.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   952   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   953  IFX_INLINE void IfxEray_setMaxSynchFrames(Ifx_ERAY *eray, IfxEray_MaxSynchFrames maxSyncFrames);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   954  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   955  /** \brief Sets number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   956   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   957   * \param numberOfMessageBuffers number of message buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   959   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   960  IFX_INLINE void IfxEray_setMessageBufferCount(Ifx_ERAY *eray, uint8 numberOfMessageBuffers);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   961  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   962  /** \brief Sets Message Handler configurations.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   963   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   964   * \param staticFramepayload payload length of static frames in double bytes.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   965   * \param latestTransmissionStart dynamic slots befor transmission of inhibit frame in dynamic segment.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   966   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   967   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   968  IFX_INLINE void IfxEray_setMessageHandlerConfigurations(Ifx_ERAY *eray, uint8 staticFramepayload, uint8 latestTransmissionStart);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   969  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   970  /** \brief Sets network start Idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   971   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   972   * \param networkStartIdleTime starting point of Network Idle Time Phase.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   973   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   974   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   975  IFX_INLINE void IfxEray_setNetworkStartIdleTime(Ifx_ERAY *eray, uint16 networkStartIdleTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   976  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   977  /** \brief Sets network management vector length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   978   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   979   * \param networkVectorLength length of network management vector.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   980   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   981   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   982  IFX_INLINE void IfxEray_setNetworkVectorLength(Ifx_ERAY *eray, uint32 networkVectorLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   983  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   984  /** \brief Sets channels connected to node.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   985   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   986   * \param channelAConnectedNode whether node connected to channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   987   * \param channelBConnectedNode whether node connected to channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   988   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   989   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   990  IFX_INLINE void IfxEray_setNodeChannels(Ifx_ERAY *eray, boolean channelAConnectedNode, boolean channelBConnectedNode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   991  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   992  /** \brief Sets offset correction starting point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   993   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   994   * \param correctionOffset offset correction start point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   995   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   996   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   997  IFX_INLINE void IfxEray_setOffsetCorrection(Ifx_ERAY *eray, uint16 correctionOffset);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   998  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	   999  /** \brief requests to receive the frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1000   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1001   * \param receiveRequested whether frame to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1002   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1003   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1004  IFX_INLINE void IfxEray_setReceiveRequest(Ifx_ERAY *eray, boolean receiveRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1005  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1006  /** \brief Sets receive wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1007   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1008   * \param receiveWakeupTestDuration duration of receive wakeup pattern.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1009   * \param receiveWakeupIdleTime duration of receive wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1010   * \param receiveWakeupLowTime duration of receive wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1013  IFX_INLINE void IfxEray_setReceiveWakeupTimes(Ifx_ERAY *eray, uint16 receiveWakeupTestDuration, uint8 receiveWakeupIdleTime, uint8 receiveWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1014  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1015  /** \brief sets buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1016   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1017   * \param bufferIndex buffer number in which frame is received.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1018   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1019   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1020  IFX_INLINE void IfxEray_setRxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1021  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1022  /** \brief Sets slots action points.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1023   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1024   * \param staticActionPoint static slots and symbol window action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1025   * \param dynamicActionPoint dynamic slots action point.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1026   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1028  IFX_INLINE void IfxEray_setSlotActionPoints(Ifx_ERAY *eray, uint8 staticActionPoint, uint8 dynamicActionPoint);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1029  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1030  /** \brief Sets static slots count and length.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1031   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1032   * \param staticSlotLength duration of static slot in macroticks.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1033   * \param staticSlotsCount number of static slots in a communication cycle.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1034   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1035   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1036  IFX_INLINE void IfxEray_setStaticSlots(Ifx_ERAY *eray, uint16 staticSlotLength, uint16 staticSlotsCount);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1037  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1038  /** \brief Sets sample point for strobing.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1039   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1040   * \param strobePosition strobing sample count.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1041   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1042   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1043  IFX_INLINE void IfxEray_setStrobePosition(Ifx_ERAY *eray, IfxEray_StrobePosition strobePosition);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1044  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1045  /** \brief Sets channels which transmits symbols.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1046   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1047   * \param channelASymbolTransmitted whether symbol is transmitted in Channel A or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1048   * \param channelBSymbolTransmitted whether symbol is transmitted in Channel B or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1049   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1050   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1051  IFX_INLINE void IfxEray_setSymbolChannels(Ifx_ERAY *eray, boolean channelASymbolTransmitted, boolean channelBSymbolTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1052  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1053  /** \brief Sets the transmit slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1054   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1055   * \param transmissionSlotMode transmission slot mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1056   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1058  IFX_INLINE void IfxEray_setTransmissionSlotMode(Ifx_ERAY *eray, IfxEray_TransmissionSlotMode transmissionSlotMode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1059  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1060  /** \brief Sets transmission start time duration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1061   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1062   * \param transmissionStartTime transmission start time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1065  IFX_INLINE void IfxEray_setTransmissionStartTime(Ifx_ERAY *eray, uint8 transmissionStartTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1066  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1067  /** \brief Sets transfer request to send frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1068   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1069   * \param transferRequested whether transfer requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1072  IFX_INLINE void IfxEray_setTransmitRequest(Ifx_ERAY *eray, boolean transferRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1073  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1074  /** \brief Sets transmit wakeup times.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1075   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1076   * \param transmitWakeupRepetitions transmission wakeup repetitions.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1077   * \param transmitWakeupIdleTime duration of transmit wakeup idle time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1078   * \param transmitWakeupLowTime duration of transmit wakeup low time.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1079   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1080   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1081  IFX_INLINE void IfxEray_setTransmitWakeupTimes(Ifx_ERAY *eray, uint8 transmitWakeupRepetitions, uint8 transmitWakeupIdleTime, uint8 transmitWakeupLowTime);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1082  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1083  /** \brief Configures transmitted frames for startup and synchronization.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1084   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1085   * \param startupFrameTransmitted whether startup Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1086   * \param synchFrameTransmitted whether synch Frame transmitted or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1087   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1088   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1089  IFX_INLINE void IfxEray_setTransmittedFrames(Ifx_ERAY *eray, boolean startupFrameTransmitted, boolean synchFrameTransmitted);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1090  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1091  /** \brief Sets the transmit buffer number.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1092   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1093   * \param bufferIndex buffer number in which frame is sent.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1094   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1095   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1096  IFX_INLINE void IfxEray_setTxBufferNumber(Ifx_ERAY *eray, uint8 bufferIndex);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1097  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1098  /** \brief Swaps the shadow and Host output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1099   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1100   * \param swapRequested whether swap is requested or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1101   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1102   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1103  IFX_INLINE void IfxEray_setViewData(Ifx_ERAY *eray, boolean swapRequested);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1104  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1105  /** \brief Sets the cluster wakeup channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1106   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1107   * \param wakeupPatternChannel cluster wakeup pattern channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1108   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1109   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1110  IFX_INLINE void IfxEray_setWakeupPatternChannel(Ifx_ERAY *eray, IfxEray_WakeupChannel wakeupPatternChannel);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1111  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1112  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1113  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1114  /** \addtogroup IfxLld_Eray_Std_Operative
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1115   * \{ */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1116  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1117  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1118  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1119  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1120  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1121  /** \brief requests to receive data from message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1122   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1123   * \param dataReceived whether data to be received or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1124   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1125   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1126  IFX_INLINE void IfxEray_receiveData(Ifx_ERAY *eray, boolean dataReceived);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1127  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1128  /** \brief sets the bit to send data in  frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1129   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1130   * \param dataTransfered whether data transfered or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1131   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1132   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1133  IFX_INLINE void IfxEray_sendData(Ifx_ERAY *eray, boolean dataTransfered);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1134  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1135  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1136  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1137  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1138  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1139  /** \brief Calculate and returns the CRC for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1140   * \param payloadLength payload length configured for frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1141   * \param frameId slot id
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1142   * \param startupFrameIndicator whether startup frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1143   * \param syncFrameIndicator whether sync frame is indicated or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1144   * \return calculated CRC value.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1145   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1146  IFX_EXTERN uint16 IfxEray_calcHeaderCrc(uint8 payloadLength, uint16 frameId, boolean startupFrameIndicator, boolean syncFrameIndicator);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1147  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1148  /** \brief Reads the received data from output registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1149   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1150   * \param data pointer to received data buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1151   * \param payloadLength payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1152   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1153   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1154  IFX_EXTERN void IfxEray_readData(Ifx_ERAY *eray, uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1155  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1156  /** \brief Reads header and data from output buffers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1157   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1158   * \param header header received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1159   * \param data data received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1160   * \param maxPayloadLength maximum payload length received in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1161   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1162   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1163  IFX_EXTERN void IfxEray_readFrame(Ifx_ERAY *eray, IfxEray_ReceivedHeader *header, uint32 *data, Ifx_SizeT maxPayloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1164  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1165  /** \brief Writes header and data to Input buffers and set the slots.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1166   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1167   * \param header Header section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1168   * \param data data section of message buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1169   * \param slotConfig pointer slot allocation configuration structure.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1170   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1171   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1172  IFX_EXTERN void IfxEray_setSlot(Ifx_ERAY *eray, const IfxEray_Header *header, const uint32 *data, const IfxEray_SlotConfig *slotConfig);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1173  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1174  /** \brief Writes data section of a frame to input data registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1175   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1176   * \param data data segment in a frame.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1177   * \param payloadLength payload length configured for slot buffer.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1178   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1179   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1180  IFX_EXTERN void IfxEray_writeData(Ifx_ERAY *eray, const uint32 *data, uint8 payloadLength);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1181  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1182  /** \} */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1183  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1184  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1185  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1186  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1187  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1188  /** \brief Gets the FIFO index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1189   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1190   * \return FIFO buffer index.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1191   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1192  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1193  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1194  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1195   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1196   * \param eray Pointer to ERAY module registers
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1197   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1198   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1199   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1200  IFX_INLINE void IfxEray_setSuspendMode(Ifx_ERAY *eray, IfxEray_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1201  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1202  /** \brief Provides functionality for both setting of pin direction as input and configuring pad driver.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1203   * \param rx the RX Pin which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1204   * \param rxMode the pin input mode which should be configured.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1205   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1206   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1207   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1208  IFX_INLINE void IfxEray_initRxPinWithPadLevel(const IfxEray_Rxd_In *rx, IfxPort_InputMode rxMode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1209  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1210  /** \brief Provides functionality to select the receiver channel input
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1211   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1212   * \param nodeId ERAY node id.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1213   * \param select receive channel.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1214   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1215   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1216  IFX_INLINE void IfxEray_selectRecieveInput(Ifx_ERAY *eray, IfxEray_NodeId nodeId, Ifx_RxSel select);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1217  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1218  /** \brief Provides functionality to provide the command to change the transmit mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1219   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1220   * \param cmd POC command which triggers the Controller state.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1221   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1222   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1223  IFX_INLINE void IfxEray_setPocCommand(Ifx_ERAY *eray, IfxEray_PocCommand cmd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1224  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1225  /** \brief Provides functionality to find out that any CHI command is being executed or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1226   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1227   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1228   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1229  IFX_INLINE boolean IfxEray_isRamsCleared(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1230  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1231  /** \brief Provides functionality to check whether POC is busy or not.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1232   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1233   * \return status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1234   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1235  IFX_INLINE boolean IfxEray_isPocBusy(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1236  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1237  /** \brief Provides functionality to enble the interrupt lines.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1238   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1239   * \param intLine interrupt line.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1242  IFX_INLINE void IfxEray_enableInterruptLine(Ifx_ERAY *eray, IfxEray_InterruptLine intLine);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1243  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1244  /** \brief Provides functionality to enable the transmit interrupt.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1245   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1248  IFX_INLINE void IfxEray_enableTransmitInterrupt(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1249  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1250  /** \brief Provides functionality to enable all the error iterrupts.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1251   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1252   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1253   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1254  IFX_INLINE void IfxEray_enableAllErrorInterrupts(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1255  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1256  /** \brief Provides functionality to enable the test mode.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1257   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1258   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1259   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1260  IFX_INLINE void IfxEray_unlockTestModeKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1261  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1262  /** \brief Provides functionality to enable write to the test mode registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1263   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1264   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1265   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1266  IFX_INLINE void IfxEray_enableWriteTestRegister(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1267  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1268  /** \brief Provides functionality to enable the external loopback.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1269   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1270   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1271   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1272  IFX_INLINE void IfxEray_enableExternalLoopback(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1273  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1274  /** \brief Provides functionality to unlock the test mode configuration.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1275   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1276   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1277   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1278  IFX_INLINE void IfxEray_unlockConfigurationKey(Ifx_ERAY *eray);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1279  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1280  /** \brief Provides functionality to configure SUC configuration registers 1.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1281   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1282   * \param configValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1283   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1284   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1285  IFX_INLINE void IfxEray_configureSuc1Register(Ifx_ERAY *eray, uint32 configValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1286  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1287  /** \brief Provides functionality to configure MTCCV register.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1288   * \param eray pointer to ERAY module registers.
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1289   * \param tickValue
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1290   * \return None
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1291   */
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1292  IFX_INLINE void IfxEray_setMacroTickValue(Ifx_ERAY *eray, uint32 tickValue);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1293  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1294  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1295  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1296  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1297  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1298  IFX_INLINE void IfxEray_clearErrorFlag(Ifx_ERAY *eray, IfxEray_ClearErrorFlag errorFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1299  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1300      eray->EIR.U = errorFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1301  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1302  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1303  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1304  IFX_INLINE void IfxEray_clearStatusFlag(Ifx_ERAY *eray, IfxEray_ClearStatusFlag statusFlag)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1305  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1306      eray->SIR.U = statusFlag;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1307  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1308  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1309  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1310  IFX_INLINE void IfxEray_disableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1311  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1312      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1313      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1314      //disable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1315      eray->CLC.B.DISR = 1;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1316      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1317  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1318  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1319  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1320  IFX_INLINE void IfxEray_enableModule(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1321  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1322      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1323      IfxScuWdt_clearCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1324      // Run Mode Clock divider to 1
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1325      //enable the module
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1326      eray->CLC.U = 0x00000100;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1327  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1328      // ensure that write access finished before leaving this function
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1329      if (eray->CLC.U)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1330      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1331  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1332      IfxScuWdt_setCpuEndinit(passwd);
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1333  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1334  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1335  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1336  IFX_INLINE Ifx_ERAY_EIR IfxEray_getErrorInterrupts(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1337  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1338      Ifx_ERAY_EIR interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1339      interruptFlags.U = eray->EIR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1340      return interruptFlags;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1341  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1342  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1343  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1344  IFX_INLINE uint8 IfxEray_getFifoIndex(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1345  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1346      return eray->MRC.B.FFB;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1347  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1348  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1349  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1350  IFX_INLINE Ifx_ERAY_FSR IfxEray_getFifoStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1351  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1352      Ifx_ERAY_FSR fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1353      fifoStatus.U = eray->FSR.U;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1354      return fifoStatus;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1355  }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1356  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1357  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1358  IFX_INLINE boolean IfxEray_getInputBufferBusyHostStatus(Ifx_ERAY *eray)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1359  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.h	  1360      return (eray->IBCR.B.IBSYH == 1) ? TRUE : FALSE;
	ld.bu	d15,[a15]
.L238:
	jnz.t	d15:7,.L27
.L454:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   344      {}
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   345  }
	ret
.L213:
	
__IfxEray_setSlot_function_end:
	.size	IfxEray_setSlot,__IfxEray_setSlot_function_end-IfxEray_setSlot
.L128:
	; End of function
	
	.sdecl	'.text.IfxEray.IfxEray_writeData',code,cluster('IfxEray_writeData')
	.sect	'.text.IfxEray.IfxEray_writeData'
	.align	2
	
	.global	IfxEray_writeData

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   346  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   347  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   348  void IfxEray_writeData(Ifx_ERAY *eray, const uint32 *data, uint8 payloadLength)
; Function IfxEray_writeData
.L59:
IfxEray_writeData:	.type	func

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   349  {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   350      if (data != NULL_PTR)
	jz.a	a5,.L28
.L243:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   351      {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   352          uint16 length = (payloadLength + 1) / 2;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   353          uint8  index;
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   354  
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   355          for (index = 0; index < length; index++)
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   356          {
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   357              eray->WRDS_1S[index].U = *data++;
	add	d4,#1
	lea	a15,[a4]1024
.L285:
	sha	d4,#-1
.L459:
	mov	d15,#0
	j	.L29
.L30:
	add	d15,#1
	ld.w	d0,[a5+]
.L286:
	extr.u	d15,d15,#0,#8
	st.w	[a15+],d0
.L29:
	jlt.u	d15,d4,.L30
.L28:

; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   358          }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   359      }
; ..\0_Src\4_McHal\Tricore\Eray\Std\IfxEray.c	   360  }
	ret
.L239:
	
__IfxEray_writeData_function_end:
	.size	IfxEray_writeData,__IfxEray_writeData_function_end-IfxEray_writeData
.L133:
	; End of function
	
	.calls	'IfxEray_readFrame','IfxEray_readData'
	.calls	'IfxEray_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxEray_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxEray_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxEray_setSlot','IfxEray_calcHeaderCrc'
	.calls	'IfxEray_setSlot','IfxEray_writeData'
	.calls	'IfxEray_setMessageBufferInterruptDestination','.cocofun_4'
	.calls	'IfxEray_setNewDataInterruptDestination','.cocofun_4'
	.calls	'IfxEray_calcHeaderCrc','',0
	.calls	'IfxEray_changePocState','',0
	.calls	'IfxEray_clearAllFlags','',0
	.calls	'IfxEray_enableInterruptLines','',0
	.calls	'IfxEray_getAddress','',0
	.calls	'IfxEray_getIndex','',0
	.calls	'IfxEray_readData','',0
	.calls	'IfxEray_readFrame','',0
	.calls	'IfxEray_resetModule','',0
	.calls	'IfxEray_setMessageBufferInterruptDestination','',0
	.calls	'.cocofun_4','',0
	.calls	'IfxEray_setNewDataInterruptDestination','',0
	.calls	'IfxEray_setPocReady','',0
	.calls	'IfxEray_setSlot','',0
	.extern	IfxEray_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.calls	'IfxEray_writeData','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L61:
	.word	88465
	.half	3
	.word	.L62
	.byte	4
.L60:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L63
	.byte	2,1,1,3
	.word	166
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	169
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	214
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	226
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	306
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	280
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	312
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	312
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	280
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5
.L146:
	.byte	7
	.byte	'unsigned char',0,1,8
.L173:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_P_OUT_Bits',0,4,145,3,16,4,11
	.byte	'P0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,4,171,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	460
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,4,171,2,16,4,11
	.byte	'PS0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,4,251,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	776
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,4,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,4,155,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1347
	.byte	4,2,35,0,0,14,4
	.word	421
	.byte	15,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,4,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	421
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	421
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	421
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,4,171,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1476
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,4,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	421
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	421
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	421
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,4,187,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1691
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,4,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	421
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	421
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	421
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,4,195,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1906
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,4,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	421
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	421
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	421
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,4,179,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2123
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,4,141,1,16,4,11
	.byte	'P0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,4,163,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2343
	.byte	4,2,35,0,0,14,24
	.word	421
	.byte	15,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,4,212,3,16,4,11
	.byte	'PD0',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	421
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	421
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	421
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	421
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	421
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	421
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	421
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	421
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	421
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	421
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	421
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	421
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,4,195,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2667
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,4,233,3,16,4,11
	.byte	'PD8',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	421
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	421
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	421
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	421
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	421
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	421
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	421
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	421
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	421
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	421
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	421
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	421
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,4,203,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2971
	.byte	4,2,35,0,0,14,8
	.word	421
	.byte	15,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,4,147,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3296
	.byte	4,2,35,0,0,14,12
	.word	421
	.byte	15,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,4,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,4,187,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3636
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,4,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,4,179,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4002
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,4,230,2,16,4,11
	.byte	'PS0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	398
	.byte	28,0,2,35,0,0,12,4,139,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4366
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,4,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	398
	.byte	24,0,2,35,0,0,12,4,155,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4513
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,4,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	398
	.byte	20,0,2,35,0,0,12,4,163,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4682
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,4,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	438
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,4,147,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4854
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,4,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	438
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	438
	.byte	12,0,2,35,2,0,12,4,219,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5029
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,4,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	398
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	421
	.byte	8,0,2,35,3,0,12,4,235,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5203
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,4,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	398
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	421
	.byte	4,0,2,35,3,0,12,4,243,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5377
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,4,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	398
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,4,227,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5553
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,4,208,2,16,4,11
	.byte	'PS0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,4,131,5,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5709
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,4,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	438
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,4,211,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6042
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,4,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	421
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	421
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,4,203,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6390
	.byte	4,2,35,0,0,14,32
	.word	6670
	.byte	15,7,0,14,56
	.word	421
	.byte	15,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	398
	.byte	32,0,2,35,0,0,12,4,139,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6728
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,4,131,4,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6815
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,4,220,5,25,128,2,13
	.byte	'OUT',0
	.word	736
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	1307
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	1427
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	1467
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	1651
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	1866
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	2083
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	2303
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	1467
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	2618
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	2658
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	2931
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	3247
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	3287
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	3587
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	3627
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	3962
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	4326
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	3287
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	4473
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	4642
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	4814
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	4989
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	5163
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	5337
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	5513
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	5669
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	6002
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	6350
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3287
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	6710
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	6719
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	6775
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	7342
	.byte	4,3,35,252,1,0,16
	.word	7382
	.byte	3
	.word	7952
	.byte	17,3,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,4
	.byte	'IfxPort_setPinModeInput',0,3,3,157,5,17,1,1,5
	.byte	'port',0,3,157,5,48
	.word	7957
	.byte	5
	.byte	'pinIndex',0,3,157,5,60
	.word	421
	.byte	5
	.byte	'mode',0,3,157,5,88
	.word	7962
	.byte	6,0,17,3,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,17,3,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,4
	.byte	'IfxPort_setPinModeOutput',0,3,3,163,5,17,1,1,5
	.byte	'port',0,3,163,5,49
	.word	7957
	.byte	5
	.byte	'pinIndex',0,3,163,5,61
	.word	421
	.byte	5
	.byte	'mode',0,3,163,5,90
	.word	8167
	.byte	5
	.byte	'index',0,3,163,5,114
	.word	8263
	.byte	6,0,17,3,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,3,169,5,17,1,1,5
	.byte	'port',0,3,169,5,44
	.word	7957
	.byte	5
	.byte	'pinIndex',0,3,169,5,56
	.word	421
	.byte	5
	.byte	'action',0,3,169,5,80
	.word	8576
	.byte	6,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,6,68,16,4,11
	.byte	'SRPN',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	421
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	421
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	421
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,6,93,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8757
	.byte	4,2,35,0,0,16
	.word	9047
	.byte	3
	.word	9086
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,5,247,1,17,1,1,5
	.byte	'src',0,5,247,1,60
	.word	9091
	.byte	6,0,10
	.byte	'_Ifx_ERAY_CLC_Bits',0,8,150,1,16,4,11
	.byte	'DISR',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	4,0,2,35,0,11
	.byte	'RMC',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,8,215,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9139
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_CUST1_Bits',0,8,174,1,16,4,11
	.byte	'INT0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'OEN',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IEN',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'IBFS',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'IBF1PAG',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	421
	.byte	2,1,2,35,0,11
	.byte	'IBF2PAG',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	2,6,2,35,1,11
	.byte	'RISA',0,1
	.word	421
	.byte	2,4,2,35,1,11
	.byte	'RISB',0,1
	.word	421
	.byte	2,2,2,35,1,11
	.byte	'STPWTS',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,8,231,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9358
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_ID_Bits',0,8,229,3,16,4,11
	.byte	'MOD_REV',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,8,175,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9643
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_CUST3_Bits',0,8,191,1,16,4,11
	.byte	'TO',0,4
	.word	398
	.byte	32,0,2,35,0,0,12,8,239,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9769
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_TEST1_Bits',0,8,211,12,16,4,11
	.byte	'WRTEN',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ELBE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	2,4,2,35,0,11
	.byte	'TMC',0,1
	.word	421
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'AOA',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'AOB',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	6,0,2,35,1,11
	.byte	'RXA',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'RXB',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'TXA',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'TXB',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'TXENA',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'TXENB',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	421
	.byte	2,0,2,35,2,11
	.byte	'CERA',0,1
	.word	421
	.byte	4,4,2,35,3,11
	.byte	'CERB',0,1
	.word	421
	.byte	4,0,2,35,3,0,12,8,255,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9851
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_TEST2_Bits',0,8,233,12,16,4,11
	.byte	'RS',0,1
	.word	421
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'SSEL',0,1
	.word	421
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	438
	.byte	7,2,2,35,0,11
	.byte	'WRECC',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,8,135,20,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10213
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_LCK_Bits',0,8,139,4,16,4,11
	.byte	'CLK',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'TMK',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,8,215,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10418
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_EIR_Bits',0,8,147,2,16,4,11
	.byte	'PEMC',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CNA',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'SFBM',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SFO',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'CCF',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'CCL',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EERR',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'RFO',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'EFA',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'IIBA',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'IOBA',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MHF',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'EDA',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'LTVA',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'TABA',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'EDB',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'LTVB',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'TABB',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,143,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10537
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_SIR_Bits',0,8,208,11,16,4,11
	.byte	'WST',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CAS',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'CYCS',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'TXI',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'RXI',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'RFNE',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'RFCL',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'NMVC',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TI0',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TI1',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'TIBC',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'TOBC',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'SWE',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'SUCS',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MBSI',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'SDS',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'WUPA',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MTSA',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	421
	.byte	6,0,2,35,2,11
	.byte	'WUPB',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MTSB',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	6,0,2,35,3,0,12,8,183,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10951
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_EILS_Bits',0,8,249,1,16,4,11
	.byte	'PEMCL',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CNAL',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'SFBML',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SFOL',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'CCFL',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'CCLL',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EERRL',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'RFOL',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'EFAL',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'IIBAL',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'IOBAL',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MHFL',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'EDAL',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'LTVAL',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'TABAL',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'EDBL',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'LTVBL',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'TABBL',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,135,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11375
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_SILS_Bits',0,8,181,11,16,4,11
	.byte	'WSTL',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CASL',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'CYCSL',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'TXIL',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'RXIL',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'RFNEL',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'RFCLL',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'NMVCL',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TI0L',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TI1L',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'TIBCL',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'TOBCL',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'SWEL',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'SUCSL',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MBSIL',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'SDSL',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'WUPAL',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MTSAL',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	421
	.byte	6,0,2,35,2,11
	.byte	'WUPBL',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MTSBL',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	6,0,2,35,3,0,12,8,175,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11808
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_EIES_Bits',0,8,223,1,16,4,11
	.byte	'PEMCE',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CNAE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'SFBME',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SFOE',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'CCFE',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'CCLE',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EERRE',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'RFOE',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'EFAE',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'IIBAE',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'IOBAE',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MHFE',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'EDAE',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'LTVAE',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'TABAE',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'EDBE',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'LTVBE',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'TABBE',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,255,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12253
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_EIER_Bits',0,8,197,1,16,4,11
	.byte	'PEMCE',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CNAE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'SFBME',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SFOE',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'CCFE',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'CCLE',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EERRE',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'RFOE',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'EFAE',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'IIBAE',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'IOBAE',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MHFE',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'EDAE',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'LTVAE',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'TABAE',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'EDBE',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'LTVBE',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'TABBE',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,247,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12686
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_SIES_Bits',0,8,154,11,16,4,11
	.byte	'WSTE',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CASE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'CYCSE',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'TXIE',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'RXIE',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'RFNEE',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'RFCLE',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'NMVCE',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TI0E',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TI1E',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'TIBCE',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'TOBCE',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'SWEE',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'SUCSE',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MBSIE',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'SDSE',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'WUPAE',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MTSAE',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	421
	.byte	6,0,2,35,2,11
	.byte	'WUPBE',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MTSBE',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	6,0,2,35,3,0,12,8,167,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13119
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_SIER_Bits',0,8,255,10,16,4,11
	.byte	'WSTE',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CASE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'CYCSE',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'TXIE',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'RXIE',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'RFNEE',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'RFCLE',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'NMVCE',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TI0E',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TI1E',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'TIBCE',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'TOBCE',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'SWEE',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'SUCSE',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MBSIE',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'SDSE',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'WUPAE',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MTSAE',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	421
	.byte	6,0,2,35,2,11
	.byte	'WUPBE',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MTSBE',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	6,0,2,35,3,0,12,8,159,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13564
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_ILE_Bits',0,8,237,3,16,4,11
	.byte	'EINT0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'EINT1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	398
	.byte	30,0,2,35,0,0,12,8,183,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14009
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_T0C_Bits',0,8,189,12,16,4,11
	.byte	'T0RC',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'T0MS',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'T0CC',0,1
	.word	421
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'T0MO',0,2
	.word	438
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,8,239,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14131
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_T1C_Bits',0,8,201,12,16,4,11
	.byte	'T1RC',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'T1MS',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	438
	.byte	14,0,2,35,0,11
	.byte	'T1MC',0,2
	.word	438
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,8,247,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14329
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_STPW1_Bits',0,8,235,11,16,4,11
	.byte	'ESWT',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'SWMS',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'EDGE',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SSWT',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'EETP',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'EINT0',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EINT1',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'SCCV',0,1
	.word	421
	.byte	6,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'SMTV',0,2
	.word	438
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,8,191,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14488
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_STPW2_Bits',0,8,252,11,16,4,11
	.byte	'SSCVA',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'SSCVB',0,2
	.word	438
	.byte	11,5,2,35,2,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,199,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14770
	.byte	4,2,35,0,0,14,44
	.word	421
	.byte	15,43,0,10
	.byte	'_Ifx_ERAY_SUCC1_Bits',0,8,133,12,16,4,11
	.byte	'CMD',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	3,1,2,35,0,11
	.byte	'PBSY',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TXST',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TXSY',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'CSA',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'PTA',0,1
	.word	421
	.byte	5,3,2,35,2,11
	.byte	'WUCS',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'TSM',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'HCSE',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MTSA',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MTSB',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'CCHA',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'CCHB',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	421
	.byte	4,0,2,35,3,0,12,8,207,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14927
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_SUCC2_Bits',0,8,154,12,16,4,11
	.byte	'LT',0,4
	.word	398
	.byte	21,11,2,35,0,11
	.byte	'reserved_21',0,1
	.word	421
	.byte	3,0,2,35,2,11
	.byte	'LTN',0,1
	.word	421
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	421
	.byte	4,0,2,35,3,0,12,8,215,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15267
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_SUCC3_Bits',0,8,163,12,16,4,11
	.byte	'WCP',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'WCF',0,1
	.word	421
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	398
	.byte	24,0,2,35,0,0,12,8,223,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15410
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_NEMC_Bits',0,8,201,9,16,4,11
	.byte	'NML',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	398
	.byte	28,0,2,35,0,0,12,8,151,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15530
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_PRTC1_Bits',0,8,148,10,16,4,11
	.byte	'TSST',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'CASM',0,2
	.word	438
	.byte	7,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'SPP',0,1
	.word	421
	.byte	2,2,2,35,1,11
	.byte	'BRP',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'RXW',0,2
	.word	438
	.byte	9,7,2,35,2,11
	.byte	'reserved_25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'RWP',0,1
	.word	421
	.byte	6,0,2,35,3,0,12,8,215,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15634
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_PRTC2_Bits',0,8,161,10,16,4,11
	.byte	'RXI',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'RXL',0,1
	.word	421
	.byte	6,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'TXI',0,1
	.word	421
	.byte	8,0,2,35,2,11
	.byte	'TXL',0,1
	.word	421
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,8,223,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15840
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MHDC_Bits',0,8,206,5,16,4,11
	.byte	'SFDL',0,1
	.word	421
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	438
	.byte	9,0,2,35,0,11
	.byte	'SLT',0,2
	.word	438
	.byte	13,3,2,35,2,11
	.byte	'reserved_29',0,1
	.word	421
	.byte	3,0,2,35,3,0,12,8,143,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16036
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC01_Bits',0,8,227,2,16,4,11
	.byte	'UT',0,4
	.word	398
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	438
	.byte	12,0,2,35,2,0,12,8,199,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16179
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC02_Bits',0,8,234,2,16,4,11
	.byte	'MPC',0,2
	.word	438
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'SNM',0,1
	.word	421
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	438
	.byte	12,0,2,35,2,0,12,8,207,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16285
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC03_Bits',0,8,243,2,16,4,11
	.byte	'UIOA',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'UIOB',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'MIOA',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MIOB',0,1
	.word	421
	.byte	7,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,215,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16430
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC04_Bits',0,8,254,2,16,4,11
	.byte	'NIT',0,2
	.word	438
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'OCS',0,2
	.word	438
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,8,223,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16609
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC05_Bits',0,8,135,3,16,4,11
	.byte	'DCA',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'DCB',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'CDD',0,1
	.word	421
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	421
	.byte	3,0,2,35,2,11
	.byte	'DEC',0,1
	.word	421
	.byte	8,0,2,35,3,0,12,8,231,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16754
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC06_Bits',0,8,145,3,16,4,11
	.byte	'ASR',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'MOD',0,2
	.word	438
	.byte	11,5,2,35,2,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,239,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16906
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC07_Bits',0,8,154,3,16,4,11
	.byte	'SSL',0,2
	.word	438
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	6,0,2,35,1,11
	.byte	'NSS',0,2
	.word	438
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	6,0,2,35,3,0,12,8,247,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17051
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC08_Bits',0,8,163,3,16,4,11
	.byte	'MSL',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	438
	.byte	10,0,2,35,0,11
	.byte	'NMS',0,2
	.word	438
	.byte	13,3,2,35,2,11
	.byte	'reserved_29',0,1
	.word	421
	.byte	3,0,2,35,3,0,12,8,255,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17196
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC09_Bits',0,8,172,3,16,4,11
	.byte	'APO',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'MAPO',0,1
	.word	421
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	421
	.byte	3,0,2,35,1,11
	.byte	'DSI',0,1
	.word	421
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	438
	.byte	14,0,2,35,2,0,12,8,135,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17340
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC10_Bits',0,8,183,3,16,4,11
	.byte	'MOC',0,2
	.word	438
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'MRC',0,2
	.word	438
	.byte	11,5,2,35,2,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,143,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17523
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_GTUC11_Bits',0,8,192,3,16,4,11
	.byte	'EOCC',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'ERCC',0,1
	.word	421
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	6,0,2,35,1,11
	.byte	'EOC',0,1
	.word	421
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'ERC',0,1
	.word	421
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,151,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17668
	.byte	4,2,35,0,0,14,52
	.word	421
	.byte	15,51,0,10
	.byte	'_Ifx_ERAY_CCSV_Bits',0,8,132,1,16,4,11
	.byte	'POCS',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'FSI',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'HRQ',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'SLM',0,1
	.word	421
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	2,4,2,35,1,11
	.byte	'CSNI',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'CSAI',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'CSI',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'WSV',0,1
	.word	421
	.byte	3,5,2,35,2,11
	.byte	'RCA',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'PSL',0,1
	.word	421
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,8,207,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17899
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_CCEV_Bits',0,8,122,16,4,11
	.byte	'CCFC',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	2,2,2,35,0,11
	.byte	'ERRM',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'PTAC',0,1
	.word	421
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	398
	.byte	19,0,2,35,0,0,12,8,199,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18188
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_SCV_Bits',0,8,232,10,16,4,11
	.byte	'SCCA',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'SCCB',0,2
	.word	438
	.byte	11,5,2,35,2,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,143,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18347
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MTCCV_Bits',0,8,152,7,16,4,11
	.byte	'MTV',0,2
	.word	438
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'CCV',0,1
	.word	421
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	438
	.byte	10,0,2,35,2,0,12,8,207,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18491
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_RCV_Bits',0,8,173,10,16,4,11
	.byte	'RCV',0,2
	.word	438
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	398
	.byte	20,0,2,35,0,0,12,8,231,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18635
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_OCV_Bits',0,8,248,9,16,4,11
	.byte	'OCV',0,4
	.word	398
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,2
	.word	438
	.byte	13,0,2,35,2,0,12,8,191,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18739
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_SFS_Bits',0,8,241,10,16,4,11
	.byte	'VSAE',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'VSAO',0,1
	.word	421
	.byte	4,0,2,35,0,11
	.byte	'VSBE',0,1
	.word	421
	.byte	4,4,2,35,1,11
	.byte	'VSBO',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'MOCS',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'OCLR',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'MRCS',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'RCLR',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	438
	.byte	12,0,2,35,2,0,12,8,151,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18843
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_SWNIT_Bits',0,8,171,12,16,4,11
	.byte	'SESA',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'SBSA',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'TCSA',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SESB',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'SBSB',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'TCSB',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MTSA',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MTSB',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'SENA',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'SBNA',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'SENB',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'SBNB',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	398
	.byte	20,0,2,35,0,0,12,8,231,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19060
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_ACS_Bits',0,8,105,16,4,11
	.byte	'VFRA',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'SEDA',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'CEDA',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'CIA',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'SBVA',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	421
	.byte	3,0,2,35,0,11
	.byte	'VFRB',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'SEDB',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'CEDB',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'CIB',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'SBVB',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	398
	.byte	19,0,2,35,0,0,12,8,191,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19343
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_ESID_Bits',0,8,179,2,16,4,11
	.byte	'EID',0,2
	.word	438
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	4,2,2,35,1,11
	.byte	'RXEA',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'RXEB',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,8,159,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19611
	.byte	4,2,35,0,0,14,60
	.word	19731
	.byte	15,14,0,10
	.byte	'_Ifx_ERAY_OSID_Bits',0,8,255,9,16,4,11
	.byte	'OID',0,2
	.word	438
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	4,2,2,35,1,11
	.byte	'RXOA',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'RXOB',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,8,199,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19780
	.byte	4,2,35,0,0,14,60
	.word	19900
	.byte	15,14,0,10
	.byte	'_Ifx_ERAY_NMV_Bits',0,8,208,9,16,4,11
	.byte	'NM',0,4
	.word	398
	.byte	32,0,2,35,0,0,12,8,159,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19949
	.byte	4,2,35,0,0,14,12
	.word	19989
	.byte	15,2,0,14,196,2
	.word	421
	.byte	15,195,2,0,10
	.byte	'_Ifx_ERAY_MRC_Bits',0,8,249,5,16,4,11
	.byte	'FDB',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'FFB',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'LCB',0,1
	.word	421
	.byte	8,0,2,35,2,11
	.byte	'SEC',0,1
	.word	421
	.byte	2,6,2,35,3,11
	.byte	'SPLM',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,167,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20049
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_FRF_Bits',0,8,196,2,16,4,11
	.byte	'CH',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'FID',0,2
	.word	438
	.byte	11,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	421
	.byte	3,0,2,35,1,11
	.byte	'CYF',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'RSS',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'RNF',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	421
	.byte	7,0,2,35,3,0,12,8,175,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20214
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_FRFM_Bits',0,8,208,2,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'MFID',0,2
	.word	438
	.byte	11,3,2,35,0,11
	.byte	'reserved_13',0,4
	.word	398
	.byte	19,0,2,35,0,0,12,8,183,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20400
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_FCL_Bits',0,8,189,2,16,4,11
	.byte	'CL',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	398
	.byte	24,0,2,35,0,0,12,8,167,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20528
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MHDS_Bits',0,8,230,5,16,4,11
	.byte	'EIBF',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'EOBF',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'EMR',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'ETBF1',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'ETBF2',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'FMBD',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MFMB',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'CRAM',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'FMB',0,1
	.word	421
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'MBT',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MBU',0,1
	.word	421
	.byte	7,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,159,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20630
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_LDTS_Bits',0,8,147,4,16,4,11
	.byte	'LDTA',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'LDTB',0,2
	.word	438
	.byte	11,5,2,35,2,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,12,8,223,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20940
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_FSR_Bits',0,8,216,2,16,4,11
	.byte	'RFNE',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'RFCL',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'RFO',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	421
	.byte	5,0,2,35,0,11
	.byte	'RFFL',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,12,8,191,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21085
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MHDF_Bits',0,8,215,5,16,4,11
	.byte	'SNUA',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'SNUB',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'FNFA',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'FNFB',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'TBFA',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'TBFB',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'TNSA',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'TNSB',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'WAHP',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	398
	.byte	23,0,2,35,0,0,12,8,151,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21259
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_TXRQ1_Bits',0,8,245,12,16,4,11
	.byte	'TXR0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'TXR1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'TXR2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'TXR3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'TXR4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'TXR5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'TXR6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'TXR7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TXR8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TXR9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'TXR10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'TXR11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'TXR12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'TXR13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'TXR14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'TXR15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'TXR16',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'TXR17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'TXR18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'TXR19',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'TXR20',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'TXR21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'TXR22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'TXR23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'TXR24',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'TXR25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'TXR26',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'TXR27',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'TXR28',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'TXR29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'TXR30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'TXR31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,143,20,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21492
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_TXRQ2_Bits',0,8,154,13,16,4,11
	.byte	'TXR32',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'TXR33',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'TXR34',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'TXR35',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'TXR36',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'TXR37',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'TXR38',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'TXR39',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TXR40',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TXR41',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'TXR42',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'TXR43',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'TXR44',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'TXR45',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'TXR46',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'TXR47',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'TXR48',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'TXR49',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'TXR50',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'TXR51',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'TXR52',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'TXR53',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'TXR54',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'TXR55',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'TXR56',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'TXR57',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'TXR58',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'TXR59',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'TXR60',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'TXR61',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'TXR62',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'TXR63',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,151,20,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22094
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_TXRQ3_Bits',0,8,191,13,16,4,11
	.byte	'TXR64',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'TXR65',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'TXR66',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'TXR67',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'TXR68',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'TXR69',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'TXR70',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'TXR71',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TXR72',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TXR73',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'TXR74',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'TXR75',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'TXR76',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'TXR77',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'TXR78',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'TXR79',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'TXR80',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'TXR81',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'TXR82',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'TXR83',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'TXR84',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'TXR85',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'TXR86',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'TXR87',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'TXR88',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'TXR89',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'TXR90',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'TXR91',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'TXR92',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'TXR93',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'TXR94',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'TXR95',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,159,20,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22706
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_TXRQ4_Bits',0,8,228,13,16,4,11
	.byte	'TXR96',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'TXR97',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'TXR98',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'TXR99',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'TXR100',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'TXR101',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'TXR102',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'TXR103',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TXR104',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TXR105',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'TXR106',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'TXR107',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'TXR108',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'TXR109',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'TXR110',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'TXR111',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'TXR112',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'TXR113',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'TXR114',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'TXR115',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'TXR116',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'TXR117',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'TXR118',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'TXR119',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'TXR120',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'TXR121',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'TXR122',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'TXR123',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'TXR124',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'TXR125',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'TXR126',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'TXR127',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,167,20,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23318
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_NDAT1_Bits',0,8,161,7,16,4,11
	.byte	'ND0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ND1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'ND2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'ND3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'ND4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'ND5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'ND6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'ND7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'ND8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'ND9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'ND10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'ND11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'ND12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'ND13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'ND14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'ND15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'ND16',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'ND17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'ND18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'ND19',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'ND20',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'ND21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'ND22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'ND23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'ND24',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'ND25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'ND26',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'ND27',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'ND28',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'ND29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'ND30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'ND31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,215,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23958
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_NDAT2_Bits',0,8,198,7,16,4,11
	.byte	'ND32',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ND33',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'ND34',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'ND35',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'ND36',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'ND37',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'ND38',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'ND39',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'ND40',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'ND41',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'ND42',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'ND43',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'ND44',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'ND45',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'ND46',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'ND47',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'ND48',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'ND49',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'ND50',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'ND51',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'ND52',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'ND53',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'ND54',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'ND55',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'ND56',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'ND57',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'ND58',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'ND59',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'ND60',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'ND61',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'ND62',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'ND63',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,223,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24528
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_NDAT3_Bits',0,8,235,7,16,4,11
	.byte	'ND64',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ND65',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'ND66',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'ND67',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'ND68',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'ND69',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'ND70',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'ND71',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'ND72',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'ND73',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'ND74',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'ND75',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'ND76',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'ND77',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'ND78',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'ND79',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'ND80',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'ND81',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'ND82',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'ND83',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'ND84',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'ND85',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'ND86',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'ND87',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'ND88',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'ND89',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'ND90',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'ND91',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'ND92',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'ND93',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'ND94',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'ND95',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,231,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25108
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_NDAT4_Bits',0,8,144,8,16,4,11
	.byte	'ND96',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ND97',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'ND98',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'ND99',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'ND100',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'ND101',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'ND102',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'ND103',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'ND104',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'ND105',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'ND106',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'ND107',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'ND108',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'ND109',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'ND110',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'ND111',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'ND112',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'ND113',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'ND114',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'ND115',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'ND116',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'ND117',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'ND118',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'ND119',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'ND120',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'ND121',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'ND122',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'ND123',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'ND124',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'ND125',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'ND126',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'ND127',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,239,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25688
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MBSC1_Bits',0,8,186,4,16,4,11
	.byte	'MBC0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'MBC1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'MBC2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'MBC3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'MBC4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'MBC5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MBC6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MBC7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'MBC8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'MBC9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'MBC10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MBC11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'MBC12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'MBC13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MBC14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'MBC15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'MBC16',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MBC17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'MBC18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'MBC19',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'MBC20',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'MBC21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'MBC22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'MBC23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MBC24',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MBC25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'MBC26',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'MBC27',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'MBC28',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MBC29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'MBC30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'MBC31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,239,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26296
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MBSC2_Bits',0,8,223,4,16,4,11
	.byte	'MBC32',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'MBC33',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'MBC34',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'MBC35',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'MBC36',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'MBC37',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MBC38',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MBC39',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'MBC40',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'MBC41',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'MBC42',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MBC43',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'MBC44',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'MBC45',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MBC46',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'MBC47',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'MBC48',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MBC49',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'MBC50',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'MBC51',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'MBC52',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'MBC53',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'MBC54',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'MBC55',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MBC56',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MBC57',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'MBC58',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'MBC59',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'MBC60',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MBC61',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'MBC62',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'MBC63',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,247,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26898
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MBSC3_Bits',0,8,132,5,16,4,11
	.byte	'MBC64',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'MBC65',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'MBC66',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'MBC67',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'MBC68',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'MBC69',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MBC70',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MBC71',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'MBC72',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'MBC73',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'MBC74',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MBC75',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'MBC76',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'MBC77',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MBC78',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'MBC79',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'MBC80',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MBC81',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'MBC82',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'MBC83',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'MBC84',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'MBC85',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'MBC86',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'MBC87',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MBC88',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MBC89',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'MBC90',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'MBC91',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'MBC92',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MBC93',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'MBC94',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'MBC95',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,255,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27510
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MBSC4_Bits',0,8,169,5,16,4,11
	.byte	'MBC96',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'MBC97',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'MBC98',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'MBC99',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'MBC100',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'MBC101',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MBC102',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MBC103',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'MBC104',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'MBC105',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'MBC106',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MBC107',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'MBC108',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'MBC109',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MBC110',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'MBC111',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'MBC112',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MBC113',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'MBC114',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'MBC115',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'MBC116',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'MBC117',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'MBC118',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'MBC119',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MBC120',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MBC121',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'MBC122',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'MBC123',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'MBC124',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MBC125',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'MBC126',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'MBC127',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,135,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28122
	.byte	4,2,35,0,0,14,88
	.word	421
	.byte	15,87,0,10
	.byte	'_Ifx_ERAY_NDIC1_Bits',0,8,181,8,16,4,11
	.byte	'NDIP0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'NDIP1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'NDIP2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'NDIP3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'NDIP4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'NDIP5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'NDIP6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'NDIP7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'NDIP8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'NDIP9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'NDIP10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'NDIP11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'NDIP12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'NDIP13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'NDIP14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'NDIP15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'NDIP16',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'NDIP17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'NDIP18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'NDIP19',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'NDIP20',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'NDIP21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'NDIP22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'NDIP23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'NDIP24',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'NDIP25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'NDIP26',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'NDIP27',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'NDIP28',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'NDIP29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'NDIP30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'NDIP31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,247,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28771
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_NDIC2_Bits',0,8,218,8,16,4,11
	.byte	'NDIP32',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'NDIP33',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'NDIP34',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'NDIP35',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'NDIP36',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'NDIP37',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'NDIP38',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'NDIP39',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'NDIP40',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'NDIP41',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'NDIP42',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'NDIP43',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'NDIP44',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'NDIP45',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'NDIP46',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'NDIP47',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'NDIP48',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'NDIP49',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'NDIP50',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'NDIP51',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'NDIP52',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'NDIP53',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'NDIP54',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'NDIP55',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'NDIP56',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'NDIP57',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'NDIP58',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'NDIP59',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'NDIP60',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'NDIP61',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'NDIP62',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'NDIP63',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,255,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29405
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_NDIC3_Bits',0,8,255,8,16,4,11
	.byte	'NDIP64',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'NDIP65',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'NDIP66',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'NDIP67',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'NDIP68',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'NDIP69',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'NDIP70',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'NDIP71',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'NDIP72',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'NDIP73',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'NDIP74',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'NDIP75',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'NDIP76',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'NDIP77',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'NDIP78',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'NDIP79',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'NDIP80',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'NDIP81',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'NDIP82',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'NDIP83',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'NDIP84',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'NDIP85',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'NDIP86',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'NDIP87',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'NDIP88',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'NDIP89',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'NDIP90',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'NDIP91',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'NDIP92',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'NDIP93',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'NDIP94',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'NDIP95',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,135,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30049
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_NDIC4_Bits',0,8,164,9,16,4,11
	.byte	'NDIP96',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'NDIP97',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'NDIP98',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'NDIP99',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'NDIP100',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'NDIP101',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'NDIP102',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'NDIP103',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'NDIP104',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'NDIP105',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'NDIP106',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'NDIP107',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'NDIP108',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'NDIP109',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'NDIP110',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'NDIP111',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'NDIP112',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'NDIP113',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'NDIP114',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'NDIP115',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'NDIP116',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'NDIP117',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'NDIP118',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'NDIP119',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'NDIP120',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'NDIP121',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'NDIP122',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'NDIP123',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'NDIP124',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'NDIP125',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'NDIP126',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'NDIP127',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,143,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30693
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MSIC1_Bits',0,8,132,6,16,4,11
	.byte	'MSIP0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'MSIP1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'MSIP2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'MSIP3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'MSIP4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'MSIP5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MSIP6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MSIP7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'MSIP8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'MSIP9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'MSIP10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MSIP11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'MSIP12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'MSIP13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MSIP14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'MSIP15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'MSIP16',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MSIP17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'MSIP18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'MSIP19',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'MSIP20',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'MSIP21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'MSIP22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'MSIP23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MSIP24',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MSIP25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'MSIP26',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'MSIP27',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'MSIP28',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MSIP29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'MSIP30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'MSIP31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,175,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31365
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MSIC2_Bits',0,8,169,6,16,4,11
	.byte	'MSIP32',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'MSIP33',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'MSIP34',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'MSIP35',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'MSIP36',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'MSIP37',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MSIP38',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MSIP39',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'MSIP40',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'MSIP41',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'MSIP42',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MSIP43',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'MSIP44',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'MSIP45',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MSIP46',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'MSIP47',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'MSIP48',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MSIP49',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'MSIP50',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'MSIP51',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'MSIP52',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'MSIP53',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'MSIP54',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'MSIP55',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MSIP56',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MSIP57',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'MSIP58',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'MSIP59',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'MSIP60',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MSIP61',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'MSIP62',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'MSIP63',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,183,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31999
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MSIC3_Bits',0,8,206,6,16,4,11
	.byte	'MSIP64',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'MSIP65',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'MSIP66',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'MSIP67',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'MSIP68',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'MSIP69',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MSIP70',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MSIP71',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'MSIP72',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'MSIP73',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'MSIP74',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MSIP75',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'MSIP76',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'MSIP77',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MSIP78',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'MSIP79',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'MSIP80',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MSIP81',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'MSIP82',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'MSIP83',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'MSIP84',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'MSIP85',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'MSIP86',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'MSIP87',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MSIP88',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MSIP89',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'MSIP90',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'MSIP91',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'MSIP92',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MSIP93',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'MSIP94',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'MSIP95',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,191,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32643
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MSIC4_Bits',0,8,243,6,16,4,11
	.byte	'MSIP96',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'MSIP97',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'MSIP98',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'MSIP99',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'MSIP100',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'MSIP101',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'MSIP102',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MSIP103',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'MSIP104',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'MSIP105',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'MSIP106',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'MSIP107',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'MSIP108',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'MSIP109',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'MSIP110',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'MSIP111',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'MSIP112',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'MSIP113',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'MSIP114',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'MSIP115',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'MSIP116',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'MSIP117',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'MSIP118',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'MSIP119',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'MSIP120',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MSIP121',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'MSIP122',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'MSIP123',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'MSIP124',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MSIP125',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'MSIP126',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'MSIP127',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,199,17,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33287
	.byte	4,2,35,0,0,14,40
	.word	421
	.byte	15,39,0,10
	.byte	'_Ifx_ERAY_CREL_Bits',0,8,163,1,16,4,11
	.byte	'DAY',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'MON',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'YEAR',0,1
	.word	421
	.byte	4,4,2,35,2,11
	.byte	'SUBSTEP',0,1
	.word	421
	.byte	4,0,2,35,2,11
	.byte	'STEP',0,1
	.word	421
	.byte	4,4,2,35,3,11
	.byte	'REL',0,1
	.word	421
	.byte	4,0,2,35,3,0,12,8,223,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33968
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_ENDN_Bits',0,8,173,2,16,4,11
	.byte	'ETV',0,4
	.word	398
	.byte	32,0,2,35,0,0,12,8,151,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34131
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_WRDS_Bits',0,8,137,14,16,4,11
	.byte	'MDWB0',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'MDWB1',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'MDWB2',0,1
	.word	421
	.byte	8,0,2,35,2,11
	.byte	'MDWB3',0,1
	.word	421
	.byte	8,0,2,35,3,0,12,8,175,20,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34213
	.byte	4,2,35,0,0,14,128,2
	.word	34308
	.byte	15,63,0,10
	.byte	'_Ifx_ERAY_WRHS1_Bits',0,8,146,14,16,4,11
	.byte	'FID',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'CYC',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'CHA',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'CHB',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'CFG',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'PPIT',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'TXM',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MBI',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0
.L228:
	.byte	12,8,183,20,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34358
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_WRHS2_Bits',0,8,162,14,16,4,11
	.byte	'CRC',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'PLC',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	438
	.byte	9,0,2,35,2,0
.L231:
	.byte	12,8,191,20,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34616
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_WRHS3_Bits',0,8,171,14,16,4,11
	.byte	'DP',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,4
	.word	398
	.byte	21,0,2,35,0,0,12,8,199,20,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34760
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_IBCM_Bits',0,8,205,3,16,4,11
	.byte	'LHSH',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'LDSH',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'STXRH',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	438
	.byte	13,0,2,35,0,11
	.byte	'LHSS',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'LDSS',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'STXRS',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	438
	.byte	13,0,2,35,2,0,12,8,159,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34865
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_IBCR_Bits',0,8,218,3,16,4,11
	.byte	'IBRH',0,1
	.word	421
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	438
	.byte	8,1,2,35,0,11
	.byte	'IBSYH',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'IBRS',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	438
	.byte	8,1,2,35,2,11
	.byte	'IBSYS',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,167,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35075
	.byte	4,2,35,0,0,14,232,1
	.word	421
	.byte	15,231,1,0,10
	.byte	'_Ifx_ERAY_RDDS_Bits',0,8,180,10,16,4,11
	.byte	'MDRB0',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'MDRB1',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'MDRB2',0,1
	.word	421
	.byte	8,0,2,35,2,11
	.byte	'MDRB3',0,1
	.word	421
	.byte	8,0,2,35,3,0,12,8,239,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35264
	.byte	4,2,35,0,0,14,128,2
	.word	35359
	.byte	15,63,0,10
	.byte	'_Ifx_ERAY_RDHS1_Bits',0,8,189,10,16,4,11
	.byte	'FID',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'CYC',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'CHA',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'CHB',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'CFG',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'PPIT',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'TXM',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'MBI',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0
.L206:
	.byte	12,8,247,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35409
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_RDHS2_Bits',0,8,205,10,16,4,11
	.byte	'CRC',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'PLC',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'PLR',0,1
	.word	421
	.byte	7,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	421
	.byte	1,0,2,35,3,0
.L209:
	.byte	12,8,255,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35667
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_RDHS3_Bits',0,8,216,10,16,4,11
	.byte	'DP',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'RCC',0,1
	.word	421
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	421
	.byte	2,0,2,35,2,11
	.byte	'RCI',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'SFI',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'SYN',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'NFI',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'PPI',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0
.L211:
	.byte	12,8,135,19,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35849
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_MBS_Bits',0,8,156,4,16,4,11
	.byte	'VFRA',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'VFRB',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'SEOA',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SEOB',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'CEOA',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'CEOB',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'SVOA',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'SVOB',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TCIA',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TCIB',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'ESA',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'ESB',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'MLST',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'FTA',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'FTB',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'CCS',0,1
	.word	421
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	421
	.byte	2,0,2,35,2,11
	.byte	'RCIS',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'SFIS',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'SYNS',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'NFIS',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'PPIS',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,8,231,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36113
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_OBCM_Bits',0,8,214,9,16,4,11
	.byte	'RHSS',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'RDSS',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	438
	.byte	14,0,2,35,0,11
	.byte	'RHSH',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'RDSH',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	438
	.byte	14,0,2,35,2,0,12,8,167,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36602
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_OBCR_Bits',0,8,225,9,16,4,11
	.byte	'OBRS',0,1
	.word	421
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'VIEW',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'REQ',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	5,1,2,35,1,11
	.byte	'OBSYS',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'OBRH',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	438
	.byte	9,0,2,35,2,0,12,8,175,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36778
	.byte	4,2,35,0,0,14,216,2
	.word	421
	.byte	15,215,2,0,10
	.byte	'_Ifx_ERAY_OTSS_Bits',0,8,137,10,16,4,11
	.byte	'OTGB0',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'OTGB1',0,1
	.word	421
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	6,0,2,35,1,11
	.byte	'OTGB2',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	438
	.byte	15,0,2,35,2,0,12,8,207,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37004
	.byte	4,2,35,0,0,14,116
	.word	421
	.byte	15,115,0,10
	.byte	'_Ifx_ERAY_OCS_Bits',0,8,238,9,16,4,11
	.byte	'reserved_0',0,4
	.word	398
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	421
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0,12,8,183,18,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37199
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_KRSTCLR_Bits',0,8,132,4,16,4,11
	.byte	'CLR',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	398
	.byte	31,0,2,35,0,0,12,8,207,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37360
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_KRST1_Bits',0,8,253,3,16,4,11
	.byte	'RST',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	398
	.byte	31,0,2,35,0,0,12,8,199,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37467
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_KRST0_Bits',0,8,245,3,16,4,11
	.byte	'RST',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	398
	.byte	30,0,2,35,0,0,12,8,191,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37572
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ERAY_ACCEN0_Bits',0,8,68,16,4,11
	.byte	'EN0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	421
	.byte	1,0,2,35,3,0,12,8,183,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37696
	.byte	4,2,35,0,0,14,128,14
	.word	421
	.byte	15,255,13,0,10
	.byte	'_Ifx_ERAY',0,8,216,20,25,128,32,13
	.byte	'CLC',0
	.word	9318
	.byte	4,2,35,0,13
	.byte	'CUST1',0
	.word	9603
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	9729
	.byte	4,2,35,8,13
	.byte	'CUST3',0
	.word	9811
	.byte	4,2,35,12,13
	.byte	'TEST1',0
	.word	10173
	.byte	4,2,35,16,13
	.byte	'TEST2',0
	.word	10378
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	1467
	.byte	4,2,35,24,13
	.byte	'LCK',0
	.word	10497
	.byte	4,2,35,28,13
	.byte	'EIR',0
	.word	10911
	.byte	4,2,35,32,13
	.byte	'SIR',0
	.word	11335
	.byte	4,2,35,36,13
	.byte	'EILS',0
	.word	11768
	.byte	4,2,35,40,13
	.byte	'SILS',0
	.word	12213
	.byte	4,2,35,44,13
	.byte	'EIES',0
	.word	12646
	.byte	4,2,35,48,13
	.byte	'EIER',0
	.word	13079
	.byte	4,2,35,52,13
	.byte	'SIES',0
	.word	13524
	.byte	4,2,35,56,13
	.byte	'SIER',0
	.word	13969
	.byte	4,2,35,60,13
	.byte	'ILE',0
	.word	14091
	.byte	4,2,35,64,13
	.byte	'T0C',0
	.word	14289
	.byte	4,2,35,68,13
	.byte	'T1C',0
	.word	14448
	.byte	4,2,35,72,13
	.byte	'STPW1',0
	.word	14730
	.byte	4,2,35,76,13
	.byte	'STPW2',0
	.word	14878
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	14918
	.byte	44,2,35,84,13
	.byte	'SUCC1',0
	.word	15227
	.byte	4,3,35,128,1,13
	.byte	'SUCC2',0
	.word	15370
	.byte	4,3,35,132,1,13
	.byte	'SUCC3',0
	.word	15490
	.byte	4,3,35,136,1,13
	.byte	'NEMC',0
	.word	15594
	.byte	4,3,35,140,1,13
	.byte	'PRTC1',0
	.word	15800
	.byte	4,3,35,144,1,13
	.byte	'PRTC2',0
	.word	15996
	.byte	4,3,35,148,1,13
	.byte	'MHDC',0
	.word	16139
	.byte	4,3,35,152,1,13
	.byte	'reserved_9C',0
	.word	1467
	.byte	4,3,35,156,1,13
	.byte	'GTUC01',0
	.word	16245
	.byte	4,3,35,160,1,13
	.byte	'GTUC02',0
	.word	16390
	.byte	4,3,35,164,1,13
	.byte	'GTUC03',0
	.word	16569
	.byte	4,3,35,168,1,13
	.byte	'GTUC04',0
	.word	16714
	.byte	4,3,35,172,1,13
	.byte	'GTUC05',0
	.word	16866
	.byte	4,3,35,176,1,13
	.byte	'GTUC06',0
	.word	17011
	.byte	4,3,35,180,1,13
	.byte	'GTUC07',0
	.word	17156
	.byte	4,3,35,184,1,13
	.byte	'GTUC08',0
	.word	17300
	.byte	4,3,35,188,1,13
	.byte	'GTUC09',0
	.word	17483
	.byte	4,3,35,192,1,13
	.byte	'GTUC10',0
	.word	17628
	.byte	4,3,35,196,1,13
	.byte	'GTUC11',0
	.word	17850
	.byte	4,3,35,200,1,13
	.byte	'reserved_CC',0
	.word	17890
	.byte	52,3,35,204,1,13
	.byte	'CCSV',0
	.word	18148
	.byte	4,3,35,128,2,13
	.byte	'CCEV',0
	.word	18307
	.byte	4,3,35,132,2,13
	.byte	'reserved_108',0
	.word	3287
	.byte	8,3,35,136,2,13
	.byte	'SCV',0
	.word	18451
	.byte	4,3,35,144,2,13
	.byte	'MTCCV',0
	.word	18595
	.byte	4,3,35,148,2,13
	.byte	'RCV',0
	.word	18699
	.byte	4,3,35,152,2,13
	.byte	'OCV',0
	.word	18803
	.byte	4,3,35,156,2,13
	.byte	'SFS',0
	.word	19020
	.byte	4,3,35,160,2,13
	.byte	'SWNIT',0
	.word	19303
	.byte	4,3,35,164,2,13
	.byte	'ACS',0
	.word	19571
	.byte	4,3,35,168,2,13
	.byte	'reserved_12C',0
	.word	1467
	.byte	4,3,35,172,2,13
	.byte	'ESID_1S',0
	.word	19771
	.byte	60,3,35,176,2,13
	.byte	'reserved_16C',0
	.word	1467
	.byte	4,3,35,236,2,13
	.byte	'OSID_1S',0
	.word	19940
	.byte	60,3,35,240,2,13
	.byte	'reserved_1AC',0
	.word	1467
	.byte	4,3,35,172,3,13
	.byte	'NMV_1S',0
	.word	20029
	.byte	12,3,35,176,3,13
	.byte	'reserved_1BC',0
	.word	20038
	.byte	196,2,3,35,188,3,13
	.byte	'MRC',0
	.word	20174
	.byte	4,3,35,128,6,13
	.byte	'FRF',0
	.word	20360
	.byte	4,3,35,132,6,13
	.byte	'FRFM',0
	.word	20488
	.byte	4,3,35,136,6,13
	.byte	'FCL',0
	.word	20590
	.byte	4,3,35,140,6,13
	.byte	'MHDS',0
	.word	20900
	.byte	4,3,35,144,6,13
	.byte	'LDTS',0
	.word	21045
	.byte	4,3,35,148,6,13
	.byte	'FSR',0
	.word	21219
	.byte	4,3,35,152,6,13
	.byte	'MHDF',0
	.word	21452
	.byte	4,3,35,156,6,13
	.byte	'TXRQ1',0
	.word	22054
	.byte	4,3,35,160,6,13
	.byte	'TXRQ2',0
	.word	22666
	.byte	4,3,35,164,6,13
	.byte	'TXRQ3',0
	.word	23278
	.byte	4,3,35,168,6,13
	.byte	'TXRQ4',0
	.word	23918
	.byte	4,3,35,172,6,13
	.byte	'NDAT1',0
	.word	24488
	.byte	4,3,35,176,6,13
	.byte	'NDAT2',0
	.word	25068
	.byte	4,3,35,180,6,13
	.byte	'NDAT3',0
	.word	25648
	.byte	4,3,35,184,6,13
	.byte	'NDAT4',0
	.word	26256
	.byte	4,3,35,188,6,13
	.byte	'MBSC1',0
	.word	26858
	.byte	4,3,35,192,6,13
	.byte	'MBSC2',0
	.word	27470
	.byte	4,3,35,196,6,13
	.byte	'MBSC3',0
	.word	28082
	.byte	4,3,35,200,6,13
	.byte	'MBSC4',0
	.word	28722
	.byte	4,3,35,204,6,13
	.byte	'reserved_350',0
	.word	28762
	.byte	88,3,35,208,6,13
	.byte	'NDIC1',0
	.word	29365
	.byte	4,3,35,168,7,13
	.byte	'NDIC2',0
	.word	30009
	.byte	4,3,35,172,7,13
	.byte	'NDIC3',0
	.word	30653
	.byte	4,3,35,176,7,13
	.byte	'NDIC4',0
	.word	31325
	.byte	4,3,35,180,7,13
	.byte	'MSIC1',0
	.word	31959
	.byte	4,3,35,184,7,13
	.byte	'MSIC2',0
	.word	32603
	.byte	4,3,35,188,7,13
	.byte	'MSIC3',0
	.word	33247
	.byte	4,3,35,192,7,13
	.byte	'MSIC4',0
	.word	33919
	.byte	4,3,35,196,7,13
	.byte	'reserved_3C8',0
	.word	33959
	.byte	40,3,35,200,7,13
	.byte	'CREL',0
	.word	34091
	.byte	4,3,35,240,7,13
	.byte	'ENDN',0
	.word	34173
	.byte	4,3,35,244,7,13
	.byte	'reserved_3F8',0
	.word	3287
	.byte	8,3,35,248,7,13
	.byte	'WRDS_1S',0
	.word	34348
	.byte	128,2,3,35,128,8,13
	.byte	'WRHS1',0
	.word	34576
	.byte	4,3,35,128,10,13
	.byte	'WRHS2',0
	.word	34720
	.byte	4,3,35,132,10,13
	.byte	'WRHS3',0
	.word	34825
	.byte	4,3,35,136,10,13
	.byte	'reserved_50C',0
	.word	1467
	.byte	4,3,35,140,10,13
	.byte	'IBCM',0
	.word	35035
	.byte	4,3,35,144,10,13
	.byte	'IBCR',0
	.word	35213
	.byte	4,3,35,148,10,13
	.byte	'reserved_518',0
	.word	35253
	.byte	232,1,3,35,152,10,13
	.byte	'RDDS_1S',0
	.word	35399
	.byte	128,2,3,35,128,12,13
	.byte	'RDHS1',0
	.word	35627
	.byte	4,3,35,128,14,13
	.byte	'RDHS2',0
	.word	35809
	.byte	4,3,35,132,14,13
	.byte	'RDHS3',0
	.word	36073
	.byte	4,3,35,136,14,13
	.byte	'MBS',0
	.word	36562
	.byte	4,3,35,140,14,13
	.byte	'OBCM',0
	.word	36738
	.byte	4,3,35,144,14,13
	.byte	'OBCR',0
	.word	36953
	.byte	4,3,35,148,14,13
	.byte	'reserved_718',0
	.word	36993
	.byte	216,2,3,35,152,14,13
	.byte	'OTSS',0
	.word	37150
	.byte	4,3,35,240,16,13
	.byte	'reserved_874',0
	.word	37190
	.byte	116,3,35,244,16,13
	.byte	'OCS',0
	.word	37320
	.byte	4,3,35,232,17,13
	.byte	'KRSTCLR',0
	.word	37427
	.byte	4,3,35,236,17,13
	.byte	'KRST1',0
	.word	37532
	.byte	4,3,35,240,17,13
	.byte	'KRST0',0
	.word	37656
	.byte	4,3,35,244,17,13
	.byte	'reserved_8F8',0
	.word	1467
	.byte	4,3,35,248,17,13
	.byte	'ACCEN0',0
	.word	38226
	.byte	4,3,35,252,17,13
	.byte	'reserved_900',0
	.word	38266
	.byte	128,14,3,35,128,18,0,16
	.word	38277
.L140:
	.byte	3
	.word	40236
.L221:
	.byte	8
	.byte	'IfxEray_getInputBufferBusyHostStatus',0,3,7,206,10,20
	.word	421
	.byte	1,1
.L223:
	.byte	5
	.byte	'eray',0,7,206,10,67
	.word	40241
.L225:
	.byte	6,0
.L233:
	.byte	8
	.byte	'IfxEray_getInputBufferBusyShadowStatus',0,3,7,212,10,18
	.word	421
	.byte	1,1
.L235:
	.byte	5
	.byte	'eray',0,7,212,10,67
	.word	40241
.L237:
	.byte	6,0,19
	.word	414
	.byte	20
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,21
	.word	40378
	.byte	0,16
	.word	398
	.byte	3
	.word	398
	.byte	22
	.byte	'__cmpswapw',0
	.word	40420
	.byte	1,1,1,1,23
	.byte	'p',0
	.word	40425
	.byte	23
	.byte	'value',0
	.word	398
	.byte	23
	.byte	'compare',0
	.word	398
	.byte	0,24
	.word	174
	.byte	25
	.word	200
	.byte	6,0,24
	.word	235
	.byte	25
	.word	267
	.byte	6,0,24
	.word	317
	.byte	25
	.word	336
	.byte	6,0,24
	.word	352
	.byte	25
	.word	367
	.byte	25
	.word	381
	.byte	6,0,26
	.byte	'IfxScuWdt_clearCpuEndinit',0,9,237,1,17,1,1,1,1,5
	.byte	'password',0,9,237,1,50
	.word	438
	.byte	0,26
	.byte	'IfxScuWdt_setCpuEndinit',0,9,157,2,17,1,1,1,1,5
	.byte	'password',0,9,157,2,48
	.word	438
	.byte	0,27
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,9,215,3,19
	.word	438
	.byte	1,1,1,1,24
	.word	8087
	.byte	25
	.word	8119
	.byte	25
	.word	8133
	.byte	25
	.word	8151
	.byte	6,0,24
	.word	8480
	.byte	25
	.word	8513
	.byte	25
	.word	8527
	.byte	25
	.word	8545
	.byte	25
	.word	8559
	.byte	6,0,24
	.word	8679
	.byte	25
	.word	8707
	.byte	25
	.word	8721
	.byte	25
	.word	8739
	.byte	6,0,24
	.word	9096
	.byte	25
	.word	9124
	.byte	6,0
.L151:
	.byte	7
	.byte	'unsigned long int',0,4,7
.L153:
	.byte	3
	.word	31959
.L161:
	.byte	3
	.word	29365
.L164:
	.byte	17,10,79,9,1,18
	.byte	'IfxEray_Index_none',0,127,18
	.byte	'IfxEray_Index_0',0,0,18
	.byte	'IfxEray_Index_1',0,1,0,24
	.word	40246
	.byte	25
	.word	40295
	.byte	6,0,24
	.word	40311
	.byte	25
	.word	40362
	.byte	6,0
.L177:
	.byte	17,7,144,2,9,1,18
	.byte	'IfxEray_PocCommand_notAccepted',0,0,18
	.byte	'IfxEray_PocCommand_config',0,1,18
	.byte	'IfxEray_PocCommand_ready',0,2,18
	.byte	'IfxEray_PocCommand_wakeup',0,3,18
	.byte	'IfxEray_PocCommand_run',0,4,18
	.byte	'IfxEray_PocCommand_allSlots',0,5,18
	.byte	'IfxEray_PocCommand_halt',0,6,18
	.byte	'IfxEray_PocCommand_freeze',0,7,18
	.byte	'IfxEray_PocCommand_sendMts',0,8,18
	.byte	'IfxEray_PocCommand_coldStart',0,9,18
	.byte	'IfxEray_PocCommand_reset',0,10,18
	.byte	'IfxEray_PocCommand_monitor',0,11,18
	.byte	'IfxEray_PocCommand_clearRam',0,12,0
.L192:
	.byte	3
	.word	40770
	.byte	28,7,151,3,9,8,11
	.byte	'frameId',0,2
	.word	438
	.byte	11,5,2,35,0,11
	.byte	'payloadLength',0,1
	.word	421
	.byte	7,1,2,35,2,11
	.byte	'headerCrc',0,2
	.word	438
	.byte	11,5,2,35,4,11
	.byte	'nullFrameIndicator',0,1
	.word	421
	.byte	1,4,2,35,5,11
	.byte	'syncFrame',0,1
	.word	421
	.byte	1,3,2,35,5,11
	.byte	'startupFrame',0,1
	.word	421
	.byte	1,2,2,35,5,11
	.byte	'cycleNumber',0,1
	.word	421
	.byte	7,1,2,35,6,11
	.byte	'payloadPreambleIndicator',0,1
	.word	421
	.byte	1,0,2,35,6,0
.L200:
	.byte	3
	.word	41271
.L203:
	.byte	7
	.byte	'short int',0,2,5,17,7,88,9,1,18
	.byte	'IfxEray_BufferDirection_receive',0,0,18
	.byte	'IfxEray_BufferDirection_transmit',0,1,0,17,7,229,2,9,1,18
	.byte	'IfxEray_TransmissionMode_continuous',0,0,18
	.byte	'IfxEray_TransmissionMode_singleShot',0,1,0,28,7,133,3,9,16,13
	.byte	'frameId',0
	.word	438
	.byte	2,2,35,0,13
	.byte	'cycleCode',0
	.word	421
	.byte	1,2,35,2,13
	.byte	'channelAFiltered',0
	.word	421
	.byte	1,2,35,3,13
	.byte	'channelBFiltered',0
	.word	421
	.byte	1,2,35,4,13
	.byte	'bufferDirection',0
	.word	41495
	.byte	1,2,35,5,13
	.byte	'transmitPayloadIndicatior',0
	.word	421
	.byte	1,2,35,6,13
	.byte	'transmissionMode',0
	.word	41570
	.byte	1,2,35,7,13
	.byte	'bufferServiceEnabled',0
	.word	421
	.byte	1,2,35,8,13
	.byte	'payloadLength',0
	.word	421
	.byte	1,2,35,9,13
	.byte	'dataPointer',0
	.word	438
	.byte	2,2,35,10,13
	.byte	'startupFrameIndicator',0
	.word	421
	.byte	1,2,35,12,13
	.byte	'syncFrameIndicator',0
	.word	421
	.byte	1,2,35,13,0,19
	.word	41653
.L215:
	.byte	3
	.word	41967
	.byte	19
	.word	40770
.L217:
	.byte	3
	.word	41977
	.byte	28,7,165,3,9,4,13
	.byte	'headerTransfered',0
	.word	421
	.byte	1,2,35,0,13
	.byte	'dataTransfered',0
	.word	421
	.byte	1,2,35,1,13
	.byte	'transferRequested',0
	.word	421
	.byte	1,2,35,2,13
	.byte	'bufferIndex',0
	.word	421
	.byte	1,2,35,3,0,19
	.word	41987
.L219:
	.byte	3
	.word	42092
	.byte	29
	.byte	'__wchar_t',0,11,1,1
	.word	41482
	.byte	29
	.byte	'__size_t',0,11,1,1
	.word	398
	.byte	29
	.byte	'__ptrdiff_t',0,11,1,1
	.word	414
	.byte	30,1,3
	.word	42157
	.byte	29
	.byte	'__codeptr',0,11,1,1
	.word	42159
	.byte	29
	.byte	'boolean',0,12,104,29
	.word	421
	.byte	29
	.byte	'uint8',0,12,108,29
	.word	421
	.byte	29
	.byte	'uint16',0,12,112,29
	.word	438
	.byte	29
	.byte	'uint32',0,12,116,29
	.word	40770
	.byte	29
	.byte	'uint64',0,12,121,29
	.word	280
	.byte	29
	.byte	'sint16',0,12,129,1,29
	.word	41482
	.byte	7
	.byte	'long int',0,4,5,29
	.byte	'sint32',0,12,134,1,29
	.word	42273
	.byte	7
	.byte	'long long int',0,8,5,29
	.byte	'sint64',0,12,141,1,29
	.word	42301
	.byte	29
	.byte	'float32',0,12,170,1,29
	.word	226
	.byte	29
	.byte	'pvoid',0,13,54,28
	.word	312
	.byte	29
	.byte	'Ifx_TickTime',0,13,76,28
	.word	42301
	.byte	29
	.byte	'Ifx_SizeT',0,13,89,16
	.word	41482
	.byte	29
	.byte	'Ifx_Priority',0,13,100,16
	.word	438
	.byte	17,13,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,29
	.byte	'Ifx_RxSel',0,13,137,1,3
	.word	42425
	.byte	16
	.word	306
	.byte	3
	.word	42562
	.byte	28,13,140,1,9,8,13
	.byte	'module',0
	.word	42567
	.byte	4,2,35,0,13
	.byte	'index',0
	.word	42273
	.byte	4,2,35,4,0,29
	.byte	'IfxModule_IndexMap',0,13,144,1,3
	.word	42572
	.byte	29
	.byte	'Ifx_UReg_8Bit',0,14,96,24
	.word	421
	.byte	29
	.byte	'Ifx_UReg_32Bit',0,14,98,24
	.word	398
	.byte	29
	.byte	'Ifx_SReg_32Bit',0,14,101,24
	.word	414
	.byte	29
	.byte	'Ifx_ERAY_ACCEN0_Bits',0,8,102,3
	.word	37696
	.byte	29
	.byte	'Ifx_ERAY_ACS_Bits',0,8,119,3
	.word	19343
	.byte	29
	.byte	'Ifx_ERAY_CCEV_Bits',0,8,129,1,3
	.word	18188
	.byte	29
	.byte	'Ifx_ERAY_CCSV_Bits',0,8,147,1,3
	.word	17899
	.byte	29
	.byte	'Ifx_ERAY_CLC_Bits',0,8,160,1,3
	.word	9139
	.byte	29
	.byte	'Ifx_ERAY_CREL_Bits',0,8,171,1,3
	.word	33968
	.byte	29
	.byte	'Ifx_ERAY_CUST1_Bits',0,8,188,1,3
	.word	9358
	.byte	29
	.byte	'Ifx_ERAY_CUST3_Bits',0,8,194,1,3
	.word	9769
	.byte	29
	.byte	'Ifx_ERAY_EIER_Bits',0,8,220,1,3
	.word	12686
	.byte	29
	.byte	'Ifx_ERAY_EIES_Bits',0,8,246,1,3
	.word	12253
	.byte	29
	.byte	'Ifx_ERAY_EILS_Bits',0,8,144,2,3
	.word	11375
	.byte	29
	.byte	'Ifx_ERAY_EIR_Bits',0,8,170,2,3
	.word	10537
	.byte	29
	.byte	'Ifx_ERAY_ENDN_Bits',0,8,176,2,3
	.word	34131
	.byte	29
	.byte	'Ifx_ERAY_ESID_Bits',0,8,186,2,3
	.word	19611
	.byte	29
	.byte	'Ifx_ERAY_FCL_Bits',0,8,193,2,3
	.word	20528
	.byte	29
	.byte	'Ifx_ERAY_FRF_Bits',0,8,205,2,3
	.word	20214
	.byte	29
	.byte	'Ifx_ERAY_FRFM_Bits',0,8,213,2,3
	.word	20400
	.byte	29
	.byte	'Ifx_ERAY_FSR_Bits',0,8,224,2,3
	.word	21085
	.byte	29
	.byte	'Ifx_ERAY_GTUC01_Bits',0,8,231,2,3
	.word	16179
	.byte	29
	.byte	'Ifx_ERAY_GTUC02_Bits',0,8,240,2,3
	.word	16285
	.byte	29
	.byte	'Ifx_ERAY_GTUC03_Bits',0,8,251,2,3
	.word	16430
	.byte	29
	.byte	'Ifx_ERAY_GTUC04_Bits',0,8,132,3,3
	.word	16609
	.byte	29
	.byte	'Ifx_ERAY_GTUC05_Bits',0,8,142,3,3
	.word	16754
	.byte	29
	.byte	'Ifx_ERAY_GTUC06_Bits',0,8,151,3,3
	.word	16906
	.byte	29
	.byte	'Ifx_ERAY_GTUC07_Bits',0,8,160,3,3
	.word	17051
	.byte	29
	.byte	'Ifx_ERAY_GTUC08_Bits',0,8,169,3,3
	.word	17196
	.byte	29
	.byte	'Ifx_ERAY_GTUC09_Bits',0,8,180,3,3
	.word	17340
	.byte	29
	.byte	'Ifx_ERAY_GTUC10_Bits',0,8,189,3,3
	.word	17523
	.byte	29
	.byte	'Ifx_ERAY_GTUC11_Bits',0,8,202,3,3
	.word	17668
	.byte	29
	.byte	'Ifx_ERAY_IBCM_Bits',0,8,215,3,3
	.word	34865
	.byte	29
	.byte	'Ifx_ERAY_IBCR_Bits',0,8,226,3,3
	.word	35075
	.byte	29
	.byte	'Ifx_ERAY_ID_Bits',0,8,234,3,3
	.word	9643
	.byte	29
	.byte	'Ifx_ERAY_ILE_Bits',0,8,242,3,3
	.word	14009
	.byte	29
	.byte	'Ifx_ERAY_KRST0_Bits',0,8,250,3,3
	.word	37572
	.byte	29
	.byte	'Ifx_ERAY_KRST1_Bits',0,8,129,4,3
	.word	37467
	.byte	29
	.byte	'Ifx_ERAY_KRSTCLR_Bits',0,8,136,4,3
	.word	37360
	.byte	29
	.byte	'Ifx_ERAY_LCK_Bits',0,8,144,4,3
	.word	10418
	.byte	29
	.byte	'Ifx_ERAY_LDTS_Bits',0,8,153,4,3
	.word	20940
	.byte	29
	.byte	'Ifx_ERAY_MBS_Bits',0,8,183,4,3
	.word	36113
	.byte	29
	.byte	'Ifx_ERAY_MBSC1_Bits',0,8,220,4,3
	.word	26296
	.byte	29
	.byte	'Ifx_ERAY_MBSC2_Bits',0,8,129,5,3
	.word	26898
	.byte	29
	.byte	'Ifx_ERAY_MBSC3_Bits',0,8,166,5,3
	.word	27510
	.byte	29
	.byte	'Ifx_ERAY_MBSC4_Bits',0,8,203,5,3
	.word	28122
	.byte	29
	.byte	'Ifx_ERAY_MHDC_Bits',0,8,212,5,3
	.word	16036
	.byte	29
	.byte	'Ifx_ERAY_MHDF_Bits',0,8,227,5,3
	.word	21259
	.byte	29
	.byte	'Ifx_ERAY_MHDS_Bits',0,8,246,5,3
	.word	20630
	.byte	29
	.byte	'Ifx_ERAY_MRC_Bits',0,8,129,6,3
	.word	20049
	.byte	29
	.byte	'Ifx_ERAY_MSIC1_Bits',0,8,166,6,3
	.word	31365
	.byte	29
	.byte	'Ifx_ERAY_MSIC2_Bits',0,8,203,6,3
	.word	31999
	.byte	29
	.byte	'Ifx_ERAY_MSIC3_Bits',0,8,240,6,3
	.word	32643
	.byte	29
	.byte	'Ifx_ERAY_MSIC4_Bits',0,8,149,7,3
	.word	33287
	.byte	29
	.byte	'Ifx_ERAY_MTCCV_Bits',0,8,158,7,3
	.word	18491
	.byte	29
	.byte	'Ifx_ERAY_NDAT1_Bits',0,8,195,7,3
	.word	23958
	.byte	29
	.byte	'Ifx_ERAY_NDAT2_Bits',0,8,232,7,3
	.word	24528
	.byte	29
	.byte	'Ifx_ERAY_NDAT3_Bits',0,8,141,8,3
	.word	25108
	.byte	29
	.byte	'Ifx_ERAY_NDAT4_Bits',0,8,178,8,3
	.word	25688
	.byte	29
	.byte	'Ifx_ERAY_NDIC1_Bits',0,8,215,8,3
	.word	28771
	.byte	29
	.byte	'Ifx_ERAY_NDIC2_Bits',0,8,252,8,3
	.word	29405
	.byte	29
	.byte	'Ifx_ERAY_NDIC3_Bits',0,8,161,9,3
	.word	30049
	.byte	29
	.byte	'Ifx_ERAY_NDIC4_Bits',0,8,198,9,3
	.word	30693
	.byte	29
	.byte	'Ifx_ERAY_NEMC_Bits',0,8,205,9,3
	.word	15530
	.byte	29
	.byte	'Ifx_ERAY_NMV_Bits',0,8,211,9,3
	.word	19949
	.byte	29
	.byte	'Ifx_ERAY_OBCM_Bits',0,8,222,9,3
	.word	36602
	.byte	29
	.byte	'Ifx_ERAY_OBCR_Bits',0,8,235,9,3
	.word	36778
	.byte	29
	.byte	'Ifx_ERAY_OCS_Bits',0,8,245,9,3
	.word	37199
	.byte	29
	.byte	'Ifx_ERAY_OCV_Bits',0,8,252,9,3
	.word	18739
	.byte	29
	.byte	'Ifx_ERAY_OSID_Bits',0,8,134,10,3
	.word	19780
	.byte	29
	.byte	'Ifx_ERAY_OTSS_Bits',0,8,145,10,3
	.word	37004
	.byte	29
	.byte	'Ifx_ERAY_PRTC1_Bits',0,8,158,10,3
	.word	15634
	.byte	29
	.byte	'Ifx_ERAY_PRTC2_Bits',0,8,170,10,3
	.word	15840
	.byte	29
	.byte	'Ifx_ERAY_RCV_Bits',0,8,177,10,3
	.word	18635
	.byte	29
	.byte	'Ifx_ERAY_RDDS_Bits',0,8,186,10,3
	.word	35264
	.byte	29
	.byte	'Ifx_ERAY_RDHS1_Bits',0,8,202,10,3
	.word	35409
	.byte	29
	.byte	'Ifx_ERAY_RDHS2_Bits',0,8,213,10,3
	.word	35667
	.byte	29
	.byte	'Ifx_ERAY_RDHS3_Bits',0,8,229,10,3
	.word	35849
	.byte	29
	.byte	'Ifx_ERAY_SCV_Bits',0,8,238,10,3
	.word	18347
	.byte	29
	.byte	'Ifx_ERAY_SFS_Bits',0,8,252,10,3
	.word	18843
	.byte	29
	.byte	'Ifx_ERAY_SIER_Bits',0,8,151,11,3
	.word	13564
	.byte	29
	.byte	'Ifx_ERAY_SIES_Bits',0,8,178,11,3
	.word	13119
	.byte	29
	.byte	'Ifx_ERAY_SILS_Bits',0,8,205,11,3
	.word	11808
	.byte	29
	.byte	'Ifx_ERAY_SIR_Bits',0,8,232,11,3
	.word	10951
	.byte	29
	.byte	'Ifx_ERAY_STPW1_Bits',0,8,249,11,3
	.word	14488
	.byte	29
	.byte	'Ifx_ERAY_STPW2_Bits',0,8,130,12,3
	.word	14770
	.byte	29
	.byte	'Ifx_ERAY_SUCC1_Bits',0,8,151,12,3
	.word	14927
	.byte	29
	.byte	'Ifx_ERAY_SUCC2_Bits',0,8,160,12,3
	.word	15267
	.byte	29
	.byte	'Ifx_ERAY_SUCC3_Bits',0,8,168,12,3
	.word	15410
	.byte	29
	.byte	'Ifx_ERAY_SWNIT_Bits',0,8,186,12,3
	.word	19060
	.byte	29
	.byte	'Ifx_ERAY_T0C_Bits',0,8,198,12,3
	.word	14131
	.byte	29
	.byte	'Ifx_ERAY_T1C_Bits',0,8,208,12,3
	.word	14329
	.byte	29
	.byte	'Ifx_ERAY_TEST1_Bits',0,8,230,12,3
	.word	9851
	.byte	29
	.byte	'Ifx_ERAY_TEST2_Bits',0,8,242,12,3
	.word	10213
	.byte	29
	.byte	'Ifx_ERAY_TXRQ1_Bits',0,8,151,13,3
	.word	21492
	.byte	29
	.byte	'Ifx_ERAY_TXRQ2_Bits',0,8,188,13,3
	.word	22094
	.byte	29
	.byte	'Ifx_ERAY_TXRQ3_Bits',0,8,225,13,3
	.word	22706
	.byte	29
	.byte	'Ifx_ERAY_TXRQ4_Bits',0,8,134,14,3
	.word	23318
	.byte	29
	.byte	'Ifx_ERAY_WRDS_Bits',0,8,143,14,3
	.word	34213
	.byte	29
	.byte	'Ifx_ERAY_WRHS1_Bits',0,8,159,14,3
	.word	34358
	.byte	29
	.byte	'Ifx_ERAY_WRHS2_Bits',0,8,168,14,3
	.word	34616
	.byte	29
	.byte	'Ifx_ERAY_WRHS3_Bits',0,8,175,14,3
	.word	34760
	.byte	29
	.byte	'Ifx_ERAY_ACCEN0',0,8,188,14,3
	.word	38226
	.byte	29
	.byte	'Ifx_ERAY_ACS',0,8,196,14,3
	.word	19571
	.byte	29
	.byte	'Ifx_ERAY_CCEV',0,8,204,14,3
	.word	18307
	.byte	29
	.byte	'Ifx_ERAY_CCSV',0,8,212,14,3
	.word	18148
	.byte	29
	.byte	'Ifx_ERAY_CLC',0,8,220,14,3
	.word	9318
	.byte	29
	.byte	'Ifx_ERAY_CREL',0,8,228,14,3
	.word	34091
	.byte	29
	.byte	'Ifx_ERAY_CUST1',0,8,236,14,3
	.word	9603
	.byte	29
	.byte	'Ifx_ERAY_CUST3',0,8,244,14,3
	.word	9811
	.byte	29
	.byte	'Ifx_ERAY_EIER',0,8,252,14,3
	.word	13079
	.byte	29
	.byte	'Ifx_ERAY_EIES',0,8,132,15,3
	.word	12646
	.byte	29
	.byte	'Ifx_ERAY_EILS',0,8,140,15,3
	.word	11768
	.byte	29
	.byte	'Ifx_ERAY_EIR',0,8,148,15,3
	.word	10911
	.byte	29
	.byte	'Ifx_ERAY_ENDN',0,8,156,15,3
	.word	34173
	.byte	29
	.byte	'Ifx_ERAY_ESID',0,8,164,15,3
	.word	19731
	.byte	29
	.byte	'Ifx_ERAY_FCL',0,8,172,15,3
	.word	20590
	.byte	29
	.byte	'Ifx_ERAY_FRF',0,8,180,15,3
	.word	20360
	.byte	29
	.byte	'Ifx_ERAY_FRFM',0,8,188,15,3
	.word	20488
	.byte	29
	.byte	'Ifx_ERAY_FSR',0,8,196,15,3
	.word	21219
	.byte	29
	.byte	'Ifx_ERAY_GTUC01',0,8,204,15,3
	.word	16245
	.byte	29
	.byte	'Ifx_ERAY_GTUC02',0,8,212,15,3
	.word	16390
	.byte	29
	.byte	'Ifx_ERAY_GTUC03',0,8,220,15,3
	.word	16569
	.byte	29
	.byte	'Ifx_ERAY_GTUC04',0,8,228,15,3
	.word	16714
	.byte	29
	.byte	'Ifx_ERAY_GTUC05',0,8,236,15,3
	.word	16866
	.byte	29
	.byte	'Ifx_ERAY_GTUC06',0,8,244,15,3
	.word	17011
	.byte	29
	.byte	'Ifx_ERAY_GTUC07',0,8,252,15,3
	.word	17156
	.byte	29
	.byte	'Ifx_ERAY_GTUC08',0,8,132,16,3
	.word	17300
	.byte	29
	.byte	'Ifx_ERAY_GTUC09',0,8,140,16,3
	.word	17483
	.byte	29
	.byte	'Ifx_ERAY_GTUC10',0,8,148,16,3
	.word	17628
	.byte	29
	.byte	'Ifx_ERAY_GTUC11',0,8,156,16,3
	.word	17850
	.byte	29
	.byte	'Ifx_ERAY_IBCM',0,8,164,16,3
	.word	35035
	.byte	29
	.byte	'Ifx_ERAY_IBCR',0,8,172,16,3
	.word	35213
	.byte	29
	.byte	'Ifx_ERAY_ID',0,8,180,16,3
	.word	9729
	.byte	29
	.byte	'Ifx_ERAY_ILE',0,8,188,16,3
	.word	14091
	.byte	29
	.byte	'Ifx_ERAY_KRST0',0,8,196,16,3
	.word	37656
	.byte	29
	.byte	'Ifx_ERAY_KRST1',0,8,204,16,3
	.word	37532
	.byte	29
	.byte	'Ifx_ERAY_KRSTCLR',0,8,212,16,3
	.word	37427
	.byte	29
	.byte	'Ifx_ERAY_LCK',0,8,220,16,3
	.word	10497
	.byte	29
	.byte	'Ifx_ERAY_LDTS',0,8,228,16,3
	.word	21045
	.byte	29
	.byte	'Ifx_ERAY_MBS',0,8,236,16,3
	.word	36562
	.byte	29
	.byte	'Ifx_ERAY_MBSC1',0,8,244,16,3
	.word	26858
	.byte	29
	.byte	'Ifx_ERAY_MBSC2',0,8,252,16,3
	.word	27470
	.byte	29
	.byte	'Ifx_ERAY_MBSC3',0,8,132,17,3
	.word	28082
	.byte	29
	.byte	'Ifx_ERAY_MBSC4',0,8,140,17,3
	.word	28722
	.byte	29
	.byte	'Ifx_ERAY_MHDC',0,8,148,17,3
	.word	16139
	.byte	29
	.byte	'Ifx_ERAY_MHDF',0,8,156,17,3
	.word	21452
	.byte	29
	.byte	'Ifx_ERAY_MHDS',0,8,164,17,3
	.word	20900
	.byte	29
	.byte	'Ifx_ERAY_MRC',0,8,172,17,3
	.word	20174
	.byte	29
	.byte	'Ifx_ERAY_MSIC1',0,8,180,17,3
	.word	31959
	.byte	29
	.byte	'Ifx_ERAY_MSIC2',0,8,188,17,3
	.word	32603
	.byte	29
	.byte	'Ifx_ERAY_MSIC3',0,8,196,17,3
	.word	33247
	.byte	29
	.byte	'Ifx_ERAY_MSIC4',0,8,204,17,3
	.word	33919
	.byte	29
	.byte	'Ifx_ERAY_MTCCV',0,8,212,17,3
	.word	18595
	.byte	29
	.byte	'Ifx_ERAY_NDAT1',0,8,220,17,3
	.word	24488
	.byte	29
	.byte	'Ifx_ERAY_NDAT2',0,8,228,17,3
	.word	25068
	.byte	29
	.byte	'Ifx_ERAY_NDAT3',0,8,236,17,3
	.word	25648
	.byte	29
	.byte	'Ifx_ERAY_NDAT4',0,8,244,17,3
	.word	26256
	.byte	29
	.byte	'Ifx_ERAY_NDIC1',0,8,252,17,3
	.word	29365
	.byte	29
	.byte	'Ifx_ERAY_NDIC2',0,8,132,18,3
	.word	30009
	.byte	29
	.byte	'Ifx_ERAY_NDIC3',0,8,140,18,3
	.word	30653
	.byte	29
	.byte	'Ifx_ERAY_NDIC4',0,8,148,18,3
	.word	31325
	.byte	29
	.byte	'Ifx_ERAY_NEMC',0,8,156,18,3
	.word	15594
	.byte	29
	.byte	'Ifx_ERAY_NMV',0,8,164,18,3
	.word	19989
	.byte	29
	.byte	'Ifx_ERAY_OBCM',0,8,172,18,3
	.word	36738
	.byte	29
	.byte	'Ifx_ERAY_OBCR',0,8,180,18,3
	.word	36953
	.byte	29
	.byte	'Ifx_ERAY_OCS',0,8,188,18,3
	.word	37320
	.byte	29
	.byte	'Ifx_ERAY_OCV',0,8,196,18,3
	.word	18803
	.byte	29
	.byte	'Ifx_ERAY_OSID',0,8,204,18,3
	.word	19900
	.byte	29
	.byte	'Ifx_ERAY_OTSS',0,8,212,18,3
	.word	37150
	.byte	29
	.byte	'Ifx_ERAY_PRTC1',0,8,220,18,3
	.word	15800
	.byte	29
	.byte	'Ifx_ERAY_PRTC2',0,8,228,18,3
	.word	15996
	.byte	29
	.byte	'Ifx_ERAY_RCV',0,8,236,18,3
	.word	18699
	.byte	29
	.byte	'Ifx_ERAY_RDDS',0,8,244,18,3
	.word	35359
	.byte	29
	.byte	'Ifx_ERAY_RDHS1',0,8,252,18,3
	.word	35627
	.byte	29
	.byte	'Ifx_ERAY_RDHS2',0,8,132,19,3
	.word	35809
	.byte	29
	.byte	'Ifx_ERAY_RDHS3',0,8,140,19,3
	.word	36073
	.byte	29
	.byte	'Ifx_ERAY_SCV',0,8,148,19,3
	.word	18451
	.byte	29
	.byte	'Ifx_ERAY_SFS',0,8,156,19,3
	.word	19020
	.byte	29
	.byte	'Ifx_ERAY_SIER',0,8,164,19,3
	.word	13969
	.byte	29
	.byte	'Ifx_ERAY_SIES',0,8,172,19,3
	.word	13524
	.byte	29
	.byte	'Ifx_ERAY_SILS',0,8,180,19,3
	.word	12213
	.byte	29
	.byte	'Ifx_ERAY_SIR',0,8,188,19,3
	.word	11335
	.byte	29
	.byte	'Ifx_ERAY_STPW1',0,8,196,19,3
	.word	14730
	.byte	29
	.byte	'Ifx_ERAY_STPW2',0,8,204,19,3
	.word	14878
	.byte	29
	.byte	'Ifx_ERAY_SUCC1',0,8,212,19,3
	.word	15227
	.byte	29
	.byte	'Ifx_ERAY_SUCC2',0,8,220,19,3
	.word	15370
	.byte	29
	.byte	'Ifx_ERAY_SUCC3',0,8,228,19,3
	.word	15490
	.byte	29
	.byte	'Ifx_ERAY_SWNIT',0,8,236,19,3
	.word	19303
	.byte	29
	.byte	'Ifx_ERAY_T0C',0,8,244,19,3
	.word	14289
	.byte	29
	.byte	'Ifx_ERAY_T1C',0,8,252,19,3
	.word	14448
	.byte	29
	.byte	'Ifx_ERAY_TEST1',0,8,132,20,3
	.word	10173
	.byte	29
	.byte	'Ifx_ERAY_TEST2',0,8,140,20,3
	.word	10378
	.byte	29
	.byte	'Ifx_ERAY_TXRQ1',0,8,148,20,3
	.word	22054
	.byte	29
	.byte	'Ifx_ERAY_TXRQ2',0,8,156,20,3
	.word	22666
	.byte	29
	.byte	'Ifx_ERAY_TXRQ3',0,8,164,20,3
	.word	23278
	.byte	29
	.byte	'Ifx_ERAY_TXRQ4',0,8,172,20,3
	.word	23918
	.byte	29
	.byte	'Ifx_ERAY_WRDS',0,8,180,20,3
	.word	34308
	.byte	29
	.byte	'Ifx_ERAY_WRHS1',0,8,188,20,3
	.word	34576
	.byte	29
	.byte	'Ifx_ERAY_WRHS2',0,8,196,20,3
	.word	34720
	.byte	29
	.byte	'Ifx_ERAY_WRHS3',0,8,204,20,3
	.word	34825
	.byte	16
	.word	38277
	.byte	29
	.byte	'Ifx_ERAY',0,8,207,21,3
	.word	47847
	.byte	29
	.byte	'IfxEray_Index',0,10,84,3
	.word	40801
	.byte	17,10,88,9,1,18
	.byte	'IfxEray_NodeId_none',0,127,18
	.byte	'IfxEray_NodeId_a',0,0,18
	.byte	'IfxEray_NodeId_b',0,1,0,29
	.byte	'IfxEray_NodeId',0,10,93,3
	.word	47892
	.byte	14,16
	.word	42572
	.byte	15,1,0,19
	.word	47981
	.byte	31
	.byte	'IfxEray_cfg_indexMap',0,10,104,41
	.word	47990
	.byte	1,1,29
	.byte	'Ifx_P_ACCEN0_Bits',0,4,102,3
	.word	6815
	.byte	29
	.byte	'Ifx_P_ACCEN1_Bits',0,4,108,3
	.word	6728
	.byte	29
	.byte	'Ifx_P_ESR_Bits',0,4,130,1,3
	.word	3296
	.byte	29
	.byte	'Ifx_P_ID_Bits',0,4,138,1,3
	.word	1347
	.byte	29
	.byte	'Ifx_P_IN_Bits',0,4,160,1,3
	.word	2343
	.byte	29
	.byte	'Ifx_P_IOCR0_Bits',0,4,173,1,3
	.word	1476
	.byte	29
	.byte	'Ifx_P_IOCR12_Bits',0,4,186,1,3
	.word	2123
	.byte	29
	.byte	'Ifx_P_IOCR4_Bits',0,4,199,1,3
	.word	1691
	.byte	29
	.byte	'Ifx_P_IOCR8_Bits',0,4,212,1,3
	.word	1906
	.byte	29
	.byte	'Ifx_P_LPCR_Bits',0,4,231,1,3
	.word	6390
	.byte	29
	.byte	'Ifx_P_OMCR_Bits',0,4,253,1,3
	.word	6042
	.byte	29
	.byte	'Ifx_P_OMCR0_Bits',0,4,136,2,3
	.word	5029
	.byte	29
	.byte	'Ifx_P_OMCR12_Bits',0,4,146,2,3
	.word	5553
	.byte	29
	.byte	'Ifx_P_OMCR4_Bits',0,4,157,2,3
	.word	5203
	.byte	29
	.byte	'Ifx_P_OMCR8_Bits',0,4,168,2,3
	.word	5377
	.byte	29
	.byte	'Ifx_P_OMR_Bits',0,4,205,2,3
	.word	776
	.byte	29
	.byte	'Ifx_P_OMSR_Bits',0,4,227,2,3
	.word	5709
	.byte	29
	.byte	'Ifx_P_OMSR0_Bits',0,4,237,2,3
	.word	4366
	.byte	29
	.byte	'Ifx_P_OMSR12_Bits',0,4,248,2,3
	.word	4854
	.byte	29
	.byte	'Ifx_P_OMSR4_Bits',0,4,131,3,3
	.word	4513
	.byte	29
	.byte	'Ifx_P_OMSR8_Bits',0,4,142,3,3
	.word	4682
	.byte	29
	.byte	'Ifx_P_OUT_Bits',0,4,164,3,3
	.word	460
	.byte	29
	.byte	'Ifx_P_PCSR_Bits',0,4,187,3,3
	.word	4002
	.byte	29
	.byte	'Ifx_P_PDISC_Bits',0,4,209,3,3
	.word	3636
	.byte	29
	.byte	'Ifx_P_PDR0_Bits',0,4,230,3,3
	.word	2667
	.byte	29
	.byte	'Ifx_P_PDR1_Bits',0,4,251,3,3
	.word	2971
	.byte	29
	.byte	'Ifx_P_ACCEN0',0,4,136,4,3
	.word	7342
	.byte	29
	.byte	'Ifx_P_ACCEN1',0,4,144,4,3
	.word	6775
	.byte	29
	.byte	'Ifx_P_ESR',0,4,152,4,3
	.word	3587
	.byte	29
	.byte	'Ifx_P_ID',0,4,160,4,3
	.word	1427
	.byte	29
	.byte	'Ifx_P_IN',0,4,168,4,3
	.word	2618
	.byte	29
	.byte	'Ifx_P_IOCR0',0,4,176,4,3
	.word	1651
	.byte	29
	.byte	'Ifx_P_IOCR12',0,4,184,4,3
	.word	2303
	.byte	29
	.byte	'Ifx_P_IOCR4',0,4,192,4,3
	.word	1866
	.byte	29
	.byte	'Ifx_P_IOCR8',0,4,200,4,3
	.word	2083
	.byte	29
	.byte	'Ifx_P_LPCR',0,4,208,4,3
	.word	6670
	.byte	29
	.byte	'Ifx_P_OMCR',0,4,216,4,3
	.word	6350
	.byte	29
	.byte	'Ifx_P_OMCR0',0,4,224,4,3
	.word	5163
	.byte	29
	.byte	'Ifx_P_OMCR12',0,4,232,4,3
	.word	5669
	.byte	29
	.byte	'Ifx_P_OMCR4',0,4,240,4,3
	.word	5337
	.byte	29
	.byte	'Ifx_P_OMCR8',0,4,248,4,3
	.word	5513
	.byte	29
	.byte	'Ifx_P_OMR',0,4,128,5,3
	.word	1307
	.byte	29
	.byte	'Ifx_P_OMSR',0,4,136,5,3
	.word	6002
	.byte	29
	.byte	'Ifx_P_OMSR0',0,4,144,5,3
	.word	4473
	.byte	29
	.byte	'Ifx_P_OMSR12',0,4,152,5,3
	.word	4989
	.byte	29
	.byte	'Ifx_P_OMSR4',0,4,160,5,3
	.word	4642
	.byte	29
	.byte	'Ifx_P_OMSR8',0,4,168,5,3
	.word	4814
	.byte	29
	.byte	'Ifx_P_OUT',0,4,176,5,3
	.word	736
	.byte	29
	.byte	'Ifx_P_PCSR',0,4,184,5,3
	.word	4326
	.byte	29
	.byte	'Ifx_P_PDISC',0,4,192,5,3
	.word	3962
	.byte	29
	.byte	'Ifx_P_PDR0',0,4,200,5,3
	.word	2931
	.byte	29
	.byte	'Ifx_P_PDR1',0,4,208,5,3
	.word	3247
	.byte	16
	.word	7382
	.byte	29
	.byte	'Ifx_P',0,4,128,6,3
	.word	49220
	.byte	17,15,162,11,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,29
	.byte	'IfxScu_WDTCON1_IR',0,15,167,11,3
	.word	49240
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,16,68,16,4,11
	.byte	'EN0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_ACCEN00_Bits',0,16,102,3
	.word	49362
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,16,105,16,4,11
	.byte	'reserved_0',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN01_Bits',0,16,108,3
	.word	49921
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,16,111,16,4,11
	.byte	'EN0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_ACCEN10_Bits',0,16,145,1,3
	.word	50000
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,16,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN11_Bits',0,16,151,1,3
	.word	50560
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,16,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	398
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,16,164,1,3
	.word	50641
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,16,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	421
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	421
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	421
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	421
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	421
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	421
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	421
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	421
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON0_Bits',0,16,181,1,3
	.word	50858
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,16,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	421
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	421
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	421
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	421
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	421
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	421
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	421
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON1_Bits',0,16,199,1,3
	.word	51131
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,16,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	398
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON10_Bits',0,16,206,1,3
	.word	51457
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,16,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	398
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON11_Bits',0,16,213,1,3
	.word	51559
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,16,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	421
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	421
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	398
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON2_Bits',0,16,228,1,3
	.word	51661
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,16,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	421
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	398
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	421
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON3_Bits',0,16,248,1,3
	.word	51935
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,16,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	438
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	398
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON4_Bits',0,16,132,2,3
	.word	52304
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,16,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	421
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	421
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	398
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON5_Bits',0,16,143,2,3
	.word	52484
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,16,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	398
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON6_Bits',0,16,150,2,3
	.word	52653
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,16,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	398
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON7_Bits',0,16,157,2,3
	.word	52753
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,16,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	398
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON8_Bits',0,16,164,2,3
	.word	52853
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,16,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	398
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON9_Bits',0,16,171,2,3
	.word	52953
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,16,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	421
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	421
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	421
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	421
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	421
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CHIPID_Bits',0,16,185,2,3
	.word	53053
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,16,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	438
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	438
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,16,200,2,3
	.word	53256
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,16,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	438
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	398
	.byte	20,0,2,35,0,0,29
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,16,207,2,3
	.word	53488
	.byte	7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_EICON0_Bits',0,16,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	53590
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	53590
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	53590
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	53590
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_SCU_EICON0_Bits',0,16,216,2,3
	.word	53606
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,16,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	398
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_EICON1_Bits',0,16,228,2,3
	.word	53734
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,16,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	421
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	421
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	398
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	421
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	421
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EICR_Bits',0,16,250,2,3
	.word	53923
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,16,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	421
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	421
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	421
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_EIFILT_Bits',0,16,147,3,3
	.word	54287
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,16,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	398
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_EIFR_Bits',0,16,161,3,3
	.word	54726
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,16,164,3,16,4,11
	.byte	'AE',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	438
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_EISR_Bits',0,16,174,3,3
	.word	54937
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,16,177,3,16,4,11
	.byte	'POL',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	438
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	438
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_SCU_EMSR_Bits',0,16,187,3,3
	.word	55113
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,16,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	398
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	421
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	421
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	421
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_EMSSW_Bits',0,16,196,3,3
	.word	55307
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,16,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	438
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	398
	.byte	23,0,2,35,0,0,29
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,16,204,3,3
	.word	55442
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,16,207,3,16,4,11
	.byte	'ARI',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	398
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_ESROCFG_Bits',0,16,212,3,3
	.word	55578
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,16,215,3,16,4,11
	.byte	'EN0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	421
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	438
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	421
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	421
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	421
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_SCU_EXTCON_Bits',0,16,226,3,3
	.word	55689
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,16,229,3,16,4,11
	.byte	'STEP',0,2
	.word	438
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	421
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	438
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_FDR_Bits',0,16,237,3,3
	.word	55907
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,16,240,3,16,4,11
	.byte	'FS0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	421
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_SCU_FMR_Bits',0,16,132,4,3
	.word	56070
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,16,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_ID_Bits',0,16,140,4,3
	.word	56406
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,16,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	421
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	421
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_SCU_IGCR_Bits',0,16,167,4,3
	.word	56513
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,16,170,4,16,4,11
	.byte	'P0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	398
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_IN_Bits',0,16,175,4,3
	.word	56965
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,16,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	421
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_IOCR_Bits',0,16,185,4,3
	.word	57064
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,16,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	398
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	438
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,16,198,4,3
	.word	57214
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,16,201,4,16,4,11
	.byte	'SEED',0,4
	.word	398
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	421
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	421
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,16,208,4,3
	.word	57452
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,16,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	438
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	398
	.byte	20,0,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,16,215,4,3
	.word	57613
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,16,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,16,221,4,3
	.word	57719
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,16,224,4,16,4,11
	.byte	'LS2',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	438
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	438
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_LCLCON0_Bits',0,16,232,4,3
	.word	57805
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,16,235,4,16,4,11
	.byte	'LS3',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	438
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	438
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_LCLCON1_Bits',0,16,243,4,3
	.word	57973
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,16,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	438
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	438
	.byte	10,0,2,35,2,0,29
	.byte	'Ifx_SCU_LCLTEST_Bits',0,16,134,5,3
	.word	58141
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,16,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	421
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	438
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_MANID_Bits',0,16,142,5,3
	.word	58455
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,16,145,5,16,4,11
	.byte	'PS0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	438
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	438
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_SCU_OMR_Bits',0,16,153,5,3
	.word	58566
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,16,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	421
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	421
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	421
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	421
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	421
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	421
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	421
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_OSCCON_Bits',0,16,177,5,3
	.word	58724
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,16,180,5,16,4,11
	.byte	'P0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	398
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_OUT_Bits',0,16,185,5,3
	.word	59135
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,16,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	438
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	6,0,2,35,3,0,29
	.byte	'Ifx_SCU_OVCCON_Bits',0,16,204,5,3
	.word	59236
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,16,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	398
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,16,216,5,3
	.word	59554
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,16,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	398
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDISC_Bits',0,16,224,5,3
	.word	59741
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,16,227,5,16,4,11
	.byte	'PD0',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	421
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	421
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	398
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDR_Bits',0,16,234,5,3
	.word	59852
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,16,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	398
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDRR_Bits',0,16,248,5,3
	.word	59985
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,16,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	438
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	421
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	421
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	5,0,2,35,3,0,29
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,16,134,6,3
	.word	60188
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,16,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	421
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	421
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	398
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,16,143,6,3
	.word	60428
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,16,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	398
	.byte	25,0,2,35,0,0,29
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,16,156,6,3
	.word	60572
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,16,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	398
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR0_Bits',0,16,165,6,3
	.word	60794
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,16,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	398
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR1_Bits',0,16,174,6,3
	.word	60930
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,16,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	398
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR2_Bits',0,16,183,6,3
	.word	61066
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,16,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	398
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR3_Bits',0,16,192,6,3
	.word	61202
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,16,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	398
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR4_Bits',0,16,201,6,3
	.word	61338
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,16,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	398
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR5_Bits',0,16,210,6,3
	.word	61474
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,16,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	438
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	438
	.byte	12,0,2,35,2,0,29
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,16,227,6,3
	.word	61610
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,16,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	421
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	398
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	421
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	421
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,16,241,6,3
	.word	61882
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,16,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	438
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	438
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	421
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,16,135,7,3
	.word	62127
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,16,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	438
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	438
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	6,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,16,143,7,3
	.word	62515
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,16,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	421
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	421
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	421
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,16,157,7,3
	.word	62633
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,16,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	421
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	421
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	421
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	421
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	438
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	421
	.byte	6,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,16,172,7,3
	.word	62876
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,16,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	421
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	421
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	421
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	421
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	421
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	421
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	421
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	421
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	421
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	438
	.byte	10,0,2,35,2,0,29
	.byte	'Ifx_SCU_RSTCON_Bits',0,16,189,7,3
	.word	63143
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,16,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	438
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_RSTCON2_Bits',0,16,206,7,3
	.word	63402
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,16,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON3_Bits',0,16,212,7,3
	.word	63707
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,16,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	421
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	421
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	421
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	421
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	421
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,16,245,7,3
	.word	63788
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,16,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	53590
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	53590
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	53590
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	53590
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_SCU_SEICON0_Bits',0,16,254,7,3
	.word	64337
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,16,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	398
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_SEICON1_Bits',0,16,138,8,3
	.word	64467
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,16,141,8,16,4,11
	.byte	'AE',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	438
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_SEISR_Bits',0,16,151,8,3
	.word	64658
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,16,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	438
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	421
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	421
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_STCON_Bits',0,16,161,8,3
	.word	64836
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,16,164,8,16,4,11
	.byte	'MEM',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM1_Bits',0,16,167,8,3
	.word	64987
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,16,170,8,16,4,11
	.byte	'MEM',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM2_Bits',0,16,173,8,3
	.word	65059
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,16,176,8,16,4,11
	.byte	'MEM',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM3_Bits',0,16,179,8,3
	.word	65131
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,16,182,8,16,4,11
	.byte	'MEM',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM4_Bits',0,16,185,8,3
	.word	65203
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,16,188,8,16,4,11
	.byte	'MEM',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM5_Bits',0,16,191,8,3
	.word	65275
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,16,194,8,16,4,11
	.byte	'MEM',0,4
	.word	398
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM6_Bits',0,16,197,8,3
	.word	65347
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,16,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	421
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	421
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	421
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	421
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	421
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	421
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	421
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	421
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	421
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_STSTAT_Bits',0,16,216,8,3
	.word	65419
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,16,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	438
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,16,224,8,3
	.word	65748
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,16,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	421
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	421
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,16,234,8,3
	.word	65868
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,16,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	421
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	421
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_SYSCON_Bits',0,16,249,8,3
	.word	66038
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,16,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	438
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	421
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	421
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	421
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	421
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	421
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,16,137,9,3
	.word	66301
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,16,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	421
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	398
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,16,144,9,3
	.word	66580
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,16,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	438
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,16,151,9,3
	.word	66684
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,16,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	421
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	398
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,16,164,9,3
	.word	66790
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,16,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	398
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,16,174,9,3
	.word	67013
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,16,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	421
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	421
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	421
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	421
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	421
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	421
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	421
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	421
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	421
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	421
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,16,199,9,3
	.word	67161
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,16,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	421
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	421
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	421
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	421
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,16,215,9,3
	.word	67649
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,16,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	398
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSET_Bits',0,16,225,9,3
	.word	67946
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,16,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	398
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,16,235,9,3
	.word	68094
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,16,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	53590
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	53590
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	53590
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	53590
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,16,244,9,3
	.word	68244
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,16,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	421
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,16,132,10,3
	.word	68374
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,16,135,10,16,4,11
	.byte	'AE',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	421
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,16,148,10,3
	.word	68634
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,16,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	53590
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	53590
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	53590
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	53590
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,16,157,10,3
	.word	68857
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,16,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	421
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,16,173,10,3
	.word	68983
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,16,176,10,16,4,11
	.byte	'AE',0,1
	.word	421
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	421
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	421
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	421
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	421
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	421
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	421
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	421
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	421
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	421
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	438
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,16,189,10,3
	.word	69235
	.byte	12,16,197,10,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49362
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN00',0,16,202,10,3
	.word	69454
	.byte	12,16,205,10,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49921
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN01',0,16,210,10,3
	.word	69519
	.byte	12,16,213,10,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50000
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN10',0,16,218,10,3
	.word	69584
	.byte	12,16,221,10,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50560
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN11',0,16,226,10,3
	.word	69649
	.byte	12,16,229,10,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50641
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ARSTDIS',0,16,234,10,3
	.word	69714
	.byte	12,16,237,10,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50858
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON0',0,16,242,10,3
	.word	69779
	.byte	12,16,245,10,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51131
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON1',0,16,250,10,3
	.word	69844
	.byte	12,16,253,10,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51457
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON10',0,16,130,11,3
	.word	69909
	.byte	12,16,133,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51559
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON11',0,16,138,11,3
	.word	69975
	.byte	12,16,141,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51661
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON2',0,16,146,11,3
	.word	70041
	.byte	12,16,149,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51935
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON3',0,16,154,11,3
	.word	70106
	.byte	12,16,157,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52304
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON4',0,16,162,11,3
	.word	70171
	.byte	12,16,165,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52484
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON5',0,16,170,11,3
	.word	70236
	.byte	12,16,173,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52653
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON6',0,16,178,11,3
	.word	70301
	.byte	12,16,181,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52753
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON7',0,16,186,11,3
	.word	70366
	.byte	12,16,189,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52853
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON8',0,16,194,11,3
	.word	70431
	.byte	12,16,197,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52953
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON9',0,16,202,11,3
	.word	70496
	.byte	12,16,205,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53053
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CHIPID',0,16,210,11,3
	.word	70561
	.byte	12,16,213,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53256
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSCLIM',0,16,218,11,3
	.word	70625
	.byte	12,16,221,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53488
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSCSTAT',0,16,226,11,3
	.word	70690
	.byte	12,16,229,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53606
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EICON0',0,16,234,11,3
	.word	70756
	.byte	12,16,237,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53734
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EICON1',0,16,242,11,3
	.word	70820
	.byte	12,16,245,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53923
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EICR',0,16,250,11,3
	.word	70884
	.byte	12,16,253,11,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54287
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EIFILT',0,16,130,12,3
	.word	70946
	.byte	12,16,133,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54726
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EIFR',0,16,138,12,3
	.word	71010
	.byte	12,16,141,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54937
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EISR',0,16,146,12,3
	.word	71072
	.byte	12,16,149,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55113
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EMSR',0,16,154,12,3
	.word	71134
	.byte	12,16,157,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55307
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EMSSW',0,16,162,12,3
	.word	71196
	.byte	12,16,165,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55442
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,16,170,12,3
	.word	71259
	.byte	12,16,173,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55578
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ESROCFG',0,16,178,12,3
	.word	71332
	.byte	12,16,181,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55689
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EXTCON',0,16,186,12,3
	.word	71397
	.byte	12,16,189,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55907
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_FDR',0,16,194,12,3
	.word	71461
	.byte	12,16,197,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56070
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_FMR',0,16,202,12,3
	.word	71522
	.byte	12,16,205,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56406
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ID',0,16,210,12,3
	.word	71583
	.byte	12,16,213,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56513
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IGCR',0,16,218,12,3
	.word	71643
	.byte	12,16,221,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56965
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IN',0,16,226,12,3
	.word	71705
	.byte	12,16,229,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57064
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IOCR',0,16,234,12,3
	.word	71765
	.byte	12,16,237,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57214
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL0',0,16,242,12,3
	.word	71827
	.byte	12,16,245,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57452
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL1',0,16,250,12,3
	.word	71895
	.byte	12,16,253,12,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57613
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL2',0,16,130,13,3
	.word	71963
	.byte	12,16,133,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57719
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL3',0,16,138,13,3
	.word	72031
	.byte	12,16,141,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57805
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LCLCON0',0,16,146,13,3
	.word	72099
	.byte	12,16,149,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57973
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LCLCON1',0,16,154,13,3
	.word	72164
	.byte	12,16,157,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58141
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LCLTEST',0,16,162,13,3
	.word	72229
	.byte	12,16,165,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58455
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_MANID',0,16,170,13,3
	.word	72294
	.byte	12,16,173,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58566
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OMR',0,16,178,13,3
	.word	72357
	.byte	12,16,181,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58724
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OSCCON',0,16,186,13,3
	.word	72418
	.byte	12,16,189,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59135
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OUT',0,16,194,13,3
	.word	72482
	.byte	12,16,197,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59236
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OVCCON',0,16,202,13,3
	.word	72543
	.byte	12,16,205,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59554
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OVCENABLE',0,16,210,13,3
	.word	72607
	.byte	12,16,213,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59741
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDISC',0,16,218,13,3
	.word	72674
	.byte	12,16,221,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59852
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDR',0,16,226,13,3
	.word	72737
	.byte	12,16,229,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59985
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDRR',0,16,234,13,3
	.word	72798
	.byte	12,16,237,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60188
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PERPLLCON0',0,16,242,13,3
	.word	72860
	.byte	12,16,245,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60428
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PERPLLCON1',0,16,250,13,3
	.word	72928
	.byte	12,16,253,13,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60572
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PERPLLSTAT',0,16,130,14,3
	.word	72996
	.byte	12,16,133,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60794
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR0',0,16,138,14,3
	.word	73064
	.byte	12,16,141,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60930
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR1',0,16,146,14,3
	.word	73128
	.byte	12,16,149,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61066
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR2',0,16,154,14,3
	.word	73192
	.byte	12,16,157,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61202
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR3',0,16,162,14,3
	.word	73256
	.byte	12,16,165,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61338
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR4',0,16,170,14,3
	.word	73320
	.byte	12,16,173,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61474
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR5',0,16,178,14,3
	.word	73384
	.byte	12,16,181,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61610
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSTAT0',0,16,186,14,3
	.word	73448
	.byte	12,16,189,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61882
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWCR1',0,16,194,14,3
	.word	73513
	.byte	12,16,197,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62127
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMTRCSR0',0,16,202,14,3
	.word	73578
	.byte	12,16,205,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62515
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMTRCSR1',0,16,210,14,3
	.word	73644
	.byte	12,16,213,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62633
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMTRCSR2',0,16,218,14,3
	.word	73710
	.byte	12,16,221,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62876
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMTRCSR3',0,16,226,14,3
	.word	73776
	.byte	12,16,229,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63143
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON',0,16,234,14,3
	.word	73842
	.byte	12,16,237,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63402
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON2',0,16,242,14,3
	.word	73906
	.byte	12,16,245,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63707
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON3',0,16,250,14,3
	.word	73971
	.byte	12,16,253,14,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63788
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTSTAT',0,16,130,15,3
	.word	74036
	.byte	12,16,133,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64337
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SEICON0',0,16,138,15,3
	.word	74101
	.byte	12,16,141,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64467
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SEICON1',0,16,146,15,3
	.word	74166
	.byte	12,16,149,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64658
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SEISR',0,16,154,15,3
	.word	74231
	.byte	12,16,157,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64836
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STCON',0,16,162,15,3
	.word	74294
	.byte	12,16,165,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64987
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM1',0,16,170,15,3
	.word	74357
	.byte	12,16,173,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65059
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM2',0,16,178,15,3
	.word	74421
	.byte	12,16,181,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65131
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM3',0,16,186,15,3
	.word	74485
	.byte	12,16,189,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65203
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM4',0,16,194,15,3
	.word	74549
	.byte	12,16,197,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65275
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM5',0,16,202,15,3
	.word	74613
	.byte	12,16,205,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65347
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STMEM6',0,16,210,15,3
	.word	74677
	.byte	12,16,213,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65419
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STSTAT',0,16,218,15,3
	.word	74741
	.byte	12,16,221,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65748
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SWAPCTRL',0,16,226,15,3
	.word	74805
	.byte	12,16,229,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65868
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SWRSTCON',0,16,234,15,3
	.word	74871
	.byte	12,16,237,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66038
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SYSCON',0,16,242,15,3
	.word	74937
	.byte	12,16,245,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66301
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SYSPLLCON0',0,16,250,15,3
	.word	75001
	.byte	12,16,253,15,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66580
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SYSPLLCON1',0,16,130,16,3
	.word	75069
	.byte	12,16,133,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66684
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SYSPLLCON2',0,16,138,16,3
	.word	75137
	.byte	12,16,141,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66790
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SYSPLLSTAT',0,16,146,16,3
	.word	75205
	.byte	12,16,149,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67013
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPCLR',0,16,154,16,3
	.word	75273
	.byte	12,16,157,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67161
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPDIS0',0,16,162,16,3
	.word	75338
	.byte	12,16,165,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67649
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPDIS1',0,16,170,16,3
	.word	75404
	.byte	12,16,173,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67946
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSET',0,16,178,16,3
	.word	75470
	.byte	12,16,181,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68094
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSTAT',0,16,186,16,3
	.word	75535
	.byte	12,16,189,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68244
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTCPU_CON0',0,16,194,16,3
	.word	75601
	.byte	12,16,197,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68374
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTCPU_CON1',0,16,202,16,3
	.word	75670
	.byte	12,16,205,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68634
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTCPU_SR',0,16,210,16,3
	.word	75739
	.byte	12,16,213,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68857
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON0',0,16,218,16,3
	.word	75806
	.byte	12,16,221,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68983
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON1',0,16,226,16,3
	.word	75873
	.byte	12,16,229,16,9,4,13
	.byte	'U',0
	.word	398
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	414
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69235
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_SR',0,16,234,16,3
	.word	75940
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,16,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	71259
	.byte	4,2,35,0,0,16
	.word	76005
	.byte	29
	.byte	'Ifx_SCU_ESRCFGX',0,16,249,16,3
	.word	76046
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU',0,16,136,17,25,12,13
	.byte	'CON0',0
	.word	75601
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	75670
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	75739
	.byte	4,2,35,8,0,16
	.word	76076
	.byte	29
	.byte	'Ifx_SCU_WDTCPU',0,16,141,17,3
	.word	76139
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,16,156,17,25,12,13
	.byte	'CON0',0
	.word	75806
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	75873
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	75940
	.byte	4,2,35,8,0,16
	.word	76168
	.byte	29
	.byte	'Ifx_SCU_WDTS',0,16,161,17,3
	.word	76229
	.byte	17,3,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,29
	.byte	'IfxPort_ControlledBy',0,3,77,3
	.word	76256
	.byte	29
	.byte	'IfxPort_InputMode',0,3,87,3
	.word	7962
	.byte	17,3,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,29
	.byte	'IfxPort_LvdsMode',0,3,95,3
	.word	76373
	.byte	29
	.byte	'IfxPort_OutputIdx',0,3,136,1,3
	.word	8263
	.byte	29
	.byte	'IfxPort_OutputMode',0,3,145,1,3
	.word	8167
	.byte	17,3,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,29
	.byte	'IfxPort_PadDriver',0,3,165,1,3
	.word	76509
	.byte	17,3,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,29
	.byte	'IfxPort_PadSupply',0,3,173,1,3
	.word	76959
	.byte	17,3,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,29
	.byte	'IfxPort_PinFunctionMode',0,3,181,1,3
	.word	77039
	.byte	29
	.byte	'IfxPort_State',0,3,193,1,3
	.word	8576
	.byte	28,3,246,1,9,8,13
	.byte	'port',0
	.word	7957
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	421
	.byte	1,2,35,4,0,29
	.byte	'IfxPort_Pin',0,3,250,1,3
	.word	77169
	.byte	28,17,56,15,20,13
	.byte	'module',0
	.word	40241
	.byte	4,2,35,0,13
	.byte	'nodeId',0
	.word	47892
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	77169
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	42425
	.byte	1,2,35,16,0,19
	.word	77229
	.byte	29
	.byte	'IfxEray_Rxd_In',0,17,62,3
	.word	77296
	.byte	28,17,65,15,20,13
	.byte	'module',0
	.word	40241
	.byte	4,2,35,0,13
	.byte	'nodeId',0
	.word	47892
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	77169
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	8263
	.byte	1,2,35,16,0,19
	.word	77324
	.byte	29
	.byte	'IfxEray_Txd_Out',0,17,71,3
	.word	77391
	.byte	28,17,74,15,20,13
	.byte	'module',0
	.word	40241
	.byte	4,2,35,0,13
	.byte	'nodeId',0
	.word	47892
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	77169
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	8263
	.byte	1,2,35,16,0,19
	.word	77420
	.byte	29
	.byte	'IfxEray_Txen_Out',0,17,80,3
	.word	77487
	.byte	17,18,66,9,1,18
	.byte	'IfxSrc_Tos_cpu0',0,0,18
	.byte	'IfxSrc_Tos_dma',0,1,18
	.byte	'IfxSrc_Tos_cpu1',0,2,18
	.byte	'IfxSrc_Tos_cpu2',0,3,18
	.byte	'IfxSrc_Tos_cpu3',0,4,18
	.byte	'IfxSrc_Tos_cpu4',0,5,18
	.byte	'IfxSrc_Tos_cpu5',0,6,0,29
	.byte	'IfxSrc_Tos',0,18,75,3
	.word	77517
	.byte	29
	.byte	'Ifx_SRC_SRCR_Bits',0,6,85,3
	.word	8757
	.byte	29
	.byte	'Ifx_SRC_SRCR',0,6,98,3
	.word	9047
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,6,110,25,4,13
	.byte	'SB',0
	.word	9047
	.byte	4,2,35,0,0,16
	.word	77714
	.byte	29
	.byte	'Ifx_SRC_CPU_CPU',0,6,113,3
	.word	77749
	.byte	14,24
	.word	77714
	.byte	15,5,0,16
	.word	77778
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,6,128,1,25,24,13
	.byte	'CPU',0
	.word	77787
	.byte	24,2,35,0,0,16
	.word	77792
	.byte	29
	.byte	'Ifx_SRC_CPU',0,6,131,1,3
	.word	77825
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,6,146,1,25,4,13
	.byte	'SR',0
	.word	9047
	.byte	4,2,35,0,0,16
	.word	77851
	.byte	29
	.byte	'Ifx_SRC_AGBT_AGBT',0,6,149,1,3
	.word	77889
	.byte	14,4
	.word	77851
	.byte	15,0,0,16
	.word	77921
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,6,164,1,25,4,13
	.byte	'AGBT',0
	.word	77930
	.byte	4,2,35,0,0,16
	.word	77935
	.byte	29
	.byte	'Ifx_SRC_AGBT',0,6,167,1,3
	.word	77970
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,6,182,1,25,4,13
	.byte	'SR',0
	.word	9047
	.byte	4,2,35,0,0,16
	.word	77997
	.byte	29
	.byte	'Ifx_SRC_XBAR_XBAR',0,6,185,1,3
	.word	78035
	.byte	14,12
	.word	77997
	.byte	15,2,0,16
	.word	78067
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,6,200,1,25,12,13
	.byte	'XBAR',0
	.word	78076
	.byte	12,2,35,0,0,16
	.word	78081
	.byte	29
	.byte	'Ifx_SRC_XBAR',0,6,203,1,3
	.word	78116
	.byte	14,8
	.word	9047
	.byte	15,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,6,218,1,25,8,13
	.byte	'SR',0
	.word	78143
	.byte	8,2,35,0,0,16
	.word	78152
	.byte	29
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,6,221,1,3
	.word	78198
	.byte	16
	.word	78152
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,6,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	78238
	.byte	8,2,35,0,0,16
	.word	78243
	.byte	29
	.byte	'Ifx_SRC_CERBERUS',0,6,239,1,3
	.word	78286
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,6,254,1,25,12,13
	.byte	'TX',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	9047
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	9047
	.byte	4,2,35,8,0,16
	.word	78317
	.byte	29
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,6,131,2,3
	.word	78384
	.byte	14,144,1
	.word	78317
	.byte	15,11,0,16
	.word	78420
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,6,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	78430
	.byte	144,1,2,35,0,0,16
	.word	78435
	.byte	29
	.byte	'Ifx_SRC_ASCLIN',0,6,149,2,3
	.word	78476
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,6,164,2,25,20,13
	.byte	'TX',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	9047
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	9047
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	9047
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	9047
	.byte	4,2,35,16,0,16
	.word	78505
	.byte	29
	.byte	'Ifx_SRC_QSPI_QSPI',0,6,171,2,3
	.word	78591
	.byte	14,120
	.word	78505
	.byte	15,5,0,16
	.word	78623
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,6,186,2,25,120,13
	.byte	'QSPI',0
	.word	78632
	.byte	120,2,35,0,0,16
	.word	78637
	.byte	29
	.byte	'Ifx_SRC_QSPI',0,6,189,2,3
	.word	78672
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,6,204,2,25,4,13
	.byte	'SR',0
	.word	9047
	.byte	4,2,35,0,0,16
	.word	78699
	.byte	29
	.byte	'Ifx_SRC_HSCT_HSCT',0,6,207,2,3
	.word	78737
	.byte	14,8
	.word	78699
	.byte	15,1,0,16
	.word	78769
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,6,222,2,25,8,13
	.byte	'HSCT',0
	.word	78778
	.byte	8,2,35,0,0,16
	.word	78783
	.byte	29
	.byte	'Ifx_SRC_HSCT',0,6,225,2,3
	.word	78818
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,6,240,2,25,16,13
	.byte	'COK',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	9047
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	9047
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	9047
	.byte	4,2,35,12,0,16
	.word	78845
	.byte	29
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,6,246,2,3
	.word	78926
	.byte	14,64
	.word	78845
	.byte	15,3,0,16
	.word	78961
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,6,133,3,25,68,13
	.byte	'CH',0
	.word	78970
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	9047
	.byte	4,2,35,64,0,16
	.word	78975
	.byte	29
	.byte	'Ifx_SRC_HSSL_HSSL',0,6,137,3,3
	.word	79026
	.byte	14,136,1
	.word	78975
	.byte	15,1,0,16
	.word	79058
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,6,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	79068
	.byte	136,1,2,35,0,0,16
	.word	79073
	.byte	29
	.byte	'Ifx_SRC_HSSL',0,6,155,3,3
	.word	79110
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,6,170,3,25,16,13
	.byte	'DTR',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	9047
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	9047
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	1467
	.byte	4,2,35,12,0,16
	.word	79137
	.byte	29
	.byte	'Ifx_SRC_I2C_I2C',0,6,176,3,3
	.word	79218
	.byte	14,32
	.word	79137
	.byte	15,1,0,16
	.word	79248
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,6,191,3,25,32,13
	.byte	'I2C',0
	.word	79257
	.byte	32,2,35,0,0,16
	.word	79262
	.byte	29
	.byte	'Ifx_SRC_I2C',0,6,194,3,3
	.word	79295
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,6,209,3,25,4,13
	.byte	'SR',0
	.word	9047
	.byte	4,2,35,0,0,16
	.word	79321
	.byte	29
	.byte	'Ifx_SRC_SENT_SENT',0,6,212,3,3
	.word	79359
	.byte	14,40
	.word	79321
	.byte	15,9,0,16
	.word	79391
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,6,227,3,25,40,13
	.byte	'SENT',0
	.word	79400
	.byte	40,2,35,0,0,16
	.word	79405
	.byte	29
	.byte	'Ifx_SRC_SENT',0,6,230,3,3
	.word	79440
	.byte	14,20
	.word	9047
	.byte	15,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,6,245,3,25,20,13
	.byte	'SR',0
	.word	79467
	.byte	20,2,35,0,0,16
	.word	79476
	.byte	29
	.byte	'Ifx_SRC_MSC_MSC',0,6,248,3,3
	.word	79512
	.byte	14,80
	.word	79476
	.byte	15,3,0,16
	.word	79542
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,6,135,4,25,80,13
	.byte	'MSC',0
	.word	79551
	.byte	80,2,35,0,0,16
	.word	79556
	.byte	29
	.byte	'Ifx_SRC_MSC',0,6,138,4,3
	.word	79589
	.byte	14,16
	.word	9047
	.byte	15,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,6,153,4,25,16,13
	.byte	'SR',0
	.word	79615
	.byte	16,2,35,0,0,16
	.word	79624
	.byte	29
	.byte	'Ifx_SRC_CCU6_CCU',0,6,156,4,3
	.word	79661
	.byte	14,32
	.word	79624
	.byte	15,1,0,16
	.word	79692
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,6,171,4,25,32,13
	.byte	'CCU',0
	.word	79701
	.byte	32,2,35,0,0,16
	.word	79706
	.byte	29
	.byte	'Ifx_SRC_CCU6',0,6,174,4,3
	.word	79740
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,6,189,4,25,24,13
	.byte	'CIRQ',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	9047
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	9047
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	9047
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	9047
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	9047
	.byte	4,2,35,20,0,16
	.word	79767
	.byte	29
	.byte	'Ifx_SRC_GPT12_GPT12',0,6,197,4,3
	.word	79869
	.byte	14,24
	.word	79767
	.byte	15,0,0,16
	.word	79903
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,6,212,4,25,24,13
	.byte	'GPT12',0
	.word	79912
	.byte	24,2,35,0,0,16
	.word	79917
	.byte	29
	.byte	'Ifx_SRC_GPT12',0,6,215,4,3
	.word	79954
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,6,230,4,25,8,13
	.byte	'SR',0
	.word	78143
	.byte	8,2,35,0,0,16
	.word	79982
	.byte	29
	.byte	'Ifx_SRC_STM_STM',0,6,233,4,3
	.word	80018
	.byte	14,48
	.word	79982
	.byte	15,5,0,16
	.word	80048
	.byte	10
	.byte	'_Ifx_SRC_STM',0,6,248,4,25,48,13
	.byte	'STM',0
	.word	80057
	.byte	48,2,35,0,0,16
	.word	80062
	.byte	29
	.byte	'Ifx_SRC_STM',0,6,251,4,3
	.word	80095
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,6,138,5,25,4,13
	.byte	'SR',0
	.word	9047
	.byte	4,2,35,0,0,16
	.word	80121
	.byte	29
	.byte	'Ifx_SRC_FCE_FCE0',0,6,141,5,3
	.word	80158
	.byte	16
	.word	80121
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,6,156,5,25,4,13
	.byte	'FCE0',0
	.word	80189
	.byte	4,2,35,0,0,16
	.word	80194
	.byte	29
	.byte	'Ifx_SRC_FCE',0,6,159,5,3
	.word	80228
	.byte	14,32
	.word	421
	.byte	15,31,0,14,128,4
	.word	9047
	.byte	15,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,6,174,5,25,176,4,13
	.byte	'ERR',0
	.word	79615
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	80254
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	80263
	.byte	128,4,2,35,48,0,16
	.word	80273
	.byte	29
	.byte	'Ifx_SRC_DMA_DMA',0,6,179,5,3
	.word	80345
	.byte	14,176,4
	.word	80273
	.byte	15,0,0,16
	.word	80375
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,6,194,5,25,176,4,13
	.byte	'DMA',0
	.word	80385
	.byte	176,4,2,35,0,0,16
	.word	80390
	.byte	29
	.byte	'Ifx_SRC_DMA',0,6,197,5,3
	.word	80425
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,6,212,5,25,8,13
	.byte	'ERR',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	9047
	.byte	4,2,35,4,0,16
	.word	80451
	.byte	29
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,6,216,5,3
	.word	80505
	.byte	14,8
	.word	80451
	.byte	15,0,0,16
	.word	80539
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,6,231,5,25,8,13
	.byte	'SDMMC',0
	.word	80548
	.byte	8,2,35,0,0,16
	.word	80553
	.byte	29
	.byte	'Ifx_SRC_SDMMC',0,6,234,5,3
	.word	80590
	.byte	14,40
	.word	9047
	.byte	15,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,6,249,5,25,40,13
	.byte	'SR',0
	.word	80618
	.byte	40,2,35,0,0,16
	.word	80627
	.byte	29
	.byte	'Ifx_SRC_GETH_GETH',0,6,252,5,3
	.word	80665
	.byte	14,40
	.word	80627
	.byte	15,0,0,16
	.word	80697
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,6,139,6,25,40,13
	.byte	'GETH',0
	.word	80706
	.byte	40,2,35,0,0,16
	.word	80711
	.byte	29
	.byte	'Ifx_SRC_GETH',0,6,142,6,3
	.word	80746
	.byte	14,64
	.word	9047
	.byte	15,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,6,157,6,25,64,13
	.byte	'INT',0
	.word	80773
	.byte	64,2,35,0,0,16
	.word	80782
	.byte	29
	.byte	'Ifx_SRC_CAN_CAN',0,6,160,6,3
	.word	80819
	.byte	14,192,1
	.word	80782
	.byte	15,2,0,16
	.word	80849
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,6,175,6,25,192,1,13
	.byte	'CAN',0
	.word	80859
	.byte	192,1,2,35,0,0,16
	.word	80864
	.byte	29
	.byte	'Ifx_SRC_CAN',0,6,178,6,3
	.word	80899
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,6,193,6,25,16,13
	.byte	'SR0',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	9047
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	9047
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	9047
	.byte	4,2,35,12,0,16
	.word	80925
	.byte	29
	.byte	'Ifx_SRC_VADC_G',0,6,199,6,3
	.word	81000
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,6,214,6,25,4,13
	.byte	'SR0',0
	.word	9047
	.byte	4,2,35,0,0,16
	.word	81029
	.byte	29
	.byte	'Ifx_SRC_VADC_FC',0,6,217,6,3
	.word	81066
	.byte	14,192,1
	.word	80925
	.byte	15,11,0,16
	.word	81096
	.byte	14,32
	.word	81029
	.byte	15,7,0,16
	.word	81111
	.byte	14,32
	.word	80925
	.byte	15,1,0,16
	.word	81125
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,6,233,6,25,128,2,13
	.byte	'G',0
	.word	81106
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	81120
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	81134
	.byte	32,3,35,224,1,0,16
	.word	81139
	.byte	29
	.byte	'Ifx_SRC_VADC',0,6,238,6,3
	.word	81199
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,6,253,6,25,8,13
	.byte	'SRM',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	9047
	.byte	4,2,35,4,0,16
	.word	81226
	.byte	29
	.byte	'Ifx_SRC_DSADC_DSADC',0,6,129,7,3
	.word	81280
	.byte	14,112
	.word	81226
	.byte	15,13,0,16
	.word	81314
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,6,144,7,25,112,13
	.byte	'DSADC',0
	.word	81323
	.byte	112,2,35,0,0,16
	.word	81328
	.byte	29
	.byte	'Ifx_SRC_DSADC',0,6,147,7,3
	.word	81365
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,6,162,7,25,48,13
	.byte	'INT0',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	9047
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	9047
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	9047
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	9047
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	9047
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	9047
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	9047
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	9047
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	9047
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3287
	.byte	8,2,35,40,0,16
	.word	81393
	.byte	29
	.byte	'Ifx_SRC_ERAY_ERAY',0,6,175,7,3
	.word	81588
	.byte	14,96
	.word	81393
	.byte	15,1,0,16
	.word	81620
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,6,190,7,25,96,13
	.byte	'ERAY',0
	.word	81629
	.byte	96,2,35,0,0,16
	.word	81634
	.byte	29
	.byte	'Ifx_SRC_ERAY',0,6,193,7,3
	.word	81669
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,6,208,7,25,8,13
	.byte	'HSM',0
	.word	78143
	.byte	8,2,35,0,0,16
	.word	81696
	.byte	29
	.byte	'Ifx_SRC_HSM_HSM',0,6,211,7,3
	.word	81733
	.byte	14,8
	.word	81696
	.byte	15,0,0,16
	.word	81763
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,6,226,7,25,8,13
	.byte	'HSM',0
	.word	81772
	.byte	8,2,35,0,0,16
	.word	81777
	.byte	29
	.byte	'Ifx_SRC_HSM',0,6,229,7,3
	.word	81810
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,6,244,7,25,16,13
	.byte	'SCUERU',0
	.word	79615
	.byte	16,2,35,0,0,16
	.word	81836
	.byte	29
	.byte	'Ifx_SRC_SCU',0,6,247,7,3
	.word	81872
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,6,134,8,25,4,13
	.byte	'SR',0
	.word	9047
	.byte	4,2,35,0,0,16
	.word	81898
	.byte	29
	.byte	'Ifx_SRC_PMS_PMS',0,6,137,8,3
	.word	81934
	.byte	14,16
	.word	81898
	.byte	15,3,0,16
	.word	81964
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,6,152,8,25,16,13
	.byte	'PMS',0
	.word	81973
	.byte	16,2,35,0,0,16
	.word	81978
	.byte	29
	.byte	'Ifx_SRC_PMS',0,6,155,8,3
	.word	82011
	.byte	14,12
	.word	9047
	.byte	15,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,6,170,8,25,12,13
	.byte	'SR',0
	.word	82037
	.byte	12,2,35,0,0,16
	.word	82046
	.byte	29
	.byte	'Ifx_SRC_SMU_SMU',0,6,173,8,3
	.word	82082
	.byte	14,12
	.word	82046
	.byte	15,0,0,16
	.word	82112
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,6,188,8,25,12,13
	.byte	'SMU',0
	.word	82121
	.byte	12,2,35,0,0,16
	.word	82126
	.byte	29
	.byte	'Ifx_SRC_SMU',0,6,191,8,3
	.word	82159
	.byte	14,32
	.word	9047
	.byte	15,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,6,206,8,25,32,13
	.byte	'SR',0
	.word	82185
	.byte	32,2,35,0,0,16
	.word	82194
	.byte	29
	.byte	'Ifx_SRC_PSI5_PSI5',0,6,209,8,3
	.word	82232
	.byte	14,32
	.word	82194
	.byte	15,0,0,16
	.word	82264
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,6,224,8,25,32,13
	.byte	'PSI5',0
	.word	82273
	.byte	32,2,35,0,0,16
	.word	82278
	.byte	29
	.byte	'Ifx_SRC_PSI5',0,6,227,8,3
	.word	82313
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,6,242,8,25,12,13
	.byte	'BFR',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	9047
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	9047
	.byte	4,2,35,8,0,16
	.word	82340
	.byte	29
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,6,247,8,3
	.word	82409
	.byte	16
	.word	82340
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,6,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	82444
	.byte	12,2,35,0,0,16
	.word	82449
	.byte	29
	.byte	'Ifx_SRC_HSPDM',0,6,137,9,3
	.word	82487
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,6,152,9,25,24,13
	.byte	'LI0',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	9047
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	9047
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	9047
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	9047
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	9047
	.byte	4,2,35,20,0,16
	.word	82515
	.byte	29
	.byte	'Ifx_SRC_DAM_DAM',0,6,160,9,3
	.word	82616
	.byte	14,48
	.word	82515
	.byte	15,1,0,16
	.word	82646
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,6,175,9,25,48,13
	.byte	'DAM',0
	.word	82655
	.byte	48,2,35,0,0,16
	.word	82660
	.byte	29
	.byte	'Ifx_SRC_DAM',0,6,178,9,3
	.word	82693
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,6,193,9,25,32,13
	.byte	'SR',0
	.word	82185
	.byte	32,2,35,0,0,16
	.word	82719
	.byte	29
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,6,196,9,3
	.word	82759
	.byte	14,32
	.word	82719
	.byte	15,0,0,16
	.word	82793
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,6,211,9,25,32,13
	.byte	'PSI5S',0
	.word	82802
	.byte	32,2,35,0,0,16
	.word	82807
	.byte	29
	.byte	'Ifx_SRC_PSI5S',0,6,214,9,3
	.word	82844
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,6,229,9,25,8,13
	.byte	'ERR',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	9047
	.byte	4,2,35,4,0,16
	.word	82872
	.byte	29
	.byte	'Ifx_SRC_RIF_RIF',0,6,233,9,3
	.word	82922
	.byte	14,16
	.word	82872
	.byte	15,1,0,16
	.word	82952
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,6,248,9,25,16,13
	.byte	'RIF',0
	.word	82961
	.byte	16,2,35,0,0,16
	.word	82966
	.byte	29
	.byte	'Ifx_SRC_RIF',0,6,251,9,3
	.word	82999
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,6,138,10,25,8,13
	.byte	'INT',0
	.word	9047
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	9047
	.byte	4,2,35,4,0,16
	.word	83025
	.byte	29
	.byte	'Ifx_SRC_SPU_SPU',0,6,142,10,3
	.word	83075
	.byte	14,16
	.word	83025
	.byte	15,1,0,16
	.word	83105
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,6,157,10,25,16,13
	.byte	'SPU',0
	.word	83114
	.byte	16,2,35,0,0,16
	.word	83119
	.byte	29
	.byte	'Ifx_SRC_SPU',0,6,160,10,3
	.word	83152
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,6,175,10,25,32,13
	.byte	'SR',0
	.word	82185
	.byte	32,2,35,0,0,16
	.word	83178
	.byte	29
	.byte	'Ifx_SRC_GPSR_GPSR',0,6,178,10,3
	.word	83216
	.byte	14,192,1
	.word	83178
	.byte	15,5,0,16
	.word	83248
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,6,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	83258
	.byte	192,1,2,35,0,0,16
	.word	83263
	.byte	29
	.byte	'Ifx_SRC_GPSR',0,6,196,10,3
	.word	83300
	.byte	17,7,79,9,1,18
	.byte	'IfxEray_Baudrate_10',0,0,18
	.byte	'IfxEray_Baudrate_5',0,1,18
	.byte	'IfxEray_Baudrate_2_5',0,2,0,29
	.byte	'IfxEray_Baudrate',0,7,84,3
	.word	83327
	.byte	29
	.byte	'IfxEray_BufferDirection',0,7,92,3
	.word	41495
	.byte	17,7,104,9,4,18
	.byte	'IfxEray_ClearErrorFlag_pemc',0,1,18
	.byte	'IfxEray_ClearErrorFlag_cna',0,2,18
	.byte	'IfxEray_ClearErrorFlag_sfbm',0,4,18
	.byte	'IfxEray_ClearErrorFlag_sfo',0,8,18
	.byte	'IfxEray_ClearErrorFlag_ccf',0,16,18
	.byte	'IfxEray_ClearErrorFlag_ccl',0,32,18
	.byte	'IfxEray_ClearErrorFlag_eerr',0,192,0,18
	.byte	'IfxEray_ClearErrorFlag_rfo',0,128,1,18
	.byte	'IfxEray_ClearErrorFlag_efa',0,128,2,18
	.byte	'IfxEray_ClearErrorFlag_iiba',0,128,4,18
	.byte	'IfxEray_ClearErrorFlag_ioba',0,128,8,18
	.byte	'IfxEray_ClearErrorFlag_mhf',0,128,16,18
	.byte	'IfxEray_ClearErrorFlag_eda',0,128,128,4,18
	.byte	'IfxEray_ClearErrorFlag_ltva',0,128,128,8,18
	.byte	'IfxEray_ClearErrorFlag_taba',0,128,128,16,18
	.byte	'IfxEray_ClearErrorFlag_edb',0,128,128,128,8,18
	.byte	'IfxEray_ClearErrorFlag_ltvb',0,128,128,128,16,18
	.byte	'IfxEray_ClearErrorFlag_tabb',0,128,128,128,32,0,29
	.byte	'IfxEray_ClearErrorFlag',0,7,124,3
	.word	83456
	.byte	17,7,128,1,9,4,18
	.byte	'IfxEray_ClearStatusFlag_wst',0,1,18
	.byte	'IfxEray_ClearStatusFlag_cas',0,2,18
	.byte	'IfxEray_ClearStatusFlag_cycs',0,4,18
	.byte	'IfxEray_ClearStatusFlag_txi',0,8,18
	.byte	'IfxEray_ClearStatusFlag_rxi',0,16,18
	.byte	'IfxEray_ClearStatusFlag_rfne',0,32,18
	.byte	'IfxEray_ClearStatusFlag_rfcl',0,192,0,18
	.byte	'IfxEray_ClearStatusFlag_nmvc',0,128,1,18
	.byte	'IfxEray_ClearStatusFlag_ti0',0,128,2,18
	.byte	'IfxEray_ClearStatusFlag_ti1',0,128,4,18
	.byte	'IfxEray_ClearStatusFlag_tibc',0,128,8,18
	.byte	'IfxEray_ClearStatusFlag_tobc',0,128,16,18
	.byte	'IfxEray_ClearStatusFlag_swe',0,128,32,18
	.byte	'IfxEray_ClearStatusFlag_sucs',0,128,192,0,18
	.byte	'IfxEray_ClearStatusFlag_mbsi',0,128,128,1,18
	.byte	'IfxEray_ClearStatusFlag_sds',0,128,128,2,18
	.byte	'IfxEray_ClearStatusFlag_wupa',0,128,128,4,18
	.byte	'IfxEray_ClearStatusFlag_mtsa',0,128,128,8,18
	.byte	'IfxEray_ClearStatusFlag_wupb',0,128,128,128,8,18
	.byte	'IfxEray_ClearStatusFlag_mtsb',0,128,128,128,16,0,29
	.byte	'IfxEray_ClearStatusFlag',0,7,150,1,3
	.word	84045
	.byte	17,7,168,1,9,1,18
	.byte	'IfxEray_ExternalOffset_noCorrection',0,1,18
	.byte	'IfxEray_ExternalOffset_correctionSubtracted',0,2,18
	.byte	'IfxEray_ExternalOffset_correctionAdded',0,3,0,29
	.byte	'IfxEray_ExternalOffset',0,7,173,1,3
	.word	84720
	.byte	17,7,177,1,9,1,18
	.byte	'IfxEray_ExternalOffsetCorrection_0',0,0,18
	.byte	'IfxEray_ExternalOffsetCorrection_1',0,1,18
	.byte	'IfxEray_ExternalOffsetCorrection_2',0,2,18
	.byte	'IfxEray_ExternalOffsetCorrection_3',0,3,18
	.byte	'IfxEray_ExternalOffsetCorrection_4',0,4,18
	.byte	'IfxEray_ExternalOffsetCorrection_5',0,5,18
	.byte	'IfxEray_ExternalOffsetCorrection_6',0,6,18
	.byte	'IfxEray_ExternalOffsetCorrection_7',0,7,0,29
	.byte	'IfxEray_ExternalOffsetCorrection',0,7,187,1,3
	.word	84884
	.byte	17,7,191,1,9,1,18
	.byte	'IfxEray_ExternalRate_noCorrection',0,1,18
	.byte	'IfxEray_ExternalRate_correctionSubtracted',0,2,18
	.byte	'IfxEray_ExternalRate_correctionAdded',0,3,0,29
	.byte	'IfxEray_ExternalRate',0,7,196,1,3
	.word	85229
	.byte	17,7,200,1,9,1,18
	.byte	'IfxEray_ExternalRateCorrection_0',0,0,18
	.byte	'IfxEray_ExternalRateCorrection_1',0,1,18
	.byte	'IfxEray_ExternalRateCorrection_2',0,2,18
	.byte	'IfxEray_ExternalRateCorrection_3',0,3,18
	.byte	'IfxEray_ExternalRateCorrection_4',0,4,18
	.byte	'IfxEray_ExternalRateCorrection_5',0,5,18
	.byte	'IfxEray_ExternalRateCorrection_6',0,6,18
	.byte	'IfxEray_ExternalRateCorrection_7',0,7,0,29
	.byte	'IfxEray_ExternalRateCorrection',0,7,210,1,3
	.word	85385
	.byte	17,7,214,1,9,1,18
	.byte	'IfxEray_IdleDynamicSlots_0',0,0,18
	.byte	'IfxEray_IdleDynamicSlots_1',0,1,18
	.byte	'IfxEray_IdleDynamicSlots_2',0,2,0,29
	.byte	'IfxEray_IdleDynamicSlots',0,7,219,1,3
	.word	85712
	.byte	17,7,223,1,9,1,18
	.byte	'IfxEray_InterruptLine_0',0,0,18
	.byte	'IfxEray_InterruptLine_1',0,1,0,29
	.byte	'IfxEray_InterruptLine',0,7,227,1,3
	.word	85840
	.byte	17,7,231,1,9,1,18
	.byte	'IfxEray_ListenTimeOutNoise_2',0,1,18
	.byte	'IfxEray_ListenTimeOutNoise_3',0,2,18
	.byte	'IfxEray_ListenTimeOutNoise_4',0,3,18
	.byte	'IfxEray_ListenTimeOutNoise_5',0,4,18
	.byte	'IfxEray_ListenTimeOutNoise_6',0,5,18
	.byte	'IfxEray_ListenTimeOutNoise_7',0,6,18
	.byte	'IfxEray_ListenTimeOutNoise_8',0,7,18
	.byte	'IfxEray_ListenTimeOutNoise_9',0,8,18
	.byte	'IfxEray_ListenTimeOutNoise_10',0,9,18
	.byte	'IfxEray_ListenTimeOutNoise_11',0,10,18
	.byte	'IfxEray_ListenTimeOutNoise_12',0,11,18
	.byte	'IfxEray_ListenTimeOutNoise_13',0,12,18
	.byte	'IfxEray_ListenTimeOutNoise_14',0,13,18
	.byte	'IfxEray_ListenTimeOutNoise_15',0,14,18
	.byte	'IfxEray_ListenTimeOutNoise_16',0,15,0,29
	.byte	'IfxEray_ListenTimeOutNoise',0,7,248,1,3
	.word	85930
	.byte	17,7,252,1,9,1,18
	.byte	'IfxEray_MaxSynchFrames_2',0,2,18
	.byte	'IfxEray_MaxSynchFrames_3',0,3,18
	.byte	'IfxEray_MaxSynchFrames_4',0,4,18
	.byte	'IfxEray_MaxSynchFrames_5',0,5,18
	.byte	'IfxEray_MaxSynchFrames_6',0,6,18
	.byte	'IfxEray_MaxSynchFrames_7',0,7,18
	.byte	'IfxEray_MaxSynchFrames_8',0,8,18
	.byte	'IfxEray_MaxSynchFrames_9',0,9,18
	.byte	'IfxEray_MaxSynchFrames_10',0,10,18
	.byte	'IfxEray_MaxSynchFrames_11',0,11,18
	.byte	'IfxEray_MaxSynchFrames_12',0,12,18
	.byte	'IfxEray_MaxSynchFrames_13',0,13,18
	.byte	'IfxEray_MaxSynchFrames_14',0,14,18
	.byte	'IfxEray_MaxSynchFrames_15',0,15,0,29
	.byte	'IfxEray_MaxSynchFrames',0,7,140,2,3
	.word	86445
	.byte	29
	.byte	'IfxEray_PocCommand',0,7,159,2,3
	.word	40888
	.byte	17,7,163,2,9,1,18
	.byte	'IfxEray_PocState_defaultConfig',0,0,18
	.byte	'IfxEray_PocState_ready',0,1,18
	.byte	'IfxEray_PocState_normalActive',0,2,18
	.byte	'IfxEray_PocState_normalPassive',0,3,18
	.byte	'IfxEray_PocState_halt',0,4,18
	.byte	'IfxEray_PocState_monitor',0,5,18
	.byte	'IfxEray_PocState_config',0,15,18
	.byte	'IfxEray_PocState_wakeupStandby',0,16,18
	.byte	'IfxEray_PocState_wakeupListen',0,17,18
	.byte	'IfxEray_PocState_wakeupSend',0,18,18
	.byte	'IfxEray_PocState_wakeupDetect',0,19,18
	.byte	'IfxEray_PocState_startup',0,32,18
	.byte	'IfxEray_PocState_coldStartListen',0,33,18
	.byte	'IfxEray_PocState_collisionResolution',0,34,18
	.byte	'IfxEray_PocState_consistencyCheck',0,35,18
	.byte	'IfxEray_PocState_gap',0,36,18
	.byte	'IfxEray_PocState_join',0,37,18
	.byte	'IfxEray_PocState_integrationCheck',0,38,18
	.byte	'IfxEray_PocState_integrationListen',0,39,18
	.byte	'IfxEray_PocState_integrationConsistencyCheck',0,40,18
	.byte	'IfxEray_PocState_initializeSchedule',0,41,18
	.byte	'IfxEray_PocState_staruAborted',0,42,18
	.byte	'IfxEray_PocState_startupSucced',0,43,0,29
	.byte	'IfxEray_PocState',0,7,188,2,3
	.word	86896
	.byte	17,7,192,2,9,1,18
	.byte	'IfxEray_ReceiveChannel_both',0,0,18
	.byte	'IfxEray_ReceiveChannel_b',0,1,18
	.byte	'IfxEray_ReceiveChannel_a',0,2,18
	.byte	'IfxEray_ReceiveChannel_none',0,3,0,29
	.byte	'IfxEray_ReceiveChannel',0,7,198,2,3
	.word	87663
	.byte	17,7,203,2,9,1,18
	.byte	'IfxEray_SleepMode_enable',0,0,18
	.byte	'IfxEray_SleepMode_disable',0,1,0,29
	.byte	'IfxEray_SleepMode',0,7,207,2,3
	.word	87816
	.byte	17,7,211,2,9,1,18
	.byte	'IfxEray_StrobePosition_5',0,0,18
	.byte	'IfxEray_StrobePosition_4',0,1,18
	.byte	'IfxEray_StrobePosition_6',0,2,0,29
	.byte	'IfxEray_StrobePosition',0,7,216,2,3
	.word	87905
	.byte	17,7,220,2,9,1,18
	.byte	'IfxEray_SuspendMode_none',0,0,18
	.byte	'IfxEray_SuspendMode_hard',0,1,18
	.byte	'IfxEray_SuspendMode_soft',0,2,0,29
	.byte	'IfxEray_SuspendMode',0,7,225,2,3
	.word	88025
	.byte	29
	.byte	'IfxEray_TransmissionMode',0,7,233,2,3
	.word	41570
	.byte	17,7,237,2,9,1,18
	.byte	'IfxEray_TransmissionSlotMode_all',0,0,18
	.byte	'IfxEray_TransmissionSlotMode_single',0,1,0,29
	.byte	'IfxEray_TransmissionSlotMode',0,7,241,2,3
	.word	88176
	.byte	17,7,245,2,9,1,18
	.byte	'IfxEray_WakeupChannel_a',0,0,18
	.byte	'IfxEray_WakeupChannel_b',0,1,0,29
	.byte	'IfxEray_WakeupChannel',0,7,249,2,3
	.word	88294
	.byte	29
	.byte	'IfxEray_Header',0,7,147,3,3
	.word	41653
	.byte	29
	.byte	'IfxEray_ReceivedHeader',0,7,161,3,3
	.word	41271
	.byte	29
	.byte	'IfxEray_SlotConfig',0,7,171,3,3
	.word	41987
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L62:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,1,1,11,15,73,19,0,0,15,33,0,47,15,0,0,16,53,0,73,19,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,38,0,73,19,0,0,20,46,1,3,8,54,15,39,12,63,12,60,12,0,0,21
	.byte	5,0,73,19,0,0,22,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,23,5,0,3,8,73,19,0,0,24,46,1,49,19,0,0,25
	.byte	5,0,49,19,0,0,26,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,27,46,0,3,8,58,15,59,15,57,15
	.byte	73,19,54,15,39,12,63,12,60,12,0,0,28,19,1,58,15,59,15,57,15,11,15,0,0,29,22,0,3,8,58,15,59,15,57,15,73
	.byte	19,0,0,30,21,0,54,15,0,0,31,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L63:
	.word	.L288-.L287
.L287:
	.half	3
	.word	.L290-.L289
.L289:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxPort.h',0,2,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxSrc.h',0,4,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.h',0,0,0,0
	.byte	'IfxEray_regdef.h',0,3,0,0
	.byte	'IfxScuWdt.h',0,5,0,0
	.byte	'IfxEray_cfg.h',0,6,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,6,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxEray_PinMap.h',0,7,0,0
	.byte	'IfxSrc_cfg.h',0,6,0,0,0
.L290:
.L288:
	.sdecl	'.debug_info',debug,cluster('IfxEray_clearAllFlags')
	.sect	'.debug_info'
.L64:
	.word	240
	.half	3
	.word	.L65
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L67,.L66
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_clearAllFlags',0,1,123,6,1,1,1
	.word	.L36,.L139,.L35
	.byte	4
	.byte	'eray',0,1,123,38
	.word	.L140,.L141
	.byte	5
	.word	.L36,.L139
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_clearAllFlags')
	.sect	'.debug_abbrev'
.L65:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_clearAllFlags')
	.sect	'.debug_line'
.L66:
	.word	.L292-.L291
.L291:
	.half	3
	.word	.L294-.L293
.L293:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L294:
	.byte	5,20,7,0,5,2
	.word	.L36
	.byte	3,252,0,1,5,18,1,9
	.half	.L295-.L36
	.byte	3,1,1,9
	.half	.L296-.L295
	.byte	3,1,1,9
	.half	.L297-.L296
	.byte	3,1,1,5,20,9
	.half	.L298-.L297
	.byte	3,1,1,5,18,9
	.half	.L299-.L298
	.byte	1,5,1,9
	.half	.L300-.L299
	.byte	3,1,1,7,9
	.half	.L68-.L300
	.byte	0,1,1
.L292:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_clearAllFlags')
	.sect	'.debug_ranges'
.L67:
	.word	-1,.L36,0,.L68-.L36,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_enableInterruptLines')
	.sect	'.debug_info'
.L69:
	.word	249
	.half	3
	.word	.L70
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L72,.L71
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_enableInterruptLines',0,1,133,1,6,1,1,1
	.word	.L38,.L142,.L37
	.byte	4
	.byte	'eray',0,1,133,1,45
	.word	.L140,.L143
	.byte	5
	.word	.L38,.L142
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_enableInterruptLines')
	.sect	'.debug_abbrev'
.L70:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_enableInterruptLines')
	.sect	'.debug_line'
.L71:
	.word	.L302-.L301
.L301:
	.half	3
	.word	.L304-.L303
.L303:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L304:
	.byte	5,21,7,0,5,2
	.word	.L38
	.byte	3,134,1,1,5,19,1,5,21,9
	.half	.L305-.L38
	.byte	3,1,1,5,19,3,4,1,5,21,9
	.half	.L306-.L305
	.byte	3,125,1,5,19,3,127,1,9
	.half	.L307-.L306
	.byte	3,1,1,9
	.half	.L308-.L307
	.byte	3,3,1,5,21,9
	.half	.L309-.L308
	.byte	3,126,1,5,19,9
	.half	.L310-.L309
	.byte	1,5,21,9
	.half	.L311-.L310
	.byte	3,1,1,5,19,9
	.half	.L312-.L311
	.byte	1,9
	.half	.L31-.L312
	.byte	3,1,1,5,1,9
	.half	.L313-.L31
	.byte	3,8,1,7,9
	.half	.L73-.L313
	.byte	0,1,1
.L302:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_enableInterruptLines')
	.sect	'.debug_ranges'
.L72:
	.word	-1,.L38,0,.L73-.L38,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_setMessageBufferInterruptDestination')
	.sect	'.debug_info'
.L74:
	.word	382
	.half	3
	.word	.L75
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L77,.L76
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_setMessageBufferInterruptDestination',0,1,247,1,6,1,1,1
	.word	.L50,.L144,.L49
	.byte	4
	.byte	'eray',0,1,247,1,61
	.word	.L140,.L145
	.byte	4
	.byte	'messageBuffer',0,1,247,1,73
	.word	.L146,.L147
	.byte	4
	.byte	'messageBufferDestination',0,1,247,1,94
	.word	.L146,.L148
	.byte	5
	.word	.L149
	.byte	6
	.byte	'ix',0,1,249,1,21
	.word	.L146,.L150
	.byte	6
	.byte	'mask',0,1,250,1,21
	.word	.L151,.L152
	.byte	6
	.byte	'msicSFR',0,1,251,1,21
	.word	.L153,.L154
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_setMessageBufferInterruptDestination')
	.sect	'.debug_abbrev'
.L75:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_setMessageBufferInterruptDestination')
	.sect	'.debug_line'
.L76:
	.word	.L315-.L314
.L314:
	.half	3
	.word	.L317-.L316
.L316:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L317:
	.byte	5,31,7,0,5,2
	.word	.L50
	.byte	3,249,1,1,5,63,3,1,1,5,37,9
	.half	.L318-.L50
	.byte	3,127,1,5,31,9
	.half	.L319-.L318
	.byte	3,127,1,5,33,9
	.half	.L266-.L319
	.byte	3,1,1,5,63,3,1,1,5,1,9
	.half	.L267-.L266
	.byte	3,10,1,7,9
	.half	.L78-.L267
	.byte	0,1,1
.L315:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_setMessageBufferInterruptDestination')
	.sect	'.debug_ranges'
.L77:
	.word	-1,.L50,0,.L78-.L50,0,0
.L149:
	.word	-1,.L50,0,.L144-.L50,-1,.L52,0,.L138-.L52,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_setNewDataInterruptDestination')
	.sect	'.debug_info'
.L79:
	.word	372
	.half	3
	.word	.L80
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L82,.L81
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_setNewDataInterruptDestination',0,1,136,2,6,1,1,1
	.word	.L54,.L155,.L53
	.byte	4
	.byte	'eray',0,1,136,2,55
	.word	.L140,.L156
	.byte	4
	.byte	'ndat',0,1,136,2,67
	.word	.L146,.L157
	.byte	4
	.byte	'ndatDestination',0,1,136,2,79
	.word	.L146,.L158
	.byte	5
	.word	.L54,.L155
	.byte	5
	.word	.L54,.L155
	.byte	6
	.byte	'ix',0,1,139,2,21
	.word	.L146,.L159
	.byte	6
	.byte	'mask',0,1,140,2,21
	.word	.L151,.L160
	.byte	6
	.byte	'ndicSFR',0,1,141,2,21
	.word	.L161,.L162
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_setNewDataInterruptDestination')
	.sect	'.debug_abbrev'
.L80:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_setNewDataInterruptDestination')
	.sect	'.debug_line'
.L81:
	.word	.L321-.L320
.L320:
	.half	3
	.word	.L323-.L322
.L322:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L323:
	.byte	5,31,7,0,5,2
	.word	.L54
	.byte	3,139,2,1,5,63,3,1,1,5,37,9
	.half	.L324-.L54
	.byte	3,127,1,5,33,9
	.half	.L325-.L324
	.byte	1,5,31,9
	.half	.L273-.L325
	.byte	3,127,1,5,63,3,2,1,5,1,9
	.half	.L274-.L273
	.byte	3,10,1,7,9
	.half	.L83-.L274
	.byte	0,1,1
.L321:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_setNewDataInterruptDestination')
	.sect	'.debug_ranges'
.L82:
	.word	-1,.L54,0,.L83-.L54,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_getAddress')
	.sect	'.debug_info'
.L84:
	.word	264
	.half	3
	.word	.L85
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L87,.L86
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_getAddress',0,1,151,1,11
	.word	.L140
	.byte	1,1,1
	.word	.L40,.L163,.L39
	.byte	4
	.byte	'eray',0,1,151,1,44
	.word	.L164,.L165
	.byte	5
	.word	.L40,.L163
	.byte	6
	.byte	'module',0,1,153,1,15
	.word	.L140,.L166
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_getAddress')
	.sect	'.debug_abbrev'
.L85:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_getAddress')
	.sect	'.debug_line'
.L86:
	.word	.L327-.L326
.L326:
	.half	3
	.word	.L329-.L328
.L328:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L329:
	.byte	5,5,7,0,5,2
	.word	.L40
	.byte	3,154,1,1,5,30,7,9
	.half	.L330-.L40
	.byte	3,2,1,5,50,9
	.half	.L331-.L330
	.byte	1,5,56,9
	.half	.L332-.L331
	.byte	1,5,1,9
	.half	.L249-.L332
	.byte	3,8,1,5,16,7,9
	.half	.L7-.L249
	.byte	3,124,1,5,1,9
	.half	.L250-.L7
	.byte	3,4,1,7,9
	.half	.L88-.L250
	.byte	0,1,1
.L327:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_getAddress')
	.sect	'.debug_ranges'
.L87:
	.word	-1,.L40,0,.L88-.L40,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_getIndex')
	.sect	'.debug_info'
.L89:
	.word	281
	.half	3
	.word	.L90
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L92,.L91
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_getIndex',0,1,168,1,15
	.word	.L164
	.byte	1,1,1
	.word	.L42,.L167,.L41
	.byte	4
	.byte	'eray',0,1,168,1,42
	.word	.L140,.L168
	.byte	5
	.word	.L42,.L167
	.byte	6
	.byte	'index',0,1,170,1,19
	.word	.L151,.L169
	.byte	6
	.byte	'result',0,1,171,1,19
	.word	.L164,.L170
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_getIndex')
	.sect	'.debug_abbrev'
.L90:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_getIndex')
	.sect	'.debug_line'
.L91:
	.word	.L334-.L333
.L333:
	.half	3
	.word	.L336-.L335
.L335:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L336:
	.byte	5,12,7,0,5,2
	.word	.L42
	.byte	3,172,1,1,5,13,3,4,1,5,48,9
	.half	.L337-.L42
	.byte	3,126,1,5,40,9
	.half	.L10-.L337
	.byte	3,2,1,5,9,9
	.half	.L338-.L10
	.byte	1,5,64,7,9
	.half	.L339-.L338
	.byte	3,2,1,5,22,9
	.half	.L340-.L339
	.byte	1,5,1,3,6,1,5,55,7,9
	.half	.L11-.L340
	.byte	3,118,1,5,48,1,5,1,7,9
	.half	.L341-.L11
	.byte	3,10,1,7,9
	.half	.L93-.L341
	.byte	0,1,1
.L334:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_getIndex')
	.sect	'.debug_ranges'
.L92:
	.word	-1,.L42,0,.L93-.L42,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_resetModule')
	.sect	'.debug_info'
.L94:
	.word	261
	.half	3
	.word	.L95
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L97,.L96
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_resetModule',0,1,227,1,6,1,1,1
	.word	.L48,.L171,.L47
	.byte	4
	.byte	'eray',0,1,227,1,36
	.word	.L140,.L172
	.byte	5
	.word	.L48,.L171
	.byte	6
	.byte	'passwd',0,1,229,1,12
	.word	.L173,.L174
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_resetModule')
	.sect	'.debug_abbrev'
.L95:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_resetModule')
	.sect	'.debug_line'
.L96:
	.word	.L343-.L342
.L342:
	.half	3
	.word	.L345-.L344
.L344:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L345:
	.byte	5,6,7,0,5,2
	.word	.L48
	.byte	3,226,1,1,5,53,9
	.half	.L260-.L48
	.byte	3,2,1,5,19,9
	.half	.L259-.L260
	.byte	1,5,31,9
	.half	.L262-.L259
	.byte	3,1,1,5,18,9
	.half	.L261-.L262
	.byte	3,1,1,5,29,9
	.half	.L346-.L261
	.byte	3,3,1,5,23,9
	.half	.L263-.L346
	.byte	3,125,1,5,18,9
	.half	.L347-.L263
	.byte	3,1,1,5,23,9
	.half	.L348-.L347
	.byte	1,5,29,9
	.half	.L349-.L348
	.byte	3,2,1,5,16,9
	.half	.L264-.L349
	.byte	3,2,1,5,25,9
	.half	.L17-.L264
	.byte	1,5,38,9
	.half	.L350-.L17
	.byte	1,5,31,7,9
	.half	.L351-.L350
	.byte	3,5,1,5,29,9
	.half	.L352-.L351
	.byte	3,2,1,5,20,3,127,1,5,25,9
	.half	.L265-.L352
	.byte	1,5,29,9
	.half	.L353-.L265
	.byte	3,1,1,5,1,7,9
	.half	.L98-.L353
	.byte	3,1,0,1,1
.L343:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_resetModule')
	.sect	'.debug_ranges'
.L97:
	.word	-1,.L48,0,.L98-.L48,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_changePocState')
	.sect	'.debug_info'
.L99:
	.word	268
	.half	3
	.word	.L100
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L102,.L101
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_changePocState',0,1,99,9
	.word	.L146
	.byte	1,1,1
	.word	.L5,.L175,.L34
	.byte	4
	.byte	'eray',0,1,99,42
	.word	.L140,.L176
	.byte	4
	.byte	'pocCommand',0,1,99,67
	.word	.L177,.L178
	.byte	5
	.word	.L5,.L175
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_changePocState')
	.sect	'.debug_abbrev'
.L100:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_changePocState')
	.sect	'.debug_line'
.L101:
	.word	.L355-.L354
.L354:
	.half	3
	.word	.L357-.L356
.L356:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L357:
	.byte	5,25,7,0,5,2
	.word	.L5
	.byte	3,231,0,1,5,35,9
	.half	.L358-.L5
	.byte	1,5,18,7,9
	.half	.L359-.L358
	.byte	3,3,1,5,23,9
	.half	.L360-.L359
	.byte	1,5,22,9
	.half	.L361-.L360
	.byte	3,3,1,5,1,9
	.half	.L362-.L361
	.byte	3,10,1,7,9
	.half	.L103-.L362
	.byte	0,1,1
.L355:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_changePocState')
	.sect	'.debug_ranges'
.L102:
	.word	-1,.L5,0,.L103-.L5,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_setPocReady')
	.sect	'.debug_info'
.L104:
	.word	240
	.half	3
	.word	.L105
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L107,.L106
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_setPocReady',0,1,154,2,6,1,1,1
	.word	.L22,.L179,.L55
	.byte	4
	.byte	'eray',0,1,154,2,36
	.word	.L140,.L180
	.byte	5
	.word	.L22,.L179
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_setPocReady')
	.sect	'.debug_abbrev'
.L105:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_setPocReady')
	.sect	'.debug_line'
.L106:
	.word	.L364-.L363
.L363:
	.half	3
	.word	.L366-.L365
.L365:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L366:
	.byte	5,25,7,0,5,2
	.word	.L22
	.byte	3,156,2,1,5,35,9
	.half	.L367-.L22
	.byte	1,5,25,7,9
	.half	.L368-.L367
	.byte	3,4,1,5,23,1,5,25,9
	.half	.L369-.L368
	.byte	3,1,1,5,23,1,5,18,9
	.half	.L370-.L369
	.byte	3,1,1,5,23,9
	.half	.L371-.L370
	.byte	1,5,1,9
	.half	.L372-.L371
	.byte	3,1,1,7,9
	.half	.L108-.L372
	.byte	0,1,1
.L364:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_setPocReady')
	.sect	'.debug_ranges'
.L107:
	.word	-1,.L22,0,.L108-.L22,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_calcHeaderCrc')
	.sect	'.debug_info'
.L109:
	.word	422
	.half	3
	.word	.L110
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L112,.L111
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_calcHeaderCrc',0,1,52,8
	.word	.L173
	.byte	1,1,1
	.word	.L33,.L181,.L32
	.byte	4
	.byte	'payloadLength',0,1,52,36
	.word	.L146,.L182
	.byte	4
	.byte	'frameId',0,1,52,58
	.word	.L173,.L183
	.byte	4
	.byte	'startupFrameIndicator',0,1,52,75
	.word	.L146,.L184
	.byte	4
	.byte	'syncFrameIndicator',0,1,52,106
	.word	.L146,.L185
	.byte	5
	.word	.L33,.L181
	.byte	6
	.byte	'headerValue',0,1,54,12
	.word	.L151,.L186
	.byte	6
	.byte	'length',0,1,58,12
	.word	.L151,.L187
	.byte	6
	.byte	'crcNext',0,1,59,12
	.word	.L151,.L188
	.byte	6
	.byte	'crcRegX',0,1,61,12
	.word	.L151,.L189
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_calcHeaderCrc')
	.sect	'.debug_abbrev'
.L110:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_calcHeaderCrc')
	.sect	'.debug_line'
.L111:
	.word	.L374-.L373
.L373:
	.half	3
	.word	.L376-.L375
.L375:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L376:
	.byte	5,47,7,0,5,2
	.word	.L33
	.byte	3,53,1,5,18,3,14,1,5,54,9
	.half	.L377-.L33
	.byte	3,114,1,5,87,9
	.half	.L378-.L377
	.byte	1,5,94,9
	.half	.L379-.L378
	.byte	1,5,61,9
	.half	.L380-.L379
	.byte	1,5,113,9
	.half	.L381-.L380
	.byte	1,5,17,9
	.half	.L382-.L381
	.byte	3,11,1,5,122,9
	.half	.L246-.L382
	.byte	3,117,1,5,101,9
	.half	.L383-.L246
	.byte	1,5,145,1,9
	.half	.L384-.L383
	.byte	1,5,128,1,9
	.half	.L385-.L384
	.byte	1,5,17,9
	.half	.L386-.L385
	.byte	3,10,1,5,21,9
	.half	.L2-.L386
	.byte	3,6,1,5,24,9
	.half	.L387-.L2
	.byte	3,4,1,5,37,9
	.half	.L388-.L387
	.byte	3,125,1,5,17,9
	.half	.L389-.L388
	.byte	3,12,1,5,9,9
	.half	.L390-.L389
	.byte	3,119,1,9
	.half	.L247-.L390
	.byte	3,11,1,5,24,7,9
	.half	.L391-.L247
	.byte	3,2,1,5,21,9
	.half	.L248-.L391
	.byte	1,5,18,9
	.half	.L3-.L248
	.byte	3,109,1,5,13,7,9
	.half	.L392-.L3
	.byte	3,25,1,5,1,3,3,1,7,9
	.half	.L113-.L392
	.byte	0,1,1
.L374:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_calcHeaderCrc')
	.sect	'.debug_ranges'
.L112:
	.word	-1,.L33,0,.L113-.L33,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_readData')
	.sect	'.debug_info'
.L114:
	.word	332
	.half	3
	.word	.L115
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L117,.L116
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_readData',0,1,188,1,6,1,1,1
	.word	.L44,.L190,.L43
	.byte	4
	.byte	'eray',0,1,188,1,33
	.word	.L140,.L191
	.byte	4
	.byte	'data',0,1,188,1,47
	.word	.L192,.L193
	.byte	4
	.byte	'payloadLength',0,1,188,1,59
	.word	.L146,.L194
	.byte	5
	.word	.L44,.L190
	.byte	5
	.word	.L195,.L14
	.byte	6
	.byte	'length',0,1,192,1,16
	.word	.L173,.L196
	.byte	6
	.byte	'index',0,1,193,1,16
	.word	.L146,.L197
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_readData')
	.sect	'.debug_abbrev'
.L115:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_readData')
	.sect	'.debug_line'
.L116:
	.word	.L394-.L393
.L393:
	.half	3
	.word	.L396-.L395
.L395:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L396:
	.byte	5,5,7,0,5,2
	.word	.L44
	.byte	3,189,1,1,5,40,7,9
	.half	.L195-.L44
	.byte	3,2,1,5,27,3,5,1,5,40,9
	.half	.L252-.L195
	.byte	3,123,1,5,20,9
	.half	.L397-.L252
	.byte	3,3,1,5,39,1,5,46,9
	.half	.L16-.L397
	.byte	1,5,43,3,2,1,5,46,9
	.half	.L253-.L16
	.byte	3,126,1,5,21,3,2,1,5,39,9
	.half	.L15-.L253
	.byte	3,126,1,5,1,7,9
	.half	.L14-.L15
	.byte	3,5,1,7,9
	.half	.L118-.L14
	.byte	0,1,1
.L394:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_readData')
	.sect	'.debug_ranges'
.L117:
	.word	-1,.L44,0,.L118-.L44,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_readFrame')
	.sect	'.debug_info'
.L119:
	.word	394
	.half	3
	.word	.L120
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L122,.L121
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_readFrame',0,1,203,1,6,1,1,1
	.word	.L46,.L198,.L45
	.byte	4
	.byte	'eray',0,1,203,1,34
	.word	.L140,.L199
	.byte	4
	.byte	'header',0,1,203,1,64
	.word	.L200,.L201
	.byte	4
	.byte	'data',0,1,203,1,80
	.word	.L192,.L202
	.byte	4
	.byte	'maxPayloadLength',0,1,203,1,96
	.word	.L203,.L204
	.byte	5
	.word	.L46,.L198
	.byte	5
	.word	.L46,.L205
	.byte	6
	.byte	'rdhs1',0,1,206,1,24
	.word	.L206,.L207
	.byte	5
	.word	.L208,.L205
	.byte	6
	.byte	'rdhs2',0,1,208,1,24
	.word	.L209,.L210
	.byte	5
	.word	.L208,.L205
	.byte	6
	.byte	'rdhs3',0,1,210,1,24
	.word	.L211,.L212
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_readFrame')
	.sect	'.debug_abbrev'
.L120:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_readFrame')
	.sect	'.debug_line'
.L121:
	.word	.L399-.L398
.L398:
	.half	3
	.word	.L401-.L400
.L400:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L401:
	.byte	5,55,7,0,5,2
	.word	.L46
	.byte	3,206,1,1,5,15,9
	.half	.L208-.L46
	.byte	3,6,1,5,51,9
	.half	.L402-.L208
	.byte	1,5,55,3,124,1,9
	.half	.L256-.L402
	.byte	3,2,1,5,42,9
	.half	.L258-.L256
	.byte	3,2,1,5,51,9
	.half	.L403-.L258
	.byte	3,1,1,5,15,9
	.half	.L404-.L403
	.byte	1,5,51,9
	.half	.L405-.L404
	.byte	3,1,1,5,42,9
	.half	.L257-.L405
	.byte	3,127,1,5,15,9
	.half	.L406-.L257
	.byte	3,1,1,5,42,9
	.half	.L407-.L406
	.byte	1,5,51,9
	.half	.L408-.L407
	.byte	3,1,1,5,15,9
	.half	.L409-.L408
	.byte	1,5,51,9
	.half	.L410-.L409
	.byte	1,9
	.half	.L411-.L410
	.byte	3,1,1,9
	.half	.L412-.L411
	.byte	3,1,1,5,42,9
	.half	.L413-.L412
	.byte	3,126,1,5,15,9
	.half	.L414-.L413
	.byte	3,1,1,5,42,9
	.half	.L415-.L414
	.byte	1,5,51,9
	.half	.L416-.L415
	.byte	3,2,1,5,42,9
	.half	.L417-.L416
	.byte	3,127,1,9
	.half	.L418-.L417
	.byte	3,1,1,5,51,9
	.half	.L419-.L418
	.byte	3,1,1,5,42,9
	.half	.L420-.L419
	.byte	1,5,41,9
	.half	.L205-.L420
	.byte	3,3,1,5,77,1,5,41,9
	.half	.L254-.L205
	.byte	1,5,57,9
	.half	.L421-.L254
	.byte	1,5,77,9
	.half	.L422-.L421
	.byte	1,5,1,9
	.half	.L123-.L422
	.byte	3,1,0,1,1
.L399:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_readFrame')
	.sect	'.debug_ranges'
.L122:
	.word	-1,.L46,0,.L123-.L46,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_setSlot')
	.sect	'.debug_info'
.L124:
	.word	465
	.half	3
	.word	.L125
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L127,.L126
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_setSlot',0,1,167,2,6,1,1,1
	.word	.L57,.L213,.L56
	.byte	4
	.byte	'eray',0,1,167,2,32
	.word	.L140,.L214
	.byte	4
	.byte	'header',0,1,167,2,60
	.word	.L215,.L216
	.byte	4
	.byte	'data',0,1,167,2,82
	.word	.L217,.L218
	.byte	4
	.byte	'slotConfig',0,1,167,2,114
	.word	.L219,.L220
	.byte	5
	.word	.L57,.L213
	.byte	6
	.word	.L221,.L23,.L222
	.byte	7
	.word	.L223,.L224
	.byte	8
	.word	.L225,.L23,.L222
	.byte	0,5
	.word	.L226,.L227
	.byte	9
	.byte	'wrhs1',0,1,176,2,28
	.word	.L228,.L229
	.byte	0,5
	.word	.L227,.L230
	.byte	9
	.byte	'wrhs2',0,1,189,2,28
	.word	.L231,.L232
	.byte	0,6
	.word	.L233,.L26,.L234
	.byte	7
	.word	.L235,.L236
	.byte	8
	.word	.L237,.L26,.L234
	.byte	0,6
	.word	.L221,.L27,.L238
	.byte	7
	.word	.L223,.L224
	.byte	8
	.word	.L225,.L27,.L238
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_setSlot')
	.sect	'.debug_abbrev'
.L125:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_setSlot')
	.sect	'.debug_line'
.L126:
	.word	.L424-.L423
.L423:
	.half	3
	.word	.L426-.L425
.L425:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.h',0,0,0,0,0
.L426:
	.byte	5,6,7,0,5,2
	.word	.L57
	.byte	3,166,2,1,4,2,5,17,9
	.half	.L279-.L57
	.byte	3,169,8,1,5,25,9
	.half	.L23-.L279
	.byte	1,4,1,5,62,9
	.half	.L222-.L23
	.byte	3,218,119,1,5,5,7,9
	.half	.L427-.L222
	.byte	3,3,1,5,27,7,9
	.half	.L226-.L427
	.byte	3,4,1,5,35,3,1,1,5,27,9
	.half	.L280-.L226
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L428-.L280
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L429-.L428
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L430-.L429
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L431-.L430
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L432-.L431
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L433-.L432
	.byte	1,5,35,3,1,1,5,27,9
	.half	.L434-.L433
	.byte	1,3,1,1,5,21,9
	.half	.L227-.L434
	.byte	3,4,1,5,23,9
	.half	.L281-.L227
	.byte	3,2,1,5,13,9
	.half	.L435-.L281
	.byte	1,5,59,7,9
	.half	.L436-.L435
	.byte	3,2,1,5,82,9
	.half	.L437-.L436
	.byte	1,5,99,9
	.half	.L438-.L437
	.byte	1,5,130,1,9
	.half	.L439-.L438
	.byte	1,5,29,9
	.half	.L275-.L439
	.byte	1,5,35,9
	.half	.L25-.L275
	.byte	3,3,1,5,27,9
	.half	.L440-.L25
	.byte	1,3,1,1,5,31,9
	.half	.L230-.L440
	.byte	3,3,1,5,23,9
	.half	.L441-.L230
	.byte	1,5,41,9
	.half	.L24-.L441
	.byte	3,3,1,5,17,9
	.half	.L283-.L24
	.byte	3,2,1,5,36,9
	.half	.L442-.L283
	.byte	1,5,24,9
	.half	.L443-.L442
	.byte	1,5,17,9
	.half	.L444-.L443
	.byte	3,1,1,5,36,9
	.half	.L445-.L444
	.byte	1,5,24,9
	.half	.L446-.L445
	.byte	1,5,17,9
	.half	.L447-.L446
	.byte	3,1,1,5,36,9
	.half	.L448-.L447
	.byte	1,5,24,9
	.half	.L449-.L448
	.byte	1,5,17,9
	.half	.L450-.L449
	.byte	3,1,1,5,36,9
	.half	.L451-.L450
	.byte	1,5,24,9
	.half	.L452-.L451
	.byte	1,4,2,5,25,9
	.half	.L26-.L452
	.byte	3,133,8,1,4,1,5,64,9
	.half	.L234-.L26
	.byte	3,254,119,1,4,2,5,17,7,9
	.half	.L453-.L234
	.byte	3,252,7,1,5,25,9
	.half	.L27-.L453
	.byte	1,4,1,5,62,9
	.half	.L238-.L27
	.byte	3,135,120,1,5,1,7,9
	.half	.L454-.L238
	.byte	3,2,1,7,9
	.half	.L128-.L454
	.byte	0,1,1
.L424:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_setSlot')
	.sect	'.debug_ranges'
.L127:
	.word	-1,.L57,0,.L128-.L57,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEray_writeData')
	.sect	'.debug_info'
.L129:
	.word	333
	.half	3
	.word	.L130
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L132,.L131
	.byte	2
	.word	.L60
	.byte	3
	.byte	'IfxEray_writeData',0,1,220,2,6,1,1,1
	.word	.L59,.L239,.L58
	.byte	4
	.byte	'eray',0,1,220,2,34
	.word	.L140,.L240
	.byte	4
	.byte	'data',0,1,220,2,54
	.word	.L217,.L241
	.byte	4
	.byte	'payloadLength',0,1,220,2,66
	.word	.L146,.L242
	.byte	5
	.word	.L59,.L239
	.byte	5
	.word	.L243,.L28
	.byte	6
	.byte	'length',0,1,224,2,16
	.word	.L173,.L244
	.byte	6
	.byte	'index',0,1,225,2,16
	.word	.L146,.L245
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEray_writeData')
	.sect	'.debug_abbrev'
.L130:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEray_writeData')
	.sect	'.debug_line'
.L131:
	.word	.L456-.L455
.L455:
	.half	3
	.word	.L458-.L457
.L457:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L458:
	.byte	5,5,7,0,5,2
	.word	.L59
	.byte	3,221,2,1,5,40,7,9
	.half	.L243-.L59
	.byte	3,2,1,5,17,3,5,1,5,40,9
	.half	.L285-.L243
	.byte	3,123,1,5,20,9
	.half	.L459-.L285
	.byte	3,3,1,5,39,1,5,46,9
	.half	.L30-.L459
	.byte	1,5,38,3,2,1,5,46,9
	.half	.L286-.L30
	.byte	3,126,1,5,36,3,2,1,5,39,9
	.half	.L29-.L286
	.byte	3,126,1,5,1,7,9
	.half	.L28-.L29
	.byte	3,5,1,7,9
	.half	.L133-.L28
	.byte	0,1,1
.L456:
	.sdecl	'.debug_ranges',debug,cluster('IfxEray_writeData')
	.sect	'.debug_ranges'
.L132:
	.word	-1,.L59,0,.L133-.L59,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L134:
	.word	201
	.half	3
	.word	.L135
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L137,.L136
	.byte	2
	.word	.L60
	.byte	3
	.byte	'.cocofun_4',0,1,247,1,6,1
	.word	.L52,.L138,.L51
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L135:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L136:
	.word	.L461-.L460
.L460:
	.half	3
	.word	.L463-.L462
.L462:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Eray\\Std\\IfxEray.c',0,0,0,0,0
.L463:
	.byte	5,63,7,0,5,2
	.word	.L52
	.byte	3,250,1,1,5,77,9
	.half	.L268-.L52
	.byte	1,5,71,9
	.half	.L269-.L268
	.byte	1,5,29,9
	.half	.L464-.L269
	.byte	1,5,16,9
	.half	.L272-.L464
	.byte	3,4,1,5,5,9
	.half	.L271-.L272
	.byte	3,126,1,5,23,7,9
	.half	.L465-.L271
	.byte	3,2,1,5,20,9
	.half	.L270-.L465
	.byte	1,5,28,1,5,20,9
	.half	.L18-.L270
	.byte	3,4,1,9
	.half	.L138-.L18
	.byte	0,1,1,5,63,0,5,2
	.word	.L52
	.byte	3,140,2,1,5,77,9
	.half	.L268-.L52
	.byte	1,5,71,9
	.half	.L269-.L268
	.byte	1,5,29,9
	.half	.L464-.L269
	.byte	1,5,16,9
	.half	.L272-.L464
	.byte	3,4,1,5,5,9
	.half	.L271-.L272
	.byte	3,126,1,5,23,7,9
	.half	.L465-.L271
	.byte	3,2,1,5,20,9
	.half	.L270-.L465
	.byte	1,5,28,1,5,20,9
	.half	.L18-.L270
	.byte	3,4,1,9
	.half	.L466-.L18
	.byte	3,110,1,7,9
	.half	.L138-.L466
	.byte	0,1,1
.L461:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L137:
	.word	-1,.L52,0,.L138-.L52,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L51:
	.word	-1,.L52,0,.L138-.L52
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_calcHeaderCrc')
	.sect	'.debug_loc'
.L32:
	.word	-1,.L33,0,.L181-.L33
	.half	2
	.byte	138,0
	.word	0,0
.L188:
	.word	-1,.L33,.L247-.L33,.L248-.L33
	.half	1
	.byte	95
	.word	0,0
.L189:
	.word	-1,.L33,.L246-.L33,.L181-.L33
	.half	1
	.byte	81
	.word	0,0
.L183:
	.word	-1,.L33,0,.L181-.L33
	.half	1
	.byte	85
	.word	0,0
.L186:
	.word	-1,.L33,.L2-.L33,.L181-.L33
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L187:
	.word	0,0
.L182:
	.word	-1,.L33,0,.L181-.L33
	.half	1
	.byte	84
	.word	0,0
.L184:
	.word	-1,.L33,0,.L181-.L33
	.half	1
	.byte	86
	.word	0,0
.L185:
	.word	-1,.L33,0,.L181-.L33
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_changePocState')
	.sect	'.debug_loc'
.L34:
	.word	-1,.L5,0,.L175-.L5
	.half	2
	.byte	138,0
	.word	0,0
.L176:
	.word	-1,.L5,0,.L175-.L5
	.half	1
	.byte	100
	.word	0,0
.L178:
	.word	-1,.L5,0,.L175-.L5
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_clearAllFlags')
	.sect	'.debug_loc'
.L35:
	.word	-1,.L36,0,.L139-.L36
	.half	2
	.byte	138,0
	.word	0,0
.L141:
	.word	-1,.L36,0,.L139-.L36
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_enableInterruptLines')
	.sect	'.debug_loc'
.L37:
	.word	-1,.L38,0,.L142-.L38
	.half	2
	.byte	138,0
	.word	0,0
.L143:
	.word	-1,.L38,0,.L142-.L38
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_getAddress')
	.sect	'.debug_loc'
.L39:
	.word	-1,.L40,0,.L163-.L40
	.half	2
	.byte	138,0
	.word	0,0
.L165:
	.word	-1,.L40,0,.L163-.L40
	.half	1
	.byte	84
	.word	0,0
.L166:
	.word	-1,.L40,.L249-.L40,.L7-.L40
	.half	1
	.byte	98
	.word	.L250-.L40,.L163-.L40
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_getIndex')
	.sect	'.debug_loc'
.L41:
	.word	-1,.L42,0,.L167-.L42
	.half	2
	.byte	138,0
	.word	0,0
.L168:
	.word	-1,.L42,0,.L167-.L42
	.half	1
	.byte	100
	.word	0,0
.L169:
	.word	0,0
.L170:
	.word	-1,.L42,.L251-.L42,.L167-.L42
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_readData')
	.sect	'.debug_loc'
.L43:
	.word	-1,.L44,0,.L190-.L44
	.half	2
	.byte	138,0
	.word	0,0
.L193:
	.word	-1,.L44,0,.L190-.L44
	.half	1
	.byte	101
	.word	0,0
.L191:
	.word	-1,.L44,0,.L190-.L44
	.half	1
	.byte	100
	.word	0,0
.L197:
	.word	-1,.L44,.L16-.L44,.L253-.L44
	.half	1
	.byte	95
	.word	.L15-.L44,.L14-.L44
	.half	1
	.byte	95
	.word	0,0
.L196:
	.word	-1,.L44,.L252-.L44,.L14-.L44
	.half	1
	.byte	84
	.word	0,0
.L194:
	.word	-1,.L44,0,.L252-.L44
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_readFrame')
	.sect	'.debug_loc'
.L45:
	.word	-1,.L46,0,.L198-.L46
	.half	2
	.byte	138,0
	.word	0,0
.L202:
	.word	-1,.L46,0,.L198-.L46
	.half	1
	.byte	102
	.word	.L254-.L46,.L198-.L46
	.half	1
	.byte	101
	.word	0,0
.L199:
	.word	-1,.L46,0,.L198-.L46
	.half	1
	.byte	100
	.word	0,0
.L201:
	.word	-1,.L46,0,.L254-.L46
	.half	1
	.byte	101
	.word	0,0
.L204:
	.word	-1,.L46,0,.L255-.L46
	.half	1
	.byte	84
	.word	0,0
.L207:
	.word	-1,.L46,.L208-.L46,.L256-.L46
	.half	1
	.byte	95
	.word	0,0
.L210:
	.word	-1,.L46,.L256-.L46,.L257-.L46
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L212:
	.word	-1,.L46,.L258-.L46,.L198-.L46
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_resetModule')
	.sect	'.debug_loc'
.L47:
	.word	-1,.L48,0,.L171-.L48
	.half	2
	.byte	138,0
	.word	0,0
.L172:
	.word	-1,.L48,0,.L259-.L48
	.half	1
	.byte	100
	.word	.L260-.L48,.L171-.L48
	.half	1
	.byte	111
	.word	0,0
.L174:
	.word	-1,.L48,.L259-.L48,.L261-.L48
	.half	1
	.byte	82
	.word	.L262-.L48,.L171-.L48
	.half	1
	.byte	88
	.word	.L263-.L48,.L264-.L48
	.half	1
	.byte	84
	.word	.L265-.L48,.L171-.L48
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_setMessageBufferInterruptDestination')
	.sect	'.debug_loc'
.L49:
	.word	-1,.L50,0,.L144-.L50
	.half	2
	.byte	138,0
	.word	0,0
.L145:
	.word	-1,.L50,.L268-.L50,.L138-.L50
	.half	1
	.byte	100
	.word	0,.L144-.L50
	.half	1
	.byte	100
	.word	0,0
.L150:
	.word	-1,.L50,.L266-.L50,.L267-.L50
	.half	5
	.byte	144,32,157,32,0
	.word	.L268-.L50,.L269-.L50
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L152:
	.word	-1,.L50,.L266-.L50,.L267-.L50
	.half	1
	.byte	81
	.word	.L268-.L50,.L270-.L50
	.half	1
	.byte	81
	.word	.L18-.L50,.L19-.L50
	.half	1
	.byte	81
	.word	0,0
.L147:
	.word	-1,.L50,.L268-.L50,.L138-.L50
	.half	1
	.byte	84
	.word	0,.L144-.L50
	.half	1
	.byte	84
	.word	0,0
.L148:
	.word	-1,.L50,.L268-.L50,.L138-.L50
	.half	1
	.byte	85
	.word	0,.L144-.L50
	.half	1
	.byte	85
	.word	0,0
.L154:
	.word	-1,.L50,.L269-.L50,.L271-.L50
	.half	1
	.byte	95
	.word	.L272-.L50,.L138-.L50
	.half	1
	.byte	111
	.word	.L267-.L50,.L144-.L50
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_setNewDataInterruptDestination')
	.sect	'.debug_loc'
.L53:
	.word	-1,.L54,0,.L155-.L54
	.half	2
	.byte	138,0
	.word	0,0
.L156:
	.word	-1,.L54,.L268-.L54,.L138-.L54
	.half	1
	.byte	100
	.word	0,.L155-.L54
	.half	1
	.byte	100
	.word	0,0
.L159:
	.word	-1,.L54,.L273-.L54,.L274-.L54
	.half	5
	.byte	144,32,157,32,0
	.word	.L268-.L54,.L269-.L54
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L160:
	.word	-1,.L54,.L273-.L54,.L274-.L54
	.half	1
	.byte	81
	.word	.L268-.L54,.L270-.L54
	.half	1
	.byte	81
	.word	.L18-.L54,.L19-.L54
	.half	1
	.byte	81
	.word	0,0
.L157:
	.word	-1,.L54,.L268-.L54,.L138-.L54
	.half	1
	.byte	84
	.word	0,.L155-.L54
	.half	1
	.byte	84
	.word	0,0
.L158:
	.word	-1,.L54,.L268-.L54,.L138-.L54
	.half	1
	.byte	85
	.word	0,.L155-.L54
	.half	1
	.byte	85
	.word	0,0
.L162:
	.word	-1,.L54,.L269-.L54,.L271-.L54
	.half	1
	.byte	95
	.word	.L272-.L54,.L138-.L54
	.half	1
	.byte	111
	.word	.L274-.L54,.L155-.L54
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_setPocReady')
	.sect	'.debug_loc'
.L55:
	.word	-1,.L22,0,.L179-.L22
	.half	2
	.byte	138,0
	.word	0,0
.L180:
	.word	-1,.L22,0,.L179-.L22
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_setSlot')
	.sect	'.debug_loc'
.L56:
	.word	-1,.L57,0,.L213-.L57
	.half	2
	.byte	138,0
	.word	0,0
.L218:
	.word	-1,.L57,0,.L275-.L57
	.half	1
	.byte	102
	.word	.L278-.L57,.L213-.L57
	.half	1
	.byte	109
	.word	.L284-.L57,.L283-.L57
	.half	1
	.byte	101
	.word	0,0
.L214:
	.word	-1,.L57,0,.L275-.L57
	.half	1
	.byte	100
	.word	.L276-.L57,.L213-.L57
	.half	1
	.byte	108
	.word	.L282-.L57,.L283-.L57
	.half	1
	.byte	100
	.word	0,0
.L224:
	.word	0,0
.L236:
	.word	0,0
.L216:
	.word	-1,.L57,0,.L275-.L57
	.half	1
	.byte	101
	.word	.L277-.L57,.L27-.L57
	.half	1
	.byte	111
	.word	0,0
.L220:
	.word	-1,.L57,0,.L275-.L57
	.half	1
	.byte	103
	.word	.L279-.L57,.L213-.L57
	.half	1
	.byte	110
	.word	0,0
.L229:
	.word	-1,.L57,.L280-.L57,.L275-.L57
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L232:
	.word	-1,.L57,.L281-.L57,.L24-.L57
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEray_writeData')
	.sect	'.debug_loc'
.L58:
	.word	-1,.L59,0,.L239-.L59
	.half	2
	.byte	138,0
	.word	0,0
.L241:
	.word	-1,.L59,0,.L239-.L59
	.half	1
	.byte	101
	.word	0,0
.L240:
	.word	-1,.L59,0,.L239-.L59
	.half	1
	.byte	100
	.word	0,0
.L245:
	.word	-1,.L59,.L30-.L59,.L286-.L59
	.half	1
	.byte	95
	.word	.L29-.L59,.L28-.L59
	.half	1
	.byte	95
	.word	0,0
.L244:
	.word	-1,.L59,.L285-.L59,.L28-.L59
	.half	1
	.byte	84
	.word	0,0
.L242:
	.word	-1,.L59,0,.L285-.L59
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L467:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxEray_calcHeaderCrc')
	.sect	'.debug_frame'
	.word	24
	.word	.L467,.L33,.L181-.L33
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEray_changePocState')
	.sect	'.debug_frame'
	.word	24
	.word	.L467,.L5,.L175-.L5
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEray_clearAllFlags')
	.sect	'.debug_frame'
	.word	24
	.word	.L467,.L36,.L139-.L36
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEray_enableInterruptLines')
	.sect	'.debug_frame'
	.word	20
	.word	.L467,.L38,.L142-.L38
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEray_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L467,.L40,.L163-.L40
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEray_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L467,.L42,.L167-.L42
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEray_readData')
	.sect	'.debug_frame'
	.word	20
	.word	.L467,.L44,.L190-.L44
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEray_readFrame')
	.sect	'.debug_frame'
	.word	12
	.word	.L467,.L46,.L198-.L46
	.sdecl	'.debug_frame',debug,cluster('IfxEray_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L467,.L48,.L171-.L48
	.sdecl	'.debug_frame',debug,cluster('IfxEray_setMessageBufferInterruptDestination')
	.sect	'.debug_frame'
	.word	24
	.word	.L467,.L50,.L144-.L50
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEray_setNewDataInterruptDestination')
	.sect	'.debug_frame'
	.word	24
	.word	.L467,.L54,.L155-.L54
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEray_setPocReady')
	.sect	'.debug_frame'
	.word	24
	.word	.L467,.L22,.L179-.L22
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEray_setSlot')
	.sect	'.debug_frame'
	.word	12
	.word	.L467,.L57,.L213-.L57
	.sdecl	'.debug_frame',debug,cluster('IfxEray_writeData')
	.sect	'.debug_frame'
	.word	20
	.word	.L467,.L59,.L239-.L59
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L468:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L468,.L52,.L138-.L52
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
