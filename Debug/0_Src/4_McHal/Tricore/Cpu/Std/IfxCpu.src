	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Cpu\\Std\\.IfxCpu.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.src ..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c'

	
$TC162
	.sdecl	'.zrodata.IfxCpu..2.cnt',data,rom
	.sect	'.zrodata.IfxCpu..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268213788
	.sdecl	'.zrodata.IfxCpu..3.cnt',data,rom
	.sect	'.zrodata.IfxCpu..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268213792
	.sdecl	'.zrodata.IfxCpu..4.cnt',data,rom
	.sect	'.zrodata.IfxCpu..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	131040
	.sdecl	'.zrodata.IfxCpu..5.cnt',data,rom
	.sect	'.zrodata.IfxCpu..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268214071
	.sdecl	'.zrodata.IfxCpu..6.cnt',data,rom
	.sect	'.zrodata.IfxCpu..6.cnt'
	.align	2
.6.cnt:	.type	object
	.size	.6.cnt,4
	.word	-268214067
	.sdecl	'.zrodata.IfxCpu..7.cnt',data,rom
	.sect	'.zrodata.IfxCpu..7.cnt'
	.align	2
.7.cnt:	.type	object
	.size	.7.cnt,4
	.word	-268214063
	.sdecl	'.zrodata.IfxCpu..8.cnt',data,rom
	.sect	'.zrodata.IfxCpu..8.cnt'
	.align	2
.8.cnt:	.type	object
	.size	.8.cnt,4
	.word	-268214059
	.sdecl	'.zrodata.IfxCpu..9.cnt',data,rom
	.sect	'.zrodata.IfxCpu..9.cnt'
	.align	2
.9.cnt:	.type	object
	.size	.9.cnt,4
	.word	-268214055
	.sdecl	'.zrodata.IfxCpu..10.cnt',data,rom
	.sect	'.zrodata.IfxCpu..10.cnt'
	.align	2
.10.cnt:	.type	object
	.size	.10.cnt,4
	.word	-268214051
	.sdecl	'.zrodata.IfxCpu_IntrinsicsTasking..11.cnt',data,rom
	.sect	'.zrodata.IfxCpu_IntrinsicsTasking..11.cnt'
	.align	2
.11.cnt:	.type	object
	.size	.11.cnt,4
	.word	279470273
	.sdecl	'.zrodata.IfxCpu..12.cnt',data,rom
	.sect	'.zrodata.IfxCpu..12.cnt'
	.align	2
.12.cnt:	.type	object
	.size	.12.cnt,4
	.word	130568
	.sdecl	'.zrodata.IfxCpu..13.cnt',data,rom
	.sect	'.zrodata.IfxCpu..13.cnt'
	.align	2
.13.cnt:	.type	object
	.size	.13.cnt,4
	.word	130580
	.sdecl	'.zrodata.IfxScuWdt..14.cnt',data,rom
	.sect	'.zrodata.IfxScuWdt..14.cnt'
	.align	2
.14.cnt:	.type	object
	.size	.14.cnt,4
	.word	-268213592
	.sdecl	'.zrodata.IfxCpu..15.cnt',data,rom
	.sect	'.zrodata.IfxCpu..15.cnt'
	.align	2
.15.cnt:	.type	object
	.size	.15.cnt,4
	.word	-268214068
	.sdecl	'.zrodata.IfxCpu..16.cnt',data,rom
	.sect	'.zrodata.IfxCpu..16.cnt'
	.align	2
.16.cnt:	.type	object
	.size	.16.cnt,4
	.word	-268214044
	.sdecl	'.zrodata.IfxCpu..17.cnt',data,rom
	.sect	'.zrodata.IfxCpu..17.cnt'
	.align	2
.17.cnt:	.type	object
	.size	.17.cnt,4
	.word	-268214064
	.sdecl	'.zrodata.IfxCpu..18.cnt',data,rom
	.sect	'.zrodata.IfxCpu..18.cnt'
	.align	2
.18.cnt:	.type	object
	.size	.18.cnt,4
	.word	-268214060
	.sdecl	'.zrodata.IfxCpu..19.cnt',data,rom
	.sect	'.zrodata.IfxCpu..19.cnt'
	.align	2
.19.cnt:	.type	object
	.size	.19.cnt,4
	.word	-268214056
	.sdecl	'.zrodata.IfxCpu..20.cnt',data,rom
	.sect	'.zrodata.IfxCpu..20.cnt'
	.align	2
.20.cnt:	.type	object
	.size	.20.cnt,4
	.word	-268214052
	.sdecl	'.zrodata.IfxCpu..21.cnt',data,rom
	.sect	'.zrodata.IfxCpu..21.cnt'
	.align	2
.21.cnt:	.type	object
	.size	.21.cnt,4
	.word	-268214072
	.sdecl	'.zrodata.IfxCpu..22.cnt',data,rom
	.sect	'.zrodata.IfxCpu..22.cnt'
	.align	2
.22.cnt:	.type	object
	.size	.22.cnt,4
	.word	-125567444
	.sdecl	'.zrodata.IfxCpu..23.cnt',data,rom
	.sect	'.zrodata.IfxCpu..23.cnt'
	.align	2
.23.cnt:	.type	object
	.size	.23.cnt,4
	.word	-125436372
	.sdecl	'.zrodata.IfxCpu..24.cnt',data,rom
	.sect	'.zrodata.IfxCpu..24.cnt'
	.align	2
.24.cnt:	.type	object
	.size	.24.cnt,4
	.word	-125305300
	.sdecl	'.zrodata.IfxCpu..25.cnt',data,rom
	.sect	'.zrodata.IfxCpu..25.cnt'
	.align	2
.25.cnt:	.type	object
	.size	.25.cnt,4
	.word	-125174228
	.sdecl	'.zrodata.IfxCpu..26.cnt',data,rom
	.sect	'.zrodata.IfxCpu..26.cnt'
	.align	2
.26.cnt:	.type	object
	.size	.26.cnt,4
	.word	-124912084
	.sdecl	'.zrodata.IfxCpu..27.cnt',data,rom
	.sect	'.zrodata.IfxCpu..27.cnt'
	.align	2
.27.cnt:	.type	object
	.size	.27.cnt,4
	.word	-125698516
	
	.sdecl	'.text.IfxCpu.IfxCpu_acquireMutex',code,cluster('IfxCpu_acquireMutex')
	.sect	'.text.IfxCpu.IfxCpu_acquireMutex'
	.align	2
	
	.global	IfxCpu_acquireMutex

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     2   * \file IfxCpu.c
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     4   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     7   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    10   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    15   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    17   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    24   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    31   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    39   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    41   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    42  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    44  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    45  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    46  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    47  #include "IfxCpu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    48  #include "Pms/Std/IfxPmsPm.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    49  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    50  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    51  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    53  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    54  boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock)
; Function IfxCpu_acquireMutex
.L194:
IfxCpu_acquireMutex:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    55  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    56      boolean         retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    57      volatile uint32 spinLockVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    58  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    59      retVal      = FALSE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    60  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    61      spinLockVal = 1UL;
	mov	d15,#1
	sub.a	a10,#8
.L684:
	st.w	[a10],d15
.L879:
	mov	d2,#0
.L685:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    62      spinLockVal =
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    63          (uint32)__cmpAndSwap(((unsigned int *)lock), spinLockVal, 0);
	ld.w	d0,[a10]
	mov	d1,d2
	cmpswap.w	[a4]0,e0
.L880:
	st.w	[a10],d0
.L881:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    64  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    65      /* Check if the SpinLock WAS set before the attempt to acquire spinlock */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    66      if (spinLockVal == 0)
	ld.w	d15,[a10]
.L882:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    67      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    68          retVal = TRUE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    69      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    70  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    71      return retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    72  }
	cmovn	d2,d15,#1
	ret
.L571:
	
__IfxCpu_acquireMutex_function_end:
	.size	IfxCpu_acquireMutex,__IfxCpu_acquireMutex_function_end-IfxCpu_acquireMutex
.L324:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_disableOverlayBlock',code,cluster('IfxCpu_disableOverlayBlock')
	.sect	'.text.IfxCpu.IfxCpu_disableOverlayBlock'
	.align	2
	
	.global	IfxCpu_disableOverlayBlock

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    73  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    74  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    75  void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock)
; Function IfxCpu_disableOverlayBlock
.L196:
IfxCpu_disableOverlayBlock:	.type	func
	mov	d15,d4
.L687:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    76  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    77      Ifx_CPU          *ovcSfrBase = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    78  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    79      Ifx_SCU_OVCCON    ovccon;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    80      Ifx_SCU_OVCENABLE ovcenable;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    81      uint16            safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d8,d5
	call	IfxScuWdt_getSafetyWatchdogPassword
.L686:
	mov	d9,d2
.L699:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    82      IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
	mov	d4,d9
	call	IfxScuWdt_clearSafetyEndinit
.L689:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    83      ovccon.U    = MODULE_SCU.OVCCON.U;
	ld.w	d0,.2.cnt
.L906:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    84      ovcenable.U = MODULE_SCU.OVCENABLE.U;
	ld.w	d1,.3.cnt
.L907:
	mov.a	a15,d0
.L908:
	mov.a	a2,d1
.L909:
	ld.w	d0,[a15]
.L690:
	ld.w	d1,[a2]
.L692:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    85  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    86      /* Disable Overlay in SCU */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    87      switch (cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    88      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    89      case IfxCpu_ResourceCpu_1:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    90          ovcSfrBase        = &MODULE_CPU1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    91          ovcenable.B.OVEN1 = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    92          ovccon.B.CSEL1    = 0;
	extr.u	d3,d0,#0,#8
.L910:
	extr.u	d2,d1,#0,#8
.L911:
	jeq	d15,#1,.L4
.L912:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    93          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    94      case IfxCpu_ResourceCpu_2:
	jeq	d15,#2,.L5
.L913:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    95          ovcSfrBase        = &MODULE_CPU2;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    96          ovcenable.B.OVEN2 = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    97          ovccon.B.CSEL2    = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    98          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	    99  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   100      case IfxCpu_ResourceCpu_3:
	jeq	d15,#3,.L6
.L914:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   101          ovcSfrBase        = &MODULE_CPU3;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   102          ovcenable.B.OVEN3 = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   103          ovccon.B.CSEL3    = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   104          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   105      case IfxCpu_ResourceCpu_4:
	jeq	d15,#4,.L7
.L915:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   106          ovcSfrBase        = &MODULE_CPU4;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   107          ovcenable.B.OVEN4 = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   108          ovccon.B.CSEL4    = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   109          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   110      case IfxCpu_ResourceCpu_5:
	jeq	d15,#5,.L8
.L916:
	j	.L9
.L4:
	insert	d15,d2,#0,#1,#1
	movh.a	a12,#63618
.L688:
	insert	d2,d3,#0,#1,#1
	j	.L10
.L5:
	insert	d15,d2,#0,#2,#1
	movh.a	a12,#63620
.L693:
	insert	d2,d3,#0,#2,#1
	j	.L11
.L6:
	insert	d15,d2,#0,#3,#1
	movh.a	a12,#63622
.L694:
	insert	d2,d3,#0,#3,#1
	j	.L12
.L7:
	insert	d15,d2,#0,#4,#1
	movh.a	a12,#63624
.L695:
	insert	d2,d3,#0,#4,#1
	j	.L13
.L8:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   111          ovcSfrBase        = &MODULE_CPU5;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   112          ovcenable.B.OVEN5 = 0;
	insert	d15,d2,#0,#5,#1
	movh.a	a12,#63628
.L696:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   113          ovccon.B.CSEL5    = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   114          break;
	insert	d2,d3,#0,#5,#1
	j	.L14

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   115      default:
.L9:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   116          ovcSfrBase        = &MODULE_CPU0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   117          ovcenable.B.OVEN0 = 0;
	insert	d15,d2,#0,#0,#1
	movh.a	a12,#63616
.L697:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   118          ovccon.B.CSEL0    = 0;
	insert	d2,d3,#0,#0,#1

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   119          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   120      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   121  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   122      ovccon.B.OVSTP         = 1;
.L14:
.L13:
.L12:
.L11:
.L10:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   123      ovccon.B.DCINVAL       = 1;
	insert	d0,d0,d2,#0,#8
	insert	d1,d1,d15,#0,#8
.L917:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   124      MODULE_SCU.OVCCON.U    = ovccon.U;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   125      MODULE_SCU.OVCENABLE.U = ovcenable.U;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   126      IfxScuWdt_setSafetyEndinit(safetyWdtPw);
	mov	d4,d9
.L698:
	extr.u	d15,d0,#16,#8
.L918:
	or	d15,#2
.L919:
	or	d15,#4
.L920:
	insert	d0,d0,d15,#16,#8
	st.w	[a15],d0
.L921:
	st.w	[a2],d1
.L922:
	call	IfxScuWdt_setSafetyEndinit
.L691:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   127  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   128      ovcSfrBase->BLK[overlayBlock].RABR.U  = 0;
	mul	d15,d8,#12
	addsc.a	a15,a12,d15,#0
	fcall	.cocofun_39
	lea	a15,[a3]-1264
.L923:
	mov	d15,#0
	st.w	[a15],d15
.L924:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   129      ovcSfrBase->BLK[overlayBlock].OTAR.U  = 0;
	st.w	[a15]4,d15
.L925:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   130      ovcSfrBase->BLK[overlayBlock].OMASK.U = 0;
	st.w	[a15]8,d15
.L926:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   131  }
	ret
.L588:
	
__IfxCpu_disableOverlayBlock_function_end:
	.size	IfxCpu_disableOverlayBlock,__IfxCpu_disableOverlayBlock_function_end-IfxCpu_disableOverlayBlock
.L344:
	; End of function
	
	.sdecl	'.text.IfxCpu..cocofun_39',code,cluster('.cocofun_39')
	.sect	'.text.IfxCpu..cocofun_39'
	.align	2
; Function .cocofun_39
.L198:
.cocofun_39:	.type	func
; Function body .cocofun_39, coco_iter:1
	movh.a	a3,#1
.L771:
	add.a	a3,a15
.L1116:
	fret
.L439:
	; End of function
	.sdecl	'.text.IfxCpu.IfxCpu_enableOverlayBlock',code,cluster('IfxCpu_enableOverlayBlock')
	.sect	'.text.IfxCpu.IfxCpu_enableOverlayBlock'
	.align	2
	
	.global	IfxCpu_enableOverlayBlock

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   132  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   133  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   134  void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress)
; Function IfxCpu_enableOverlayBlock
.L200:
IfxCpu_enableOverlayBlock:	.type	func
	mov	d8,d4
	ld.w	d0,[a10]
.L708:
	ld.w	d1,[a10]4
.L706:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   135  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   136      Ifx_CPU *ovcSfrBase = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   137  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   138      switch (cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   139      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   140      case IfxCpu_ResourceCpu_1:
	jeq	d8,#1,.L15
.L931:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   141          ovcSfrBase = &MODULE_CPU1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   142          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   143      case IfxCpu_ResourceCpu_2:
	jeq	d8,#2,.L16
.L932:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   144          ovcSfrBase = &MODULE_CPU2;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   145          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   146  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   147      case IfxCpu_ResourceCpu_3:
	jeq	d8,#3,.L17
.L933:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   148          ovcSfrBase = &MODULE_CPU3;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   149          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   150  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   151      case IfxCpu_ResourceCpu_4:
	jeq	d8,#4,.L18
.L934:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   152          ovcSfrBase = &MODULE_CPU4;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   153          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   154      case IfxCpu_ResourceCpu_5:
	jeq	d8,#5,.L19
.L935:
	j	.L20
.L15:
	movh.a	a15,#63618
.L700:
	j	.L21
.L16:
	movh.a	a15,#63620
.L701:
	j	.L22
.L17:
	movh.a	a15,#63622
.L702:
	j	.L23
.L18:
	movh.a	a15,#63624
.L703:
	j	.L24
.L19:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   155          ovcSfrBase = &MODULE_CPU5;
	movh.a	a15,#63628
.L704:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   156          break;
	j	.L25

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   157      default:
.L20:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   158          ovcSfrBase = &MODULE_CPU0;
	movh.a	a15,#63616

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   159          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   160      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   161  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   162      /* Select overlay Block */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   163      ovcSfrBase->OSEL.U |= 1 << overlayBlock;
.L25:
.L24:
.L23:
.L22:
.L21:
	fcall	.cocofun_39
.L936:
	mov	d3,#1
	lea	a3,[a3]-1280
.L937:
	sha	d3,d3,d5
	ld.w	d2,[a3]
.L938:
	or	d2,d3
	fcall	.cocofun_39
	lea	a3,[a3]-1280
	st.w	[a3],d2
.L608:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   164  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   165      /* Configure ovcBlock */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   166      Ifx_CPU_BLK_RABR rabr;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   167      Ifx_CPU_BLK_OTAR otar;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   168      rabr.U                                = 0;
	mov	d2,#0
.L710:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   169      rabr.B.OMEM                           = overlayMemorySelect;
	insert	d15,d2,d6,#24,#4
.L939:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   170      rabr.B.OBASE                          = overlayBaseAddress >> 5;
	sh	d1,#-5
.L707:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   171  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   172      otar.U                                = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   173      otar.B.TBASE                          = targetBaseAddress >> 5;
	sh	d0,#-5
.L709:
	insert	d1,d15,d1,#5,#17
.L711:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   174  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   175      ovcSfrBase->BLK[overlayBlock].RABR.U  = rabr.U;
	mul	d15,d5,#12
.L712:
	insert	d0,d2,d0,#5,#23
.L713:
	addsc.a	a15,a15,d15,#0
	fcall	.cocofun_39
.L705:
	lea	a15,[a3]-1264
.L940:
	st.w	[a15],d1
.L941:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   176      ovcSfrBase->BLK[overlayBlock].OTAR.U  = otar.U;
	st.w	[a15]4,d0
.L942:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   177      ovcSfrBase->BLK[overlayBlock].OMASK.U = ((overlayAddressMask << 5) & 0x0001FFE0);
	sha	d7,#5
.L715:
	ld.w	d15,.4.cnt
.L943:
	and	d7,d15
	st.w	[a15]8,d7
.L613:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   178  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   179      /* Enable Overlay in SCU */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   180      uint16         safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
	call	IfxScuWdt_getSafetyWatchdogPassword
.L714:
	mov	d9,d2
.L717:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   181      IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
	mov	d4,d9
	call	IfxScuWdt_clearSafetyEndinit
.L616:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   182      Ifx_SCU_OVCCON ovccon;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   183      ovccon.U = MODULE_SCU.OVCCON.U;
	ld.w	d15,.2.cnt
	mov.a	a15,d15
	ld.w	d1,[a15]
.L716:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   184  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   185      switch (cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   186      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   187      case IfxCpu_ResourceCpu_1:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   188          MODULE_SCU.OVCENABLE.B.OVEN1 = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   189          ovccon.B.CSEL1               = 1;
	extr.u	d2,d1,#0,#8
.L944:
	jeq	d8,#1,.L26
.L945:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   190          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   191      case IfxCpu_ResourceCpu_2:
	jeq	d8,#2,.L27
.L946:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   192          MODULE_SCU.OVCENABLE.B.OVEN2 = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   193          ovccon.B.CSEL2               = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   194          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   195      case IfxCpu_ResourceCpu_3:
	jeq	d8,#3,.L28
.L947:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   196          MODULE_SCU.OVCENABLE.B.OVEN3 = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   197          ovccon.B.CSEL3               = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   198          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   199      case IfxCpu_ResourceCpu_4:
	jeq	d8,#4,.L29
.L948:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   200          MODULE_SCU.OVCENABLE.B.OVEN4 = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   201          ovccon.B.CSEL4               = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   202          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   203      case IfxCpu_ResourceCpu_5:
	jeq	d8,#5,.L30
.L949:
	j	.L31
.L26:
	fcall	.cocofun_32
.L950:
	or	d15,#2
	st.b	[a2],d15
.L951:
	or	d15,d2,#2
	j	.L32
.L27:
	fcall	.cocofun_32
.L718:
	or	d15,#4
	st.b	[a2],d15
.L952:
	or	d15,d2,#4
	j	.L33
.L28:
	fcall	.cocofun_32
.L719:
	or	d15,#8
	st.b	[a2],d15
.L953:
	or	d15,d2,#8
	j	.L34
.L29:
	fcall	.cocofun_32
.L720:
	or	d15,#16
	st.b	[a2],d15
.L954:
	or	d15,d2,#16
	j	.L35
.L30:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   204          MODULE_SCU.OVCENABLE.B.OVEN5 = 1;
	ld.w	d15,.3.cnt
	mov.a	a2,d15
	ld.bu	d15,[a2]
.L955:
	or	d15,#32
	st.b	[a2],d15
.L956:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   205          ovccon.B.CSEL5               = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   206          break;
	or	d15,d2,#32
	j	.L36

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   207      default:
.L31:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   208          MODULE_SCU.OVCENABLE.B.OVEN0 = 1;
	ld.w	d15,.3.cnt
	mov.a	a2,d15
	ld.bu	d15,[a2]
.L957:
	or	d15,#1
	st.b	[a2],d15
.L958:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   209          ovccon.B.CSEL0               = 1;
	or	d15,d2,#1

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   210          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   211      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   212  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   213      ovccon.B.OVSTRT     = 1;
.L36:
.L35:
.L34:
.L33:
.L32:
	insert	d1,d1,d15,#0,#8
.L959:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   214      MODULE_SCU.OVCCON.U = ovccon.U;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   215      IfxScuWdt_setSafetyEndinit(safetyWdtPw);
	mov	d4,d9
.L721:
	insert	d1,d1,#1,#16,#1
	st.w	[a15],d1
.L960:
	j	IfxScuWdt_setSafetyEndinit
.L598:
	
__IfxCpu_enableOverlayBlock_function_end:
	.size	IfxCpu_enableOverlayBlock,__IfxCpu_enableOverlayBlock_function_end-IfxCpu_enableOverlayBlock
.L349:
	; End of function
	
	.sdecl	'.text.IfxCpu..cocofun_32',code,cluster('.cocofun_32')
	.sect	'.text.IfxCpu..cocofun_32'
	.align	2
; Function .cocofun_32
.L202:
.cocofun_32:	.type	func
; Function body .cocofun_32, coco_iter:0
	ld.w	d0,.3.cnt
	mov.a	a2,d0
	ld.bu	d15,[a2]
.L1078:
	fret
.L404:
	; End of function
	.sdecl	'.text.IfxCpu.IfxCpu_getCoreMode',code,cluster('IfxCpu_getCoreMode')
	.sect	'.text.IfxCpu.IfxCpu_getCoreMode'
	.align	2
	
	.global	IfxCpu_getCoreMode

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   216  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   217  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   218  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   219  IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu)
; Function IfxCpu_getCoreMode
.L204:
IfxCpu_getCoreMode:	.type	func
	mov.aa	a15,a4
.L723:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   220  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   221      IfxCpu_CoreMode          cpuMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   222      Ifx_CPU_DBGSR            dbgsr;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   223      IfxCpu_ResourceCpu       index = IfxCpu_getIndex(cpu);
	call	IfxCpu_getIndex
.L722:
	mov	d15,d2
.L725:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   224  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   225      volatile Ifx_SCU_PMCSR0 *pmcsr_val0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   226      volatile Ifx_SCU_PMCSR1 *pmcsr_val1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   227      volatile Ifx_SCU_PMCSR2 *pmcsr_val2;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   228      volatile Ifx_SCU_PMCSR3 *pmcsr_val3;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   229      volatile Ifx_SCU_PMCSR4 *pmcsr_val4;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   230      volatile Ifx_SCU_PMCSR5 *pmcsr_val5;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   231      cpuMode = IfxCpu_CoreMode_unknown;
	mov	d2,#5
.L516:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877      uint32 reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878      reg = __mfcr(CPU_CORE_ID);
	mfcr	d0,#65052
.L726:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return (IfxCpu_ResourceCpu)__minu(reg, 5);
	min.u	d0,d0,#5
.L727:
	extr.u	d0,d0,#0,#8
.L517:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   232  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   233      /*get the DBGSR.HALT status */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   234      /*Check if the request is done for same cpu as the host for this call */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   235      if (IfxCpu_getCoreIndex() != index)
	jeq	d15,d0,.L37
.L810:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   236      {                           /*status request is for other cpu than the host */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   237          dbgsr = cpu->DBGSR;
	movh.a	a3,#2
	add.a	a3,a15
	ld.w	d0,[a3]-768
.L728:
	j	.L38
.L37:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   238      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   239      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   240      {                           /*status request is for same cpu as the host */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   241          dbgsr.U = __mfcr(CPU_DBGSR);
	mfcr	d0,#64768
.L38:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   242      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   243  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   244      /*Check if the requested CPU is in DBG HALT mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   245      if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
	extr.u	d0,d0,#1,#2
.L729:
	jne	d0,#1,.L39
.L811:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   246      {                           /*CPU is in DBG HALT mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   247          cpuMode = IfxCpu_CoreMode_halt;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   248      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   249      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   250      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   251          if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   252          {                       /*CPU is in DBG RUNNING mode now check PMCSR status */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   253              switch (index)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   254              {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   255              case IfxCpu_ResourceCpu_0:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   256  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   257                  pmcsr_val0 = &MODULE_SCU.PMCSR0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   258  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   259                  if (pmcsr_val0->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   260                  {                   /*Cpu is in normal run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   261                      cpuMode = IfxCpu_CoreMode_run;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   262                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   263                  else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   264                  {                   /*Cpu is not in run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   265                      if (pmcsr_val0->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   266                      {               /*Cpu is in idle mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   267                          cpuMode = IfxCpu_CoreMode_idle;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   268                      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   269                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   271                  break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   272              case IfxCpu_ResourceCpu_1:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   273  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   274                  pmcsr_val1 = &MODULE_SCU.PMCSR1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   275  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   276                  if (pmcsr_val1->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   277                  {                   /*Cpu is in normal run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   278                      cpuMode = IfxCpu_CoreMode_run;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   279                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   280                  else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   281                  {                   /*Cpu is not in run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   282                      if (pmcsr_val1->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   283                      {               /*Cpu is in idle mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   284                          cpuMode = IfxCpu_CoreMode_idle;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   285                      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   286                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   287  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   288                  break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   289              case IfxCpu_ResourceCpu_2:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   290  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   291                  pmcsr_val2 = &MODULE_SCU.PMCSR2;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   292  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   293                  if (pmcsr_val2->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   294                  {                   /*Cpu is in normal run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   295                      cpuMode = IfxCpu_CoreMode_run;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   296                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   297                  else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   298                  {                   /*Cpu is not in run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   299                      if (pmcsr_val2->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   300                      {               /*Cpu is in idle mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   301                          cpuMode = IfxCpu_CoreMode_idle;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   302                      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   303                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   304  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   305                  break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   306              case IfxCpu_ResourceCpu_3:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   307  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   308                  pmcsr_val3 = &MODULE_SCU.PMCSR3;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   309  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   310                  if (pmcsr_val3->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   311                  {                   /*Cpu is in normal run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   312                      cpuMode = IfxCpu_CoreMode_run;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   313                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   314                  else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   315                  {                   /*Cpu is not in run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   316                      if (pmcsr_val3->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   317                      {               /*Cpu is in idle mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   318                          cpuMode = IfxCpu_CoreMode_idle;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   319                      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   320                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   321  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   322                  break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   323              case IfxCpu_ResourceCpu_4:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   324  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   325                  pmcsr_val4 = &MODULE_SCU.PMCSR4;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   326  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   327                  if (pmcsr_val4->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   328                  {                   /*Cpu is in normal run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   329                      cpuMode = IfxCpu_CoreMode_run;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   330                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   331                  else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   332                  {                   /*Cpu is not in run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   333                      if (pmcsr_val4->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   334                      {               /*Cpu is in idle mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   335                          cpuMode = IfxCpu_CoreMode_idle;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   336                      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   337                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   338  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   339                  break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   340              case IfxCpu_ResourceCpu_5:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   341  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   342                  pmcsr_val5 = &MODULE_SCU.PMCSR5;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   343  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   344                  if (pmcsr_val5->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   345                  {                   /*Cpu is in normal run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   346                      cpuMode = IfxCpu_CoreMode_run;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   347                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   348                  else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   349                  {                   /*Cpu is not in run mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   350                      if (pmcsr_val5->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   351                      {               /*Cpu is in idle mode */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   352                          cpuMode = IfxCpu_CoreMode_idle;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   353                      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   354                  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   355  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   356                  break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   357              default:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   358                  /* Invalid core selected */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   359                  break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   360              }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   361          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   362      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   363  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   364      return cpuMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   365  }
	mov	d2,#0
	ret
.L39:
	jne	d0,#0,.L41
.L812:
	jeq	d15,#0,.L42
.L813:
	jeq	d15,#1,.L43
.L814:
	jeq	d15,#2,.L44
.L815:
	jeq	d15,#3,.L45
.L816:
	jeq	d15,#4,.L46
.L817:
	jeq	d15,#5,.L47
.L41:
	ret
.L42:
	ld.w	d15,.5.cnt
	fcall	.cocofun_34
.L724:
	jeq	d15,#1,.L49
.L736:
	ld.bu	d15,[a15]
	and	d15,#7
.L818:
	jne	d15,#3,.L50
.L819:
	j	.L51
.L43:
	ld.w	d15,.6.cnt
	fcall	.cocofun_34
.L731:
	jeq	d15,#1,.L52
.L820:
	ld.bu	d15,[a15]
	and	d15,#7
.L821:
	jne	d15,#3,.L53
.L822:
	j	.L54
.L44:
	ld.w	d15,.7.cnt
	fcall	.cocofun_34
.L732:
	jeq	d15,#1,.L55
.L823:
	ld.bu	d15,[a15]
	and	d15,#7
.L824:
	jne	d15,#3,.L56
.L825:
	j	.L57
.L45:
	ld.w	d15,.8.cnt
	fcall	.cocofun_34
.L733:
	jeq	d15,#1,.L58
.L826:
	ld.bu	d15,[a15]
	and	d15,#7
.L827:
	jne	d15,#3,.L59
.L828:
	j	.L60
.L46:
	ld.w	d15,.9.cnt
	fcall	.cocofun_34
.L734:
	jeq	d15,#1,.L61
.L829:
	ld.bu	d15,[a15]
	and	d15,#7
.L830:
	jne	d15,#3,.L62
.L831:
	j	.L63
.L47:
	ld.w	d15,.10.cnt
	fcall	.cocofun_34
.L735:
	jne	d15,#1,.L64
.L61:
.L58:
.L55:
.L52:
.L49:
	mov	d2,#1
.L62:
.L59:
.L56:
.L53:
.L50:
	ret
.L64:
	ld.bu	d15,[a15]
	and	d15,#7
.L832:
	jne	d15,#3,.L66
.L63:
.L60:
.L57:
.L54:
.L51:
	mov	d2,#2
.L66:
	ret
.L506:
	
__IfxCpu_getCoreMode_function_end:
	.size	IfxCpu_getCoreMode,__IfxCpu_getCoreMode_function_end-IfxCpu_getCoreMode
.L289:
	; End of function
	
	.sdecl	'.text.IfxCpu..cocofun_34',code,cluster('.cocofun_34')
	.sect	'.text.IfxCpu..cocofun_34'
	.align	2
; Function .cocofun_34
.L206:
.cocofun_34:	.type	func
; Function body .cocofun_34, coco_iter:0
	mov.a	a15,d15
.L730:
	ld.bu	d15,[a15]
.L1087:
	and	d15,#7
	fret
.L414:
	; End of function
	.sdecl	'.text.IfxCpu.IfxCpu_getIndex',code,cluster('IfxCpu_getIndex')
	.sect	'.text.IfxCpu.IfxCpu_getIndex'
	.align	2
	
	.global	IfxCpu_getIndex

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   366  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   368  IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
; Function IfxCpu_getIndex
.L208:
IfxCpu_getIndex:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   369  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   370      IfxCpu_ResourceCpu result;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   371      uint32             index;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   372      result = IfxCpu_ResourceCpu_none;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   373  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   374      for (index = 0; index < IFXCPU_NUM_MODULES; index++)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   375      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   376          if (IfxCpu_cfg_indexMap[index].module == cpu)
	mov	d2,#6
	fcall	.cocofun_43
.L837:
	mov.a	a2,#5
.L68:
	ld.a	a5,[a15]
.L838:
	jne.a	a5,a4,.L69
.L839:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   377          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   378              result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
	ld.w	d15,[a15]4
.L840:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   379              break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   380          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   381      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   382  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   383      return result;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   384  }
	extr.u	d2,d15,#0,#8
	ret
.L69:
	lea	a15,[a15]8
	loop	a2,.L68
.L841:
	ret
.L521:
	
__IfxCpu_getIndex_function_end:
	.size	IfxCpu_getIndex,__IfxCpu_getIndex_function_end-IfxCpu_getIndex
.L294:
	; End of function
	
	.sdecl	'.text.IfxCpu..cocofun_43',code,cluster('.cocofun_43')
	.sect	'.text.IfxCpu..cocofun_43'
	.align	2
; Function .cocofun_43
.L210:
.cocofun_43:	.type	func
; Function body .cocofun_43, coco_iter:1
	movh.a	a15,#@his(IfxCpu_cfg_indexMap)
.L737:
	lea	a15,[a15]@los(IfxCpu_cfg_indexMap)
.L1138:
	fret
.L459:
	; End of function
	.sdecl	'.text.IfxCpu.IfxCpu_getRandomValue',code,cluster('IfxCpu_getRandomValue')
	.sect	'.text.IfxCpu.IfxCpu_getRandomValue'
	.align	2
	
	.global	IfxCpu_getRandomValue

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   385  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   386  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   387  uint32 IfxCpu_getRandomValue(uint32 *seed)
; Function IfxCpu_getRandomValue
.L212:
IfxCpu_getRandomValue:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   388  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   389      /*************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   390       * the choice of a and m is important for a long period of the LCG
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   391       * with a =  279470273 and
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   392       *       m = 4294967291
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   393       * a maximum period of 2^32-5 is given
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   394       * values for a:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   395       * 0x5EB0A82F = 1588635695
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   396       * 0x48E7211F = 1223106847
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   397       * 0x10a860c1 =  279470273
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   398       ***************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   399      uint32 x = *seed;
	ld.w	d0,[a4]
.L623:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	     2   * \file IfxCpu_IntrinsicsTasking.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	     3   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	     4   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	     5   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	     6   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	     9   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    12   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    14   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    15   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    18   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    19   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    20   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    21   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    22   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    23   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    24   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    25   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    26   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    27   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    28   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    29   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    30   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    31   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    38   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    39   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    40   * \defgroup IfxLld_Cpu_Intrinsics_Tasking Intrinsics for TASKING compiler
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    41   * \ingroup IfxLld_Cpu_Intrinsics
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    43   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    44  #ifndef IFXCPU_INTRINSICSTASKING_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    45  #define IFXCPU_INTRINSICSTASKING_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    46  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    47  #include "Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    48  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    49  /* *INDENT-OFF* */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    50  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    51  #ifndef __cplusplus
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    52  /** Function call without return
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    53   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    54  #define Ifx__non_return_call(fun)	__asm("\tji %0"::"a"(fun))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    56  /** Jump and link
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    58  IFX_INLINE void Ifx__jump_and_link(void (*fun)(void))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    59  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    60  	__asm("jli %0"::"a"(fun));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    61  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    63  IFX_INLINE void Ifx__moveToDataParam0(unsigned int var)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    64  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    65  	__asm("mov d4, %0"::"d"(var));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    66  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    68  IFX_INLINE void Ifx__moveToAddrParam0(const void *var)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    69  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    70  	__asm("mov.aa a4, %0"::"a"(var));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    71  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    73  IFX_INLINE unsigned int Ifx__getDataParamRet(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    75  	unsigned int var;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    76  	__asm(" mov\t %0, d2":"=d"(var));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    77  	return var;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    78  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    80  IFX_INLINE void Ifx__moveToDataParamRet(unsigned int var)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    81  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    82  	__asm("mov d2, %0"::"d"(var));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    83  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    84  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    85  IFX_INLINE void Ifx__jumpToFunction(const void *fun)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    86  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    87  	Ifx__non_return_call(fun);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    88  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    89  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    90  IFX_INLINE void Ifx__jumpToFunctionWithLink(const void *fun)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    91  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    92  	Ifx__jump_and_link((void (*)(void))fun);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    93  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    95  IFX_INLINE void Ifx__jumpBackToLink(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    96  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    97  	__asm("ji a11");
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    98  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	    99  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   100  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_any_type Cross type arithmetic operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   102   * Macro compatible with float, fix point, signed integer and unsigned integer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   103   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   104   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   105   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   107  #define Ifx__minX(X,Y)                     ( ((X) < (Y)) ? (X) : (Y) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   108  #define Ifx__maxX(X,Y)                     ( ((X) > (Y)) ? (X) : (Y) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   109  #define Ifx__saturateX(X,Min,Max)          ( Ifx__minX(Ifx__maxX(X, Min), Max) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   110  #define Ifx__checkrangeX(X,Min,Max)        (((X) >= (Min)) && ((X) <= (Max)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   111  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   113  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_singed_integer Signed integer operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   114   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   115   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   116   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   117  #define Ifx__saturate(X,Min,Max)           ( __min(__max(X, Min), Max) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   118  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   120  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_unsinged_integer Unsigned integer operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   121   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   122   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   124  #define Ifx__saturateu(X,Min,Max)           ( __minu(__maxu(X, Min), Max) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   125  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   126  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   127  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_float Floating point operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   128   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   129   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   131  #define Ifx__checkrange(X,Min,Max)         (((X) >= (Min)) && ((X) <= (Max)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   133  #define Ifx__sqrf(X)                       ((X) * (X))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   134  #define Ifx__sqrtf(X)                      sqrtf(X)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   135  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   136  #define Ifx__roundf(X)                     ((((X) - (int)(X)) > 0.5) ? (1 + (int)(X)) : ((int)(X)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   137  #define Ifx__absf(X)                       ( ((X) < 0.0) ? -(X) : (X) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   138  #define Ifx__minf(X,Y)                     ( ((X) < (Y)) ? (X) : (Y) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   139  #define Ifx__maxf(X,Y)                     ( ((X) > (Y)) ? (X) : (Y) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   140  #define Ifx__saturatef(X,Min,Max)          ( Ifx__minf(_Ifx_maxf(X, Min), Max) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   141  #define Ifx__checkrangef(X,Min,Max)        (((X) >= (Min)) && ((X) <= (Max)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   142  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   143  #define Ifx__abs_stdreal(X)                ( ((X) > 0.0) ? (X) : -(X) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   144  #define Ifx__min_stdreal(X,Y)              ( ((X) < (Y)) ? (X) : (Y) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   145  #define Ifx__max_stdreal(X,Y)              ( ((X) > (Y)) ? (X) : (Y) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   146  #define Ifx__saturate_stdreal(X,Min,Max)   ( Ifx__min_stdreal(Ifx__max_stdreal(X, Min), Max) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   147  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   148  #define Ifx__neqf(X,Y)                     ( ((X) > (Y)) ||  ((X) < (Y)) )     /**< X != Y */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   149  #define Ifx__leqf(X,Y)                     ( !((X) > (Y)) )     /**< X <= Y */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   150  #define Ifx__geqf(X,Y)                     ( !((X) < (Y)) )     /**< X >= Y */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   151  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   152  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_fractional Fractional Arithmetic Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   153   The next table provides an overview of intrinsic functions to convert fractional values. Note that the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   154   TASKING VX-toolset C compiler for TriCore fully supports the fractional type so normally you should not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   155   need these intrinsic functions (except for __mulfractlong). For compatibility reasons the TASKING C
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   156   compiler does support these functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   157   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   158   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   159   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   160  #define Ifx__fract_to_float(value)  ((float)(value))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   162  #define Ifx__mulfractlong __mulfractlong
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   163  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   164  #define Ifx__mulfractfract(fractvalue1,fractvalue2)  ((fractvalue1)*(fractvalue2))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   166  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   167  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   168  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_insert Insert / Extract Bit-fields and Bits
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   169   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   170   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   172  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   173  #define Ifx__extru(a, p, w)            __extru(a,p,w)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   175  #define Ifx__extr(a, p, w)             __extr(a,p,w)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   176  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   177  #define Ifx__imaskldmst(a, v, b, p)    __imaskldmst((int*)a, v, b, p)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   178  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   179  #define Ifx__insert(a,b,p,w)           __insert(a,b,p,w)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   181  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   183  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_interrupt_handling Interrupt Handling
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   184   The next table provides an overview of the intrinsic functions to read or set interrupt handling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   185   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   186   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   187   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   188  #define Ifx__disable_and_save __disable_and_save
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   190  #define Ifx__restore __restore
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   192  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   194  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_miscellaneous Miscellaneous Intrinsic Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   195   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   196   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   199  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   201  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_packed Packed Data Type Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   202   The next table provides an overview of the intrinsic functions for initialization of packed data type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   203   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   204   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   205   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   207  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   209  #ifndef __cplusplus
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   210  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_register Register Handling
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   211   The next table provides an overview of the intrinsic functions that you can use to access control registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   212   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   213   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   215  #define Ifx__mtcr_no_isync(reg, val)   \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   216      __asm("mtcr %0,%1"::"i"(reg),"d"(val));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   218  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   219  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   220  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_saturation Saturation Arithmetic Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   221   These intrinsics support saturation arithmetic
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   222   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   223   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   224   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   225  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   226  #define Ifx__adds(a,b)                 ((__sat int)(a)+(__sat int)(b))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   228  #define Ifx__addsu(a,b)                ((__sat unsigned int)(a)+(__sat unsigned int)(b))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   230  #define Ifx__subs(a,b)                 ((__sat int)(a)-(__sat int)(b))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   231  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   232  #define Ifx__subsu(a,b)                ((__sat unsigned int )(a)-(__sat unsigned int )(b))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   234  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   236  /** \defgroup IfxLld_Cpu_Intrinsics_Tasking_single_assembly Insert Single Assembly Instruction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   237   The next table provides an overview of the intrinsic functions that you can use to insert a single assembly
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   238   instruction.You can also use inline assembly but these intrinsics provide a shorthand for frequently used
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   239   assembly instructions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   240   * \ingroup IfxLld_Cpu_Intrinsics_Tasking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   241   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   244  IFX_INLINE void Ifx__nops(void* cnt)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   245  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   246      __asm("nop16 \n\t"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   247            "loop %0,*-2"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   248            ::"a"(((char*)cnt) - 1));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   249  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   251  #define Ifx__NOP(n)   __asm(".DUP " #n "\n\tnop16\n\t.ENDM\n")
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   253  /** Insert a memory barrier
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   255  #define Ifx__mem_barrier __asm("":::"memory");
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   257  #if CPU_NO_LDMST
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   258  IFX_INLINE void Ifx__ldmstC(volatile void *addr, uint32 mask, uint32 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   259  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   260      *(volatile uint32 *)addr = (*(volatile uint32 *)addr & ~mask) | (mask & data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   261  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   263  #define Ifx__ldmst(a,b,c) Ifx__ldmstC(a,b,c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   264  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   266  IFX_INLINE void Ifx__ldmstAsm(volatile void *addr, uint32 mask, uint32 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   267  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   268      __asm("\tmov d3, %1 \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   269            "\tmov d2, %2 \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   270            "\tldmst [%0],e2"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   271            ::"a"(addr), "d"(mask), "d"(data):"d2", "d3");
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   275  /** Convert float to fract
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   276   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   277  IFX_INLINE fract Ifx__float_to_fract(float a)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   278  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   279      fract res;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   280      __asm("ftoq31  %0,%1,%2":"=d"(res):"d"(a), "d"(0):"memory");
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   281      return res;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   282  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   283  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   284  #define Ifx__fract_to_sfract __round16
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   286  /** Convert float to sfract
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   287   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   288  IFX_INLINE sfract Ifx__float_to_sfract(float a)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   290      fract tmp = Ifx__float_to_fract(a);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   291      return Ifx__fract_to_sfract(tmp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   292  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   294  #define Ifx__ldmst(addr, mask, data) Ifx__ldmstAsm(addr, mask, data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   295  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   297  IFX_INLINE void Ifx__stopPerfCounters(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   298  { //__mtcr (CPU_CCTRL, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   299      __asm(
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   300              "    mov d0,#0\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   301              "    mtcr #0xFC00,d0\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   302              "    isync\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   303              :::"d0");
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   306  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   308  /* FIXME use inline instead of #define */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   309  /* FIXME is it really required to have #define __setareg(areg,val) ___setareg(areg,val) or can __setareg() implemented directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   310  #define Ifx___setareg(areg,val) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   311      { __asm (" movh.a\t "#areg",#@his("#val")\n lea\t "#areg",["#areg"]@los("#val")"); }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   312  #define Ifx__setareg(areg,val) Ifx___setareg(areg,val)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   314  /** \brief This function is a implementation of a binary semaphore using compare and swap instruction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   315   * \param address address of resource.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   316   * \param value This variable is updated with status of address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   317   * \param condition if the value of address matches with the value of condition, then swap of value & address occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   319   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   320  #define  Ifx__cmpAndSwap(address,value,condition) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   321       __cmpswapw((address), ((unsigned long)value), (condition) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   323  /** \brief Convert a fixpoint value to float32
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   324   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   325   * This function converts a value from a fixpoint format to a float32 format.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   326   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   328   * \param value value to be converted.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   329   * \param shift position of the fix point. Range = [-256, 255] => (Qx.y format where x = shift+1).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   330   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   331   * \return Returns the converted value in the float32 format.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   332   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   334  IFX_INLINE float32 Ifx__fixpoint_to_float32(fract value, sint32 shift)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   335  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   336      float32 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   338      __asm(
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   339          "   q31tof\t%0, %1, %2  \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   340          : "=d" (result)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   341          : "d" (value), "d" (shift));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   342      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   343  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   345  IFX_INLINE void* Ifx__getA11(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   347      unsigned int *res;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   349      return res;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   350  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352  IFX_INLINE void Ifx__setStackPointer(void *stackAddr)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   354      __asm("mov.aa a10, %0": : "a" (stackAddr) :"a10");
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   355  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   357  IFX_INLINE uint32 IfxCpu_calculateCrc32(uint32 *startaddress, uint8 length) 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   359      uint32 returnvalue;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   360      __asm("MOV d0, #0x0"); /* set seed value to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   361      for (;length > 0; length--) 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   362      { 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   363          /*calculate the CRC over all data */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   364          __asm("MOV d1,%0" : : "d" (*startaddress)); 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   365          __asm("CRC32B.W d0,d0,d1"); 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   366          startaddress++; 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   367      } 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   368      __asm("MOV %0,d0" : "=d" (returnvalue)); /* return result of CRC*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   369      return returnvalue;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   370  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   372  IFX_INLINE uint32 IfxCpu_getRandomVal(uint32 a, uint32 x, uint32 m)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   373  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   374  	uint32 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   375      __asm("      mul.u     e14,%1,%2      ; d15 = Eh; d14 = El    \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   376          "        mov       d12,d14        ;   e12 = El            \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   377          "        mov       d13,#0         ;                       \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   378          "        madd.u    e14,e12,d15,#5 ; e14 = El + 5 * d15    \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   379          " 1:     jge.u     d14,%3,2n      ;                       \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   380          "        jz        d15,3n         ;                       \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   381          " 2:     subx      d14,d14,%3     ;  e12=e12-m            \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   382          "        subc      d15,d15,d13    ; d13=d13-0             \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   383          "        loopu     1p             ;                       \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   384          " 3:     mov       %0,d14         ;                       \n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   385          : "=d"(result) : "d"(a), "d"(x), "d"(m) : "e14","e12");
	mov	d2,#-5
	ld.w	d1,.11.cnt
.L624:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   400  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   401      /* a seed of 0 is not allowed, and therefore will be changed to a valid value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   402      if (x == 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   403      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   404          x = 42;
	sel	d0,d0,d0,#42
.L625:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   375      __asm("      mul.u     e14,%1,%2      ; d15 = Eh; d14 = El    \n"      (inlined)
	
	      mul.u     e14,d1,d0      ; d15 = Eh; d14 = El    
        mov       d12,d14        ;   e12 = El            
        mov       d13,#0         ;                       
        madd.u    e14,e12,d15,#5 ; e14 = El + 5 * d15    
 1:     jge.u     d14,d2,2n      ;                       
        jz        d15,3n         ;                       
 2:     subx      d14,d14,d2     ;  e12=e12-m            
        subc      d15,d15,d13    ; d13=d13-0             
        loopu     1p             ;                       
 3:     mov       d2,d14         ;                       

.L738:
	
.L965:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   405      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   406  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   407      uint32 a = 0x10a860c1;  // 279470273
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   408      uint32 m = 0xfffffffb;  // 4294967291
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   409      uint32 result;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   410  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   411      //__asm(a,m,x,tmp1,tmp2              );
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   412      //EhEl = a * x;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   413      //result = e14 %  m;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   414      // %0 result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   415      // %1 a
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   416      // %2 x
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   417      // %3 m
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   418      result = IfxCpu_getRandomVal(a, x, m);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   419  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   420      *seed  = result; // to simplify seed passing
	st.w	[a4],d2
.L635:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   421  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   422      return result;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   423  }
	ret
.L618:
	
__IfxCpu_getRandomValue_function_end:
	.size	IfxCpu_getRandomValue,__IfxCpu_getRandomValue_function_end-IfxCpu_getRandomValue
.L354:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_getRandomValueWithinRange',code,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.text.IfxCpu.IfxCpu_getRandomValueWithinRange'
	.align	2
	
	.global	IfxCpu_getRandomValueWithinRange

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   424  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   425  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   426  uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max)
; Function IfxCpu_getRandomValueWithinRange
.L214:
IfxCpu_getRandomValueWithinRange:	.type	func
	mov	d8,d4
.L740:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   427  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   428      uint32 new_value = IfxCpu_getRandomValue(seed);
	mov	d15,d5
	call	IfxCpu_getRandomValue
.L739:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   429  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   430      /* swap min/max if required */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   431      if (min > max)
	jge.u	d15,d8,.L74
.L642:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   432      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   433          unsigned swap = max;
	mov	d0,d15
.L742:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   434          max = min;
	mov	d15,d8
.L970:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   435          min = swap;
	mov	d8,d0
.L74:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   436      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   437  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   438      /* special case */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   439      if ((min == 0) && (max == 0xffffffff))
	jne	d8,#0,.L75
.L971:
	jeq	d15,#-1,.L77
.L75:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   440      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   441          return new_value;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   442      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   443  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   444      /* return value within range */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   445      return (new_value % (max - min + 1)) + min;
	sub	d15,d8
.L741:
	add	d15,#1
.L972:
	div.u	e0,d2,d15
.L973:
	add	d2,d1,d8

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   446  }
.L77:
	ret
.L637:
	
__IfxCpu_getRandomValueWithinRange_function_end:
	.size	IfxCpu_getRandomValueWithinRange,__IfxCpu_getRandomValueWithinRange_function_end-IfxCpu_getRandomValueWithinRange
.L359:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_releaseMutex',code,cluster('IfxCpu_releaseMutex')
	.sect	'.text.IfxCpu.IfxCpu_releaseMutex'
	.align	2
	
	.global	IfxCpu_releaseMutex

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   447  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   448  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   449  void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock)
; Function IfxCpu_releaseMutex
.L216:
IfxCpu_releaseMutex:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   450  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   451      /*Reset the SpinLock*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   452      *lock = 0;
	mov	d15,#0
	st.w	[a4],d15
.L887:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   453  }
	ret
.L577:
	
__IfxCpu_releaseMutex_function_end:
	.size	IfxCpu_releaseMutex,__IfxCpu_releaseMutex_function_end-IfxCpu_releaseMutex
.L329:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_resetSpinLock',code,cluster('IfxCpu_resetSpinLock')
	.sect	'.text.IfxCpu.IfxCpu_resetSpinLock'
	.align	2
	
	.global	IfxCpu_resetSpinLock

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   454  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   456  void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock)
; Function IfxCpu_resetSpinLock
.L218:
IfxCpu_resetSpinLock:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   457  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   458      /*Reset the SpinLock*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   459      *lock = 0;
	mov	d15,#0
	st.w	[a4],d15
.L892:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   460  }
	ret
.L579:
	
__IfxCpu_resetSpinLock_function_end:
	.size	IfxCpu_resetSpinLock,__IfxCpu_resetSpinLock_function_end-IfxCpu_resetSpinLock
.L334:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_setCoreMode',code,cluster('IfxCpu_setCoreMode')
	.sect	'.text.IfxCpu.IfxCpu_setCoreMode'
	.align	2
	
	.global	IfxCpu_setCoreMode

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   461  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   462  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   463  boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
; Function IfxCpu_setCoreMode
.L220:
IfxCpu_setCoreMode:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   464  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   465      IfxCpu_ResourceCpu cpuIndex;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   466      cpuIndex = IfxCpu_getIndex(cpu);
	mov	d15,d4
	call	IfxCpu_getIndex
.L743:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   467      return IfxPmsPm_setCoreMode(cpuIndex, mode);
	mov	e4,d15,d2
	j	IfxPmsPm_setCoreMode
.L527:
	
__IfxCpu_setCoreMode_function_end:
	.size	IfxCpu_setCoreMode,__IfxCpu_setCoreMode_function_end-IfxCpu_setCoreMode
.L299:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_setProgramCounter',code,cluster('IfxCpu_setProgramCounter')
	.sect	'.text.IfxCpu.IfxCpu_setProgramCounter'
	.align	2
	
	.global	IfxCpu_setProgramCounter

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   468  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   469  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   470  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   471  boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
; Function IfxCpu_setProgramCounter
.L222:
IfxCpu_setProgramCounter:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   472  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   473      boolean retVal = TRUE;
	mov	d2,#1
.L535:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877      uint32 reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878      reg = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L744:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return (IfxCpu_ResourceCpu)__minu(reg, 5);
	min.u	d15,d15,#5
.L745:
	extr.u	d15,d15,#0,#8
.L536:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)      (inlined)
	jge.u	d15,#6,.L80
.L850:
	fcall	.cocofun_35
.L748:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;      (inlined)
	j	.L81

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)      (inlined)
.L80:
	mov.a	a15,#0

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else      (inlined)
.L81:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   474  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   475      if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
	jne.a	a4,a15,.L82
.L539:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   476      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   477          retVal = FALSE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   478      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   479      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   480      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   481          cpu->PC.B.PC = programCounter >> 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   482      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   483  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   484      return retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   485  }
	mov	d2,#0
	ret
.L82:
	movh.a	a3,#2
	add.a	a3,a4
.L851:
	sh	d4,#-1
	ld.w	d15,[+a3]-504
.L749:
	movh.a	a3,#2
	insert	d15,d15,d4,#1,#31
	add.a	a3,a4
	st.w	[+a3]-504,d15
.L852:
	ret
.L531:
	
__IfxCpu_setProgramCounter_function_end:
	.size	IfxCpu_setProgramCounter,__IfxCpu_setProgramCounter_function_end-IfxCpu_setProgramCounter
.L304:
	; End of function
	
	.sdecl	'.text.IfxCpu..cocofun_35',code,cluster('.cocofun_35')
	.sect	'.text.IfxCpu..cocofun_35'
	.align	2
; Function .cocofun_35
.L224:
.cocofun_35:	.type	func
; Function body .cocofun_35, coco_iter:0

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
	fcall	.cocofun_43
.L746:
	addsc.a	a15,a15,d15,#3
.L1092:
	ld.a	a15,[a15]
.L747:
	fret
.L419:
	; End of function
	.sdecl	'.text.IfxCpu.IfxCpu_setSpinLock',code,cluster('IfxCpu_setSpinLock')
	.sect	'.text.IfxCpu.IfxCpu_setSpinLock'
	.align	2
	
	.global	IfxCpu_setSpinLock

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   486  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   487  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   488  boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount)
; Function IfxCpu_setSpinLock
.L226:
IfxCpu_setSpinLock:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   489  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   490      boolean         retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   491      volatile uint32 spinLockVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   492  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   493      retVal = FALSE;
	mov	d2,#0
	sub.a	a10,#8
.L750:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   494  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   495      do
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   496      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   497          spinLockVal = 1UL;
	mov	d0,#1

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   498          spinLockVal =
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   499              (uint32)__cmpAndSwap(((unsigned int *)lock), spinLockVal, 0);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   500  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   501          /* Check if the SpinLock WAS set before the attempt to acquire spinlock */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   502          if (spinLockVal == 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   503          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   504              retVal = TRUE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   505          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   506          else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   507          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   508              timeoutCount--;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   509          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   510      } while ((retVal == FALSE) && (timeoutCount > 0));
.L85:
	st.w	[a10],d0
.L897:
	mov	d7,#0
	ld.w	d6,[a10]
	cmpswap.w	[a4]0,e6
.L898:
	st.w	[a10],d6
.L899:
	ld.w	d15,[a10]
.L900:
	jne	d15,#0,.L86
.L901:
	mov	d2,d0
	j	.L87
.L86:
	add	d4,#-1
.L87:
	jne	d2,#0,.L88
.L751:
	jne	d4,#0,.L85
.L88:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   511  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   512      return retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   513  }
	ret
.L582:
	
__IfxCpu_setSpinLock_function_end:
	.size	IfxCpu_setSpinLock,__IfxCpu_setSpinLock_function_end-IfxCpu_setSpinLock
.L339:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_startCore',code,cluster('IfxCpu_startCore')
	.sect	'.text.IfxCpu.IfxCpu_startCore'
	.align	2
	
	.global	IfxCpu_startCore

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   514  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   515  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   516  boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
; Function IfxCpu_startCore
.L228:
IfxCpu_startCore:	.type	func
	mov.aa	a15,a4
.L752:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   517  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   518      boolean retVal = TRUE;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   519  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   520      /* Set the PC */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   521      retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
	call	IfxCpu_setProgramCounter
.L549:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   522  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   523      /* release boot halt mode if required */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   524      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   525          Ifx_CPU_SYSCON syscon;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   526          syscon = cpu->SYSCON;
	movh.a	a3,#2
	add.a	a3,a15
	ld.w	d15,[+a3]-492
.L753:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   527  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   528          if (syscon.B.BHALT)
	jz.t	d15:24,.L90
.L857:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   529          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   530              syscon.B.BHALT = 0; cpu->SYSCON = syscon;
	insert	d15,d15,#0,#24,#1
	movh.a	a3,#2
	add.a	a3,a15
	st.w	[+a3]-492,d15
.L90:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   531          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   532      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   533  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   534      return retVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   535  }
	ret
.L545:
	
__IfxCpu_startCore_function_end:
	.size	IfxCpu_startCore,__IfxCpu_startCore_function_end-IfxCpu_startCore
.L309:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_waitEvent',code,cluster('IfxCpu_waitEvent')
	.sect	'.text.IfxCpu.IfxCpu_waitEvent'
	.align	2
	
	.global	IfxCpu_waitEvent

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   536  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   537  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   538  boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
; Function IfxCpu_waitEvent
.L230:
IfxCpu_waitEvent:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   539  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   540      volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
	mov.d	d0,a4
.L755:
	insert	d15,d0,#0,#0,#28
	movh	d1,#53248
.L978:
	mov	d8,d4
.L757:
	jne	d15,d1,.L92
.L979:
	insert	d15,d0,#0,#20,#12
	insert	d15,d15,#7,#28,#3
	mfcr	d0,#65052
.L756:
	sha	d0,d0,#28
	sub	d15,d0
	j	.L93
.L92:
	mov.d	d15,a4
.L93:
	mov.a	a15,d15
.L758:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   541  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   542      boolean          errorcnt      = 0U;
	mov	d9,#0
.L655:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1624      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1626      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1627  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1630  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1631  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1632      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1633  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1635  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1636  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1637  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1638      return IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1639  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1642  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1643  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1644      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.GETHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1645  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1648  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1649  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1650      /* fGTM = fSOURCEGTM / GTMDIV ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1651       * fSOURCEGTM = fSPB *2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1652       */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1653      uint8   gtmDiv  = SCU_CCUCON0.B.GTMDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1654      float32 gtmFreq = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1656      if (gtmDiv == 0u)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1657      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1658          gtmFreq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1659      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1660      else if (gtmDiv == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1661      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1662          gtmFreq = IfxScuCcu_getSpbFrequency() * 2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1663      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1664      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1665  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1666      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1667          gtmFreq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / gtmDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1668      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1670      return gtmFreq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1671  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1674  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1675  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1676      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / SCU_CCUCON1.B.I2CDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1677  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1678  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1679  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1680  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1681  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1682      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.MCANHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1683  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1685  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1686  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1687  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1688      return (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1689  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1691  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1692  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1693  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1694      float32 freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1696      if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1697      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1698          freq = IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1699      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1700      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1701      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1702          freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1703      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1704      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1705      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1706          freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1707      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1708      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1709      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1710          /* Reserved values, this */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1711          freq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1712      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1714      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1715  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1717  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1718  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1719  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1720      return (IfxScuCcu_PllInputClockSelection)SCU_CCUCON0.B.CLKSEL;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1721  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1724  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1725  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1726      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
	mov	d4,d9
	call	IfxScuCcu_getSourceFrequency
.L754:
	movh.a	a2,#61443
	ld.bu	d15,[a2]@los(0xf0036030)
.L656:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   543      /* Divide with 1000, gives the count value equivalent to milliseconds */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   544      uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   545      uint32           stmCountBegin = STM0_TIM0.U;
	movh	d0,#17530
	lea	a2,0xf0001010
.L659:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1624      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1626      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1627  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1630  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1631  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1632      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1633  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1635  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1636  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1637  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1638      return IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1639  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1642  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1643  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1644      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.GETHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1645  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1648  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1649  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1650      /* fGTM = fSOURCEGTM / GTMDIV ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1651       * fSOURCEGTM = fSPB *2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1652       */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1653      uint8   gtmDiv  = SCU_CCUCON0.B.GTMDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1654      float32 gtmFreq = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1656      if (gtmDiv == 0u)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1657      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1658          gtmFreq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1659      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1660      else if (gtmDiv == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1661      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1662          gtmFreq = IfxScuCcu_getSpbFrequency() * 2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1663      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1664      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1665  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1666      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1667          gtmFreq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / gtmDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1668      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1670      return gtmFreq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1671  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1674  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1675  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1676      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / SCU_CCUCON1.B.I2CDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1677  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1678  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1679  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1680  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1681  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1682      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.MCANHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1683  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1685  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1686  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1687  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1688      return (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1689  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1691  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1692  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1693  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1694      float32 freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1696      if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1697      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1698          freq = IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1699      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1700      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1701      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1702          freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1703      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1704      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1705      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1706          freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1707      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1708      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1709      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1710          /* Reserved values, this */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1711          freq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1712      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1714      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1715  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1717  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1718  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1719  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1720      return (IfxScuCcu_PllInputClockSelection)SCU_CCUCON0.B.CLKSEL;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1721  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1724  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1725  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1726      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
	and	d15,#15
	ld.w	d1,[a2]
.L759:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1624      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1626      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1627  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1630  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1631  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1632      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1633  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1635  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1636  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1637  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1638      return IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1639  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1642  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1643  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1644      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.GETHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1645  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1648  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1649  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1650      /* fGTM = fSOURCEGTM / GTMDIV ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1651       * fSOURCEGTM = fSPB *2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1652       */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1653      uint8   gtmDiv  = SCU_CCUCON0.B.GTMDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1654      float32 gtmFreq = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1656      if (gtmDiv == 0u)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1657      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1658          gtmFreq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1659      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1660      else if (gtmDiv == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1661      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1662          gtmFreq = IfxScuCcu_getSpbFrequency() * 2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1663      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1664      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1665  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1666      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1667          gtmFreq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / gtmDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1668      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1670      return gtmFreq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1671  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1674  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1675  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1676      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / SCU_CCUCON1.B.I2CDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1677  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1678  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1679  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1680  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1681  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1682      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.MCANHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1683  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1685  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1686  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1687  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1688      return (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1689  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1691  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1692  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1693  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1694      float32 freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1696      if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1697      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1698          freq = IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1699      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1700      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1701      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1702          freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1703      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1704      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1705      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1706          freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1707      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1708      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1709      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1710          /* Reserved values, this */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1711          freq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1712      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1714      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1715  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1717  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1718  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1719  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1720      return (IfxScuCcu_PllInputClockSelection)SCU_CCUCON0.B.CLKSEL;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1721  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1724  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1725  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1726      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
	itof	d15,d15
.L980:
	div.f	d15,d2,d15
.L660:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   546  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   547      while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
	mov	d2,#95
.L981:
	div.f	d15,d15,d0
.L982:
	utof	d0,d8
.L983:
	mul.f	d15,d15,d0
.L984:
	ftouz	d0,d15
	j	.L94
.L95:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   548      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   549          __nop();
	nop
.L985:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   550  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   551          if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
	ld.w	d15,[a2]
.L986:
	sub	d15,d1
.L987:
	jlt.u	d15,d0,.L96
.L988:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   552          {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   553              errorcnt = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   554              break;
	mov	d9,#1
	j	.L97
.L96:
.L94:
	ld.w	d15,[a15]
.L989:
	and	d15,#95
.L990:
	jne	d15,d2,.L95

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   555          }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   556  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   557          /* There is no need to check overflow of the STM timer.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   558           * When counter after overflow subtracted with counter before overflow,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   559           * the subtraction result will be as expected, as long as both are unsigned 32 bits
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   560           * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   561           *     stmCountNow = 0x00000002 (before overflow)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   562           *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   563      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   564  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   565      return errorcnt;
.L97:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   566  }
	mov	d2,d9
	ret
.L645:
	
__IfxCpu_waitEvent_function_end:
	.size	IfxCpu_waitEvent,__IfxCpu_waitEvent_function_end-IfxCpu_waitEvent
.L364:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_emitEvent',code,cluster('IfxCpu_emitEvent')
	.sect	'.text.IfxCpu.IfxCpu_emitEvent'
	.align	2
	
	.global	IfxCpu_emitEvent

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   567  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   568  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   569  void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
; Function IfxCpu_emitEvent
.L232:
IfxCpu_emitEvent:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   570  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   571      Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
	mfcr	d15,#65052
	imask	e0,#1,d15,#1
	ldmst	[a4]0,e0
.L995:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   572  }
	ret
.L661:
	
__IfxCpu_emitEvent_function_end:
	.size	IfxCpu_emitEvent,__IfxCpu_emitEvent_function_end-IfxCpu_emitEvent
.L369:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_triggerCpuReset',code,cluster('IfxCpu_triggerCpuReset')
	.sect	'.text.IfxCpu.IfxCpu_triggerCpuReset'
	.align	2
	
	.global	IfxCpu_triggerCpuReset

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   573  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   574  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   575  void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex)
; Function IfxCpu_triggerCpuReset
.L234:
IfxCpu_triggerCpuReset:	.type	func
	mov	d15,d4
.L554:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877      uint32 reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878      reg = __mfcr(CPU_CORE_ID);
	mfcr	d0,#65052
.L761:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return (IfxCpu_ResourceCpu)__minu(reg, 5);
	min.u	d0,d0,#5
.L762:
	extr.u	d0,d0,#0,#8
.L555:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   576  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   577      if (coreIndex != IfxCpu_getCoreIndex())
	jeq	d15,d0,.L99
.L558:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   578      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   579          uint16   password = IfxScuWdt_getGlobalEndinitPassword();
	call	IfxScuWdt_getGlobalEndinitPassword
.L760:
	mov	d8,d2
.L561:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)      (inlined)
	jge.u	d15,#6,.L100
.L862:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
	fcall	.cocofun_35
.L764:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;      (inlined)
	j	.L101
.L99:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   580          Ifx_CPU *cpu      = IfxCpu_getAddress(coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   581          IfxScuWdt_clearGlobalEndinit(password);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   582          cpu->KRST0.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   583          cpu->KRST1.B.RST = 1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   584          IfxScuWdt_setGlobalEndinit(password);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   585      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   586  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   587      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   588  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   589      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   590  //Do nothing because one cannot set the endinit back from the same CPU which is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   591      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   592  }
	ret

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)      (inlined)
.L100:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
	mov.a	a15,#0

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else      (inlined)
.L101:
	mov	d4,d8
	call	IfxScuWdt_clearGlobalEndinit
.L763:
	fcall	.cocofun_39
.L765:
	lea	a3,[a3]-12288
	fcall	.cocofun_33
.L766:
	lea	a3,[a3]-12288
	st.w	[a3],d15
.L863:
	fcall	.cocofun_39
	lea	a3,[a3]-12284
	fcall	.cocofun_33
.L864:
	mov	d4,d8
	lea	a3,[a3]-12284
.L769:
	st.w	[a3],d15
.L865:
	j	IfxScuWdt_setGlobalEndinit
.L552:
	
__IfxCpu_triggerCpuReset_function_end:
	.size	IfxCpu_triggerCpuReset,__IfxCpu_triggerCpuReset_function_end-IfxCpu_triggerCpuReset
.L314:
	; End of function
	
	.sdecl	'.text.IfxCpu..cocofun_33',code,cluster('.cocofun_33')
	.sect	'.text.IfxCpu..cocofun_33'
	.align	2
; Function .cocofun_33
.L236:
.cocofun_33:	.type	func
; Function body .cocofun_33, coco_iter:0
	ld.w	d15,[a3]
.L767:
	or	d15,#1
	fcall	.cocofun_39
.L768:
	fret
.L409:
	; End of function
	.sdecl	'.text.IfxCpu.IfxCpu_getCpuResetStatus',code,cluster('IfxCpu_getCpuResetStatus')
	.sect	'.text.IfxCpu.IfxCpu_getCpuResetStatus'
	.align	2
	
	.global	IfxCpu_getCpuResetStatus

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   593  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   594  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   595  IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex)
; Function IfxCpu_getCpuResetStatus
.L238:
IfxCpu_getCpuResetStatus:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)      (inlined)
	jge.u	d4,#6,.L102
.L870:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
	fcall	.cocofun_43
.L871:
	addsc.a	a15,a15,d4,#3
.L872:
	ld.a	a15,[a15]
.L770:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;      (inlined)
	j	.L103

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)      (inlined)
.L102:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
	mov.a	a15,#0

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else      (inlined)
.L103:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   596  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   597      Ifx_CPU           *cpu    = IfxCpu_getAddress(coreIndex);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   598      IfxCpu_ResetStatus status = (IfxCpu_ResetStatus)cpu->KRST0.B.RSTSTAT;
	fcall	.cocofun_39
	lea	a3,[a3]-12288
	ld.w	d15,[a3]
.L772:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   599      cpu->KRSTCLR.B.CLR = 1;
	extr.u	d2,d15,#1,#2
	fcall	.cocofun_39
	lea	a3,[a3]-12280
	fcall	.cocofun_33
.L873:
	st.w	[a3]-12280,d15
.L874:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   600      return status;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   601  }
	ret
.L566:
	
__IfxCpu_getCpuResetStatus_function_end:
	.size	IfxCpu_getCpuResetStatus,__IfxCpu_getCpuResetStatus_function_end-IfxCpu_getCpuResetStatus
.L319:
	; End of function
	
	.sdecl	'.text.IfxCpu.IfxCpu_setAllIdleExceptMasterCpu',code,cluster('IfxCpu_setAllIdleExceptMasterCpu')
	.sect	'.text.IfxCpu.IfxCpu_setAllIdleExceptMasterCpu'
	.align	2
	
	.global	IfxCpu_setAllIdleExceptMasterCpu

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   602  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   603  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   604  void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu)
; Function IfxCpu_setAllIdleExceptMasterCpu
.L240:
IfxCpu_setAllIdleExceptMasterCpu:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   600      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   604  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   606      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   608      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   609       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   610       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   611      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   612      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   614      return password;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   615  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   618  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   619  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   620      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   624  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   626      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   627       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   628       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   630      uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   631      return password;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   635  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   637      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   641  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   643      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   644      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   646      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   647       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   648       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   649      password  = watchdog->CON0.B.PW;
	ld.w	d0,.14.cnt
	mov.a	a4,d0
	ld.w	d0,[a4]
.L1000:
	extr.u	d0,d0,#2,#14
	ld.w	d15,[a4]
.L1001:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   650      password ^= 0x003F;
	xor	d0,d0,#63
.L667:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L105
.L1002:
	ld.w	d1,[a4]
.L1003:
	sha	d15,d0,#2
.L1004:
	insert	d1,d1,#0,#0,#16
.L1005:
	or	d15,#1
.L1006:
	or	d1,d15
	st.w	[a4],d1

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L105:
	sha	d1,d0,#2
	ld.w	d0,.14.cnt
.L773:
	or	d15,d1,#2
.L1007:
	mov.a	a5,d0
.L1008:
	ld.w	d0,[a4]
	insert	d0,d0,#0,#0,#16
.L1009:
	or	d0,d15
	st.w	[a5],d0

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
.L106:
	ld.w	d0,[a4]
.L1010:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
	jnz.t	d0:0,.L106
.L671:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   605  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   606      uint16 endinitSfty_pw;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   607      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   608      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   609  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   610      switch (masterCpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   611      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   612      case IfxCpu_ResourceCpu_0:
	jeq	d4,#0,.L107
.L1011:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   613          SCU_PMCSR1.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   614  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   615          while (SCU_PMSTAT0.B.CPU1)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   616          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   617  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   618          SCU_PMCSR2.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   619  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   620          while (SCU_PMSTAT0.B.CPU2)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   621          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   622  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   623          SCU_PMCSR3.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   624  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   625          while (SCU_PMSTAT0.B.CPU3)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   626          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   627  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   628          SCU_PMCSR4.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   629  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   630          while (SCU_PMSTAT0.B.CPU4)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   631          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   632  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   633          SCU_PMCSR5.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   634  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   635          while (SCU_PMSTAT0.B.CPU5)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   636          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   637  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   638          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   639  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   640      case IfxCpu_ResourceCpu_1:
	jeq	d4,#1,.L108
.L1012:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   641          SCU_PMCSR0.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   642  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   643          while (SCU_PMSTAT0.B.CPU0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   644          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   645  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   646          SCU_PMCSR2.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   647  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   648          while (SCU_PMSTAT0.B.CPU2)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   649          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   650  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   651          SCU_PMCSR3.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   652  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   653          while (SCU_PMSTAT0.B.CPU3)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   654          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   655  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   656          SCU_PMCSR4.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   657  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   658          while (SCU_PMSTAT0.B.CPU4)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   659          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   660  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   661          SCU_PMCSR5.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   662  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   663          while (SCU_PMSTAT0.B.CPU5)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   664          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   665  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   666          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   667  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   668      case IfxCpu_ResourceCpu_2:
	jeq	d4,#2,.L109
.L1013:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   669          SCU_PMCSR0.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   670  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   671          while (SCU_PMSTAT0.B.CPU0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   672          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   673  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   674          SCU_PMCSR1.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   675  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   676          while (SCU_PMSTAT0.B.CPU1)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   677          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   678  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   679          SCU_PMCSR3.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   680  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   681          while (SCU_PMSTAT0.B.CPU3)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   682          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   683  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   684          SCU_PMCSR4.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   685  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   686          while (SCU_PMSTAT0.B.CPU4)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   687          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   688  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   689          SCU_PMCSR5.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   690  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   691          while (SCU_PMSTAT0.B.CPU5)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   692          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   693  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   694          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   695  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   696      case IfxCpu_ResourceCpu_3:
	jeq	d4,#3,.L110
.L1014:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   697          SCU_PMCSR0.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   698  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   699          while (SCU_PMSTAT0.B.CPU0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   700          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   701  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   702          SCU_PMCSR1.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   703  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   704          while (SCU_PMSTAT0.B.CPU1)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   705          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   706  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   707          SCU_PMCSR2.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   708  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   709          while (SCU_PMSTAT0.B.CPU2)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   710          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   711  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   712          SCU_PMCSR4.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   713  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   714          while (SCU_PMSTAT0.B.CPU4)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   715          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   716  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   717          SCU_PMCSR5.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   718  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   719          while (SCU_PMSTAT0.B.CPU5)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   720          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   721  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   722          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   723  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   724      case IfxCpu_ResourceCpu_4:
	jeq	d4,#4,.L111
.L1015:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   725          SCU_PMCSR0.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   726  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   727          while (SCU_PMSTAT0.B.CPU0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   728          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   729  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   730          SCU_PMCSR1.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   731  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   732          while (SCU_PMSTAT0.B.CPU1)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   733          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   734  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   735          SCU_PMCSR2.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   736  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   737          while (SCU_PMSTAT0.B.CPU2)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   738          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   739  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   740          SCU_PMCSR3.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   741  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   742          while (SCU_PMSTAT0.B.CPU3)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   743          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   744  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   745          SCU_PMCSR5.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   746  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   747          while (SCU_PMSTAT0.B.CPU5)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   748          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   749  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   750          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   751  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   752      case IfxCpu_ResourceCpu_5:
	jeq	d4,#5,.L112
.L1016:
	j	.L113
.L107:
	ld.w	d0,.15.cnt
	mov.a	a15,d0
	ld.bu	d0,[a15]
.L1017:
	insert	d0,d0,#1,#0,#2
	st.b	[a15],d0
.L1018:
	ld.w	d0,.16.cnt
.L1019:
	mov.a	a15,d0
.L114:
	ld.bu	d0,[a15]
.L1020:
	jnz.t	d0:1,.L114
.L1021:
	ld.w	d0,.17.cnt
	mov.a	a2,d0
	ld.bu	d0,[a2]
.L1022:
	insert	d0,d0,#1,#0,#2
	st.b	[a2],d0
.L115:
	ld.bu	d15,[a15]
.L1023:
	jnz.t	d15:2,.L115
.L1024:
	fcall	.cocofun_29
.L1025:
	j	.L119
.L108:
	fcall	.cocofun_50
.L774:
	fcall	.cocofun_46
.L1026:
	fcall	.cocofun_29
.L775:
	j	.L125
.L109:
	fcall	.cocofun_44
.L776:
	fcall	.cocofun_29
.L778:
	j	.L131
.L110:
	fcall	.cocofun_37
.L779:
	fcall	.cocofun_38
.L780:
	j	.L137
.L111:
	fcall	.cocofun_30
.L781:
	fcall	.cocofun_47
.L782:
	j	.L143
.L112:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   753          SCU_PMCSR0.B.REQSLP = 0x1;
	fcall	.cocofun_30
.L783:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   754  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   755          while (SCU_PMSTAT0.B.CPU0)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   756          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   757  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   758          SCU_PMCSR1.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   759  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   760          while (SCU_PMSTAT0.B.CPU1)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   761          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   762  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   763          SCU_PMCSR2.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   764  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   765          while (SCU_PMSTAT0.B.CPU2)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   766          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   767  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   768          SCU_PMCSR3.B.REQSLP = 0x1;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   769  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   770          while (SCU_PMSTAT0.B.CPU3)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   771          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   772  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   773          SCU_PMCSR4.B.REQSLP = 0x1;
	fcall	.cocofun_48

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   774  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   775          while (SCU_PMSTAT0.B.CPU4)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   776          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   777  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   778          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   779      default:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   780          /* Invalid core selected */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   781          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   782      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   783  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   784      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
.L143:
.L137:
.L131:
.L125:
.L119:
.L113:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    42   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    44   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    45   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    46   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    47   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    48   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    49   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    50   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    51   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    52   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    53   * \ingroup IfxLld_Scu_Std_Wdt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    54   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    56  #ifndef IFXSCUWDT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    57  #define IFXSCUWDT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    59  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    60  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    63  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    64  #include "Cpu/Std/Ifx_Types.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    65  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "IfxScu_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "IfxScuWdt.asm.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    71  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    72  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    74  /** \brief Endinit operation Timeout counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    75   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    76  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    79  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    80  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    81  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    82  /** \brief Configuration structure for Scu Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    83   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    84   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    85   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    86  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    87  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    88      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    89      uint16            reload;                              /**< \brief WDT reload value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    90      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    91      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    92      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    93      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    97      IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    98  } IfxScuWdt_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   100  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   101   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   102  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   104  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   106  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   107  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   108   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   109   *   values are for software specific, not necessarily hardware reset values.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   110   *   User must use this API call before IfxScuWdt_Init API call
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   111   * \param config ScuWdt configuration structure to be initialized
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   114  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   116  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   118   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   119   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   120   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   121   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   122   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   123   * \param wdt reference to register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   124   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   125   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   126   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   127  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   129  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   131   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   132   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   133   *   with this interface.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   134   *   API corresponds to one instance of the hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   135   *   User must use this API call for each instance of the WDT hardware module used.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   136   * \param wdt reference to register map of Safety WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   137   * \param config ScuWdt configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   138   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   140  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   151  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   153   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   154   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   155   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   156   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   157   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   158   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   159   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   160   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   161   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   163  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   165  /** \brief Clear the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   166   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   167   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   169  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   171  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   172   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   173   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   174   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   175   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   176   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   177   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   178   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   179   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   182  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   184  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   185   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   186   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   187   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   188   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   189   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   190   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   192  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   194  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   195   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   196   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   197   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   198   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   199   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   200   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   201   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   202   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   204  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   206  /** \brief Set the Global safety Endinit password (Inline)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   208   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   210  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   212  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   213   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   214   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   215   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   216   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   217   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   218   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   221  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   223  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   224  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   225  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   227  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   229   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   230   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   231   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   232   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   233   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   234   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   235   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   237  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   239  /** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   240   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   241   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   242   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   243   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   244   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   245   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   246   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   247   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   248   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   250  IFX_EXTERN void IfxScuWdt_clearGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   252  /** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   254   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   255   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   256   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   257   * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   258   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   259   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   260   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   261   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   263  IFX_EXTERN void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   265  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   266   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   267   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   268   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   269   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   270   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   271   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   278   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   279   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   280   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   281   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   282   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   283   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   285  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   287  /** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   288   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   289   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   290   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   291   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   292   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   293   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   295  IFX_EXTERN void IfxScuWdt_setGlobalEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   297  /** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   299   *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   300   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   301   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   302   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   303   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   305  IFX_EXTERN void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   307  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   309   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to use this API call after modifying any ENDINIT protected register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   311   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   319  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   320   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   322  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   323  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   326  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   327   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   328   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   329   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   330   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   331   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   333   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   334   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   335  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   337  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   338   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   339   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   341  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   342  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   343  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return Endinit status for the Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   351   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   352   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   353   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   358  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   359  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   360  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   362  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   363   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   364   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   365   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   366   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   367   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   369   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   370  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   371  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   372  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   374   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   375   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   376   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   377   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   378   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   379   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   380   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   381  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   382  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   383  /** \brief API to change global endinit password.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   384   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   385   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   386   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   387   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   388   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   391  IFX_EXTERN void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   393  /** \brief API to change global safety endinit password.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   395   *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   396   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   397   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   398   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   399   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   401  IFX_EXTERN void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   403  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   404   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   405   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   406   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   407   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   408   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   410   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   411  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   413  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   414   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   415   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   416   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   417   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   418   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   419   * \param reload Reload value for the timer.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   420   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   421   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   422  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   423  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   424  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   425   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   426   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   427   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   428   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   429   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   430   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   432  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   434  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   435   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   436   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   437   * after this API call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   438   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   439   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   440   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   442  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   444  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   445   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   446   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   447   *   periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   448   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   449   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   450   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   451   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   452  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   454  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   456   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   457   * periodically after this API call.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   458   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   459   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   462  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   464  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   466   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   467   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   468   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   469   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   471  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   472  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   473  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   474   * \return Endinit status for the CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   475   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   476  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   478  /** \brief API to fetch current password of global endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   480   * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   481   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   482   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   483   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   484   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   486  IFX_EXTERN uint16 IfxScuWdt_getGlobalEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   488  /** \brief API to fetch current password of global safety endinit Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   489   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   490   * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   491   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   492   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   493   * This API is only meant to be used with startup routines where function call is not possible.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   494   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   496  IFX_EXTERN uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   498  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   500   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   501   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   502   * or store the password globally in a global variable at the application memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   503   * \return password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   504   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   505  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   507  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   508   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   509   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   510   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   511   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   512   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   513   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   514   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   515  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   517  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   519   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   520   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   521   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   522   * \param password Existing (Application specific) password for the Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   523   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   524   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   525  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   527  /** \brief SCUWDT API to fetch current status of CPU Watchdog module.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   528   * \return status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   530  IFX_EXTERN uint8 IfxScuWdt_getCpuWatchdogStatus(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   532  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   534  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   535  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   536  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   538  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   539   * debug interface will also be enabled, if not enabled already.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   540   * \return Status, Success = 0, Failure = 1.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   542  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   544  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   545  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   546  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   548  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   549  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   550      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   551      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   552          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   553          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   554                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   555                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   556                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   557      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   558  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   559      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   560      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   561                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   562                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   563                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   565      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   566      while (watchdog->CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   567      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   568  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   571  IFX_INLINE void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   572  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   573      /* Clear EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   574      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   576      while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   577      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   578  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   581  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   583      if (SCU_WDTS_CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   584      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   585          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   586          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   587                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   588                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   589                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   590      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   592      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   593      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   594                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   595                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   596                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   598      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   599      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   600      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   604  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   606      uint16 password;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   608      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   609       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   610       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   611      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   612      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   614      return password;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   615  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   618  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   619  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   620      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   621  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   623  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   624  IFX_INLINE uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   625  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   626      /* Read Password from CON0 register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   627       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   628       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   630      uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   631      return password;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   635  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   637      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   641  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   643      uint16        password;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   644      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   646      /* Read Password from Safety WDT CON0 register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   647       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   648       * to toggle them before returning password */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   649      password  = watchdog->CON0.B.PW;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   650      password ^= 0x003F;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   651  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   652      return password;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   653  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   656  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   657  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   658      if (watchdog->CON0.B.LCK)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   659      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   660          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   661          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   662                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   663                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   664                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   665      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   667      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   668      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   669                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   670                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   671                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   673      /* read back ENDINIT and wait until it has been set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   674      while (watchdog->CON0.B.ENDINIT == 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   675      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   676  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   678  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   679  IFX_INLINE void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   680  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   681      /* Set EndInit Watch-dog*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   682      MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   683  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   684      while (MODULE_SCU.SEICON0.B.ENDINIT == 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   685      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   686  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   689  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   690  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   691      if (SCU_WDTS_CON0.B.LCK)
	ld.w	d15,[a4]
.L1027:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   691      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L149
.L1028:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   692      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   693          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   694          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   695                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   696                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   697                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	ld.w	d0,[a4]
.L1029:
	or	d15,d1,#1
.L1030:
	insert	d0,d0,#0,#0,#16
.L1031:
	or	d15,d0
	st.w	[a5],d15

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   691      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L149:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   698      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   700      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   701      SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   702                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   703                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   704                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	ld.w	d0,[a4]
.L1032:
	or	d15,d1,#3
.L1033:
	insert	d0,d0,#0,#0,#16
.L1034:
	or	d15,d0
	st.w	[a5],d15

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   707      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
.L150:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   705  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   706      /* read back ENDINIT and wait until it has been cleared */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   707      while (SCU_WDTS_CON0.B.ENDINIT == 0)
	ld.w	d15,[a4]
.L1035:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuWdt.h	   707      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L150
.L676:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   785  }
	ret
.L663:
	
__IfxCpu_setAllIdleExceptMasterCpu_function_end:
	.size	IfxCpu_setAllIdleExceptMasterCpu,__IfxCpu_setAllIdleExceptMasterCpu_function_end-IfxCpu_setAllIdleExceptMasterCpu
.L374:
	; End of function
	
	.sdecl	'.text.IfxCpu..cocofun_50',code,cluster('.cocofun_50')
	.sect	'.text.IfxCpu..cocofun_50'
	.align	2
; Function .cocofun_50
.L242:
.cocofun_50:	.type	func
; Function body .cocofun_50, coco_iter:3
	ld.w	d15,.21.cnt
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L1182:
	insert	d15,d15,#1,#0,#2
	st.b	[a15],d15
.L1183:
	ld.w	d15,.16.cnt
.L1184:
	mov.a	a15,d15
.L120:
	ld.bu	d15,[a15]
.L1185:
	jnz.t	d15:0,.L120
.L1186:
	fret
.L494:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_48',code,cluster('.cocofun_48')
	.sect	'.text.IfxCpu..cocofun_48'
	.align	2
; Function .cocofun_48
.L244:
.cocofun_48:	.type	func
; Function body .cocofun_48, coco_iter:2
	ld.w	d15,.19.cnt
.L1172:
	fcall	.cocofun_49
.L148:
	ld.bu	d15,[a15]
.L1170:
	jnz.t	d15:4,.L148
.L1171:
	fret
.L484:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_49',code,cluster('.cocofun_49')
	.sect	'.text.IfxCpu..cocofun_49'
	.align	2
; Function .cocofun_49
.L246:
.cocofun_49:	.type	func
; Function body .cocofun_49, coco_iter:3
	mov.a	a2,d15
	ld.bu	d15,[a2]
.L1177:
	insert	d15,d15,#1,#0,#2
	st.b	[a2],d15
.L784:
	fret
.L489:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_47',code,cluster('.cocofun_47')
	.sect	'.text.IfxCpu..cocofun_47'
	.align	2
; Function .cocofun_47
.L248:
.cocofun_47:	.type	func
; Function body .cocofun_47, coco_iter:2
	ld.w	d15,.20.cnt
.L1165:
	fcall	.cocofun_49
.L142:
	ld.bu	d15,[a15]
.L1163:
	jnz.t	d15:5,.L142
.L1164:
	fret
.L479:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_46',code,cluster('.cocofun_46')
	.sect	'.text.IfxCpu..cocofun_46'
	.align	2
; Function .cocofun_46
.L250:
.cocofun_46:	.type	func
; Function body .cocofun_46, coco_iter:2
	ld.w	d15,.17.cnt
.L1158:
	fcall	.cocofun_49
.L121:
	ld.bu	d15,[a15]
.L1156:
	jnz.t	d15:2,.L121
.L1157:
	fret
.L474:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_44',code,cluster('.cocofun_44')
	.sect	'.text.IfxCpu..cocofun_44'
	.align	2
; Function .cocofun_44
.L252:
.cocofun_44:	.type	func
; Function body .cocofun_44, coco_iter:2
	fcall	.cocofun_50
.L777:
	ld.w	d15,.15.cnt
.L1145:
	fcall	.cocofun_49
.L127:
	ld.bu	d15,[a15]
.L1143:
	jnz.t	d15:1,.L127
.L1144:
	fret
.L464:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_38',code,cluster('.cocofun_38')
	.sect	'.text.IfxCpu..cocofun_38'
	.align	2
; Function .cocofun_38
.L254:
.cocofun_38:	.type	func
; Function body .cocofun_38, coco_iter:1
	fcall	.cocofun_48
.L1110:
	fcall	.cocofun_47
.L1111:
	fret
.L434:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_37',code,cluster('.cocofun_37')
	.sect	'.text.IfxCpu..cocofun_37'
	.align	2
; Function .cocofun_37
.L256:
.cocofun_37:	.type	func
; Function body .cocofun_37, coco_iter:1
	fcall	.cocofun_44
.L1104:
	fcall	.cocofun_46
.L1105:
	fret
.L429:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_30',code,cluster('.cocofun_30')
	.sect	'.text.IfxCpu..cocofun_30'
	.align	2
; Function .cocofun_30
.L258:
.cocofun_30:	.type	func
; Function body .cocofun_30, coco_iter:0
	fcall	.cocofun_37
.L1065:
	fcall	.cocofun_40
.L1066:
	fret
.L394:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_40',code,cluster('.cocofun_40')
	.sect	'.text.IfxCpu..cocofun_40'
	.align	2
; Function .cocofun_40
.L260:
.cocofun_40:	.type	func
; Function body .cocofun_40, coco_iter:1
	ld.w	d15,.18.cnt
.L1123:
	fcall	.cocofun_49
.L141:
	ld.bu	d15,[a15]
.L1121:
	jnz.t	d15:3,.L141
.L1122:
	fret
.L444:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_29',code,cluster('.cocofun_29')
	.sect	'.text.IfxCpu..cocofun_29'
	.align	2
; Function .cocofun_29
.L262:
.cocofun_29:	.type	func
; Function body .cocofun_29, coco_iter:0
	fcall	.cocofun_40
.L1059:
	fcall	.cocofun_38
.L1060:
	fret
.L389:
	; End of function
	.sdecl	'.text.IfxCpu.IfxCpu_disableInterruptsAllExceptMaster',code,cluster('IfxCpu_disableInterruptsAllExceptMaster')
	.sect	'.text.IfxCpu.IfxCpu_disableInterruptsAllExceptMaster'
	.align	2
	
	.global	IfxCpu_disableInterruptsAllExceptMaster

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   786  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   787  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   788  void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu)
; Function IfxCpu_disableInterruptsAllExceptMaster
.L264:
IfxCpu_disableInterruptsAllExceptMaster:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   789  {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   790      uint16 password = IfxScuWdt_getGlobalEndinitPassword();
	mov	d15,d4
	call	IfxScuWdt_getGlobalEndinitPassword
.L785:
	mov	d8,d2
.L788:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   791      IfxScuWdt_clearGlobalEndinit(password);
	mov	d4,d8
	call	IfxScuWdt_clearGlobalEndinit
.L787:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   792  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   793      switch (masterCpu)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   794      {
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   795      case IfxCpu_ResourceCpu_0:
	jeq	d15,#0,.L151
.L1040:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   796          CPU1_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   797  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   798          while (CPU1_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   799          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   800  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   801          CPU2_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   802  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   803          while (CPU2_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   804          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   805  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   806          CPU3_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   807  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   808          while (CPU3_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   809          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   810  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   811          CPU4_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   812  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   813          while (CPU4_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   814          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   815  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   816          CPU5_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   817  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   818          while (CPU5_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   819          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   820  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   821          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   822  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   823      case IfxCpu_ResourceCpu_1:
	jeq	d15,#1,.L152
.L1041:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   824          CPU0_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   825  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   826          while (CPU0_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   827          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   828  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   829          CPU2_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   830  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   831          while (CPU2_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   832          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   833  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   834          CPU3_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   835  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   836          while (CPU3_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   837          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   838  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   839          CPU4_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   840  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   841          while (CPU4_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   842          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   843  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   844          CPU5_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   845  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   846          while (CPU5_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   847          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   848  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   849          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   850  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   851      case IfxCpu_ResourceCpu_2:
	jeq	d15,#2,.L153
.L1042:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   852          CPU0_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   853  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   854          while (CPU0_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   855          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   856  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   857          CPU1_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   858  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   859          while (CPU1_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   860          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   861  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   862          CPU3_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   863  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   864          while (CPU3_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   865          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   866  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   867          CPU4_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   868  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   869          while (CPU4_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   870          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   871  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   872          CPU5_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   873  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   874          while (CPU5_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   875          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   876  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   877          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   878  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   879      case IfxCpu_ResourceCpu_3:
	jeq	d15,#3,.L154
.L1043:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   880          CPU0_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   881  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   882          while (CPU0_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   883          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   884  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   885          CPU1_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   886  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   887          while (CPU1_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   888          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   889  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   890          CPU2_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   891  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   892          while (CPU2_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   893          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   894  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   895          CPU4_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   896  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   897          while (CPU4_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   898          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   899  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   900          CPU5_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   901  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   902          while (CPU5_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   903          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   904  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   905          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   906  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   907      case IfxCpu_ResourceCpu_4:
	jeq	d15,#4,.L155
.L1044:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   908          CPU0_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   909  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   910          while (CPU0_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   911          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   912  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   913          CPU1_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   914  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   915          while (CPU1_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   916          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   917  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   918          CPU2_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   919  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   920          while (CPU2_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   921          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   922  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   923          CPU3_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   924  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   925          while (CPU3_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   926          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   927  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   928          CPU5_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   929  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   930          while (CPU5_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   931          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   932  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   933          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   934  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   935      case IfxCpu_ResourceCpu_5:
	jeq	d15,#5,.L156
.L1045:
	j	.L157
.L151:
	ld.w	d15,.22.cnt
	fcall	.cocofun_36
.L786:
	fcall	.cocofun_28
.L792:
	j	.L163
.L152:
	ld.w	d15,.27.cnt
	fcall	.cocofun_36
.L793:
	fcall	.cocofun_28
.L797:
	j	.L169
.L153:
	fcall	.cocofun_45
.L794:
	ld.w	d15,.24.cnt
	fcall	.cocofun_28
.L1046:
	j	.L175
.L154:
	fcall	.cocofun_45
.L796:
	ld.w	d15,.23.cnt
	fcall	.cocofun_28
.L1047:
	j	.L181
.L155:
	fcall	.cocofun_31
.L798:
	fcall	.cocofun_41
.L799:
	j	.L187
.L156:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   936          CPU0_ICR.B.IE = 0;
	fcall	.cocofun_31
.L800:

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   937  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   938          while (CPU0_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   939          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   940  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   941          CPU1_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   942  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   943          while (CPU1_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   944          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   945  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   946          CPU2_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   947  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   948          while (CPU2_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   949          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   950  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   951          CPU3_ICR.B.IE = 0;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   952  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   953          while (CPU3_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   954          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   955  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   956          CPU4_ICR.B.IE = 0;
	fcall	.cocofun_42

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   957  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   958          while (CPU4_ICR.B.IE)
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   959          {}
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   960  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   961          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   962      default:
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   963          /* Invalid core selected */
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   964          break;
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   965      }
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   966  
; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   967      IfxScuWdt_setGlobalEndinit(password);
.L187:
.L181:
.L175:
.L169:
.L163:
.L157:
	mov	d4,d8
.L801:
	j	IfxScuWdt_setGlobalEndinit
.L680:
	
__IfxCpu_disableInterruptsAllExceptMaster_function_end:
	.size	IfxCpu_disableInterruptsAllExceptMaster,__IfxCpu_disableInterruptsAllExceptMaster_function_end-IfxCpu_disableInterruptsAllExceptMaster
.L379:
	; End of function
	
	.sdecl	'.text.IfxCpu..cocofun_45',code,cluster('.cocofun_45')
	.sect	'.text.IfxCpu..cocofun_45'
	.align	2
; Function .cocofun_45
.L266:
.cocofun_45:	.type	func
; Function body .cocofun_45, coco_iter:2
	fcall	.cocofun_51
.L1150:
	fcall	.cocofun_52
.L1151:
	fret
.L469:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_52',code,cluster('.cocofun_52')
	.sect	'.text.IfxCpu..cocofun_52'
	.align	2
; Function .cocofun_52
.L268:
.cocofun_52:	.type	func
; Function body .cocofun_52, coco_iter:4
	mov.a	a15,d15
	ld.w	d15,[a15]
.L1197:
	insert	d15,d15,#0,#15,#1
	st.w	[a15],d15
.L171:
	ld.w	d15,[a15]
.L1198:
	jnz.t	d15:15,.L171
.L1199:
	fret
.L504:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_51',code,cluster('.cocofun_51')
	.sect	'.text.IfxCpu..cocofun_51'
	.align	2
; Function .cocofun_51
.L270:
.cocofun_51:	.type	func
; Function body .cocofun_51, coco_iter:3
	ld.w	d15,.27.cnt
.L1191:
	fcall	.cocofun_52
.L795:
	ld.w	d15,.22.cnt
.L1192:
	fret
.L499:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_42',code,cluster('.cocofun_42')
	.sect	'.text.IfxCpu..cocofun_42'
	.align	2
; Function .cocofun_42
.L272:
.cocofun_42:	.type	func
; Function body .cocofun_42, coco_iter:1
	ld.w	d15,.25.cnt
.L1133:
	fcall	.cocofun_52
.L790:
	fret
.L454:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_41',code,cluster('.cocofun_41')
	.sect	'.text.IfxCpu..cocofun_41'
	.align	2
; Function .cocofun_41
.L274:
.cocofun_41:	.type	func
; Function body .cocofun_41, coco_iter:1
	ld.w	d15,.26.cnt
.L1128:
	fcall	.cocofun_52
.L791:
	fret
.L449:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_36',code,cluster('.cocofun_36')
	.sect	'.text.IfxCpu..cocofun_36'
	.align	2
; Function .cocofun_36
.L276:
.cocofun_36:	.type	func
; Function body .cocofun_36, coco_iter:1
	fcall	.cocofun_52
.L789:
	ld.w	d15,.23.cnt
.L1098:
	fcall	.cocofun_52
.L1097:
	ld.w	d15,.24.cnt
.L1099:
	fret
.L424:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_31',code,cluster('.cocofun_31')
	.sect	'.text.IfxCpu..cocofun_31'
	.align	2
; Function .cocofun_31
.L278:
.cocofun_31:	.type	func
; Function body .cocofun_31, coco_iter:0
	fcall	.cocofun_51
.L1071:
	fcall	.cocofun_36
.L1072:
	fcall	.cocofun_52
.L1073:
	fret
.L399:
	; End of function
	.sdecl	'.text.IfxCpu..cocofun_28',code,cluster('.cocofun_28')
	.sect	'.text.IfxCpu..cocofun_28'
	.align	2
; Function .cocofun_28
.L280:
.cocofun_28:	.type	func
; Function body .cocofun_28, coco_iter:0
	fcall	.cocofun_52
.L1052:
	fcall	.cocofun_42
.L1053:
	fcall	.cocofun_41
.L1054:
	fret
.L384:
	; End of function
	.calls	'IfxCpu_disableOverlayBlock','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxCpu_disableOverlayBlock','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxCpu_disableOverlayBlock','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxCpu_enableOverlayBlock','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxCpu_enableOverlayBlock','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxCpu_enableOverlayBlock','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxCpu_getCoreMode','IfxCpu_getIndex'
	.calls	'IfxCpu_getRandomValueWithinRange','IfxCpu_getRandomValue'
	.calls	'IfxCpu_setCoreMode','IfxCpu_getIndex'
	.calls	'IfxCpu_setCoreMode','IfxPmsPm_setCoreMode'
	.calls	'IfxCpu_startCore','IfxCpu_setProgramCounter'
	.calls	'IfxCpu_waitEvent','IfxScuCcu_getSourceFrequency'
	.calls	'IfxCpu_triggerCpuReset','IfxScuWdt_getGlobalEndinitPassword'
	.calls	'IfxCpu_triggerCpuReset','IfxScuWdt_clearGlobalEndinit'
	.calls	'IfxCpu_triggerCpuReset','IfxScuWdt_setGlobalEndinit'
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','IfxScuWdt_getGlobalEndinitPassword'
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','IfxScuWdt_clearGlobalEndinit'
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','IfxScuWdt_setGlobalEndinit'
	.calls	'IfxCpu_disableOverlayBlock','.cocofun_39'
	.calls	'IfxCpu_enableOverlayBlock','.cocofun_39'
	.calls	'IfxCpu_enableOverlayBlock','.cocofun_32'
	.calls	'IfxCpu_getCoreMode','.cocofun_34'
	.calls	'IfxCpu_getIndex','.cocofun_43'
	.calls	'IfxCpu_setProgramCounter','.cocofun_35'
	.calls	'.cocofun_35','.cocofun_43'
	.calls	'IfxCpu_triggerCpuReset','.cocofun_35'
	.calls	'IfxCpu_triggerCpuReset','.cocofun_39'
	.calls	'IfxCpu_triggerCpuReset','.cocofun_33'
	.calls	'.cocofun_33','.cocofun_39'
	.calls	'IfxCpu_getCpuResetStatus','.cocofun_43'
	.calls	'IfxCpu_getCpuResetStatus','.cocofun_39'
	.calls	'IfxCpu_getCpuResetStatus','.cocofun_33'
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','.cocofun_29'
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','.cocofun_50'
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','.cocofun_46'
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','.cocofun_44'
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','.cocofun_37'
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','.cocofun_38'
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','.cocofun_30'
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','.cocofun_47'
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','.cocofun_48'
	.calls	'.cocofun_48','.cocofun_49'
	.calls	'.cocofun_47','.cocofun_49'
	.calls	'.cocofun_46','.cocofun_49'
	.calls	'.cocofun_44','.cocofun_50'
	.calls	'.cocofun_44','.cocofun_49'
	.calls	'.cocofun_38','.cocofun_48'
	.calls	'.cocofun_38','.cocofun_47'
	.calls	'.cocofun_37','.cocofun_44'
	.calls	'.cocofun_37','.cocofun_46'
	.calls	'.cocofun_30','.cocofun_37'
	.calls	'.cocofun_30','.cocofun_40'
	.calls	'.cocofun_40','.cocofun_49'
	.calls	'.cocofun_29','.cocofun_40'
	.calls	'.cocofun_29','.cocofun_38'
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','.cocofun_36'
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','.cocofun_28'
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','.cocofun_45'
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','.cocofun_31'
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','.cocofun_41'
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','.cocofun_42'
	.calls	'.cocofun_45','.cocofun_51'
	.calls	'.cocofun_45','.cocofun_52'
	.calls	'.cocofun_51','.cocofun_52'
	.calls	'.cocofun_42','.cocofun_52'
	.calls	'.cocofun_41','.cocofun_52'
	.calls	'.cocofun_36','.cocofun_52'
	.calls	'.cocofun_31','.cocofun_51'
	.calls	'.cocofun_31','.cocofun_36'
	.calls	'.cocofun_31','.cocofun_52'
	.calls	'.cocofun_28','.cocofun_52'
	.calls	'.cocofun_28','.cocofun_42'
	.calls	'.cocofun_28','.cocofun_41'
	.calls	'IfxCpu_acquireMutex','',8
	.calls	'IfxCpu_disableOverlayBlock','',0
	.calls	'.cocofun_39','',0
	.calls	'IfxCpu_enableOverlayBlock','',0
	.calls	'.cocofun_32','',0
	.calls	'IfxCpu_getCoreMode','',0
	.calls	'.cocofun_34','',0
	.calls	'IfxCpu_getIndex','',0
	.calls	'.cocofun_43','',0
	.calls	'IfxCpu_getRandomValue','',0
	.calls	'IfxCpu_getRandomValueWithinRange','',0
	.calls	'IfxCpu_releaseMutex','',0
	.calls	'IfxCpu_resetSpinLock','',0
	.calls	'IfxCpu_setCoreMode','',0
	.calls	'IfxCpu_setProgramCounter','',0
	.calls	'.cocofun_35','',0
	.calls	'IfxCpu_setSpinLock','',8
	.calls	'IfxCpu_startCore','',0
	.calls	'IfxCpu_waitEvent','',0
	.calls	'IfxCpu_emitEvent','',0
	.calls	'IfxCpu_triggerCpuReset','',0
	.calls	'.cocofun_33','',0
	.calls	'IfxCpu_getCpuResetStatus','',0
	.calls	'IfxCpu_setAllIdleExceptMasterCpu','',0
	.calls	'.cocofun_50','',0
	.calls	'.cocofun_48','',0
	.calls	'.cocofun_49','',0
	.calls	'.cocofun_47','',0
	.calls	'.cocofun_46','',0
	.calls	'.cocofun_44','',0
	.calls	'.cocofun_38','',0
	.calls	'.cocofun_37','',0
	.calls	'.cocofun_30','',0
	.calls	'.cocofun_40','',0
	.calls	'.cocofun_29','',0
	.calls	'IfxCpu_disableInterruptsAllExceptMaster','',0
	.calls	'.cocofun_45','',0
	.calls	'.cocofun_52','',0
	.calls	'.cocofun_51','',0
	.calls	'.cocofun_42','',0
	.calls	'.cocofun_41','',0
	.calls	'.cocofun_36','',0
	.calls	'.cocofun_31','',0
	.extern	IfxCpu_cfg_indexMap
	.extern	IfxScuWdt_clearGlobalEndinit
	.extern	IfxScuWdt_clearSafetyEndinit
	.extern	IfxScuWdt_setGlobalEndinit
	.extern	IfxScuWdt_setSafetyEndinit
	.extern	IfxScuWdt_getGlobalEndinitPassword
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxScuCcu_getSourceFrequency
	.extern	IfxPmsPm_setCoreMode
	.calls	'.cocofun_28','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L282:
	.word	164092
	.half	3
	.word	.L283
	.byte	4
.L281:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L284
	.byte	2,1,1,3
	.word	164
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	167
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	212
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	224
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0
.L519:
	.byte	7
	.byte	'unsigned long int',0,4,7
.L626:
	.byte	8
	.byte	'IfxCpu_getRandomVal',0,3,1,244,2,19
	.word	310
	.byte	1,1
.L627:
	.byte	5
	.byte	'a',0,1,244,2,46
	.word	310
.L629:
	.byte	5
	.byte	'x',0,1,244,2,56
	.word	310
.L631:
	.byte	5
	.byte	'm',0,1,244,2,66
	.word	310
.L633:
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	424
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	398
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	430
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	430
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	398
	.byte	6,0
.L643:
	.byte	7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	539
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	539
	.byte	16,0,2,35,0,0,12,4,189,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	555
	.byte	4,2,35,0,0
.L526:
	.byte	7
	.byte	'unsigned char',0,1,8
.L559:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	691
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,4,197,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	730
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,10,16,4,11
	.byte	'AE',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	691
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,4,205,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	996
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,136,17,25,12,13
	.byte	'CON0',0
	.word	651
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	956
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1187
	.byte	4,2,35,8,0,14
	.word	1227
	.byte	3
	.word	1290
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1,5
	.byte	'watchdog',0,3,164,4,65
	.word	1295
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	708
	.byte	6,0,4
	.byte	'IfxScuWdt_clearGlobalSafetyEndinitInline',0,3,3,187,4,17,1,1,5
	.byte	'password',0,3,187,4,65
	.word	708
	.byte	6,0
.L670:
	.byte	4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1
.L672:
	.byte	5
	.byte	'password',0,3,197,4,59
	.word	708
.L674:
	.byte	6,0,8
	.byte	'IfxScuWdt_getGlobalSafetyEndinitPasswordInline',0,3,3,240,4,19
	.word	708
	.byte	1,1,6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1295
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	708
	.byte	6,0,4
	.byte	'IfxScuWdt_setGlobalSafetyEndinitInline',0,3,3,167,5,17,1,1,5
	.byte	'password',0,3,167,5,63
	.word	708
	.byte	6,0
.L675:
	.byte	4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1
.L677:
	.byte	5
	.byte	'password',0,3,177,5,57
	.word	708
.L679:
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	708
	.byte	1,1,5
	.byte	'watchdog',0,3,220,4,74
	.word	1295
	.byte	6,0
.L666:
	.byte	8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	708
	.byte	1,1
.L668:
	.byte	6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,145,3,16,4,11
	.byte	'P0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,6,171,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1902
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,171,2,16,4,11
	.byte	'PS0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	691
	.byte	1,0,2,35,3,0,12,6,251,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2218
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,6,155,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2789
	.byte	4,2,35,0,0,15,4
	.word	691
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	691
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	691
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	691
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	691
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	691
	.byte	5,0,2,35,3,0,12,6,171,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2918
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	691
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	691
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	691
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	691
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	691
	.byte	5,0,2,35,3,0,12,6,187,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3133
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	691
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	691
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	691
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	691
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	691
	.byte	5,0,2,35,3,0,12,6,195,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3348
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	691
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	691
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	691
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	691
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	691
	.byte	5,0,2,35,3,0,12,6,179,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3565
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,141,1,16,4,11
	.byte	'P0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,6,163,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3785
	.byte	4,2,35,0,0,15,24
	.word	691
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,212,3,16,4,11
	.byte	'PD0',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	691
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	691
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	691
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	691
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	691
	.byte	2,0,2,35,3,0,12,6,195,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4109
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,233,3,16,4,11
	.byte	'PD8',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	691
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	691
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	691
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	691
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	691
	.byte	2,0,2,35,3,0,12,6,203,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4413
	.byte	4,2,35,0,0,15,8
	.word	691
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,111,16,4,11
	.byte	'EN0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,6,147,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4738
	.byte	4,2,35,0,0,15,12
	.word	691
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,6,187,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5078
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,12,6,179,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5444
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,230,2,16,4,11
	.byte	'PS0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	516
	.byte	28,0,2,35,0,0,12,6,139,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5808
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	516
	.byte	24,0,2,35,0,0,12,6,155,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5955
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	516
	.byte	20,0,2,35,0,0,12,6,163,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6124
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	708
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,6,147,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6296
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	708
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	708
	.byte	12,0,2,35,2,0,12,6,219,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6471
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	8,0,2,35,3,0,12,6,235,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6645
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,12,6,243,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6819
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	691
	.byte	1,0,2,35,3,0,12,6,227,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6995
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,208,2,16,4,11
	.byte	'PS0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,6,131,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7151
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	708
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	691
	.byte	1,0,2,35,3,0,12,6,211,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7484
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,6,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	691
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,12,6,203,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7832
	.byte	4,2,35,0,0,15,32
	.word	8112
	.byte	16,7,0,15,56
	.word	691
	.byte	16,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	32,0,2,35,0,0,12,6,139,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8170
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	691
	.byte	1,0,2,35,3,0,12,6,131,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8257
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,220,5,25,128,2,13
	.byte	'OUT',0
	.word	2178
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2749
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2869
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2909
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3093
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3308
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3525
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3745
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2909
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	4060
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4100
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4373
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4689
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4729
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	5029
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5069
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5404
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5768
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4729
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5915
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	6084
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6256
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6431
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6605
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6779
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6955
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	7111
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7444
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7792
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4729
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	8152
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	8161
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	8217
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8784
	.byte	4,3,35,252,1,0,14
	.word	8824
	.byte	3
	.word	9394
	.byte	17,5,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,169,5,17,1,1,5
	.byte	'port',0,5,169,5,44
	.word	9399
	.byte	5
	.byte	'pinIndex',0,5,169,5,56
	.word	691
	.byte	5
	.byte	'action',0,5,169,5,80
	.word	9404
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,7,157,14,17,1,1,5
	.byte	'timeSec',0,7,157,14,40
	.word	224
	.byte	19,6,0,0
.L654:
	.byte	8
	.byte	'IfxScuCcu_getStmFrequency',0,3,7,188,13,20
	.word	224
	.byte	1,1
.L657:
	.byte	6,0,15,128,34
	.word	691
	.byte	16,255,33,0,10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,9,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	539
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	539
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	539
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	539
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	539
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	539
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	539
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	539
	.byte	2,0,2,35,0,0,12,9,236,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9680
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,9,157,4,16,4,11
	.byte	'STALL',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	539
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	539
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	539
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	539
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	539
	.byte	6,0,2,35,0,0,12,9,244,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9906
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,9,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	539
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	539
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	539
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	539
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	539
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	539
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	539
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	539
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	539
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	539
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	539
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	539
	.byte	2,0,2,35,0,0,12,9,252,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10105
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,9,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	539
	.byte	22,0,2,35,0,0,12,9,132,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10413
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,9,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	539
	.byte	31,0,2,35,0,0,12,9,140,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10726
	.byte	4,2,35,0,0,15,236,253,2
	.word	691
	.byte	16,235,253,2,0,10
	.byte	'_Ifx_CPU_KRST0_Bits',0,9,159,5,16,4,11
	.byte	'RST',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	539
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	539
	.byte	29,0,2,35,0,0,12,9,220,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10848
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_KRST1_Bits',0,9,167,5,16,4,11
	.byte	'RST',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	539
	.byte	31,0,2,35,0,0,12,9,228,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10971
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,9,174,5,16,4,11
	.byte	'CLR',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	539
	.byte	31,0,2,35,0,0,12,9,236,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11075
	.byte	4,2,35,0,0,15,244,31
	.word	691
	.byte	16,243,31,0,10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,9,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	539
	.byte	27,0,2,35,0,0,12,9,156,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11192
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,9,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	539
	.byte	27,0,2,35,0,0,12,9,164,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11298
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,9,148,7,16,4,11
	.byte	'EN0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,140,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11404
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,9,185,7,16,4,11
	.byte	'EN32',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,148,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11978
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_RGN',0,9,221,16,25,16,13
	.byte	'LA',0
	.word	11258
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	11364
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	11938
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	12522
	.byte	4,2,35,12,0,15,128,1
	.word	12562
	.byte	16,7,0,14
	.word	12638
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,9,199,8,16,4,11
	.byte	'EN0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,204,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12653
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,9,236,8,16,4,11
	.byte	'EN32',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,212,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13238
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,9,245,7,16,4,11
	.byte	'EN0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,180,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13833
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,9,154,8,16,4,11
	.byte	'EN32',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,188,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14415
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,9,189,5,16,4,11
	.byte	'EN0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,252,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15007
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,9,226,5,16,4,11
	.byte	'EN32',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,132,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15589
	.byte	4,2,35,0,0,15,232,1
	.word	691
	.byte	16,231,1,0,10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,9,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	539
	.byte	27,0,2,35,0,0,12,9,156,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16192
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,9,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	539
	.byte	27,0,2,35,0,0,12,9,164,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16308
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,9,199,2,16,4,11
	.byte	'EN0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,132,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16424
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,9,145,3,16,4,11
	.byte	'EN32',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,148,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17010
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,9,162,2,16,4,11
	.byte	'EN0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,252,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17606
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,9,236,2,16,4,11
	.byte	'EN32',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,140,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18192
	.byte	4,2,35,0,0,15,128,48
	.word	691
	.byte	16,255,47,0,10
	.byte	'_Ifx_CPU_OSEL_Bits',0,9,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,164,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18799
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,9,98,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	539
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	539
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	539
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	539
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	539
	.byte	1,0,2,35,0,0
.L609:
	.byte	12,9,204,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18885
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,9,90,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	539
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	539
	.byte	4,0,2,35,0,0
.L611:
	.byte	12,9,196,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19071
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,9,81,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	539
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	539
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	539
	.byte	4,0,2,35,0,0,12,9,188,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19202
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_BLK',0,9,242,16,25,12,13
	.byte	'RABR',0
	.word	19031
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	19162
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	19309
	.byte	4,2,35,8,0,15,128,3
	.word	19349
	.byte	16,31,0,14
	.word	19412
	.byte	15,160,39
	.word	691
	.byte	16,159,39,0,10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,9,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	539
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	539
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	539
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,172,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19438
	.byte	4,2,35,0,0,15,208,223,1
	.word	691
	.byte	16,207,223,1,0,10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,9,174,9,16,4,11
	.byte	'ASI',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	539
	.byte	27,0,2,35,0,0,12,9,236,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19591
	.byte	4,2,35,0,0,15,248,1
	.word	691
	.byte	16,247,1,0,10
	.byte	'_Ifx_CPU_PMA0_Bits',0,9,227,6,16,4,11
	.byte	'DAC',0,4
	.word	539
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	539
	.byte	16,0,2,35,0,0,12,9,228,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19709
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PMA1_Bits',0,9,234,6,16,4,11
	.byte	'CAC',0,4
	.word	539
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	539
	.byte	16,0,2,35,0,0,12,9,236,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19813
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PMA2_Bits',0,9,241,6,16,4,11
	.byte	'PSI',0,4
	.word	539
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	539
	.byte	16,0,2,35,0,0,12,9,244,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19917
	.byte	4,2,35,0,0,15,244,29
	.word	691
	.byte	16,243,29,0,10
	.byte	'_Ifx_CPU_DCON2_Bits',0,9,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	539
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	539
	.byte	16,0,2,35,0,0,12,9,212,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20032
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_SMACON_Bits',0,9,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	7,0,2,35,0,0,12,9,196,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20145
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DSTR_Bits',0,9,231,3,16,4,11
	.byte	'SRE',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	539
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	539
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	539
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	7,0,2,35,0,0,12,9,212,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20274
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DATR_Bits',0,9,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	539
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	539
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	539
	.byte	16,0,2,35,0,0,12,9,180,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20626
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DEADD_Bits',0,9,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,228,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20865
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,9,138,2,16,4,11
	.byte	'TA',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,236,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20957
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DIETR_Bits',0,9,144,2,16,4,11
	.byte	'IED',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	539
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	539
	.byte	15,0,2,35,0,0,12,9,244,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21038
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DCON0_Bits',0,9,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	539
	.byte	30,0,2,35,0,0,12,9,204,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21334
	.byte	4,2,35,0,0,15,188,3
	.word	691
	.byte	16,187,3,0,10
	.byte	'_Ifx_CPU_PSTR_Bits',0,9,248,6,16,4,11
	.byte	'FRE',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	539
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	539
	.byte	17,0,2,35,0,0,12,9,252,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21473
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PCON1_Bits',0,9,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	539
	.byte	30,0,2,35,0,0,12,9,188,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21689
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PCON2_Bits',0,9,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	539
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	539
	.byte	16,0,2,35,0,0,12,9,196,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21812
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PCON0_Bits',0,9,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	539
	.byte	30,0,2,35,0,0,12,9,180,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21925
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,9,203,6,16,4,11
	.byte	'TA',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,212,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22053
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PIETR_Bits',0,9,209,6,16,4,11
	.byte	'IED',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	539
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	539
	.byte	15,0,2,35,0,0,12,9,220,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22134
	.byte	4,2,35,0,0,15,232,3
	.word	691
	.byte	16,231,3,0,10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,9,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	539
	.byte	27,0,2,35,0,0,12,9,236,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22441
	.byte	4,2,35,0,0,15,252,23
	.word	691
	.byte	16,251,23,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,9,208,4,16,4,11
	.byte	'TST',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	539
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	539
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	539
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	539
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,148,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22592
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,9,240,4,16,4,11
	.byte	'PC',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,164,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22946
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,9,230,4,16,4,11
	.byte	'OPC',0,4
	.word	539
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	539
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	539
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	539
	.byte	12,0,2,35,0,0,12,9,156,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23033
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,9,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,172,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23198
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,9,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,180,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23289
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,9,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,188,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23380
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP',0,9,134,17,25,28,13
	.byte	'CON',0
	.word	22906
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	22993
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	23158
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2909
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	23249
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	23340
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	23431
	.byte	4,2,35,24,0,14
	.word	23471
	.byte	15,228,63
	.word	691
	.byte	16,227,63,0,10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,9,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	539
	.byte	29,0,2,35,0,0,12,9,188,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23612
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,9,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	539
	.byte	29,0,2,35,0,0,12,9,196,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23719
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DPR',0,9,158,17,25,8,13
	.byte	'L',0
	.word	23679
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	23786
	.byte	4,2,35,4,0,15,144,1
	.word	23826
	.byte	16,17,0,14
	.word	23868
	.byte	15,240,30
	.word	691
	.byte	16,239,30,0,10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,9,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	539
	.byte	27,0,2,35,0,0,12,9,252,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23894
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,9,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	539
	.byte	27,0,2,35,0,0,12,9,132,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24001
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CPR',0,9,177,17,25,8,13
	.byte	'L',0
	.word	23961
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	24068
	.byte	4,2,35,4,0,15,80
	.word	24108
	.byte	16,9,0,14
	.word	24150
	.byte	15,176,31
	.word	691
	.byte	16,175,31,0,10
	.byte	'_Ifx_CPU_CPXE_Bits',0,9,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	539
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	539
	.byte	22,0,2,35,0,0,12,9,148,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24175
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DPRE_Bits',0,9,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	539
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	539
	.byte	14,0,2,35,0,0,12,9,180,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24280
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DPWE_Bits',0,9,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	539
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	539
	.byte	14,0,2,35,0,0,12,9,204,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24385
	.byte	4,2,35,0,0,15,16
	.word	691
	.byte	16,15,0,15,152,7
	.word	691
	.byte	16,151,7,0,10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,9,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	539
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	539
	.byte	15,0,2,35,0,0,12,9,244,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24510
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,9,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,180,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24692
	.byte	4,2,35,0,0,15,12
	.word	24740
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,9,196,17,25,16,13
	.byte	'CON',0
	.word	24652
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	24780
	.byte	12,2,35,4,0,14
	.word	24789
	.byte	15,48
	.word	691
	.byte	16,47,0,10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,9,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	539
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	539
	.byte	20,0,2,35,0,0,12,9,140,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24851
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,9,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	539
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	539
	.byte	20,0,2,35,0,0,12,9,132,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25000
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,9,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	539
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	539
	.byte	8,0,2,35,0,0,12,9,156,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25127
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,9,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	539
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	539
	.byte	8,0,2,35,0,0,12,9,148,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25274
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,9,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	539
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	539
	.byte	24,0,2,35,0,0,12,9,252,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25399
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,9,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	539
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	539
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	539
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	539
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	539
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	539
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,172,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25527
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,9,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	539
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	539
	.byte	12,0,2,35,0,0,12,9,164,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25774
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,9,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	24960
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	25087
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	25234
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	25359
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	25487
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	25734
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	25852
	.byte	4,2,35,24,0,14
	.word	25892
	.byte	15,164,23
	.word	691
	.byte	16,163,23,0,10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,9,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	539
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	539
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	539
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	539
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	539
	.byte	3,0,2,35,0,0,12,9,204,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26057
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,9,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,196,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26386
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TR',0,9,239,17,25,8,13
	.byte	'EVT',0
	.word	26346
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	26430
	.byte	4,2,35,4,0,15,64
	.word	26470
	.byte	16,7,0,14
	.word	26515
	.byte	15,192,23
	.word	691
	.byte	16,191,23,0,10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,9,123,16,4,11
	.byte	'CM',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	539
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	539
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	539
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	539
	.byte	21,0,2,35,0,0,12,9,228,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26540
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CCNT_Bits',0,9,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	539
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,220,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26699
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_ICNT_Bits',0,9,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	539
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,196,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26802
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,9,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	539
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,140,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26906
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,9,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	539
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,148,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27011
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,9,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	539
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	539
	.byte	1,0,2,35,0,0,12,9,156,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27116
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,9,217,1,16,4,11
	.byte	'DE',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	539
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	539
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	539
	.byte	19,0,2,35,0,0
.L511:
	.byte	12,9,188,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27221
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,9,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	539
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	539
	.byte	24,0,2,35,0,0,12,9,220,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27448
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CREVT_Bits',0,9,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	539
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	539
	.byte	24,0,2,35,0,0,12,9,156,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27614
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,9,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	539
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	539
	.byte	24,0,2,35,0,0,12,9,220,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27780
	.byte	4,2,35,0,0,15,28
	.word	691
	.byte	16,27,0,10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,9,255,9,16,4,11
	.byte	'T0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	539
	.byte	24,0,2,35,0,0,12,9,188,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27955
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DMS_Bits',0,9,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	539
	.byte	31,0,2,35,0,0,12,9,172,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28159
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DCX_Bits',0,9,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	539
	.byte	26,0,2,35,0,0,12,9,220,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28266
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,9,231,1,16,4,11
	.byte	'DTA',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	539
	.byte	31,0,2,35,0,0,12,9,196,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28373
	.byte	4,2,35,0,0,15,180,1
	.word	691
	.byte	16,179,1,0,10
	.byte	'_Ifx_CPU_PCXI_Bits',0,9,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	539
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	539
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	539
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	539
	.byte	2,0,2,35,0,0,12,9,204,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28489
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PSW_Bits',0,9,133,7,16,4,11
	.byte	'CDC',0,4
	.word	539
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	539
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	539
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	539
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	539
	.byte	8,0,2,35,0,0,12,9,132,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28655
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PC_Bits',0,9,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	539
	.byte	31,0,2,35,0,0,12,9,172,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28874
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,9,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	539
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	539
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	539
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	7,0,2,35,0,0
.L550:
	.byte	12,9,228,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28974
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,9,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	539
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	539
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	539
	.byte	16,0,2,35,0,0,12,9,140,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29284
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,9,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	539
	.byte	29,0,2,35,0,0,12,9,244,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29405
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_BIV_Bits',0,9,74,16,4,11
	.byte	'VSS',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	539
	.byte	31,0,2,35,0,0,12,9,180,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29515
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_BTV_Bits',0,9,109,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	539
	.byte	31,0,2,35,0,0,12,9,212,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29609
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_ISP_Bits',0,9,153,5,16,4,11
	.byte	'ISP',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,212,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29710
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_ICR_Bits',0,9,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	539
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	539
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	539
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	539
	.byte	8,0,2,35,0,0,12,9,204,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29790
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FCX_Bits',0,9,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	539
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	539
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	539
	.byte	12,0,2,35,0,0,12,9,228,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29946
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_LCX_Bits',0,9,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	539
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	539
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	539
	.byte	12,0,2,35,0,0,12,9,244,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30066
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,9,190,1,16,4,11
	.byte	'CID',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	539
	.byte	29,0,2,35,0,0,12,9,164,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30186
	.byte	4,2,35,0,0,15,172,1
	.word	691
	.byte	16,171,1,0,10
	.byte	'_Ifx_CPU_D_Bits',0,9,197,1,16,4,11
	.byte	'DATA',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,172,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30302
	.byte	4,2,35,0,0,15,64
	.word	30341
	.byte	16,15,0,15,64
	.word	691
	.byte	16,63,0,10
	.byte	'_Ifx_CPU_A_Bits',0,9,68,16,4,11
	.byte	'ADDR',0,4
	.word	539
	.byte	32,0,2,35,0,0,12,9,172,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30399
	.byte	4,2,35,0,0,15,64
	.word	30437
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,9,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	9669
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	9866
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	10065
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	10373
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	10686
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	10795
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	10835
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	10931
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	11035
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	11141
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	11181
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	12648
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4729
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	13198
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	13793
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4729
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	13198
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	13793
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4729
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	13198
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	13793
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4729
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	13198
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	13793
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4729
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	13198
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	13793
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4729
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	13198
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	13793
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4729
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	13198
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	13793
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4729
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	13198
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	13793
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	14375
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	14967
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4729
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	15549
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	16141
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	16181
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	16268
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	16384
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	16970
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	17566
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	16268
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	16384
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	16970
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	17566
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	16268
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	16384
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	16970
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	17566
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	16268
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	16384
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	16970
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	17566
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	16268
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	16384
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	16970
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	17566
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	16268
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	16384
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	16970
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	17566
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	16268
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	16384
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	16970
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	17566
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	16268
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	16384
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	16970
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	17566
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4729
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	18152
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	18748
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4729
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	18152
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	18748
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4729
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	18152
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	18748
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4729
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	18152
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	18748
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4729
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	18152
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	18748
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4729
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	18152
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	18748
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4729
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	18152
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	18748
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4729
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	18152
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	18748
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	18788
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	18845
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	5069
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	19422
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	19427
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	19538
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	19578
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	19658
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	19698
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	19773
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	19877
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	19981
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	20021
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	20105
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4729
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	20234
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	20586
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	2909
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	20825
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	20917
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	20998
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	21294
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	4100
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	21422
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	21462
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	21649
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	21772
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	21885
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	22013
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	22094
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	22390
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	22430
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	22541
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	22581
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	23596
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	23601
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	23878
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	23883
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	24159
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	24164
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	24240
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	24240
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	24240
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	24240
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	24345
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	24345
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	24345
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	24345
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	24450
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	24450
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	24450
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	24450
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	24490
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	24240
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	24240
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4729
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	24345
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	24345
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4729
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	24450
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	24450
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	24499
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	24837
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	24842
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	26041
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	26046
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	26524
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	26529
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	26659
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	26762
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	26866
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	26971
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	27076
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	27181
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	16181
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	27408
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	2909
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	27574
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	27740
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	27906
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	27946
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	28119
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	5069
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	28226
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	28333
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	28438
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	28478
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	28615
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	28834
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	28934
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4729
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	29244
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	29365
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	29475
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	29569
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	29670
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	29750
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	29906
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4729
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	30026
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	30146
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	24490
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	30251
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	30291
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	30381
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	30390
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	30477
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	30390
	.byte	64,4,35,192,255,7,0,14
	.word	30486
.L507:
	.byte	3
	.word	35584
.L513:
	.byte	17,10,161,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_2',0,2,18
	.byte	'IfxCpu_ResourceCpu_3',0,3,18
	.byte	'IfxCpu_ResourceCpu_4',0,4,18
	.byte	'IfxCpu_ResourceCpu_5',0,5,18
	.byte	'IfxCpu_ResourceCpu_none',0,6,0
.L538:
	.byte	8
	.byte	'IfxCpu_getAddress',0,3,8,198,6,21
	.word	35589
	.byte	1,1
.L540:
	.byte	5
	.byte	'cpu',0,8,198,6,58
	.word	35594
.L542:
	.byte	6,0
.L515:
	.byte	8
	.byte	'IfxCpu_getCoreIndex',0,3,8,235,6,31
	.word	35594
	.byte	1,1
.L518:
	.byte	6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,233,5,20
	.word	691
	.byte	1,1,6,0,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,255,6,19
	.word	310
	.byte	1,1,5
	.byte	'address',0,8,255,6,55
	.word	708
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,156,7,20
	.word	691
	.byte	1,1,5
	.byte	'address',0,8,156,7,70
	.word	708
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,138,9,17,1,1,5
	.byte	'address',0,8,138,9,56
	.word	310
	.byte	5
	.byte	'count',0,8,138,9,72
	.word	310
	.byte	19,6,0,0,4
	.byte	'IfxPmsEvr_wait',0,3,11,205,9,17,1,1,5
	.byte	'waitInSec',0,11,205,9,40
	.word	224
	.byte	6,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,13,68,16,4,11
	.byte	'SRPN',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	691
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	691
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	691
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,12,13,93,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36140
	.byte	4,2,35,0,0,14
	.word	36430
	.byte	3
	.word	36469
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,12,247,1,17,1,1,5
	.byte	'src',0,12,247,1,60
	.word	36474
	.byte	6,0,20
	.word	532
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	36522
	.byte	0,14
	.word	516
	.byte	3
	.word	516
	.byte	23
	.byte	'__cmpswapw',0
	.word	36564
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	36569
	.byte	24
	.byte	'value',0
	.word	516
	.byte	24
	.byte	'compare',0
	.word	516
	.byte	0,3
	.word	532
	.byte	21
	.byte	'__imaskldmst',0,1,1,1,1,22
	.word	36626
	.byte	22
	.word	532
	.byte	22
	.word	532
	.byte	22
	.word	532
	.byte	0,23
	.byte	'__minu',0
	.word	516
	.byte	1,1,1,1,22
	.word	516
	.byte	22
	.word	516
	.byte	0,14
	.word	532
	.byte	23
	.byte	'__mfcr',0
	.word	36697
	.byte	1,1,1,1,22
	.word	532
	.byte	0,25
	.byte	'__nop',0,1,1,1,1,26
	.word	172
	.byte	27
	.word	198
	.byte	6,0,26
	.word	233
	.byte	27
	.word	265
	.byte	6,0,26
	.word	278
	.byte	6,0,26
	.word	331
	.byte	27
	.word	363
	.byte	27
	.word	374
	.byte	27
	.word	385
	.byte	6,0,26
	.word	435
	.byte	27
	.word	454
	.byte	6,0,26
	.word	470
	.byte	27
	.word	485
	.byte	27
	.word	499
	.byte	6,0,26
	.word	1300
	.byte	27
	.word	1340
	.byte	27
	.word	1358
	.byte	6,0,26
	.word	1378
	.byte	27
	.word	1427
	.byte	6,0,26
	.word	1447
	.byte	27
	.word	1490
	.byte	6,0,26
	.word	1510
	.byte	6,0,26
	.word	1571
	.byte	27
	.word	1609
	.byte	27
	.word	1627
	.byte	6,0,26
	.word	1647
	.byte	27
	.word	1694
	.byte	6,0,26
	.word	1714
	.byte	27
	.word	1755
	.byte	6,0,28
	.byte	'IfxScuWdt_clearGlobalEndinit',0,3,250,1,17,1,1,1,1,5
	.byte	'password',0,3,250,1,53
	.word	708
	.byte	0,28
	.byte	'IfxScuWdt_clearSafetyEndinit',0,3,147,2,17,1,1,1,1,5
	.byte	'password',0,3,147,2,53
	.word	708
	.byte	0,28
	.byte	'IfxScuWdt_setGlobalEndinit',0,3,167,2,17,1,1,1,1,5
	.byte	'password',0,3,167,2,51
	.word	708
	.byte	0,28
	.byte	'IfxScuWdt_setSafetyEndinit',0,3,187,2,17,1,1,1,1,5
	.byte	'password',0,3,187,2,51
	.word	708
	.byte	0,26
	.word	1775
	.byte	27
	.word	1826
	.byte	6,0,26
	.word	1846
	.byte	6,0,29
	.byte	'IfxScuWdt_getGlobalEndinitPassword',0,3,230,3,19
	.word	708
	.byte	1,1,1,1,29
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,3,249,3,19
	.word	708
	.byte	1,1,1,1,26
	.word	9507
	.byte	27
	.word	9535
	.byte	27
	.word	9549
	.byte	27
	.word	9567
	.byte	6,0,26
	.word	9585
	.byte	27
	.word	9608
	.byte	19,30
	.word	9629
	.byte	31
	.word	9667
	.byte	0,6,0,0,26
	.word	9629
	.byte	6,0,17,7,172,2,9,1,18
	.byte	'IfxScuCcu_Fsource_0',0,0,18
	.byte	'IfxScuCcu_Fsource_1',0,1,18
	.byte	'IfxScuCcu_Fsource_2',0,2,0,32
	.byte	'IfxScuCcu_getSourceFrequency',0,7,138,7,20
	.word	224
	.byte	1,1,1,1,5
	.byte	'fsource',0,7,138,7,67
	.word	37300
	.byte	0,26
	.word	35765
	.byte	27
	.word	35795
	.byte	6,0,26
	.word	35810
	.byte	6,0
.L505:
	.byte	17,8,129,1,9,1,18
	.byte	'IfxCpu_CoreMode_halt',0,0,18
	.byte	'IfxCpu_CoreMode_run',0,1,18
	.byte	'IfxCpu_CoreMode_idle',0,2,18
	.byte	'IfxCpu_CoreMode_sleep',0,3,18
	.byte	'IfxCpu_CoreMode_stby',0,4,18
	.byte	'IfxCpu_CoreMode_unknown',0,5,0
.L565:
	.byte	17,8,181,1,9,1,18
	.byte	'IfxCpu_ResetStatus_notCpuReset',0,0,18
	.byte	'IfxCpu_ResetStatus_cpuResetBySmu',0,1,18
	.byte	'IfxCpu_ResetStatus_cpuResetBySw',0,2,0,26
	.word	35844
	.byte	6,0,26
	.word	35886
	.byte	27
	.word	35927
	.byte	6,0,26
	.word	35946
	.byte	27
	.word	36001
	.byte	6,0,26
	.word	36020
	.byte	27
	.word	36060
	.byte	27
	.word	36077
	.byte	19,6,0,0
.L572:
	.byte	3
	.word	516
.L575:
	.byte	14
	.word	310
.L580:
	.byte	3
	.word	516
.L586:
	.byte	14
	.word	310
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	708
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	691
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	6,0,2,35,3,0
.L593:
	.byte	12,4,197,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37779
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0
.L595:
	.byte	12,4,205,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38108
	.byte	4,2,35,0,0
.L601:
	.byte	17,8,168,1,9,1,18
	.byte	'IfxCpu_OverlayMemorySelect_core0DsprPspr',0,0,18
	.byte	'IfxCpu_OverlayMemorySelect_core1DsprPspr',0,1,18
	.byte	'IfxCpu_OverlayMemorySelect_core2DsprPspr',0,2,18
	.byte	'IfxCpu_OverlayMemorySelect_core3DsprPspr',0,3,18
	.byte	'IfxCpu_OverlayMemorySelect_core4DsprPspr',0,4,18
	.byte	'IfxCpu_OverlayMemorySelect_core5DsprPspr',0,5,18
	.byte	'IfxCpu_OverlayMemorySelect_lmu',0,8,18
	.byte	'IfxCpu_OverlayMemorySelect_emem',0,9,18
	.byte	'IfxCpu_OverlayMemorySelect_ebu',0,10,0
.L603:
	.byte	17,8,149,1,9,2,18
	.byte	'IfxCpu_OverlayAddressMask_128KB',0,0,18
	.byte	'IfxCpu_OverlayAddressMask_64KB',0,128,16,18
	.byte	'IfxCpu_OverlayAddressMask_32KB',0,128,24,18
	.byte	'IfxCpu_OverlayAddressMask_16KB',0,128,28,18
	.byte	'IfxCpu_OverlayAddressMask_8KB',0,128,30,18
	.byte	'IfxCpu_OverlayAddressMask_4KB',0,128,31,18
	.byte	'IfxCpu_OverlayAddressMask_2KB',0,192,31,18
	.byte	'IfxCpu_OverlayAddressMask_1KB',0,224,31,18
	.byte	'IfxCpu_OverlayAddressMask_512byte',0,240,31,18
	.byte	'IfxCpu_OverlayAddressMask_256byte',0,248,31,18
	.byte	'IfxCpu_OverlayAddressMask_128byte',0,252,31,18
	.byte	'IfxCpu_OverlayAddressMask_64byte',0,254,31,18
	.byte	'IfxCpu_OverlayAddressMask_32byte',0,255,31,0
.L619:
	.byte	3
	.word	310
.L646:
	.byte	3
	.word	516
	.byte	14
	.word	310
.L649:
	.byte	3
	.word	39136
	.byte	26
	.word	36096
	.byte	27
	.word	36119
	.byte	6,0,26
	.word	36479
	.byte	27
	.word	36507
	.byte	6,0,32
	.byte	'IfxPmsPm_setCoreMode',0,14,145,4,20
	.word	691
	.byte	1,1,1,1,5
	.byte	'cpuIndex',0,14,145,4,60
	.word	35594
	.byte	5
	.byte	'mode',0,14,145,4,86
	.word	37452
	.byte	0,7
	.byte	'short int',0,2,5,33
	.byte	'__wchar_t',0,15,1,1
	.word	39237
	.byte	33
	.byte	'__size_t',0,15,1,1
	.word	516
	.byte	33
	.byte	'__ptrdiff_t',0,15,1,1
	.word	532
	.byte	34,1,3
	.word	39305
	.byte	33
	.byte	'__codeptr',0,15,1,1
	.word	39307
	.byte	33
	.byte	'boolean',0,16,104,29
	.word	691
	.byte	33
	.byte	'uint8',0,16,108,29
	.word	691
	.byte	33
	.byte	'uint16',0,16,112,29
	.word	708
	.byte	33
	.byte	'uint32',0,16,116,29
	.word	310
	.byte	33
	.byte	'uint64',0,16,121,29
	.word	398
	.byte	7
	.byte	'char',0,1,6,33
	.byte	'sint8',0,16,125,29
	.word	39405
	.byte	33
	.byte	'sint16',0,16,129,1,29
	.word	39237
	.byte	7
	.byte	'long int',0,4,5,33
	.byte	'sint32',0,16,134,1,29
	.word	39443
	.byte	7
	.byte	'long long int',0,8,5,33
	.byte	'sint64',0,16,141,1,29
	.word	39471
	.byte	33
	.byte	'float32',0,16,170,1,29
	.word	224
	.byte	33
	.byte	'pvoid',0,17,54,28
	.word	430
	.byte	33
	.byte	'Ifx_TickTime',0,17,76,28
	.word	39471
	.byte	33
	.byte	'Ifx_Priority',0,17,100,16
	.word	708
	.byte	17,17,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,33
	.byte	'Ifx_RxSel',0,17,137,1,3
	.word	39577
	.byte	14
	.word	424
	.byte	3
	.word	39714
	.byte	35,17,140,1,9,8,13
	.byte	'module',0
	.word	39719
	.byte	4,2,35,0,13
	.byte	'index',0
	.word	39443
	.byte	4,2,35,4,0,33
	.byte	'IfxModule_IndexMap',0,17,144,1,3
	.word	39724
	.byte	33
	.byte	'Ifx_UReg_8Bit',0,18,96,24
	.word	691
	.byte	33
	.byte	'Ifx_UReg_32Bit',0,18,98,24
	.word	516
	.byte	33
	.byte	'Ifx_SReg_32Bit',0,18,101,24
	.word	532
	.byte	33
	.byte	'Ifx_CPU_A_Bits',0,9,71,3
	.word	30399
	.byte	33
	.byte	'Ifx_CPU_BIV_Bits',0,9,78,3
	.word	29515
	.byte	33
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,9,87,3
	.word	19202
	.byte	33
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,9,95,3
	.word	19071
	.byte	33
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,9,106,3
	.word	18885
	.byte	33
	.byte	'Ifx_CPU_BTV_Bits',0,9,113,3
	.word	29609
	.byte	33
	.byte	'Ifx_CPU_CCNT_Bits',0,9,120,3
	.word	26699
	.byte	33
	.byte	'Ifx_CPU_CCTRL_Bits',0,9,131,1,3
	.word	26540
	.byte	33
	.byte	'Ifx_CPU_COMPAT_Bits',0,9,140,1,3
	.word	22441
	.byte	33
	.byte	'Ifx_CPU_CORE_ID_Bits',0,9,147,1,3
	.word	29405
	.byte	33
	.byte	'Ifx_CPU_CPR_L_Bits',0,9,154,1,3
	.word	23894
	.byte	33
	.byte	'Ifx_CPU_CPR_U_Bits',0,9,161,1,3
	.word	24001
	.byte	33
	.byte	'Ifx_CPU_CPU_ID_Bits',0,9,169,1,3
	.word	29284
	.byte	33
	.byte	'Ifx_CPU_CPXE_Bits',0,9,176,1,3
	.word	24175
	.byte	33
	.byte	'Ifx_CPU_CREVT_Bits',0,9,187,1,3
	.word	27614
	.byte	33
	.byte	'Ifx_CPU_CUS_ID_Bits',0,9,194,1,3
	.word	30186
	.byte	33
	.byte	'Ifx_CPU_D_Bits',0,9,200,1,3
	.word	30302
	.byte	33
	.byte	'Ifx_CPU_DATR_Bits',0,9,214,1,3
	.word	20626
	.byte	33
	.byte	'Ifx_CPU_DBGSR_Bits',0,9,228,1,3
	.word	27221
	.byte	33
	.byte	'Ifx_CPU_DBGTCR_Bits',0,9,235,1,3
	.word	28373
	.byte	33
	.byte	'Ifx_CPU_DCON0_Bits',0,9,243,1,3
	.word	21334
	.byte	33
	.byte	'Ifx_CPU_DCON2_Bits',0,9,250,1,3
	.word	20032
	.byte	33
	.byte	'Ifx_CPU_DCX_Bits',0,9,129,2,3
	.word	28266
	.byte	33
	.byte	'Ifx_CPU_DEADD_Bits',0,9,135,2,3
	.word	20865
	.byte	33
	.byte	'Ifx_CPU_DIEAR_Bits',0,9,141,2,3
	.word	20957
	.byte	33
	.byte	'Ifx_CPU_DIETR_Bits',0,9,159,2,3
	.word	21038
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,9,196,2,3
	.word	17606
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,9,233,2,3
	.word	16424
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,9,142,3,3
	.word	18192
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,9,179,3,3
	.word	17010
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,9,186,3,3
	.word	16192
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,9,193,3,3
	.word	16308
	.byte	33
	.byte	'Ifx_CPU_DMS_Bits',0,9,200,3,3
	.word	28159
	.byte	33
	.byte	'Ifx_CPU_DPRE_Bits',0,9,207,3,3
	.word	24280
	.byte	33
	.byte	'Ifx_CPU_DPR_L_Bits',0,9,214,3,3
	.word	23612
	.byte	33
	.byte	'Ifx_CPU_DPR_U_Bits',0,9,221,3,3
	.word	23719
	.byte	33
	.byte	'Ifx_CPU_DPWE_Bits',0,9,228,3,3
	.word	24385
	.byte	33
	.byte	'Ifx_CPU_DSTR_Bits',0,9,250,3,3
	.word	20274
	.byte	33
	.byte	'Ifx_CPU_EXEVT_Bits',0,9,133,4,3
	.word	27448
	.byte	33
	.byte	'Ifx_CPU_FCX_Bits',0,9,141,4,3
	.word	29946
	.byte	33
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,9,154,4,3
	.word	9680
	.byte	33
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,9,165,4,3
	.word	9906
	.byte	33
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,9,182,4,3
	.word	10105
	.byte	33
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,9,198,4,3
	.word	10413
	.byte	33
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,9,205,4,3
	.word	10726
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,9,227,4,3
	.word	22592
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,9,237,4,3
	.word	23033
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,9,243,4,3
	.word	22946
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,9,249,4,3
	.word	23198
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,9,255,4,3
	.word	23289
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,9,133,5,3
	.word	23380
	.byte	33
	.byte	'Ifx_CPU_ICNT_Bits',0,9,140,5,3
	.word	26802
	.byte	33
	.byte	'Ifx_CPU_ICR_Bits',0,9,150,5,3
	.word	29790
	.byte	33
	.byte	'Ifx_CPU_ISP_Bits',0,9,156,5,3
	.word	29710
	.byte	33
	.byte	'Ifx_CPU_KRST0_Bits',0,9,164,5,3
	.word	10848
	.byte	33
	.byte	'Ifx_CPU_KRST1_Bits',0,9,171,5,3
	.word	10971
	.byte	33
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,9,178,5,3
	.word	11075
	.byte	33
	.byte	'Ifx_CPU_LCX_Bits',0,9,186,5,3
	.word	30066
	.byte	33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,9,223,5,3
	.word	15007
	.byte	33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,9,132,6,3
	.word	15589
	.byte	33
	.byte	'Ifx_CPU_M1CNT_Bits',0,9,139,6,3
	.word	26906
	.byte	33
	.byte	'Ifx_CPU_M2CNT_Bits',0,9,146,6,3
	.word	27011
	.byte	33
	.byte	'Ifx_CPU_M3CNT_Bits',0,9,153,6,3
	.word	27116
	.byte	33
	.byte	'Ifx_CPU_OSEL_Bits',0,9,159,6,3
	.word	18799
	.byte	33
	.byte	'Ifx_CPU_PC_Bits',0,9,166,6,3
	.word	28874
	.byte	33
	.byte	'Ifx_CPU_PCON0_Bits',0,9,174,6,3
	.word	21925
	.byte	33
	.byte	'Ifx_CPU_PCON1_Bits',0,9,182,6,3
	.word	21689
	.byte	33
	.byte	'Ifx_CPU_PCON2_Bits',0,9,189,6,3
	.word	21812
	.byte	33
	.byte	'Ifx_CPU_PCXI_Bits',0,9,200,6,3
	.word	28489
	.byte	33
	.byte	'Ifx_CPU_PIEAR_Bits',0,9,206,6,3
	.word	22053
	.byte	33
	.byte	'Ifx_CPU_PIETR_Bits',0,9,224,6,3
	.word	22134
	.byte	33
	.byte	'Ifx_CPU_PMA0_Bits',0,9,231,6,3
	.word	19709
	.byte	33
	.byte	'Ifx_CPU_PMA1_Bits',0,9,238,6,3
	.word	19813
	.byte	33
	.byte	'Ifx_CPU_PMA2_Bits',0,9,245,6,3
	.word	19917
	.byte	33
	.byte	'Ifx_CPU_PSTR_Bits',0,9,130,7,3
	.word	21473
	.byte	33
	.byte	'Ifx_CPU_PSW_Bits',0,9,145,7,3
	.word	28655
	.byte	33
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,9,182,7,3
	.word	11404
	.byte	33
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,9,219,7,3
	.word	11978
	.byte	33
	.byte	'Ifx_CPU_RGN_LA_Bits',0,9,226,7,3
	.word	11192
	.byte	33
	.byte	'Ifx_CPU_RGN_UA_Bits',0,9,233,7,3
	.word	11298
	.byte	33
	.byte	'Ifx_CPU_SEGEN_Bits',0,9,242,7,3
	.word	19438
	.byte	33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,9,151,8,3
	.word	13833
	.byte	33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,9,188,8,3
	.word	14415
	.byte	33
	.byte	'Ifx_CPU_SMACON_Bits',0,9,196,8,3
	.word	20145
	.byte	33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,9,233,8,3
	.word	12653
	.byte	33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,9,142,9,3
	.word	13238
	.byte	33
	.byte	'Ifx_CPU_SWEVT_Bits',0,9,153,9,3
	.word	27780
	.byte	33
	.byte	'Ifx_CPU_SYSCON_Bits',0,9,171,9,3
	.word	28974
	.byte	33
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,9,178,9,3
	.word	19591
	.byte	33
	.byte	'Ifx_CPU_TPS_CON_Bits',0,9,189,9,3
	.word	24510
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,9,196,9,3
	.word	25399
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,9,203,9,3
	.word	25000
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,9,211,9,3
	.word	24851
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,9,218,9,3
	.word	25274
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,9,226,9,3
	.word	25127
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,9,233,9,3
	.word	25774
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,9,246,9,3
	.word	25527
	.byte	33
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,9,252,9,3
	.word	24692
	.byte	33
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,9,138,10,3
	.word	27955
	.byte	33
	.byte	'Ifx_CPU_TR_ADR_Bits',0,9,144,10,3
	.word	26386
	.byte	33
	.byte	'Ifx_CPU_TR_EVT_Bits',0,9,164,10,3
	.word	26057
	.byte	33
	.byte	'Ifx_CPU_A',0,9,177,10,3
	.word	30437
	.byte	33
	.byte	'Ifx_CPU_BIV',0,9,185,10,3
	.word	29569
	.byte	33
	.byte	'Ifx_CPU_BLK_OMASK',0,9,193,10,3
	.word	19309
	.byte	33
	.byte	'Ifx_CPU_BLK_OTAR',0,9,201,10,3
	.word	19162
	.byte	33
	.byte	'Ifx_CPU_BLK_RABR',0,9,209,10,3
	.word	19031
	.byte	33
	.byte	'Ifx_CPU_BTV',0,9,217,10,3
	.word	29670
	.byte	33
	.byte	'Ifx_CPU_CCNT',0,9,225,10,3
	.word	26762
	.byte	33
	.byte	'Ifx_CPU_CCTRL',0,9,233,10,3
	.word	26659
	.byte	33
	.byte	'Ifx_CPU_COMPAT',0,9,241,10,3
	.word	22541
	.byte	33
	.byte	'Ifx_CPU_CORE_ID',0,9,249,10,3
	.word	29475
	.byte	33
	.byte	'Ifx_CPU_CPR_L',0,9,129,11,3
	.word	23961
	.byte	33
	.byte	'Ifx_CPU_CPR_U',0,9,137,11,3
	.word	24068
	.byte	33
	.byte	'Ifx_CPU_CPU_ID',0,9,145,11,3
	.word	29365
	.byte	33
	.byte	'Ifx_CPU_CPXE',0,9,153,11,3
	.word	24240
	.byte	33
	.byte	'Ifx_CPU_CREVT',0,9,161,11,3
	.word	27740
	.byte	33
	.byte	'Ifx_CPU_CUS_ID',0,9,169,11,3
	.word	30251
	.byte	33
	.byte	'Ifx_CPU_D',0,9,177,11,3
	.word	30341
	.byte	33
	.byte	'Ifx_CPU_DATR',0,9,185,11,3
	.word	20825
	.byte	33
	.byte	'Ifx_CPU_DBGSR',0,9,193,11,3
	.word	27408
	.byte	33
	.byte	'Ifx_CPU_DBGTCR',0,9,201,11,3
	.word	28438
	.byte	33
	.byte	'Ifx_CPU_DCON0',0,9,209,11,3
	.word	21422
	.byte	33
	.byte	'Ifx_CPU_DCON2',0,9,217,11,3
	.word	20105
	.byte	33
	.byte	'Ifx_CPU_DCX',0,9,225,11,3
	.word	28333
	.byte	33
	.byte	'Ifx_CPU_DEADD',0,9,233,11,3
	.word	20917
	.byte	33
	.byte	'Ifx_CPU_DIEAR',0,9,241,11,3
	.word	20998
	.byte	33
	.byte	'Ifx_CPU_DIETR',0,9,249,11,3
	.word	21294
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,9,129,12,3
	.word	18152
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,9,137,12,3
	.word	16970
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,9,145,12,3
	.word	18748
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,9,153,12,3
	.word	17566
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,9,161,12,3
	.word	16268
	.byte	33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,9,169,12,3
	.word	16384
	.byte	33
	.byte	'Ifx_CPU_DMS',0,9,177,12,3
	.word	28226
	.byte	33
	.byte	'Ifx_CPU_DPRE',0,9,185,12,3
	.word	24345
	.byte	33
	.byte	'Ifx_CPU_DPR_L',0,9,193,12,3
	.word	23679
	.byte	33
	.byte	'Ifx_CPU_DPR_U',0,9,201,12,3
	.word	23786
	.byte	33
	.byte	'Ifx_CPU_DPWE',0,9,209,12,3
	.word	24450
	.byte	33
	.byte	'Ifx_CPU_DSTR',0,9,217,12,3
	.word	20586
	.byte	33
	.byte	'Ifx_CPU_EXEVT',0,9,225,12,3
	.word	27574
	.byte	33
	.byte	'Ifx_CPU_FCX',0,9,233,12,3
	.word	30026
	.byte	33
	.byte	'Ifx_CPU_FLASHCON0',0,9,241,12,3
	.word	9866
	.byte	33
	.byte	'Ifx_CPU_FLASHCON1',0,9,249,12,3
	.word	10065
	.byte	33
	.byte	'Ifx_CPU_FLASHCON2',0,9,129,13,3
	.word	10373
	.byte	33
	.byte	'Ifx_CPU_FLASHCON3',0,9,137,13,3
	.word	10686
	.byte	33
	.byte	'Ifx_CPU_FLASHCON4',0,9,145,13,3
	.word	10795
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,9,153,13,3
	.word	22906
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,9,161,13,3
	.word	23158
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,9,169,13,3
	.word	22993
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,9,177,13,3
	.word	23249
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,9,185,13,3
	.word	23340
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,9,193,13,3
	.word	23431
	.byte	33
	.byte	'Ifx_CPU_ICNT',0,9,201,13,3
	.word	26866
	.byte	33
	.byte	'Ifx_CPU_ICR',0,9,209,13,3
	.word	29906
	.byte	33
	.byte	'Ifx_CPU_ISP',0,9,217,13,3
	.word	29750
	.byte	33
	.byte	'Ifx_CPU_KRST0',0,9,225,13,3
	.word	10931
	.byte	33
	.byte	'Ifx_CPU_KRST1',0,9,233,13,3
	.word	11035
	.byte	33
	.byte	'Ifx_CPU_KRSTCLR',0,9,241,13,3
	.word	11141
	.byte	33
	.byte	'Ifx_CPU_LCX',0,9,249,13,3
	.word	30146
	.byte	33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,9,129,14,3
	.word	15549
	.byte	33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,9,137,14,3
	.word	16141
	.byte	33
	.byte	'Ifx_CPU_M1CNT',0,9,145,14,3
	.word	26971
	.byte	33
	.byte	'Ifx_CPU_M2CNT',0,9,153,14,3
	.word	27076
	.byte	33
	.byte	'Ifx_CPU_M3CNT',0,9,161,14,3
	.word	27181
	.byte	33
	.byte	'Ifx_CPU_OSEL',0,9,169,14,3
	.word	18845
	.byte	33
	.byte	'Ifx_CPU_PC',0,9,177,14,3
	.word	28934
	.byte	33
	.byte	'Ifx_CPU_PCON0',0,9,185,14,3
	.word	22013
	.byte	33
	.byte	'Ifx_CPU_PCON1',0,9,193,14,3
	.word	21772
	.byte	33
	.byte	'Ifx_CPU_PCON2',0,9,201,14,3
	.word	21885
	.byte	33
	.byte	'Ifx_CPU_PCXI',0,9,209,14,3
	.word	28615
	.byte	33
	.byte	'Ifx_CPU_PIEAR',0,9,217,14,3
	.word	22094
	.byte	33
	.byte	'Ifx_CPU_PIETR',0,9,225,14,3
	.word	22390
	.byte	33
	.byte	'Ifx_CPU_PMA0',0,9,233,14,3
	.word	19773
	.byte	33
	.byte	'Ifx_CPU_PMA1',0,9,241,14,3
	.word	19877
	.byte	33
	.byte	'Ifx_CPU_PMA2',0,9,249,14,3
	.word	19981
	.byte	33
	.byte	'Ifx_CPU_PSTR',0,9,129,15,3
	.word	21649
	.byte	33
	.byte	'Ifx_CPU_PSW',0,9,137,15,3
	.word	28834
	.byte	33
	.byte	'Ifx_CPU_RGN_ACCENA',0,9,145,15,3
	.word	11938
	.byte	33
	.byte	'Ifx_CPU_RGN_ACCENB',0,9,153,15,3
	.word	12522
	.byte	33
	.byte	'Ifx_CPU_RGN_LA',0,9,161,15,3
	.word	11258
	.byte	33
	.byte	'Ifx_CPU_RGN_UA',0,9,169,15,3
	.word	11364
	.byte	33
	.byte	'Ifx_CPU_SEGEN',0,9,177,15,3
	.word	19538
	.byte	33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,9,185,15,3
	.word	14375
	.byte	33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,9,193,15,3
	.word	14967
	.byte	33
	.byte	'Ifx_CPU_SMACON',0,9,201,15,3
	.word	20234
	.byte	33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,9,209,15,3
	.word	13198
	.byte	33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,9,217,15,3
	.word	13793
	.byte	33
	.byte	'Ifx_CPU_SWEVT',0,9,225,15,3
	.word	27906
	.byte	33
	.byte	'Ifx_CPU_SYSCON',0,9,233,15,3
	.word	29244
	.byte	33
	.byte	'Ifx_CPU_TASK_ASI',0,9,241,15,3
	.word	19658
	.byte	33
	.byte	'Ifx_CPU_TPS_CON',0,9,249,15,3
	.word	24652
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,9,129,16,3
	.word	25487
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,9,137,16,3
	.word	25087
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,9,145,16,3
	.word	24960
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,9,153,16,3
	.word	25359
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,9,161,16,3
	.word	25234
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,9,169,16,3
	.word	25852
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,9,177,16,3
	.word	25734
	.byte	33
	.byte	'Ifx_CPU_TPS_TIMER',0,9,185,16,3
	.word	24740
	.byte	33
	.byte	'Ifx_CPU_TRIG_ACC',0,9,193,16,3
	.word	28119
	.byte	33
	.byte	'Ifx_CPU_TR_ADR',0,9,201,16,3
	.word	26430
	.byte	33
	.byte	'Ifx_CPU_TR_EVT',0,9,209,16,3
	.word	26346
	.byte	14
	.word	12562
	.byte	33
	.byte	'Ifx_CPU_RGN',0,9,227,16,3
	.word	45662
	.byte	14
	.word	19349
	.byte	33
	.byte	'Ifx_CPU_BLK',0,9,247,16,3
	.word	45688
	.byte	14
	.word	23471
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP',0,9,143,17,3
	.word	45714
	.byte	14
	.word	23826
	.byte	33
	.byte	'Ifx_CPU_DPR',0,9,162,17,3
	.word	45745
	.byte	14
	.word	24108
	.byte	33
	.byte	'Ifx_CPU_CPR',0,9,181,17,3
	.word	45771
	.byte	14
	.word	24789
	.byte	33
	.byte	'Ifx_CPU_TPS',0,9,200,17,3
	.word	45797
	.byte	14
	.word	25892
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM',0,9,224,17,3
	.word	45823
	.byte	14
	.word	26470
	.byte	33
	.byte	'Ifx_CPU_TR',0,9,243,17,3
	.word	45855
	.byte	14
	.word	30486
	.byte	33
	.byte	'Ifx_CPU',0,9,210,19,3
	.word	45880
	.byte	17,10,124,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_2',0,2,18
	.byte	'IfxCpu_Id_3',0,3,18
	.byte	'IfxCpu_Id_4',0,4,18
	.byte	'IfxCpu_Id_6',0,6,18
	.byte	'IfxCpu_Id_none',0,7,0,33
	.byte	'IfxCpu_Id',0,10,133,1,3
	.word	45902
	.byte	33
	.byte	'IfxCpu_ResourceCpu',0,10,170,1,3
	.word	35594
	.byte	15,48
	.word	39724
	.byte	16,5,0,20
	.word	46056
	.byte	36
	.byte	'IfxCpu_cfg_indexMap',0,10,176,1,41
	.word	46065
	.byte	1,1,33
	.byte	'Ifx_SRC_SRCR_Bits',0,13,85,3
	.word	36140
	.byte	33
	.byte	'Ifx_SRC_SRCR',0,13,98,3
	.word	36430
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,13,110,25,4,13
	.byte	'SB',0
	.word	36430
	.byte	4,2,35,0,0,14
	.word	46148
	.byte	33
	.byte	'Ifx_SRC_CPU_CPU',0,13,113,3
	.word	46183
	.byte	15,24
	.word	46148
	.byte	16,5,0,14
	.word	46212
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,13,128,1,25,24,13
	.byte	'CPU',0
	.word	46221
	.byte	24,2,35,0,0,14
	.word	46226
	.byte	33
	.byte	'Ifx_SRC_CPU',0,13,131,1,3
	.word	46259
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,13,146,1,25,4,13
	.byte	'SR',0
	.word	36430
	.byte	4,2,35,0,0,14
	.word	46285
	.byte	33
	.byte	'Ifx_SRC_AGBT_AGBT',0,13,149,1,3
	.word	46323
	.byte	15,4
	.word	46285
	.byte	16,0,0,14
	.word	46355
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,13,164,1,25,4,13
	.byte	'AGBT',0
	.word	46364
	.byte	4,2,35,0,0,14
	.word	46369
	.byte	33
	.byte	'Ifx_SRC_AGBT',0,13,167,1,3
	.word	46404
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,13,182,1,25,4,13
	.byte	'SR',0
	.word	36430
	.byte	4,2,35,0,0,14
	.word	46431
	.byte	33
	.byte	'Ifx_SRC_XBAR_XBAR',0,13,185,1,3
	.word	46469
	.byte	15,12
	.word	46431
	.byte	16,2,0,14
	.word	46501
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,13,200,1,25,12,13
	.byte	'XBAR',0
	.word	46510
	.byte	12,2,35,0,0,14
	.word	46515
	.byte	33
	.byte	'Ifx_SRC_XBAR',0,13,203,1,3
	.word	46550
	.byte	15,8
	.word	36430
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,13,218,1,25,8,13
	.byte	'SR',0
	.word	46577
	.byte	8,2,35,0,0,14
	.word	46586
	.byte	33
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,13,221,1,3
	.word	46632
	.byte	14
	.word	46586
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,13,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	46672
	.byte	8,2,35,0,0,14
	.word	46677
	.byte	33
	.byte	'Ifx_SRC_CERBERUS',0,13,239,1,3
	.word	46720
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,13,254,1,25,12,13
	.byte	'TX',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	36430
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	36430
	.byte	4,2,35,8,0,14
	.word	46751
	.byte	33
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,13,131,2,3
	.word	46818
	.byte	15,144,1
	.word	46751
	.byte	16,11,0,14
	.word	46854
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,13,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	46864
	.byte	144,1,2,35,0,0,14
	.word	46869
	.byte	33
	.byte	'Ifx_SRC_ASCLIN',0,13,149,2,3
	.word	46910
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,13,164,2,25,20,13
	.byte	'TX',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	36430
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	36430
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	36430
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	36430
	.byte	4,2,35,16,0,14
	.word	46939
	.byte	33
	.byte	'Ifx_SRC_QSPI_QSPI',0,13,171,2,3
	.word	47025
	.byte	15,120
	.word	46939
	.byte	16,5,0,14
	.word	47057
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,13,186,2,25,120,13
	.byte	'QSPI',0
	.word	47066
	.byte	120,2,35,0,0,14
	.word	47071
	.byte	33
	.byte	'Ifx_SRC_QSPI',0,13,189,2,3
	.word	47106
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,13,204,2,25,4,13
	.byte	'SR',0
	.word	36430
	.byte	4,2,35,0,0,14
	.word	47133
	.byte	33
	.byte	'Ifx_SRC_HSCT_HSCT',0,13,207,2,3
	.word	47171
	.byte	15,8
	.word	47133
	.byte	16,1,0,14
	.word	47203
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,13,222,2,25,8,13
	.byte	'HSCT',0
	.word	47212
	.byte	8,2,35,0,0,14
	.word	47217
	.byte	33
	.byte	'Ifx_SRC_HSCT',0,13,225,2,3
	.word	47252
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,13,240,2,25,16,13
	.byte	'COK',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	36430
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	36430
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	36430
	.byte	4,2,35,12,0,14
	.word	47279
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,13,246,2,3
	.word	47360
	.byte	15,64
	.word	47279
	.byte	16,3,0,14
	.word	47395
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,13,133,3,25,68,13
	.byte	'CH',0
	.word	47404
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	36430
	.byte	4,2,35,64,0,14
	.word	47409
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL',0,13,137,3,3
	.word	47460
	.byte	15,136,1
	.word	47409
	.byte	16,1,0,14
	.word	47492
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,13,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	47502
	.byte	136,1,2,35,0,0,14
	.word	47507
	.byte	33
	.byte	'Ifx_SRC_HSSL',0,13,155,3,3
	.word	47544
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,13,170,3,25,16,13
	.byte	'DTR',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	36430
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	36430
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2909
	.byte	4,2,35,12,0,14
	.word	47571
	.byte	33
	.byte	'Ifx_SRC_I2C_I2C',0,13,176,3,3
	.word	47652
	.byte	15,32
	.word	47571
	.byte	16,1,0,14
	.word	47682
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,13,191,3,25,32,13
	.byte	'I2C',0
	.word	47691
	.byte	32,2,35,0,0,14
	.word	47696
	.byte	33
	.byte	'Ifx_SRC_I2C',0,13,194,3,3
	.word	47729
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,13,209,3,25,4,13
	.byte	'SR',0
	.word	36430
	.byte	4,2,35,0,0,14
	.word	47755
	.byte	33
	.byte	'Ifx_SRC_SENT_SENT',0,13,212,3,3
	.word	47793
	.byte	15,40
	.word	47755
	.byte	16,9,0,14
	.word	47825
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,13,227,3,25,40,13
	.byte	'SENT',0
	.word	47834
	.byte	40,2,35,0,0,14
	.word	47839
	.byte	33
	.byte	'Ifx_SRC_SENT',0,13,230,3,3
	.word	47874
	.byte	15,20
	.word	36430
	.byte	16,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,13,245,3,25,20,13
	.byte	'SR',0
	.word	47901
	.byte	20,2,35,0,0,14
	.word	47910
	.byte	33
	.byte	'Ifx_SRC_MSC_MSC',0,13,248,3,3
	.word	47946
	.byte	15,80
	.word	47910
	.byte	16,3,0,14
	.word	47976
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,13,135,4,25,80,13
	.byte	'MSC',0
	.word	47985
	.byte	80,2,35,0,0,14
	.word	47990
	.byte	33
	.byte	'Ifx_SRC_MSC',0,13,138,4,3
	.word	48023
	.byte	15,16
	.word	36430
	.byte	16,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,13,153,4,25,16,13
	.byte	'SR',0
	.word	48049
	.byte	16,2,35,0,0,14
	.word	48058
	.byte	33
	.byte	'Ifx_SRC_CCU6_CCU',0,13,156,4,3
	.word	48095
	.byte	15,32
	.word	48058
	.byte	16,1,0,14
	.word	48126
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,13,171,4,25,32,13
	.byte	'CCU',0
	.word	48135
	.byte	32,2,35,0,0,14
	.word	48140
	.byte	33
	.byte	'Ifx_SRC_CCU6',0,13,174,4,3
	.word	48174
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,13,189,4,25,24,13
	.byte	'CIRQ',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	36430
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	36430
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	36430
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	36430
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	36430
	.byte	4,2,35,20,0,14
	.word	48201
	.byte	33
	.byte	'Ifx_SRC_GPT12_GPT12',0,13,197,4,3
	.word	48303
	.byte	15,24
	.word	48201
	.byte	16,0,0,14
	.word	48337
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,13,212,4,25,24,13
	.byte	'GPT12',0
	.word	48346
	.byte	24,2,35,0,0,14
	.word	48351
	.byte	33
	.byte	'Ifx_SRC_GPT12',0,13,215,4,3
	.word	48388
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,13,230,4,25,8,13
	.byte	'SR',0
	.word	46577
	.byte	8,2,35,0,0,14
	.word	48416
	.byte	33
	.byte	'Ifx_SRC_STM_STM',0,13,233,4,3
	.word	48452
	.byte	15,48
	.word	48416
	.byte	16,5,0,14
	.word	48482
	.byte	10
	.byte	'_Ifx_SRC_STM',0,13,248,4,25,48,13
	.byte	'STM',0
	.word	48491
	.byte	48,2,35,0,0,14
	.word	48496
	.byte	33
	.byte	'Ifx_SRC_STM',0,13,251,4,3
	.word	48529
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,13,138,5,25,4,13
	.byte	'SR',0
	.word	36430
	.byte	4,2,35,0,0,14
	.word	48555
	.byte	33
	.byte	'Ifx_SRC_FCE_FCE0',0,13,141,5,3
	.word	48592
	.byte	14
	.word	48555
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,13,156,5,25,4,13
	.byte	'FCE0',0
	.word	48623
	.byte	4,2,35,0,0,14
	.word	48628
	.byte	33
	.byte	'Ifx_SRC_FCE',0,13,159,5,3
	.word	48662
	.byte	15,32
	.word	691
	.byte	16,31,0,15,128,4
	.word	36430
	.byte	16,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,13,174,5,25,176,4,13
	.byte	'ERR',0
	.word	48049
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	48688
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	48697
	.byte	128,4,2,35,48,0,14
	.word	48707
	.byte	33
	.byte	'Ifx_SRC_DMA_DMA',0,13,179,5,3
	.word	48779
	.byte	15,176,4
	.word	48707
	.byte	16,0,0,14
	.word	48809
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,13,194,5,25,176,4,13
	.byte	'DMA',0
	.word	48819
	.byte	176,4,2,35,0,0,14
	.word	48824
	.byte	33
	.byte	'Ifx_SRC_DMA',0,13,197,5,3
	.word	48859
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,13,212,5,25,8,13
	.byte	'ERR',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	36430
	.byte	4,2,35,4,0,14
	.word	48885
	.byte	33
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,13,216,5,3
	.word	48939
	.byte	15,8
	.word	48885
	.byte	16,0,0,14
	.word	48973
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,13,231,5,25,8,13
	.byte	'SDMMC',0
	.word	48982
	.byte	8,2,35,0,0,14
	.word	48987
	.byte	33
	.byte	'Ifx_SRC_SDMMC',0,13,234,5,3
	.word	49024
	.byte	15,40
	.word	36430
	.byte	16,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,13,249,5,25,40,13
	.byte	'SR',0
	.word	49052
	.byte	40,2,35,0,0,14
	.word	49061
	.byte	33
	.byte	'Ifx_SRC_GETH_GETH',0,13,252,5,3
	.word	49099
	.byte	15,40
	.word	49061
	.byte	16,0,0,14
	.word	49131
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,13,139,6,25,40,13
	.byte	'GETH',0
	.word	49140
	.byte	40,2,35,0,0,14
	.word	49145
	.byte	33
	.byte	'Ifx_SRC_GETH',0,13,142,6,3
	.word	49180
	.byte	15,64
	.word	36430
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,13,157,6,25,64,13
	.byte	'INT',0
	.word	49207
	.byte	64,2,35,0,0,14
	.word	49216
	.byte	33
	.byte	'Ifx_SRC_CAN_CAN',0,13,160,6,3
	.word	49253
	.byte	15,192,1
	.word	49216
	.byte	16,2,0,14
	.word	49283
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,13,175,6,25,192,1,13
	.byte	'CAN',0
	.word	49293
	.byte	192,1,2,35,0,0,14
	.word	49298
	.byte	33
	.byte	'Ifx_SRC_CAN',0,13,178,6,3
	.word	49333
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,13,193,6,25,16,13
	.byte	'SR0',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	36430
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	36430
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	36430
	.byte	4,2,35,12,0,14
	.word	49359
	.byte	33
	.byte	'Ifx_SRC_VADC_G',0,13,199,6,3
	.word	49434
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,13,214,6,25,4,13
	.byte	'SR0',0
	.word	36430
	.byte	4,2,35,0,0,14
	.word	49463
	.byte	33
	.byte	'Ifx_SRC_VADC_FC',0,13,217,6,3
	.word	49500
	.byte	15,192,1
	.word	49359
	.byte	16,11,0,14
	.word	49530
	.byte	15,32
	.word	49463
	.byte	16,7,0,14
	.word	49545
	.byte	15,32
	.word	49359
	.byte	16,1,0,14
	.word	49559
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,13,233,6,25,128,2,13
	.byte	'G',0
	.word	49540
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	49554
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	49568
	.byte	32,3,35,224,1,0,14
	.word	49573
	.byte	33
	.byte	'Ifx_SRC_VADC',0,13,238,6,3
	.word	49633
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,13,253,6,25,8,13
	.byte	'SRM',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	36430
	.byte	4,2,35,4,0,14
	.word	49660
	.byte	33
	.byte	'Ifx_SRC_DSADC_DSADC',0,13,129,7,3
	.word	49714
	.byte	15,112
	.word	49660
	.byte	16,13,0,14
	.word	49748
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,13,144,7,25,112,13
	.byte	'DSADC',0
	.word	49757
	.byte	112,2,35,0,0,14
	.word	49762
	.byte	33
	.byte	'Ifx_SRC_DSADC',0,13,147,7,3
	.word	49799
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,13,162,7,25,48,13
	.byte	'INT0',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	36430
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	36430
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	36430
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	36430
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	36430
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	36430
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	36430
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	36430
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	36430
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4729
	.byte	8,2,35,40,0,14
	.word	49827
	.byte	33
	.byte	'Ifx_SRC_ERAY_ERAY',0,13,175,7,3
	.word	50022
	.byte	15,96
	.word	49827
	.byte	16,1,0,14
	.word	50054
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,13,190,7,25,96,13
	.byte	'ERAY',0
	.word	50063
	.byte	96,2,35,0,0,14
	.word	50068
	.byte	33
	.byte	'Ifx_SRC_ERAY',0,13,193,7,3
	.word	50103
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,13,208,7,25,8,13
	.byte	'HSM',0
	.word	46577
	.byte	8,2,35,0,0,14
	.word	50130
	.byte	33
	.byte	'Ifx_SRC_HSM_HSM',0,13,211,7,3
	.word	50167
	.byte	15,8
	.word	50130
	.byte	16,0,0,14
	.word	50197
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,13,226,7,25,8,13
	.byte	'HSM',0
	.word	50206
	.byte	8,2,35,0,0,14
	.word	50211
	.byte	33
	.byte	'Ifx_SRC_HSM',0,13,229,7,3
	.word	50244
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,13,244,7,25,16,13
	.byte	'SCUERU',0
	.word	48049
	.byte	16,2,35,0,0,14
	.word	50270
	.byte	33
	.byte	'Ifx_SRC_SCU',0,13,247,7,3
	.word	50306
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,13,134,8,25,4,13
	.byte	'SR',0
	.word	36430
	.byte	4,2,35,0,0,14
	.word	50332
	.byte	33
	.byte	'Ifx_SRC_PMS_PMS',0,13,137,8,3
	.word	50368
	.byte	15,16
	.word	50332
	.byte	16,3,0,14
	.word	50398
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,13,152,8,25,16,13
	.byte	'PMS',0
	.word	50407
	.byte	16,2,35,0,0,14
	.word	50412
	.byte	33
	.byte	'Ifx_SRC_PMS',0,13,155,8,3
	.word	50445
	.byte	15,12
	.word	36430
	.byte	16,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,13,170,8,25,12,13
	.byte	'SR',0
	.word	50471
	.byte	12,2,35,0,0,14
	.word	50480
	.byte	33
	.byte	'Ifx_SRC_SMU_SMU',0,13,173,8,3
	.word	50516
	.byte	15,12
	.word	50480
	.byte	16,0,0,14
	.word	50546
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,13,188,8,25,12,13
	.byte	'SMU',0
	.word	50555
	.byte	12,2,35,0,0,14
	.word	50560
	.byte	33
	.byte	'Ifx_SRC_SMU',0,13,191,8,3
	.word	50593
	.byte	15,32
	.word	36430
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,13,206,8,25,32,13
	.byte	'SR',0
	.word	50619
	.byte	32,2,35,0,0,14
	.word	50628
	.byte	33
	.byte	'Ifx_SRC_PSI5_PSI5',0,13,209,8,3
	.word	50666
	.byte	15,32
	.word	50628
	.byte	16,0,0,14
	.word	50698
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,13,224,8,25,32,13
	.byte	'PSI5',0
	.word	50707
	.byte	32,2,35,0,0,14
	.word	50712
	.byte	33
	.byte	'Ifx_SRC_PSI5',0,13,227,8,3
	.word	50747
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,13,242,8,25,12,13
	.byte	'BFR',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	36430
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	36430
	.byte	4,2,35,8,0,14
	.word	50774
	.byte	33
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,13,247,8,3
	.word	50843
	.byte	14
	.word	50774
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,13,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	50878
	.byte	12,2,35,0,0,14
	.word	50883
	.byte	33
	.byte	'Ifx_SRC_HSPDM',0,13,137,9,3
	.word	50921
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,13,152,9,25,24,13
	.byte	'LI0',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	36430
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	36430
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	36430
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	36430
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	36430
	.byte	4,2,35,20,0,14
	.word	50949
	.byte	33
	.byte	'Ifx_SRC_DAM_DAM',0,13,160,9,3
	.word	51050
	.byte	15,48
	.word	50949
	.byte	16,1,0,14
	.word	51080
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,13,175,9,25,48,13
	.byte	'DAM',0
	.word	51089
	.byte	48,2,35,0,0,14
	.word	51094
	.byte	33
	.byte	'Ifx_SRC_DAM',0,13,178,9,3
	.word	51127
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,13,193,9,25,32,13
	.byte	'SR',0
	.word	50619
	.byte	32,2,35,0,0,14
	.word	51153
	.byte	33
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,13,196,9,3
	.word	51193
	.byte	15,32
	.word	51153
	.byte	16,0,0,14
	.word	51227
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,13,211,9,25,32,13
	.byte	'PSI5S',0
	.word	51236
	.byte	32,2,35,0,0,14
	.word	51241
	.byte	33
	.byte	'Ifx_SRC_PSI5S',0,13,214,9,3
	.word	51278
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,13,229,9,25,8,13
	.byte	'ERR',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	36430
	.byte	4,2,35,4,0,14
	.word	51306
	.byte	33
	.byte	'Ifx_SRC_RIF_RIF',0,13,233,9,3
	.word	51356
	.byte	15,16
	.word	51306
	.byte	16,1,0,14
	.word	51386
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,13,248,9,25,16,13
	.byte	'RIF',0
	.word	51395
	.byte	16,2,35,0,0,14
	.word	51400
	.byte	33
	.byte	'Ifx_SRC_RIF',0,13,251,9,3
	.word	51433
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,13,138,10,25,8,13
	.byte	'INT',0
	.word	36430
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	36430
	.byte	4,2,35,4,0,14
	.word	51459
	.byte	33
	.byte	'Ifx_SRC_SPU_SPU',0,13,142,10,3
	.word	51509
	.byte	15,16
	.word	51459
	.byte	16,1,0,14
	.word	51539
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,13,157,10,25,16,13
	.byte	'SPU',0
	.word	51548
	.byte	16,2,35,0,0,14
	.word	51553
	.byte	33
	.byte	'Ifx_SRC_SPU',0,13,160,10,3
	.word	51586
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,13,175,10,25,32,13
	.byte	'SR',0
	.word	50619
	.byte	32,2,35,0,0,14
	.word	51612
	.byte	33
	.byte	'Ifx_SRC_GPSR_GPSR',0,13,178,10,3
	.word	51650
	.byte	15,192,1
	.word	51612
	.byte	16,5,0,14
	.word	51682
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,13,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	51692
	.byte	192,1,2,35,0,0,14
	.word	51697
	.byte	33
	.byte	'Ifx_SRC_GPSR',0,13,196,10,3
	.word	51734
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	51761
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	52320
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	52399
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	52959
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	516
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	53040
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	691
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	691
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	691
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	53257
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	53530
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,4,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10_Bits',0,4,206,1,3
	.word	53856
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,4,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11_Bits',0,4,213,1,3
	.word	53958
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	691
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	516
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,228,1,3
	.word	54060
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	691
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	516
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,248,1,3
	.word	54334
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	708
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	516
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,132,2,3
	.word	54703
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	516
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,143,2,3
	.word	54883
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,150,2,3
	.word	55052
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,157,2,3
	.word	55152
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,164,2,3
	.word	55252
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,171,2,3
	.word	55352
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	691
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	691
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,185,2,3
	.word	55452
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	708
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	708
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,200,2,3
	.word	55655
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	708
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	516
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,207,2,3
	.word	55887
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	539
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	539
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0_Bits',0,4,216,2,3
	.word	55989
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1_Bits',0,4,228,2,3
	.word	56117
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	691
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	691
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	516
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	691
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	691
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EICR_Bits',0,4,250,2,3
	.word	56306
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	691
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,147,3,3
	.word	56670
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	516
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,3,3
	.word	57109
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,164,3,16,4,11
	.byte	'AE',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	708
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_EISR_Bits',0,4,174,3,3
	.word	57320
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,177,3,16,4,11
	.byte	'POL',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	708
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	708
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_EMSR_Bits',0,4,187,3,3
	.word	57496
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	691
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	691
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,196,3,3
	.word	57690
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	708
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	516
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,204,3,3
	.word	57825
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,207,3,16,4,11
	.byte	'ARI',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,212,3,3
	.word	57961
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,215,3,16,4,11
	.byte	'EN0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	691
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	708
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	691
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	691
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,226,3,3
	.word	58072
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,229,3,16,4,11
	.byte	'STEP',0,2
	.word	708
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	691
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	708
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_FDR_Bits',0,4,237,3,3
	.word	58290
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,240,3,16,4,11
	.byte	'FS0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_FMR_Bits',0,4,132,4,3
	.word	58453
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_ID_Bits',0,4,140,4,3
	.word	58789
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_IGCR_Bits',0,4,167,4,3
	.word	58896
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,170,4,16,4,11
	.byte	'P0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_IN_Bits',0,4,175,4,3
	.word	59348
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_IOCR_Bits',0,4,185,4,3
	.word	59447
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	516
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	708
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,198,4,3
	.word	59597
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,201,4,16,4,11
	.byte	'SEED',0,4
	.word	516
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	691
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,208,4,3
	.word	59835
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	708
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	516
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,215,4,3
	.word	59996
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,221,4,3
	.word	60102
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,224,4,16,4,11
	.byte	'LS2',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	708
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	708
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,232,4,3
	.word	60188
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,235,4,16,4,11
	.byte	'LS3',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	708
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	708
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,243,4,3
	.word	60356
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	708
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	708
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,134,5,3
	.word	60524
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	691
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	708
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_MANID_Bits',0,4,142,5,3
	.word	60838
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,145,5,16,4,11
	.byte	'PS0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	708
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	708
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_OMR_Bits',0,4,153,5,3
	.word	60949
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	691
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	691
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	691
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	691
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	691
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,177,5,3
	.word	61107
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,180,5,16,4,11
	.byte	'P0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_OUT_Bits',0,4,185,5,3
	.word	61518
	.byte	33
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,204,5,3
	.word	37779
	.byte	33
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,216,5,3
	.word	38108
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC_Bits',0,4,224,5,3
	.word	61680
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,227,5,16,4,11
	.byte	'PD0',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	516
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDR_Bits',0,4,234,5,3
	.word	61791
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	516
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR_Bits',0,4,248,5,3
	.word	61924
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	708
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	691
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	691
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	5,0,2,35,3,0,33
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,134,6,3
	.word	62127
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	691
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	516
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,143,6,3
	.word	62367
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	516
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,156,6,3
	.word	62511
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	516
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,165,6,3
	.word	62733
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	516
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,174,6,3
	.word	62869
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	516
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,183,6,3
	.word	63005
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	516
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,192,6,3
	.word	63141
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	516
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,201,6,3
	.word	63277
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	516
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,210,6,3
	.word	63413
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	708
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	708
	.byte	12,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,227,6,3
	.word	63549
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	516
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	691
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,241,6,3
	.word	63821
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	708
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	708
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,135,7,3
	.word	64066
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	708
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	708
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,143,7,3
	.word	64454
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	691
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	691
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,157,7,3
	.word	64572
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	691
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	691
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	708
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,172,7,3
	.word	64815
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	691
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	691
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	708
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,189,7,3
	.word	65082
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	708
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,206,7,3
	.word	65341
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,212,7,3
	.word	65646
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	691
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,245,7,3
	.word	65727
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	539
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	539
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,254,7,3
	.word	66276
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,138,8,3
	.word	66406
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,141,8,16,4,11
	.byte	'AE',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	708
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SEISR_Bits',0,4,151,8,3
	.word	66597
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	708
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_STCON_Bits',0,4,161,8,3
	.word	66775
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,164,8,16,4,11
	.byte	'MEM',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,167,8,3
	.word	66926
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,170,8,16,4,11
	.byte	'MEM',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,173,8,3
	.word	66998
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,176,8,16,4,11
	.byte	'MEM',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,179,8,3
	.word	67070
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,182,8,16,4,11
	.byte	'MEM',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,185,8,3
	.word	67142
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,188,8,16,4,11
	.byte	'MEM',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,191,8,3
	.word	67214
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,194,8,16,4,11
	.byte	'MEM',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,197,8,3
	.word	67286
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	691
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	691
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,216,8,3
	.word	67358
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	708
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,224,8,3
	.word	67687
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,234,8,3
	.word	67807
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	691
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,249,8,3
	.word	67977
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	708
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	691
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	691
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,137,9,3
	.word	68240
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	691
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	516
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,144,9,3
	.word	68519
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	708
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,151,9,3
	.word	68623
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	516
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,164,9,3
	.word	68729
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	516
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,174,9,3
	.word	68952
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,199,9,3
	.word	69100
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,215,9,3
	.word	69588
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	516
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,225,9,3
	.word	69885
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	516
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,235,9,3
	.word	70033
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,244,9,3
	.word	555
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,10,3
	.word	730
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,10,3
	.word	996
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	539
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	539
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,10,3
	.word	70283
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	691
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,10,3
	.word	70409
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,10,16,4,11
	.byte	'AE',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	691
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,10,3
	.word	70661
	.byte	12,4,197,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51761
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN00',0,4,202,10,3
	.word	70880
	.byte	12,4,205,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52320
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01',0,4,210,10,3
	.word	70945
	.byte	12,4,213,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52399
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN10',0,4,218,10,3
	.word	71010
	.byte	12,4,221,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52959
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11',0,4,226,10,3
	.word	71075
	.byte	12,4,229,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53040
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS',0,4,234,10,3
	.word	71140
	.byte	12,4,237,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53257
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON0',0,4,242,10,3
	.word	71205
	.byte	12,4,245,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53530
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON1',0,4,250,10,3
	.word	71270
	.byte	12,4,253,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53856
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10',0,4,130,11,3
	.word	71335
	.byte	12,4,133,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53958
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11',0,4,138,11,3
	.word	71401
	.byte	12,4,141,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54060
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON2',0,4,146,11,3
	.word	71467
	.byte	12,4,149,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54334
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON3',0,4,154,11,3
	.word	71532
	.byte	12,4,157,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54703
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON4',0,4,162,11,3
	.word	71597
	.byte	12,4,165,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54883
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON5',0,4,170,11,3
	.word	71662
	.byte	12,4,173,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55052
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6',0,4,178,11,3
	.word	71727
	.byte	12,4,181,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55152
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7',0,4,186,11,3
	.word	71792
	.byte	12,4,189,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55252
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8',0,4,194,11,3
	.word	71857
	.byte	12,4,197,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55352
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9',0,4,202,11,3
	.word	71922
	.byte	12,4,205,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55452
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CHIPID',0,4,210,11,3
	.word	71987
	.byte	12,4,213,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55655
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCLIM',0,4,218,11,3
	.word	72051
	.byte	12,4,221,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55887
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT',0,4,226,11,3
	.word	72116
	.byte	12,4,229,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55989
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0',0,4,234,11,3
	.word	72182
	.byte	12,4,237,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56117
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1',0,4,242,11,3
	.word	72246
	.byte	12,4,245,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56306
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICR',0,4,250,11,3
	.word	72310
	.byte	12,4,253,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56670
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFILT',0,4,130,12,3
	.word	72372
	.byte	12,4,133,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57109
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR',0,4,138,12,3
	.word	72436
	.byte	12,4,141,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57320
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EISR',0,4,146,12,3
	.word	72498
	.byte	12,4,149,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57496
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSR',0,4,154,12,3
	.word	72560
	.byte	12,4,157,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57690
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSSW',0,4,162,12,3
	.word	72622
	.byte	12,4,165,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57825
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,170,12,3
	.word	72685
	.byte	12,4,173,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57961
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG',0,4,178,12,3
	.word	72758
	.byte	12,4,181,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58072
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EXTCON',0,4,186,12,3
	.word	72823
	.byte	12,4,189,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58290
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FDR',0,4,194,12,3
	.word	72887
	.byte	12,4,197,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58453
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FMR',0,4,202,12,3
	.word	72948
	.byte	12,4,205,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58789
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ID',0,4,210,12,3
	.word	73009
	.byte	12,4,213,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58896
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IGCR',0,4,218,12,3
	.word	73069
	.byte	12,4,221,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59348
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IN',0,4,226,12,3
	.word	73131
	.byte	12,4,229,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59447
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IOCR',0,4,234,12,3
	.word	73191
	.byte	12,4,237,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59597
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,242,12,3
	.word	73253
	.byte	12,4,245,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59835
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,250,12,3
	.word	73321
	.byte	12,4,253,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59996
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,130,13,3
	.word	73389
	.byte	12,4,133,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60102
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,138,13,3
	.word	73457
	.byte	12,4,141,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60188
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON0',0,4,146,13,3
	.word	73525
	.byte	12,4,149,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60356
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON1',0,4,154,13,3
	.word	73590
	.byte	12,4,157,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60524
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLTEST',0,4,162,13,3
	.word	73655
	.byte	12,4,165,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60838
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_MANID',0,4,170,13,3
	.word	73720
	.byte	12,4,173,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60949
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OMR',0,4,178,13,3
	.word	73783
	.byte	12,4,181,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61107
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OSCCON',0,4,186,13,3
	.word	73844
	.byte	12,4,189,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61518
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OUT',0,4,194,13,3
	.word	73908
	.byte	33
	.byte	'Ifx_SCU_OVCCON',0,4,202,13,3
	.word	38068
	.byte	33
	.byte	'Ifx_SCU_OVCENABLE',0,4,210,13,3
	.word	38263
	.byte	12,4,213,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61680
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC',0,4,218,13,3
	.word	74020
	.byte	12,4,221,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61791
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDR',0,4,226,13,3
	.word	74083
	.byte	12,4,229,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61924
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR',0,4,234,13,3
	.word	74144
	.byte	12,4,237,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62127
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON0',0,4,242,13,3
	.word	74206
	.byte	12,4,245,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62367
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1',0,4,250,13,3
	.word	74274
	.byte	12,4,253,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62511
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,130,14,3
	.word	74342
	.byte	12,4,133,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62733
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0',0,4,138,14,3
	.word	74410
	.byte	12,4,141,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62869
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1',0,4,146,14,3
	.word	74474
	.byte	12,4,149,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63005
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2',0,4,154,14,3
	.word	74538
	.byte	12,4,157,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63141
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3',0,4,162,14,3
	.word	74602
	.byte	12,4,165,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63277
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4',0,4,170,14,3
	.word	74666
	.byte	12,4,173,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63413
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5',0,4,178,14,3
	.word	74730
	.byte	12,4,181,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63549
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSTAT0',0,4,186,14,3
	.word	74794
	.byte	12,4,189,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63821
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWCR1',0,4,194,14,3
	.word	74859
	.byte	12,4,197,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64066
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR0',0,4,202,14,3
	.word	74924
	.byte	12,4,205,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64454
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR1',0,4,210,14,3
	.word	74990
	.byte	12,4,213,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64572
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR2',0,4,218,14,3
	.word	75056
	.byte	12,4,221,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64815
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR3',0,4,226,14,3
	.word	75122
	.byte	12,4,229,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65082
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON',0,4,234,14,3
	.word	75188
	.byte	12,4,237,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65341
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON2',0,4,242,14,3
	.word	75252
	.byte	12,4,245,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65646
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3',0,4,250,14,3
	.word	75317
	.byte	12,4,253,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65727
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTSTAT',0,4,130,15,3
	.word	75382
	.byte	12,4,133,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66276
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0',0,4,138,15,3
	.word	75447
	.byte	12,4,141,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66406
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1',0,4,146,15,3
	.word	75512
	.byte	12,4,149,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66597
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEISR',0,4,154,15,3
	.word	75577
	.byte	12,4,157,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66775
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STCON',0,4,162,15,3
	.word	75640
	.byte	12,4,165,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66926
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1',0,4,170,15,3
	.word	75703
	.byte	12,4,173,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66998
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2',0,4,178,15,3
	.word	75767
	.byte	12,4,181,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67070
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3',0,4,186,15,3
	.word	75831
	.byte	12,4,189,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67142
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4',0,4,194,15,3
	.word	75895
	.byte	12,4,197,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67214
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5',0,4,202,15,3
	.word	75959
	.byte	12,4,205,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67286
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6',0,4,210,15,3
	.word	76023
	.byte	12,4,213,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67358
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STSTAT',0,4,218,15,3
	.word	76087
	.byte	12,4,221,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67687
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWAPCTRL',0,4,226,15,3
	.word	76151
	.byte	12,4,229,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67807
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWRSTCON',0,4,234,15,3
	.word	76217
	.byte	12,4,237,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67977
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSCON',0,4,242,15,3
	.word	76283
	.byte	12,4,245,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68240
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,250,15,3
	.word	76347
	.byte	12,4,253,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68519
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,130,16,3
	.word	76415
	.byte	12,4,133,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68623
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,138,16,3
	.word	76483
	.byte	12,4,141,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68729
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,146,16,3
	.word	76551
	.byte	12,4,149,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68952
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR',0,4,154,16,3
	.word	76619
	.byte	12,4,157,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69100
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS0',0,4,162,16,3
	.word	76684
	.byte	12,4,165,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69588
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS1',0,4,170,16,3
	.word	76750
	.byte	12,4,173,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69885
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET',0,4,178,16,3
	.word	76816
	.byte	12,4,181,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70033
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT',0,4,186,16,3
	.word	76881
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,194,16,3
	.word	651
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,202,16,3
	.word	956
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,210,16,3
	.word	1187
	.byte	12,4,213,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70283
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0',0,4,218,16,3
	.word	77032
	.byte	12,4,221,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70409
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON1',0,4,226,16,3
	.word	77099
	.byte	12,4,229,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70661
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_SR',0,4,234,16,3
	.word	77166
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	72685
	.byte	4,2,35,0,0,14
	.word	77231
	.byte	33
	.byte	'Ifx_SCU_ESRCFGX',0,4,249,16,3
	.word	77272
	.byte	14
	.word	1227
	.byte	33
	.byte	'Ifx_SCU_WDTCPU',0,4,141,17,3
	.word	77302
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,156,17,25,12,13
	.byte	'CON0',0
	.word	77032
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	77099
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	77166
	.byte	4,2,35,8,0,14
	.word	77331
	.byte	33
	.byte	'Ifx_SCU_WDTS',0,4,161,17,3
	.word	77392
	.byte	15,8
	.word	77231
	.byte	16,1,0,14
	.word	77419
	.byte	15,20
	.word	691
	.byte	16,19,0,15,36
	.word	691
	.byte	16,35,0,15,16
	.word	72310
	.byte	16,3,0,15,16
	.word	73069
	.byte	16,3,0,15,72
	.word	1227
	.byte	16,5,0,14
	.word	77469
	.byte	14
	.word	77331
	.byte	15,176,2
	.word	691
	.byte	16,175,2,0,10
	.byte	'_Ifx_SCU',0,4,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	4729
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	73009
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2909
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	73844
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	76551
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	76347
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	76415
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	76483
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	74342
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	74206
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	74274
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	71205
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	71270
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	72887
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	72823
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	71467
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	71532
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	71597
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	71662
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	75382
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2909
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	75188
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	71140
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	76217
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	75252
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	75317
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2909
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	77428
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	72758
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	76283
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	71727
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	71792
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	71857
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	71922
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	71335
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	71401
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	2909
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	74083
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	73191
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	73908
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	73783
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	73131
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	24490
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	76087
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	75640
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	74410
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	74474
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	74538
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	74602
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	74666
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	74730
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	2909
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	74794
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	74859
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	24490
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	72560
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	72622
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	72116
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	72051
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	77433
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	76750
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	76881
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	76816
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	76619
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	76684
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	73525
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	73590
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	73655
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	71987
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	73720
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	2909
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	76151
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	77433
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	73253
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	73321
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	73389
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	73457
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	24490
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	75703
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	75767
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	74020
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4729
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	74924
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	74990
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	75056
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	75122
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	4100
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	75831
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	75895
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	75959
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	76023
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	24490
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	38263
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	38068
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	77442
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	72372
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	77451
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	72436
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	72948
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	74144
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	77460
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	24490
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	77478
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	4729
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	72182
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	72246
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	72498
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	77483
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	75447
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	75512
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	75577
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	77488
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	71075
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	71010
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	70945
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	70880
	.byte	4,3,35,252,7,0,14
	.word	77499
	.byte	33
	.byte	'Ifx_SCU',0,4,166,18,3
	.word	79620
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,19,68,16,4,11
	.byte	'EN0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_STM_ACCEN0_Bits',0,19,102,3
	.word	79642
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,19,105,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1_Bits',0,19,108,3
	.word	80199
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,19,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAP_Bits',0,19,114,3
	.word	80276
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,19,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV_Bits',0,19,120,3
	.word	80349
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,19,123,16,4,11
	.byte	'DISR',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	516
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_CLC_Bits',0,19,130,1,3
	.word	80426
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,19,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	691
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	691
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	691
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	691
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	691
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	691
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	691
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	691
	.byte	3,0,2,35,3,0,33
	.byte	'Ifx_STM_CMCON_Bits',0,19,143,1,3
	.word	80568
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,19,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CMP_Bits',0,19,149,1,3
	.word	80788
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,19,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	516
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_STM_ICR_Bits',0,19,162,1,3
	.word	80857
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,19,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_STM_ID_Bits',0,19,170,1,3
	.word	81060
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,19,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	516
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_ISCR_Bits',0,19,180,1,3
	.word	81164
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,19,183,1,16,4,11
	.byte	'RST',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST0_Bits',0,19,188,1,3
	.word	81315
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,19,191,1,16,4,11
	.byte	'RST',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	516
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST1_Bits',0,19,195,1,3
	.word	81426
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,19,198,1,16,4,11
	.byte	'CLR',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	516
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR_Bits',0,19,202,1,3
	.word	81518
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,19,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	516
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_STM_OCS_Bits',0,19,213,1,3
	.word	81614
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,19,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0_Bits',0,19,219,1,3
	.word	81782
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,19,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV_Bits',0,19,225,1,3
	.word	81855
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,19,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM1_Bits',0,19,231,1,3
	.word	81932
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,19,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM2_Bits',0,19,237,1,3
	.word	82005
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,19,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM3_Bits',0,19,243,1,3
	.word	82078
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,19,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM4_Bits',0,19,249,1,3
	.word	82152
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,19,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM5_Bits',0,19,255,1,3
	.word	82226
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,19,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM6_Bits',0,19,133,2,3
	.word	82300
	.byte	12,19,141,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79642
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN0',0,19,146,2,3
	.word	82374
	.byte	12,19,149,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80199
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1',0,19,154,2,3
	.word	82438
	.byte	12,19,157,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80276
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAP',0,19,162,2,3
	.word	82502
	.byte	12,19,165,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80349
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV',0,19,170,2,3
	.word	82563
	.byte	12,19,173,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80426
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CLC',0,19,178,2,3
	.word	82626
	.byte	12,19,181,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80568
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMCON',0,19,186,2,3
	.word	82687
	.byte	12,19,189,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80788
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMP',0,19,194,2,3
	.word	82750
	.byte	12,19,197,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80857
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ICR',0,19,202,2,3
	.word	82811
	.byte	12,19,205,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81060
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ID',0,19,210,2,3
	.word	82872
	.byte	12,19,213,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81164
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ISCR',0,19,218,2,3
	.word	82932
	.byte	12,19,221,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81315
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST0',0,19,226,2,3
	.word	82994
	.byte	12,19,229,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81426
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST1',0,19,234,2,3
	.word	83057
	.byte	12,19,237,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81518
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR',0,19,242,2,3
	.word	83120
	.byte	12,19,245,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81614
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_OCS',0,19,250,2,3
	.word	83185
	.byte	12,19,253,2,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81782
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0',0,19,130,3,3
	.word	83246
	.byte	12,19,133,3,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81855
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV',0,19,138,3,3
	.word	83308
	.byte	12,19,141,3,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81932
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM1',0,19,146,3,3
	.word	83372
	.byte	12,19,149,3,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82005
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM2',0,19,154,3,3
	.word	83434
	.byte	12,19,157,3,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82078
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM3',0,19,162,3,3
	.word	83496
	.byte	12,19,165,3,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82152
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM4',0,19,170,3,3
	.word	83558
	.byte	12,19,173,3,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82226
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM5',0,19,178,3,3
	.word	83620
	.byte	12,19,181,3,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82300
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM6',0,19,186,3,3
	.word	83682
	.byte	17,20,162,11,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,33
	.byte	'IfxScu_WDTCON1_IR',0,20,167,11,3
	.word	83744
	.byte	33
	.byte	'Ifx_P_ACCEN0_Bits',0,6,102,3
	.word	8257
	.byte	33
	.byte	'Ifx_P_ACCEN1_Bits',0,6,108,3
	.word	8170
	.byte	33
	.byte	'Ifx_P_ESR_Bits',0,6,130,1,3
	.word	4738
	.byte	33
	.byte	'Ifx_P_ID_Bits',0,6,138,1,3
	.word	2789
	.byte	33
	.byte	'Ifx_P_IN_Bits',0,6,160,1,3
	.word	3785
	.byte	33
	.byte	'Ifx_P_IOCR0_Bits',0,6,173,1,3
	.word	2918
	.byte	33
	.byte	'Ifx_P_IOCR12_Bits',0,6,186,1,3
	.word	3565
	.byte	33
	.byte	'Ifx_P_IOCR4_Bits',0,6,199,1,3
	.word	3133
	.byte	33
	.byte	'Ifx_P_IOCR8_Bits',0,6,212,1,3
	.word	3348
	.byte	33
	.byte	'Ifx_P_LPCR_Bits',0,6,231,1,3
	.word	7832
	.byte	33
	.byte	'Ifx_P_OMCR_Bits',0,6,253,1,3
	.word	7484
	.byte	33
	.byte	'Ifx_P_OMCR0_Bits',0,6,136,2,3
	.word	6471
	.byte	33
	.byte	'Ifx_P_OMCR12_Bits',0,6,146,2,3
	.word	6995
	.byte	33
	.byte	'Ifx_P_OMCR4_Bits',0,6,157,2,3
	.word	6645
	.byte	33
	.byte	'Ifx_P_OMCR8_Bits',0,6,168,2,3
	.word	6819
	.byte	33
	.byte	'Ifx_P_OMR_Bits',0,6,205,2,3
	.word	2218
	.byte	33
	.byte	'Ifx_P_OMSR_Bits',0,6,227,2,3
	.word	7151
	.byte	33
	.byte	'Ifx_P_OMSR0_Bits',0,6,237,2,3
	.word	5808
	.byte	33
	.byte	'Ifx_P_OMSR12_Bits',0,6,248,2,3
	.word	6296
	.byte	33
	.byte	'Ifx_P_OMSR4_Bits',0,6,131,3,3
	.word	5955
	.byte	33
	.byte	'Ifx_P_OMSR8_Bits',0,6,142,3,3
	.word	6124
	.byte	33
	.byte	'Ifx_P_OUT_Bits',0,6,164,3,3
	.word	1902
	.byte	33
	.byte	'Ifx_P_PCSR_Bits',0,6,187,3,3
	.word	5444
	.byte	33
	.byte	'Ifx_P_PDISC_Bits',0,6,209,3,3
	.word	5078
	.byte	33
	.byte	'Ifx_P_PDR0_Bits',0,6,230,3,3
	.word	4109
	.byte	33
	.byte	'Ifx_P_PDR1_Bits',0,6,251,3,3
	.word	4413
	.byte	33
	.byte	'Ifx_P_ACCEN0',0,6,136,4,3
	.word	8784
	.byte	33
	.byte	'Ifx_P_ACCEN1',0,6,144,4,3
	.word	8217
	.byte	33
	.byte	'Ifx_P_ESR',0,6,152,4,3
	.word	5029
	.byte	33
	.byte	'Ifx_P_ID',0,6,160,4,3
	.word	2869
	.byte	33
	.byte	'Ifx_P_IN',0,6,168,4,3
	.word	4060
	.byte	33
	.byte	'Ifx_P_IOCR0',0,6,176,4,3
	.word	3093
	.byte	33
	.byte	'Ifx_P_IOCR12',0,6,184,4,3
	.word	3745
	.byte	33
	.byte	'Ifx_P_IOCR4',0,6,192,4,3
	.word	3308
	.byte	33
	.byte	'Ifx_P_IOCR8',0,6,200,4,3
	.word	3525
	.byte	33
	.byte	'Ifx_P_LPCR',0,6,208,4,3
	.word	8112
	.byte	33
	.byte	'Ifx_P_OMCR',0,6,216,4,3
	.word	7792
	.byte	33
	.byte	'Ifx_P_OMCR0',0,6,224,4,3
	.word	6605
	.byte	33
	.byte	'Ifx_P_OMCR12',0,6,232,4,3
	.word	7111
	.byte	33
	.byte	'Ifx_P_OMCR4',0,6,240,4,3
	.word	6779
	.byte	33
	.byte	'Ifx_P_OMCR8',0,6,248,4,3
	.word	6955
	.byte	33
	.byte	'Ifx_P_OMR',0,6,128,5,3
	.word	2749
	.byte	33
	.byte	'Ifx_P_OMSR',0,6,136,5,3
	.word	7444
	.byte	33
	.byte	'Ifx_P_OMSR0',0,6,144,5,3
	.word	5915
	.byte	33
	.byte	'Ifx_P_OMSR12',0,6,152,5,3
	.word	6431
	.byte	33
	.byte	'Ifx_P_OMSR4',0,6,160,5,3
	.word	6084
	.byte	33
	.byte	'Ifx_P_OMSR8',0,6,168,5,3
	.word	6256
	.byte	33
	.byte	'Ifx_P_OUT',0,6,176,5,3
	.word	2178
	.byte	33
	.byte	'Ifx_P_PCSR',0,6,184,5,3
	.word	5768
	.byte	33
	.byte	'Ifx_P_PDISC',0,6,192,5,3
	.word	5404
	.byte	33
	.byte	'Ifx_P_PDR0',0,6,200,5,3
	.word	4373
	.byte	33
	.byte	'Ifx_P_PDR1',0,6,208,5,3
	.word	4689
	.byte	14
	.word	8824
	.byte	33
	.byte	'Ifx_P',0,6,128,6,3
	.word	85060
	.byte	17,5,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,33
	.byte	'IfxPort_ControlledBy',0,5,77,3
	.word	85080
	.byte	17,5,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,33
	.byte	'IfxPort_InputMode',0,5,87,3
	.word	85171
	.byte	17,5,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,33
	.byte	'IfxPort_LvdsMode',0,5,95,3
	.word	85322
	.byte	17,5,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,33
	.byte	'IfxPort_OutputIdx',0,5,136,1,3
	.word	85403
	.byte	17,5,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,33
	.byte	'IfxPort_OutputMode',0,5,145,1,3
	.word	85647
	.byte	17,5,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,33
	.byte	'IfxPort_PadDriver',0,5,165,1,3
	.word	85771
	.byte	17,5,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,33
	.byte	'IfxPort_PadSupply',0,5,173,1,3
	.word	86221
	.byte	17,5,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,33
	.byte	'IfxPort_PinFunctionMode',0,5,181,1,3
	.word	86301
	.byte	33
	.byte	'IfxPort_State',0,5,193,1,3
	.word	9404
	.byte	35,5,246,1,9,8,13
	.byte	'port',0
	.word	9399
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	691
	.byte	1,2,35,4,0,33
	.byte	'IfxPort_Pin',0,5,250,1,3
	.word	86431
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,21,68,16,4,11
	.byte	'EN0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_ACCEN0_Bits',0,21,102,3
	.word	86491
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,21,105,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN1_Bits',0,21,108,3
	.word	87048
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,21,111,16,4,11
	.byte	'DF0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_AD_Bits',0,21,145,1,3
	.word	87125
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,21,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SMU_AEX_Bits',0,21,176,1,3
	.word	87675
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,21,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	539
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	539
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_SMU_AEXCLR_Bits',0,21,207,1,3
	.word	88232
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,21,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	708
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_AFCNT_Bits',0,21,217,1,3
	.word	88828
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,21,220,1,16,4,11
	.byte	'SF0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	539
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AG_Bits',0,21,254,1,3
	.word	88968
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,21,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	539
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	539
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	539
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	539
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	539
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	539
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	539
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGC_Bits',0,21,142,2,3
	.word	89519
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,21,145,2,16,4,11
	.byte	'CF0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	539
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGCF_Bits',0,21,179,2,3
	.word	89781
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,21,182,2,16,4,11
	.byte	'FE0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	539
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGFSP_Bits',0,21,216,2,3
	.word	90336
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,21,219,2,16,4,11
	.byte	'DISR',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	516
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SMU_CLC_Bits',0,21,226,2,3
	.word	90893
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,21,229,2,16,4,11
	.byte	'CMD',0,4
	.word	539
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	539
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	539
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SMU_CMD_Bits',0,21,234,2,3
	.word	91036
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,21,237,2,16,4,11
	.byte	'SSM',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SMU_DBG_Bits',0,21,241,2,3
	.word	91139
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,21,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	539
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	539
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	539
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	539
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	539
	.byte	10,0,2,35,0,0,33
	.byte	'Ifx_SMU_FSP_Bits',0,21,252,2,3
	.word	91227
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,21,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SMU_ID_Bits',0,21,132,3,3
	.word	91382
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,21,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	539
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	539
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	539
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SMU_KEYS_Bits',0,21,140,3,3
	.word	91492
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,21,143,3,16,4,11
	.byte	'TGS',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	516
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SMU_OCS_Bits',0,21,153,3,3
	.word	91604
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,21,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	539
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	539
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	539
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	539
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	539
	.byte	9,0,2,35,0,0,33
	.byte	'Ifx_SMU_PCTL_Bits',0,21,167,3,3
	.word	91796
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,21,170,3,16,4,11
	.byte	'TE0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	539
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMCTL_Bits',0,21,204,3,3
	.word	92027
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,21,207,3,16,4,11
	.byte	'EF0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	539
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMEF_Bits',0,21,241,3,3
	.word	92731
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,21,244,3,16,4,11
	.byte	'STS0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	539
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMSTS_Bits',0,21,150,4,3
	.word	93433
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,21,153,4,16,4,11
	.byte	'GID0',0,4
	.word	539
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	539
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	539
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	539
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	539
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC00_Bits',0,21,161,4,3
	.word	94148
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,21,164,4,16,4,11
	.byte	'GID2',0,4
	.word	539
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	539
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	539
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	539
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	539
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC01_Bits',0,21,172,4,3
	.word	94316
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,21,175,4,16,4,11
	.byte	'GID0',0,4
	.word	539
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	539
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	539
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	539
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	539
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC10_Bits',0,21,183,4,3
	.word	94484
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,21,186,4,16,4,11
	.byte	'GID2',0,4
	.word	539
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	539
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	539
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	539
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	539
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	539
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC11_Bits',0,21,194,4,3
	.word	94652
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,21,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	539
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	539
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTC_Bits',0,21,203,4,3
	.word	94820
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,21,206,4,16,4,11
	.byte	'CMD',0,4
	.word	539
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	539
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	539
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	539
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	539
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_SMU_STS_Bits',0,21,220,4,3
	.word	94940
	.byte	12,21,228,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86491
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN0',0,21,233,4,3
	.word	95195
	.byte	12,21,236,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87048
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN1',0,21,241,4,3
	.word	95259
	.byte	12,21,244,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87125
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AD',0,21,249,4,3
	.word	95323
	.byte	12,21,252,4,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87675
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AEX',0,21,129,5,3
	.word	95383
	.byte	12,21,132,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88232
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AEXCLR',0,21,137,5,3
	.word	95444
	.byte	12,21,140,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88828
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AFCNT',0,21,145,5,3
	.word	95508
	.byte	12,21,148,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88968
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AG',0,21,153,5,3
	.word	95571
	.byte	12,21,156,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89519
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGC',0,21,161,5,3
	.word	95631
	.byte	12,21,164,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89781
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGCF',0,21,169,5,3
	.word	95692
	.byte	12,21,172,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90336
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGFSP',0,21,177,5,3
	.word	95754
	.byte	12,21,180,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90893
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_CLC',0,21,185,5,3
	.word	95817
	.byte	12,21,188,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91036
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_CMD',0,21,193,5,3
	.word	95878
	.byte	12,21,196,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91139
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_DBG',0,21,201,5,3
	.word	95939
	.byte	12,21,204,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91227
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_FSP',0,21,209,5,3
	.word	96000
	.byte	12,21,212,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91382
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ID',0,21,217,5,3
	.word	96061
	.byte	12,21,220,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91492
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_KEYS',0,21,225,5,3
	.word	96121
	.byte	12,21,228,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91604
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_OCS',0,21,233,5,3
	.word	96183
	.byte	12,21,236,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91796
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_PCTL',0,21,241,5,3
	.word	96244
	.byte	12,21,244,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92027
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMCTL',0,21,249,5,3
	.word	96306
	.byte	12,21,252,5,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92731
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMEF',0,21,129,6,3
	.word	96369
	.byte	12,21,132,6,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93433
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMSTS',0,21,137,6,3
	.word	96431
	.byte	12,21,140,6,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94148
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC00',0,21,145,6,3
	.word	96494
	.byte	12,21,148,6,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94316
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC01',0,21,153,6,3
	.word	96558
	.byte	12,21,156,6,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94484
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC10',0,21,161,6,3
	.word	96622
	.byte	12,21,164,6,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94652
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC11',0,21,169,6,3
	.word	96686
	.byte	12,21,172,6,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94820
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTC',0,21,177,6,3
	.word	96750
	.byte	12,21,180,6,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94940
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_STS',0,21,185,6,3
	.word	96811
	.byte	33
	.byte	'IfxScuCcu_Fsource',0,7,177,2,3
	.word	37300
	.byte	17,7,210,2,9,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,33
	.byte	'IfxScuCcu_LowPowerDivRatio',0,7,216,2,3
	.word	96899
	.byte	17,7,220,2,9,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,18
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,33
	.byte	'IfxScuCcu_ModulationAmplitude',0,7,229,2,3
	.word	97092
	.byte	17,7,254,3,9,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,33
	.byte	'IfxScuCcu_PllInputClockSelection',0,7,131,4,3
	.word	97393
	.byte	17,7,135,4,9,1,18
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,18
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,18
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,18
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,33
	.byte	'IfxScuCcu_Traprequest',0,7,141,4,3
	.word	97567
	.byte	17,7,147,4,9,1,18
	.byte	'IfxScuCcu_ModEn_disabled',0,0,18
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,33
	.byte	'IfxScuCcu_ModEn',0,7,151,4,3
	.word	97721
	.byte	35,7,162,4,9,6,13
	.byte	'pDivider',0
	.word	691
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	691
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	691
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	691
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	691
	.byte	1,2,35,4,0,33
	.byte	'IfxScuCcu_PerPllConfig',0,7,171,4,3
	.word	97806
	.byte	35,7,176,4,9,4,13
	.byte	'pDivider',0
	.word	691
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	691
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	691
	.byte	1,2,35,2,0,33
	.byte	'IfxScuCcu_SysPllConfig',0,7,181,4,3
	.word	97944
	.byte	35,7,189,4,9,8,13
	.byte	'value',0
	.word	310
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	310
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_CcuconRegConfig',0,7,193,4,3
	.word	98038
	.byte	35,7,197,4,9,6,13
	.byte	'k2Step',0
	.word	691
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	224
	.byte	4,2,35,2,0,33
	.byte	'IfxScuCcu_PllStepConfig',0,7,201,4,3
	.word	98109
	.byte	35,7,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	310
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	97393
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	97944
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	97806
	.byte	6,2,35,10,0,33
	.byte	'IfxScuCcu_pllsParameterConfig',0,7,211,4,3
	.word	98183
	.byte	35,7,219,4,9,8,13
	.byte	'value',0
	.word	310
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	310
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,7,223,4,3
	.word	98328
	.byte	35,7,231,4,9,80,13
	.byte	'ccucon0',0
	.word	98038
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	98038
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	98038
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	98038
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	98038
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	98038
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	98038
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	98038
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	98038
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	98038
	.byte	8,2,35,72,0,33
	.byte	'IfxScuCcu_ClockDistributionConfig',0,7,243,4,3
	.word	98404
	.byte	35,7,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	98183
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	224
	.byte	4,2,35,16,0,33
	.byte	'IfxScuCcu_InitialStepConfig',0,7,251,4,3
	.word	98626
	.byte	20
	.word	98109
	.byte	3
	.word	98712
	.byte	35,7,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	691
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	98717
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_PllThrottleConfig',0,7,131,5,3
	.word	98722
	.byte	35,7,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	97721
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	97092
	.byte	1,2,35,1,0,33
	.byte	'IfxScuCcu_Mod_Config',0,7,141,5,3
	.word	98804
	.byte	33
	.byte	'IfxCpu_spinLock',0,8,111,22
	.word	516
	.byte	33
	.byte	'IfxCpu_mutexLock',0,8,115,22
	.word	516
	.byte	33
	.byte	'IfxCpu_syncEvent',0,8,119,22
	.word	516
	.byte	33
	.byte	'IfxCpu_CoreMode',0,8,137,1,3
	.word	37452
	.byte	17,8,141,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,33
	.byte	'IfxCpu_CounterMode',0,8,145,1,3
	.word	98977
	.byte	33
	.byte	'IfxCpu_OverlayAddressMask',0,8,164,1,3
	.word	38668
	.byte	33
	.byte	'IfxCpu_OverlayMemorySelect',0,8,179,1,3
	.word	38303
	.byte	33
	.byte	'IfxCpu_ResetStatus',0,8,186,1,3
	.word	37600
	.byte	35,8,198,1,9,6,13
	.byte	'counter',0
	.word	310
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	691
	.byte	1,2,35,4,0,33
	.byte	'IfxCpu_Counter',0,8,202,1,3
	.word	99165
	.byte	35,8,210,1,9,32,13
	.byte	'instruction',0
	.word	99165
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	99165
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	99165
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	99165
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	99165
	.byte	6,2,35,24,0,33
	.byte	'IfxCpu_Perf',0,8,217,1,3
	.word	99231
	.byte	10
	.byte	'_Ifx_PMS_ACCEN0_Bits',0,22,68,16,4,11
	.byte	'EN0',0,4
	.word	539
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	539
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	539
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	539
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	539
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	539
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	539
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	539
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	539
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	539
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	539
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	539
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	539
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	539
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	539
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	539
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	539
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	539
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	539
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	539
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	539
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	539
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	539
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	539
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	539
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	539
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	539
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	539
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	539
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	539
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	539
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	539
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_PMS_ACCEN0_Bits',0,22,102,3
	.word	99349
	.byte	10
	.byte	'_Ifx_PMS_ACCEN1_Bits',0,22,105,16,4,11
	.byte	'reserved_0',0,4
	.word	539
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_PMS_ACCEN1_Bits',0,22,108,3
	.word	99906
	.byte	10
	.byte	'_Ifx_PMS_AGFSP_STDBY0_Bits',0,22,111,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'FE4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'FE5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'FE6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'FE7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'FE8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'FE9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'FE10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'FE11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'FE12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'FE13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'FE14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'FE15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	708
	.byte	13,2,2,35,2,11
	.byte	'BITPROT',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_AGFSP_STDBY0_Bits',0,22,133,1,3
	.word	99983
	.byte	10
	.byte	'_Ifx_PMS_AGFSP_STDBY1_Bits',0,22,136,1,16,4,11
	.byte	'FE0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'FE1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'FE2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'FE3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'FE4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'FE5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'FE7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'FE8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'FE9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'FE10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'FE11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'FE12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'FE13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'FE14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'FE15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'FE16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	708
	.byte	13,2,2,35,2,11
	.byte	'BITPROT',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_AGFSP_STDBY1_Bits',0,22,158,1,3
	.word	100413
	.byte	10
	.byte	'_Ifx_PMS_AG_STDBY0_Bits',0,22,161,1,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'SF4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'SF5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'SF6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'SF7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'SF8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'SF9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'SF10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'SF11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'SF12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'SF13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'SF14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'SF15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	708
	.byte	13,2,2,35,2,11
	.byte	'FSPERR',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_AG_STDBY0_Bits',0,22,183,1,3
	.word	100816
	.byte	10
	.byte	'_Ifx_PMS_AG_STDBY1_Bits',0,22,186,1,16,4,11
	.byte	'SF0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'SF1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'SF2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'SF3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'SF4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'SF5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'SF7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'SF8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'SF9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'SF10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'SF11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'SF12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'SF13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'SF14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'SF15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'SF16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	708
	.byte	13,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_AG_STDBY1_Bits',0,22,208,1,3
	.word	101240
	.byte	10
	.byte	'_Ifx_PMS_CMD_STDBY_Bits',0,22,211,1,16,4,11
	.byte	'SMUEN',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'FSP0EN',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'FSP1EN',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'ASCE',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	516
	.byte	26,2,2,35,0,11
	.byte	'BITPROT',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_CMD_STDBY_Bits',0,22,220,1,3
	.word	101641
	.byte	10
	.byte	'_Ifx_PMS_DTSLIM_Bits',0,22,223,1,16,4,11
	.byte	'LOWER',0,2
	.word	708
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	3,1,2,35,1,11
	.byte	'LLU',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	708
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_DTSLIM_Bits',0,22,232,1,3
	.word	101837
	.byte	10
	.byte	'_Ifx_PMS_DTSSTAT_Bits',0,22,235,1,16,4,11
	.byte	'RESULT',0,2
	.word	708
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	516
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_PMS_DTSSTAT_Bits',0,22,239,1,3
	.word	102020
	.byte	10
	.byte	'_Ifx_PMS_EVR33CON_Bits',0,22,242,1,16,4,11
	.byte	'SHVH33',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'SHHVEN',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'SHLVEN',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'SHVL33',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVR33CON_Bits',0,22,255,1,3
	.word	102120
	.byte	10
	.byte	'_Ifx_PMS_EVRADCSTAT_Bits',0,22,130,2,16,4,11
	.byte	'ADCCV',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'OVC',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'OV33',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'OVSWD',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'UVC',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'UV33',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'UVSWD',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRADCSTAT_Bits',0,22,142,2,3
	.word	102406
	.byte	10
	.byte	'_Ifx_PMS_EVROSCCTRL_Bits',0,22,145,2,16,4,11
	.byte	'OSCFTRIM',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	708
	.byte	10,0,2,35,0,11
	.byte	'OSCFPTRIM',0,1
	.word	691
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	708
	.byte	7,3,2,35,2,11
	.byte	'OSCTEMPOFFS',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'OSCTRIMEN',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVROSCCTRL_Bits',0,22,154,2,3
	.word	102644
	.byte	10
	.byte	'_Ifx_PMS_EVRRSTCON_Bits',0,22,157,2,16,4,11
	.byte	'RSTCTRIM',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'RST33TRIM',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'RSTSWDTRIM',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'RSTCOFF',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'BPRSTCOFF',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRRSTCON_Bits',0,22,170,2,3
	.word	102862
	.byte	10
	.byte	'_Ifx_PMS_EVRRSTSTAT_Bits',0,22,173,2,16,4,11
	.byte	'RSTC',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'RST33',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'RSTSWD',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'RSTCOFF',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	691
	.byte	3,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRRSTSTAT_Bits',0,22,184,2,3
	.word	103153
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF0_Bits',0,22,187,2,16,4,11
	.byte	'M0S0EN',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'M0S2EN',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'M0S3EN',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'M0S3CLIP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'M0S4EN',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'M0RAMPEN',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'M0SFRGET',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'M0SKIPEN',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'M0S3COEFF',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'M0S4COEFF',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'M0SRMPCOEFF',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'M0FGETCOEFF',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'M0S2COEFF',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'M0S2VINSRC',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'M0S2VOSRC',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'M0SRMPCOEFFFRAC',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF0_Bits',0,22,206,2,3
	.word	103398
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF1_Bits',0,22,209,2,16,4,11
	.byte	'M0VOCFLPF',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'M0VOCFINC',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'M0VOUT',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'M0VIN',0,2
	.word	708
	.byte	11,5,2,35,2,11
	.byte	'M0S3COEFFFRAC',0,1
	.word	691
	.byte	2,3,2,35,3,11
	.byte	'M0S2COEFFFRAC',0,1
	.word	691
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF1_Bits',0,22,218,2,3
	.word	103811
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF2_Bits',0,22,221,2,16,4,11
	.byte	'M1S0EN',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'M1S2EN',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'M1S3EN',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'M1S3CLIP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'M1S4EN',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'M1RAMPEN',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'M1SFRGET',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'M1SKIPEN',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'M1S3COEFF',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'M1S4COEFF',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'M1SRMPCOEFF',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'M1FGETCOEFF',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'M1S2COEFF',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'M1S2VINSRC',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'M1S2VOSRC',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF2_Bits',0,22,239,2,3
	.word	104020
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF3_Bits',0,22,242,2,16,4,11
	.byte	'M1VOCFLPF',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'M1VOCFINC',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'M1VOUT',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'M1VIN',0,2
	.word	708
	.byte	11,5,2,35,2,11
	.byte	'M1S3COEFFFRAC',0,1
	.word	691
	.byte	2,3,2,35,3,11
	.byte	'M1S2COEFFFRAC',0,1
	.word	691
	.byte	2,1,2,35,3,11
	.byte	'M1SRMPCOEFFFRAC',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF3_Bits',0,22,251,2,3
	.word	104414
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF4_Bits',0,22,254,2,16,4,11
	.byte	'M2S0EN',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'M2S2EN',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'M2S3EN',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'M2S3CLIP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'M2S4EN',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'M2RAMPEN',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'M2SFRGET',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'M2SKIPEN',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'M2S3COEFF',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'M2S4COEFF',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'M2SRMPCOEFF',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'M2FGETCOEFF',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'M2S2COEFF',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'M2S2VINSRC',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'M2S2VOSRC',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF4_Bits',0,22,144,3,3
	.word	104635
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF5_Bits',0,22,147,3,16,4,11
	.byte	'M2VOCFLPF',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'M2VOCFINC',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'M2VOUT',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'M2VIN',0,2
	.word	708
	.byte	11,5,2,35,2,11
	.byte	'M2S3COEFFFRAC',0,1
	.word	691
	.byte	2,3,2,35,3,11
	.byte	'M2S2COEFFFRAC',0,1
	.word	691
	.byte	2,1,2,35,3,11
	.byte	'M2SRMPCOEFFFRAC',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF5_Bits',0,22,156,3,3
	.word	105029
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF6_Bits',0,22,159,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF6_Bits',0,22,166,3,3
	.word	105250
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF7_Bits',0,22,169,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF7_Bits',0,22,175,3,3
	.word	105412
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF8_Bits',0,22,178,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF8_Bits',0,22,185,3,3
	.word	105555
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCOEFF9_Bits',0,22,188,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF9_Bits',0,22,194,3,3
	.word	105720
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL0_Bits',0,22,197,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	708
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,2
	.word	708
	.byte	12,4,2,35,2,11
	.byte	'NGOFF',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'PGOFF',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL0_Bits',0,22,205,3,3
	.word	105865
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL1_Bits',0,22,208,3,16,4,11
	.byte	'M0TOFF',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'M0TON',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'M0S0COEFF',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'M0DEADBD',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'M0ADCZB',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'M0SKIP',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'SYNCEN',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL1_Bits',0,22,219,3,3
	.word	106033
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL10_Bits',0,22,222,3,16,4,11
	.byte	'SHVH',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'SHVL',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	12,4,2,35,2,11
	.byte	'SHHVEN',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'SHLVEN',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL10_Bits',0,22,230,3,3
	.word	106267
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL11_Bits',0,22,233,3,16,4,11
	.byte	'DROOPVH',0,1
	.word	691
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	691
	.byte	3,0,2,35,0,11
	.byte	'DROOPVL',0,1
	.word	691
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	691
	.byte	3,0,2,35,1,11
	.byte	'SYNCMAXDEV',0,1
	.word	691
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	691
	.byte	3,0,2,35,2,11
	.byte	'SYNCHYST',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'SYNCMUXSEL',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL11_Bits',0,22,246,3,3
	.word	106448
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL2_Bits',0,22,249,3,16,4,11
	.byte	'LPBNDOFFSET',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'LPBNDWIDTH',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'LPLPFCOEFF',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'SDFREQLP',0,2
	.word	708
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'EVRCMOD',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL2_Bits',0,22,131,4,3
	.word	106746
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL3_Bits',0,22,134,4,16,4,11
	.byte	'M1TOFF',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'M1TON',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'M1S0COEFF',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'M1DEADBD',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'M1ADCZB',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'M1SKIP',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL3_Bits',0,22,143,4,3
	.word	106978
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL4_Bits',0,22,146,4,16,4,11
	.byte	'VOKCFG',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	708
	.byte	10,0,2,35,0,11
	.byte	'SDFREQST',0,2
	.word	708
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL4_Bits',0,22,152,4,3
	.word	107179
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL5_Bits',0,22,155,4,16,4,11
	.byte	'M2TOFF',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'M2TON',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'M2S0COEFF',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'M2DEADBD',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'M2ADCZB',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'M2SKIP',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL5_Bits',0,22,164,4,3
	.word	107327
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL6_Bits',0,22,167,4,16,4,11
	.byte	'SVINTH',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'SVOTH',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'SINCLO',0,1
	.word	691
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'SINCHI',0,1
	.word	691
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	708
	.byte	8,1,2,35,2,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL6_Bits',0,22,176,4,3
	.word	107528
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL7_Bits',0,22,179,4,16,4,11
	.byte	'DRVNI',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'DRVPCBF',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'DRVP',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'DRVSLOMODE',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	691
	.byte	6,0,2,35,1,11
	.byte	'DRVSPR',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'SYNCDIVFAC',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL7_Bits',0,22,190,4,3
	.word	107725
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL8_Bits',0,22,193,4,16,4,11
	.byte	'FBADCOFFS',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'FBADCSMP',0,1
	.word	691
	.byte	6,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'FBADCBLNK',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	691
	.byte	2,4,2,35,2,11
	.byte	'FBADCLPF',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'FBADCERR',0,1
	.word	691
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	2,4,2,35,3,11
	.byte	'FBADCLSB',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	691
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL8_Bits',0,22,207,4,3
	.word	107965
	.byte	10
	.byte	'_Ifx_PMS_EVRSDCTRL9_Bits',0,22,210,4,16,4,11
	.byte	'FFADCOFFS',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'FFADCLPF',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	516
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDCTRL9_Bits',0,22,216,4,3
	.word	108282
	.byte	10
	.byte	'_Ifx_PMS_EVRSDSTAT0_Bits',0,22,219,4,16,4,11
	.byte	'ADCFBCV',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'DPWMOUT',0,2
	.word	708
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSDSTAT0_Bits',0,22,225,4,3
	.word	108426
	.byte	10
	.byte	'_Ifx_PMS_EVRSTAT_Bits',0,22,228,4,16,4,11
	.byte	'EVRC',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'OVC',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'UVC',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'SYNCLCK',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'EVR33VOK',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	691
	.byte	3,3,2,35,1,11
	.byte	'RSTC',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'RST33',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'RSTSWD',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'EVRCSHLV',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'EVRCSHHV',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'EVR33SHLV',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'EVR33SHHV',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'SWDLVL',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'SDVOK',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'EVRCMOD',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'OVPRE',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'OVSB',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'OVDDM',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'UVPRE',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'UVSB',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'UVDDM',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRSTAT_Bits',0,22,130,5,3
	.word	108574
	.byte	10
	.byte	'_Ifx_PMS_EVRTRIM_Bits',0,22,133,5,16,4,11
	.byte	'EVR33VOUTSEL',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'EVR33VOUTTRIM',0,1
	.word	691
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'SDVOUTTRIM',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRTRIM_Bits',0,22,142,5,3
	.word	109134
	.byte	10
	.byte	'_Ifx_PMS_EVRTRIMSTAT_Bits',0,22,145,5,16,4,11
	.byte	'EVR33VOUTSEL',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'EVR33VOUTTRIM',0,1
	.word	691
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'SDVOUTTRIM',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_PMS_EVRTRIMSTAT_Bits',0,22,153,5,3
	.word	109339
	.byte	10
	.byte	'_Ifx_PMS_HSMOVMON_Bits',0,22,156,5,16,4,11
	.byte	'EVRCOVVAL',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'EVRCOFF',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'EVR33OFF',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'SWDOFF',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	4,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_HSMOVMON_Bits',0,22,166,5,3
	.word	109544
	.byte	10
	.byte	'_Ifx_PMS_HSMUVMON_Bits',0,22,169,5,16,4,11
	.byte	'EVRCUVVAL',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'EVRCOFF',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'EVR33OFF',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'SWDOFF',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'HSMFIL',0,1
	.word	691
	.byte	4,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_HSMUVMON_Bits',0,22,179,5,3
	.word	109764
	.byte	10
	.byte	'_Ifx_PMS_ID_Bits',0,22,182,5,16,4,11
	.byte	'MODREV',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_PMS_ID_Bits',0,22,187,5,3
	.word	109979
	.byte	10
	.byte	'_Ifx_PMS_MONBISTCTRL_Bits',0,22,190,5,16,4,11
	.byte	'TSTEN',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'TSTCLR',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	28,2,2,35,0,11
	.byte	'BITPROT',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_MONBISTCTRL_Bits',0,22,197,5,3
	.word	110086
	.byte	10
	.byte	'_Ifx_PMS_MONBISTSTAT_Bits',0,22,200,5,16,4,11
	.byte	'TSTOK',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'TSTRUN',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'TSTDONE',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'SMUERR',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'PMSERR',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_PMS_MONBISTSTAT_Bits',0,22,209,5,3
	.word	110252
	.byte	10
	.byte	'_Ifx_PMS_MONCTRL_Bits',0,22,212,5,16,4,11
	.byte	'EVRCOVMOD',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'PREOVMOD',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'EVRCUVMOD',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'PREUVMOD',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'VDDMOVMOD',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	691
	.byte	2,2,2,35,1,11
	.byte	'VDDMUVMOD',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'SBOVMOD',0,1
	.word	691
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'SBUVMOD',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_MONCTRL_Bits',0,22,229,5,3
	.word	110453
	.byte	10
	.byte	'_Ifx_PMS_MONFILT_Bits',0,22,232,5,16,4,11
	.byte	'EVRCFIL',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'PREFIL',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'EVR33FIL',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'VDDMFIL',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'SWDFIL',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'SBFIL',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	5,3,2,35,3,11
	.byte	'CLRFIL',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_MONFILT_Bits',0,22,244,5,3
	.word	110820
	.byte	10
	.byte	'_Ifx_PMS_MONSTAT1_Bits',0,22,247,5,16,4,11
	.byte	'ADCCV',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'ACTVCNT',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_PMS_MONSTAT1_Bits',0,22,254,5,3
	.word	111070
	.byte	10
	.byte	'_Ifx_PMS_MONSTAT2_Bits',0,22,129,6,16,4,11
	.byte	'ADCPRE',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'ADCSB',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'ADCVDDM',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_PMS_MONSTAT2_Bits',0,22,135,6,3
	.word	111227
	.byte	10
	.byte	'_Ifx_PMS_OTSC0_Bits',0,22,138,6,16,4,11
	.byte	'B0LAM',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'B0HAM',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'B1LAM',0,1
	.word	691
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'B1HAM',0,1
	.word	691
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_PMS_OTSC0_Bits',0,22,148,6,3
	.word	111365
	.byte	10
	.byte	'_Ifx_PMS_OTSC1_Bits',0,22,151,6,16,4,11
	.byte	'B0EC',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'B1EC',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'DMONAD',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'SMCDBG',0,1
	.word	691
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_PMS_OTSC1_Bits',0,22,159,6,3
	.word	111579
	.byte	10
	.byte	'_Ifx_PMS_OTSS_Bits',0,22,162,6,16,4,11
	.byte	'OTGB0',0,1
	.word	691
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'OTGB1',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_PMS_OTSS_Bits',0,22,169,6,3
	.word	111747
	.byte	10
	.byte	'_Ifx_PMS_OVMON_Bits',0,22,172,6,16,4,11
	.byte	'EVRCOVVAL',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_OVMON_Bits',0,22,180,6,3
	.word	111902
	.byte	10
	.byte	'_Ifx_PMS_OVMON2_Bits',0,22,183,6,16,4,11
	.byte	'PREOVVAL',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'VDDMOVVAL',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'SBOVVAL',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_OVMON2_Bits',0,22,191,6,3
	.word	112082
	.byte	10
	.byte	'_Ifx_PMS_PMSIEN_Bits',0,22,194,6,16,4,11
	.byte	'OVSWD',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'UVSWD',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'OV33',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'UV33',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'OVC',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'UVC',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'OVPRE',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'UVPRE',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'OVDDM',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'UVDDM',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'OVSB',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'UVSB',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'EVRCMOD',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'SDVOK',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'SYNCLCK',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'SWDLVL',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'WUTWKP',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'ESR0WKP',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'ESR1WKP',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'PINAWKP',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'PINBWKP',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'SCRINT',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'SCRRST',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'SCRECC',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'SCRWDT',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_PMS_PMSIEN_Bits',0,22,224,6,3
	.word	112261
	.byte	10
	.byte	'_Ifx_PMS_PMSWCR0_Bits',0,22,227,6,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'VEXTSTBYEN',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'VDDSTBYEN',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	691
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	691
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'STBYRAMSEL',0,1
	.word	691
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'BLNKFIL',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'ESR0WKEN',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'ESR1WKEN',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'PINAWKEN',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'PINBWKEN',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'PWRWKEN',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'SCRWKEN',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'PORSTWKEN',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'WUTWKEN',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_PMSWCR0_Bits',0,22,251,6,3
	.word	112822
	.byte	10
	.byte	'_Ifx_PMS_PMSWCR2_Bits',0,22,254,6,16,4,11
	.byte	'SCRINT',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	5,0,2,35,3,0,33
	.byte	'Ifx_PMS_PMSWCR2_Bits',0,22,139,7,3
	.word	113332
	.byte	10
	.byte	'_Ifx_PMS_PMSWCR3_Bits',0,22,142,7,16,4,11
	.byte	'WUTREL',0,4
	.word	516
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'WUTEN',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'BUSY',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'WUTDIV',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'WUTMODE',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_PMSWCR3_Bits',0,22,151,7,3
	.word	113601
	.byte	10
	.byte	'_Ifx_PMS_PMSWCR4_Bits',0,22,154,7,16,4,11
	.byte	'BPSCRSTREQ',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'BPPORSTREQ',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'PORSTREQ',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'SCRCLKSEL',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	708
	.byte	9,0,2,35,0,11
	.byte	'SCRCFG',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'BPSCREN',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'SCREN',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_PMS_PMSWCR4_Bits',0,22,167,7,3
	.word	113794
	.byte	10
	.byte	'_Ifx_PMS_PMSWCR5_Bits',0,22,170,7,16,4,11
	.byte	'BPTRISTREQ',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'TRISTREQ',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'ESR0TRIST',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'PORSTDF',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'DCDCSYNCO',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	516
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWCR5_Bits',0,22,180,7,3
	.word	114079
	.byte	10
	.byte	'_Ifx_PMS_PMSWSTAT_Bits',0,22,183,7,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'HWCFGEVR',0,1
	.word	691
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'HWCFG4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'HWCFG5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'TRIST',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'TESTMODE',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'ESR0TRIST',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	691
	.byte	2,5,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'SCR',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'SCRST',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'SCRCLK',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'PORSTREQ',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'WUTEN',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'WUTRUN',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'WUTMODE',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'ESR0INT',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'ESR1INT',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'PINAINT',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'PINBINT',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_PMSWSTAT_Bits',0,22,209,7,3
	.word	114307
	.byte	10
	.byte	'_Ifx_PMS_PMSWSTAT2_Bits',0,22,212,7,16,4,11
	.byte	'ESR0WKP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'PWRWKP',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'SCRWKP',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'PORSTWKP',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'WUTWKP',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'ESR0OVRUN',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'ESR1OVRUN',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'PINAOVRUN',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'PINBOVRUN',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'VDDSTBYEN',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'SCROVRUN',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'PORSTOVRUN',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'WUTOVRUN',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	691
	.byte	3,5,2,35,2,11
	.byte	'VEXTSTBYEN',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'BLNKFIL',0,1
	.word	691
	.byte	4,0,2,35,2,11
	.byte	'ESR0WKEN',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'ESR1WKEN',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'PINAWKEN',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'PINBWKEN',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'PWRWKEN',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'SCRWKEN',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'PORSTWKEN',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'WUTWKEN',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_PMSWSTAT2_Bits',0,22,241,7,3
	.word	114836
	.byte	10
	.byte	'_Ifx_PMS_PMSWSTATCLR_Bits',0,22,244,7,16,4,11
	.byte	'ESR0WKPCLR',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'PWRWKPCLR',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'SCRWKPCLR',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'PORSTWKPCLR',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'WUTWKPCLR',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'ESR0OVRUNCLR',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'PINAOVRUNCLR',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'PINBOVRUNCLR',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'SCROVRUNCLR',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'PORSTOVRUNCLR',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'WUTOVRUNCLR',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	708
	.byte	11,4,2,35,2,11
	.byte	'ESR0INTCLR',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'ESR1INTCLR',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'PINAINTCLR',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'PINBINTCLR',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_PMSWSTATCLR_Bits',0,22,140,8,3
	.word	115434
	.byte	10
	.byte	'_Ifx_PMS_PMSWUTCNT_Bits',0,22,143,8,16,4,11
	.byte	'WUTCNT',0,4
	.word	516
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_PMS_PMSWUTCNT_Bits',0,22,147,8,3
	.word	115996
	.byte	10
	.byte	'_Ifx_PMS_UVMON_Bits',0,22,150,8,16,4,11
	.byte	'EVRCUVVAL',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_UVMON_Bits',0,22,158,8,3
	.word	116100
	.byte	10
	.byte	'_Ifx_PMS_UVMON2_Bits',0,22,161,8,16,4,11
	.byte	'PREUVVAL',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'VDDMUVVAL',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'SBUVVAL',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'VDDMLVLSEL',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_PMS_UVMON2_Bits',0,22,169,8,3
	.word	116280
	.byte	12,22,177,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99349
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_ACCEN0',0,22,182,8,3
	.word	116458
	.byte	12,22,185,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99906
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_ACCEN1',0,22,190,8,3
	.word	116522
	.byte	12,22,193,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99983
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_AGFSP_STDBY0',0,22,198,8,3
	.word	116586
	.byte	12,22,201,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100413
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_AGFSP_STDBY1',0,22,206,8,3
	.word	116656
	.byte	12,22,209,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100816
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_AG_STDBY0',0,22,214,8,3
	.word	116726
	.byte	12,22,217,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101240
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_AG_STDBY1',0,22,222,8,3
	.word	116793
	.byte	12,22,225,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101641
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_CMD_STDBY',0,22,230,8,3
	.word	116860
	.byte	12,22,233,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101837
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_DTSLIM',0,22,238,8,3
	.word	116927
	.byte	12,22,241,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102020
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_DTSSTAT',0,22,246,8,3
	.word	116991
	.byte	12,22,249,8,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102120
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVR33CON',0,22,254,8,3
	.word	117056
	.byte	12,22,129,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102406
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRADCSTAT',0,22,134,9,3
	.word	117122
	.byte	12,22,137,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102644
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVROSCCTRL',0,22,142,9,3
	.word	117190
	.byte	12,22,145,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102862
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRRSTCON',0,22,150,9,3
	.word	117258
	.byte	12,22,153,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103153
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRRSTSTAT',0,22,158,9,3
	.word	117325
	.byte	12,22,161,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103398
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF0',0,22,166,9,3
	.word	117393
	.byte	12,22,169,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103811
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF1',0,22,174,9,3
	.word	117462
	.byte	12,22,177,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104020
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF2',0,22,182,9,3
	.word	117531
	.byte	12,22,185,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104414
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF3',0,22,190,9,3
	.word	117600
	.byte	12,22,193,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104635
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF4',0,22,198,9,3
	.word	117669
	.byte	12,22,201,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105029
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF5',0,22,206,9,3
	.word	117738
	.byte	12,22,209,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105250
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF6',0,22,214,9,3
	.word	117807
	.byte	12,22,217,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105412
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF7',0,22,222,9,3
	.word	117876
	.byte	12,22,225,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105555
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF8',0,22,230,9,3
	.word	117945
	.byte	12,22,233,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105720
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCOEFF9',0,22,238,9,3
	.word	118014
	.byte	12,22,241,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105865
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL0',0,22,246,9,3
	.word	118083
	.byte	12,22,249,9,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106033
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL1',0,22,254,9,3
	.word	118151
	.byte	12,22,129,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106267
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL10',0,22,134,10,3
	.word	118219
	.byte	12,22,137,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106448
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL11',0,22,142,10,3
	.word	118288
	.byte	12,22,145,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106746
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL2',0,22,150,10,3
	.word	118357
	.byte	12,22,153,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106978
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL3',0,22,158,10,3
	.word	118425
	.byte	12,22,161,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107179
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL4',0,22,166,10,3
	.word	118493
	.byte	12,22,169,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107327
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL5',0,22,174,10,3
	.word	118561
	.byte	12,22,177,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107528
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL6',0,22,182,10,3
	.word	118629
	.byte	12,22,185,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107725
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL7',0,22,190,10,3
	.word	118697
	.byte	12,22,193,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107965
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL8',0,22,198,10,3
	.word	118765
	.byte	12,22,201,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108282
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDCTRL9',0,22,206,10,3
	.word	118833
	.byte	12,22,209,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108426
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSDSTAT0',0,22,214,10,3
	.word	118901
	.byte	12,22,217,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108574
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRSTAT',0,22,222,10,3
	.word	118969
	.byte	12,22,225,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109134
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRTRIM',0,22,230,10,3
	.word	119034
	.byte	12,22,233,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109339
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_EVRTRIMSTAT',0,22,238,10,3
	.word	119099
	.byte	12,22,241,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109544
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_HSMOVMON',0,22,246,10,3
	.word	119168
	.byte	12,22,249,10,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109764
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_HSMUVMON',0,22,254,10,3
	.word	119234
	.byte	12,22,129,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109979
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_ID',0,22,134,11,3
	.word	119300
	.byte	12,22,137,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110086
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_MONBISTCTRL',0,22,142,11,3
	.word	119360
	.byte	12,22,145,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110252
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_MONBISTSTAT',0,22,150,11,3
	.word	119429
	.byte	12,22,153,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110453
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_MONCTRL',0,22,158,11,3
	.word	119498
	.byte	12,22,161,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110820
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_MONFILT',0,22,166,11,3
	.word	119563
	.byte	12,22,169,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111070
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_MONSTAT1',0,22,174,11,3
	.word	119628
	.byte	12,22,177,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111227
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_MONSTAT2',0,22,182,11,3
	.word	119694
	.byte	12,22,185,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111365
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_OTSC0',0,22,190,11,3
	.word	119760
	.byte	12,22,193,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111579
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_OTSC1',0,22,198,11,3
	.word	119823
	.byte	12,22,201,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111747
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_OTSS',0,22,206,11,3
	.word	119886
	.byte	12,22,209,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111902
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_OVMON',0,22,214,11,3
	.word	119948
	.byte	12,22,217,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112082
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_OVMON2',0,22,222,11,3
	.word	120011
	.byte	12,22,225,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112261
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSIEN',0,22,230,11,3
	.word	120075
	.byte	12,22,233,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112822
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWCR0',0,22,238,11,3
	.word	120139
	.byte	12,22,241,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113332
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWCR2',0,22,246,11,3
	.word	120204
	.byte	12,22,249,11,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113601
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWCR3',0,22,254,11,3
	.word	120269
	.byte	12,22,129,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113794
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWCR4',0,22,134,12,3
	.word	120334
	.byte	12,22,137,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114079
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWCR5',0,22,142,12,3
	.word	120399
	.byte	12,22,145,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114307
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWSTAT',0,22,150,12,3
	.word	120464
	.byte	12,22,153,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114836
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWSTAT2',0,22,158,12,3
	.word	120530
	.byte	12,22,161,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115434
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWSTATCLR',0,22,166,12,3
	.word	120597
	.byte	12,22,169,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115996
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_PMSWUTCNT',0,22,174,12,3
	.word	120666
	.byte	12,22,177,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	116100
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_UVMON',0,22,182,12,3
	.word	120733
	.byte	12,22,185,12,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	116280
	.byte	4,2,35,0,0,33
	.byte	'Ifx_PMS_UVMON2',0,22,190,12,3
	.word	120796
	.byte	10
	.byte	'_Ifx_PMS',0,22,202,12,25,128,4,13
	.byte	'reserved_0',0
	.word	4729
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	119300
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	48688
	.byte	32,2,35,12,13
	.byte	'EVRSTAT',0
	.word	118969
	.byte	4,2,35,44,13
	.byte	'reserved_30',0
	.word	2909
	.byte	4,2,35,48,13
	.byte	'EVRADCSTAT',0
	.word	117122
	.byte	4,2,35,52,13
	.byte	'reserved_38',0
	.word	2909
	.byte	4,2,35,56,13
	.byte	'EVRRSTCON',0
	.word	117258
	.byte	4,2,35,60,13
	.byte	'reserved_40',0
	.word	2909
	.byte	4,2,35,64,13
	.byte	'EVRRSTSTAT',0
	.word	117325
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	2909
	.byte	4,2,35,72,13
	.byte	'EVRTRIM',0
	.word	119034
	.byte	4,2,35,76,13
	.byte	'EVRTRIMSTAT',0
	.word	119099
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5069
	.byte	12,2,35,84,13
	.byte	'MONSTAT1',0
	.word	119628
	.byte	4,2,35,96,13
	.byte	'MONSTAT2',0
	.word	119694
	.byte	4,2,35,100,13
	.byte	'MONCTRL',0
	.word	119498
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2909
	.byte	4,2,35,108,13
	.byte	'MONFILT',0
	.word	119563
	.byte	4,2,35,112,13
	.byte	'PMSIEN',0
	.word	120075
	.byte	4,2,35,116,13
	.byte	'UVMON',0
	.word	120733
	.byte	4,2,35,120,13
	.byte	'OVMON',0
	.word	119948
	.byte	4,2,35,124,13
	.byte	'UVMON2',0
	.word	120796
	.byte	4,3,35,128,1,13
	.byte	'OVMON2',0
	.word	120011
	.byte	4,3,35,132,1,13
	.byte	'HSMUVMON',0
	.word	119234
	.byte	4,3,35,136,1,13
	.byte	'HSMOVMON',0
	.word	119168
	.byte	4,3,35,140,1,13
	.byte	'EVR33CON',0
	.word	117056
	.byte	4,3,35,144,1,13
	.byte	'reserved_94',0
	.word	5069
	.byte	12,3,35,148,1,13
	.byte	'EVROSCCTRL',0
	.word	117190
	.byte	4,3,35,160,1,13
	.byte	'reserved_A4',0
	.word	24490
	.byte	16,3,35,164,1,13
	.byte	'PMSWCR0',0
	.word	120139
	.byte	4,3,35,180,1,13
	.byte	'PMSWCR2',0
	.word	120204
	.byte	4,3,35,184,1,13
	.byte	'reserved_BC',0
	.word	2909
	.byte	4,3,35,188,1,13
	.byte	'PMSWCR3',0
	.word	120269
	.byte	4,3,35,192,1,13
	.byte	'PMSWCR4',0
	.word	120334
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR5',0
	.word	120399
	.byte	4,3,35,200,1,13
	.byte	'reserved_CC',0
	.word	4729
	.byte	8,3,35,204,1,13
	.byte	'PMSWSTAT',0
	.word	120464
	.byte	4,3,35,212,1,13
	.byte	'PMSWSTAT2',0
	.word	120530
	.byte	4,3,35,216,1,13
	.byte	'PMSWUTCNT',0
	.word	120666
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	4729
	.byte	8,3,35,224,1,13
	.byte	'PMSWSTATCLR',0
	.word	120597
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	24490
	.byte	16,3,35,236,1,13
	.byte	'EVRSDSTAT0',0
	.word	118901
	.byte	4,3,35,252,1,13
	.byte	'reserved_100',0
	.word	4729
	.byte	8,3,35,128,2,13
	.byte	'EVRSDCTRL0',0
	.word	118083
	.byte	4,3,35,136,2,13
	.byte	'EVRSDCTRL1',0
	.word	118151
	.byte	4,3,35,140,2,13
	.byte	'EVRSDCTRL2',0
	.word	118357
	.byte	4,3,35,144,2,13
	.byte	'EVRSDCTRL3',0
	.word	118425
	.byte	4,3,35,148,2,13
	.byte	'EVRSDCTRL4',0
	.word	118493
	.byte	4,3,35,152,2,13
	.byte	'EVRSDCTRL5',0
	.word	118561
	.byte	4,3,35,156,2,13
	.byte	'EVRSDCTRL6',0
	.word	118629
	.byte	4,3,35,160,2,13
	.byte	'EVRSDCTRL7',0
	.word	118697
	.byte	4,3,35,164,2,13
	.byte	'EVRSDCTRL8',0
	.word	118765
	.byte	4,3,35,168,2,13
	.byte	'EVRSDCTRL9',0
	.word	118833
	.byte	4,3,35,172,2,13
	.byte	'EVRSDCTRL10',0
	.word	118219
	.byte	4,3,35,176,2,13
	.byte	'EVRSDCTRL11',0
	.word	118288
	.byte	4,3,35,180,2,13
	.byte	'reserved_138',0
	.word	24490
	.byte	16,3,35,184,2,13
	.byte	'EVRSDCOEFF0',0
	.word	117393
	.byte	4,3,35,200,2,13
	.byte	'EVRSDCOEFF1',0
	.word	117462
	.byte	4,3,35,204,2,13
	.byte	'EVRSDCOEFF2',0
	.word	117531
	.byte	4,3,35,208,2,13
	.byte	'EVRSDCOEFF3',0
	.word	117600
	.byte	4,3,35,212,2,13
	.byte	'EVRSDCOEFF4',0
	.word	117669
	.byte	4,3,35,216,2,13
	.byte	'EVRSDCOEFF5',0
	.word	117738
	.byte	4,3,35,220,2,13
	.byte	'EVRSDCOEFF6',0
	.word	117807
	.byte	4,3,35,224,2,13
	.byte	'EVRSDCOEFF7',0
	.word	117876
	.byte	4,3,35,228,2,13
	.byte	'EVRSDCOEFF8',0
	.word	117945
	.byte	4,3,35,232,2,13
	.byte	'EVRSDCOEFF9',0
	.word	118014
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	4100
	.byte	24,3,35,240,2,13
	.byte	'AG_STDBY0',0
	.word	116726
	.byte	4,3,35,136,3,13
	.byte	'AG_STDBY1',0
	.word	116793
	.byte	4,3,35,140,3,13
	.byte	'MONBISTSTAT',0
	.word	119429
	.byte	4,3,35,144,3,13
	.byte	'reserved_194',0
	.word	2909
	.byte	4,3,35,148,3,13
	.byte	'MONBISTCTRL',0
	.word	119360
	.byte	4,3,35,152,3,13
	.byte	'CMD_STDBY',0
	.word	116860
	.byte	4,3,35,156,3,13
	.byte	'reserved_1A0',0
	.word	2909
	.byte	4,3,35,160,3,13
	.byte	'AGFSP_STDBY0',0
	.word	116586
	.byte	4,3,35,164,3,13
	.byte	'AGFSP_STDBY1',0
	.word	116656
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	77433
	.byte	20,3,35,172,3,13
	.byte	'DTSSTAT',0
	.word	116991
	.byte	4,3,35,192,3,13
	.byte	'reserved_1C4',0
	.word	2909
	.byte	4,3,35,196,3,13
	.byte	'DTSLIM',0
	.word	116927
	.byte	4,3,35,200,3,13
	.byte	'reserved_1CC',0
	.word	77433
	.byte	20,3,35,204,3,13
	.byte	'OTSS',0
	.word	119886
	.byte	4,3,35,224,3,13
	.byte	'OTSC0',0
	.word	119760
	.byte	4,3,35,228,3,13
	.byte	'OTSC1',0
	.word	119823
	.byte	4,3,35,232,3,13
	.byte	'reserved_1EC',0
	.word	5069
	.byte	12,3,35,236,3,13
	.byte	'ACCEN1',0
	.word	116522
	.byte	4,3,35,248,3,13
	.byte	'ACCEN0',0
	.word	116458
	.byte	4,3,35,252,3,0,14
	.word	120860
	.byte	33
	.byte	'Ifx_PMS',0,22,165,13,3
	.word	122668
	.byte	17,11,94,9,1,18
	.byte	'IfxPmsEvr_EnableInterrupt_ovswd',0,0,18
	.byte	'IfxPmsEvr_EnableInterrupt_uvswd',0,1,18
	.byte	'IfxPmsEvr_EnableInterrupt_ov33',0,2,18
	.byte	'IfxPmsEvr_EnableInterrupt_uv33',0,3,18
	.byte	'IfxPmsEvr_EnableInterrupt_ovc',0,4,18
	.byte	'IfxPmsEvr_EnableInterrupt_uvc',0,5,18
	.byte	'IfxPmsEvr_EnableInterrupt_ovpre',0,6,18
	.byte	'IfxPmsEvr_EnableInterrupt_uvpre',0,7,18
	.byte	'IfxPmsEvr_EnableInterrupt_ovddm',0,8,18
	.byte	'IfxPmsEvr_EnableInterrupt_uvddm',0,9,18
	.byte	'IfxPmsEvr_EnableInterrupt_ovsb',0,10,18
	.byte	'IfxPmsEvr_EnableInterrupt_uvsb',0,11,18
	.byte	'IfxPmsEvr_EnableInterrupt_evrcmod',0,16,18
	.byte	'IfxPmsEvr_EnableInterrupt_sdvok',0,17,18
	.byte	'IfxPmsEvr_EnableInterrupt_synclck',0,18,18
	.byte	'IfxPmsEvr_EnableInterrupt_swdlvl',0,19,18
	.byte	'IfxPmsEvr_EnableInterrupt_wutwkp',0,21,18
	.byte	'IfxPmsEvr_EnableInterrupt_esr0wkp',0,22,18
	.byte	'IfxPmsEvr_EnableInterrupt_esr1wkp',0,23,18
	.byte	'IfxPmsEvr_EnableInterrupt_pinawkp',0,24,18
	.byte	'IfxPmsEvr_EnableInterrupt_pinbwkp',0,25,18
	.byte	'IfxPmsEvr_EnableInterrupt_scrint',0,26,18
	.byte	'IfxPmsEvr_EnableInterrupt_scrrst',0,27,18
	.byte	'IfxPmsEvr_EnableInterrupt_screcc',0,28,18
	.byte	'IfxPmsEvr_EnableInterrupt_scrwdt',0,29,0,33
	.byte	'IfxPmsEvr_EnableInterrupt',0,11,121,3
	.word	122690
	.byte	17,11,125,9,1,18
	.byte	'IfxPmsEvr_EvrcMode_pwmMode',0,0,18
	.byte	'IfxPmsEvr_EvrcMode_lowPowerMode',0,1,18
	.byte	'IfxPmsEvr_EvrcMode_startupMode',0,2,18
	.byte	'IfxPmsEvr_EvrcMode_disableMode',0,3,0,33
	.byte	'IfxPmsEvr_EvrcMode',0,11,134,1,3
	.word	123590
	.byte	17,11,138,1,9,1,18
	.byte	'IfxPmsEvr_ExtSyncSwitchingFreqDivFactor_1',0,0,18
	.byte	'IfxPmsEvr_ExtSyncSwitchingFreqDivFactor_2',0,1,18
	.byte	'IfxPmsEvr_ExtSyncSwitchingFreqDivFactor_4',0,2,18
	.byte	'IfxPmsEvr_ExtSyncSwitchingFreqDivFactor_8',0,3,18
	.byte	'IfxPmsEvr_ExtSyncSwitchingFreqDivFactor_16',0,4,18
	.byte	'IfxPmsEvr_ExtSyncSwitchingFreqDivFactor_32',0,5,0,33
	.byte	'IfxPmsEvr_ExtSyncSwitchingFreqDivFactor',0,11,146,1,3
	.word	123753
	.byte	17,11,151,1,9,1,18
	.byte	'IfxPmsEvr_OverVoltageMonitoring_inactive',0,0,18
	.byte	'IfxPmsEvr_OverVoltageMonitoring_lowToHighVoltageTransition',0,1,18
	.byte	'IfxPmsEvr_OverVoltageMonitoring_highToLowVoltageTransition',0,2,18
	.byte	'IfxPmsEvr_OverVoltageMonitoring_eitherDirectionVoltageTransition',0,3,0,33
	.byte	'IfxPmsEvr_OverVoltageMonitoring',0,11,157,1,3
	.word	124075
	.byte	17,11,162,1,9,1,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_0',0,0,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_1',0,1,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_2',0,2,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_3',0,3,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_4',0,4,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_5',0,5,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_6',0,6,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_7',0,7,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_8',0,8,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_9',0,9,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_10',0,10,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_11',0,11,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_12',0,12,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_13',0,13,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_14',0,14,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_15',0,15,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_16',0,16,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_17',0,17,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_18',0,18,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_19',0,19,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_20',0,20,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_21',0,21,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_22',0,22,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_23',0,23,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_24',0,24,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_25',0,25,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_26',0,26,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_27',0,27,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_28',0,28,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_29',0,29,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_30',0,30,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_31',0,31,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_32',0,32,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_33',0,33,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_34',0,34,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_35',0,35,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_36',0,36,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_37',0,37,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_38',0,38,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_39',0,39,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_40',0,40,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_41',0,41,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_42',0,42,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_43',0,43,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_44',0,44,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_45',0,45,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_46',0,46,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_47',0,47,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_48',0,48,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_49',0,49,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_50',0,50,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_51',0,51,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_52',0,52,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_53',0,53,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_54',0,54,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_55',0,55,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_56',0,56,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_57',0,57,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_58',0,58,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_59',0,59,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_60',0,60,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_61',0,61,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_62',0,62,18
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue_63',0,63,0,33
	.byte	'IfxPmsEvr_PrimaryAdcTrimValue',0,11,228,1,3
	.word	124355
	.byte	17,11,196,2,9,1,18
	.byte	'IfxPmsEvr_SupplyMode_evrc',0,0,18
	.byte	'IfxPmsEvr_SupplyMode_evr33',0,1,18
	.byte	'IfxPmsEvr_SupplyMode_swd',0,2,18
	.byte	'IfxPmsEvr_SupplyMode_evrpr',0,3,18
	.byte	'IfxPmsEvr_SupplyMode_vddm',0,4,18
	.byte	'IfxPmsEvr_SupplyMode_sb',0,5,0,33
	.byte	'IfxPmsEvr_SupplyMode',0,11,204,2,3
	.word	126631
	.byte	17,11,209,2,9,1,18
	.byte	'IfxPmsEvr_UnderVoltageMonitoring_inactive',0,0,18
	.byte	'IfxPmsEvr_UnderVoltageMonitoring_lowToHighVoltageTransition',0,1,18
	.byte	'IfxPmsEvr_UnderVoltageMonitoring_highToLowVoltageTransition',0,2,18
	.byte	'IfxPmsEvr_UnderVoltageMonitoring_eitherDirectionVoltageTransition',0,3,0,33
	.byte	'IfxPmsEvr_UnderVoltageMonitoring',0,11,215,2,3
	.word	126835
	.byte	35,11,223,2,9,12,13
	.byte	'regAddr',0
	.word	39719
	.byte	4,2,35,0,13
	.byte	'value',0
	.word	310
	.byte	4,2,35,4,13
	.byte	'mask',0
	.word	310
	.byte	4,2,35,8,0,33
	.byte	'IfxPmsEvr_StepDownRegulatorRegConfig',0,11,228,2,3
	.word	127120
	.byte	20
	.word	127120
	.byte	3
	.word	127219
	.byte	35,11,230,2,9,12,13
	.byte	'numOfRegisters',0
	.word	691
	.byte	1,2,35,0,13
	.byte	'regConfig',0
	.word	127224
	.byte	4,2,35,4,13
	.byte	'waitInSecs',0
	.word	224
	.byte	4,2,35,8,0,33
	.byte	'IfxPmsEvr_initSequencePhase',0,11,235,2,3
	.word	127229
	.byte	35,11,237,2,9,8,13
	.byte	'numOfRegisters',0
	.word	691
	.byte	1,2,35,0,13
	.byte	'regConfig',0
	.word	127224
	.byte	4,2,35,4,0,33
	.byte	'IfxPmsEvr_checkRegConfig',0,11,241,2,3
	.word	127336
	.byte	20
	.word	127229
	.byte	3
	.word	127420
	.byte	35,11,243,2,9,8,13
	.byte	'numOfPhases',0
	.word	691
	.byte	1,2,35,0,13
	.byte	'phaseConfig',0
	.word	127425
	.byte	4,2,35,4,0,33
	.byte	'IfxPmsEvr_initSequence',0,11,247,2,3
	.word	127430
	.byte	17,23,66,9,1,18
	.byte	'IfxSrc_Tos_cpu0',0,0,18
	.byte	'IfxSrc_Tos_dma',0,1,18
	.byte	'IfxSrc_Tos_cpu1',0,2,18
	.byte	'IfxSrc_Tos_cpu2',0,3,18
	.byte	'IfxSrc_Tos_cpu3',0,4,18
	.byte	'IfxSrc_Tos_cpu4',0,5,18
	.byte	'IfxSrc_Tos_cpu5',0,6,0,33
	.byte	'IfxSrc_Tos',0,23,75,3
	.word	127511
	.byte	10
	.byte	'_Ifx_DMU_HF_ACCEN0_Bits',0,24,68,16,4,11
	.byte	'EN0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_ACCEN0_Bits',0,24,102,3
	.word	127661
	.byte	10
	.byte	'_Ifx_DMU_HF_ACCEN1_Bits',0,24,105,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ACCEN1_Bits',0,24,108,3
	.word	128224
	.byte	10
	.byte	'_Ifx_DMU_HF_CCONTROL_Bits',0,24,111,16,4,11
	.byte	'CRANKING',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_DMU_HF_CCONTROL_Bits',0,24,115,3
	.word	128307
	.byte	10
	.byte	'_Ifx_DMU_HF_CLRE_Bits',0,24,118,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CSQER',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'CPROER',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'CPVER',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'CEVER',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'CADER',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	516
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_DMU_HF_CLRE_Bits',0,24,127,3
	.word	128414
	.byte	10
	.byte	'_Ifx_DMU_HF_CONFIRM0_Bits',0,24,130,1,16,4,11
	.byte	'PROINBMHD0O',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'PROINBMHD1O',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'PROINBMHD2O',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'PROINBMHD3O',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'PROINSSW',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'PROINUSER',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'PROINTEST',0,1
	.word	691
	.byte	2,2,2,35,1,11
	.byte	'PROINHSMCFG',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'PROINBMHD0C',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'PROINBMHD1C',0,1
	.word	691
	.byte	2,4,2,35,2,11
	.byte	'PROINBMHD2C',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'PROINBMHD3C',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'PROINREDSEC',0,1
	.word	691
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	4,2,2,35,3,11
	.byte	'PROINSRT',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_CONFIRM0_Bits',0,24,147,1,3
	.word	128601
	.byte	10
	.byte	'_Ifx_DMU_HF_CONFIRM1_Bits',0,24,150,1,16,4,11
	.byte	'PROINPO',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'PROINDO',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'PROINDBGO',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'PROINHSMO',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'PROINHSMCOTP0O',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'PROINHSMCOTP1O',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'PROINECO',0,1
	.word	691
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'PROINPC',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'PROINDC',0,1
	.word	691
	.byte	2,4,2,35,2,11
	.byte	'PROINDBGC',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'PROINHSMC',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'PROINHSMCOTP0C',0,1
	.word	691
	.byte	2,6,2,35,3,11
	.byte	'PROINHSMCOTP1C',0,1
	.word	691
	.byte	2,4,2,35,3,11
	.byte	'PROINECC',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_CONFIRM1_Bits',0,24,168,1,3
	.word	129003
	.byte	10
	.byte	'_Ifx_DMU_HF_CONFIRM2_Bits',0,24,171,1,16,4,11
	.byte	'PROINOTP0O',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'PROINOTP1O',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'PROINOTP2O',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'PROINOTP3O',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'PROINOTP4O',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'PROINOTP5O',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'PROINOTP6O',0,1
	.word	691
	.byte	2,2,2,35,1,11
	.byte	'PROINOTP7O',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'PROINOTP0C',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'PROINOTP1C',0,1
	.word	691
	.byte	2,4,2,35,2,11
	.byte	'PROINOTP2C',0,1
	.word	691
	.byte	2,2,2,35,2,11
	.byte	'PROINOTP3C',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'PROINOTP4C',0,1
	.word	691
	.byte	2,6,2,35,3,11
	.byte	'PROINOTP5C',0,1
	.word	691
	.byte	2,4,2,35,3,11
	.byte	'PROINOTP6C',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'PROINOTP7C',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_CONFIRM2_Bits',0,24,189,1,3
	.word	129420
	.byte	10
	.byte	'_Ifx_DMU_HF_CONTROL_Bits',0,24,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'FSIENPE',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'WSERRINJ',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'DDFP',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'DDFD',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	691
	.byte	6,0,2,35,1,11
	.byte	'CPROG',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'CERASE',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	708
	.byte	13,0,2,35,2,0,33
	.byte	'Ifx_DMU_HF_CONTROL_Bits',0,24,206,1,3
	.word	129839
	.byte	10
	.byte	'_Ifx_DMU_HF_DWAIT_Bits',0,24,209,1,16,4,11
	.byte	'RFLASH',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'RECC',0,1
	.word	691
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	708
	.byte	13,0,2,35,2,0,33
	.byte	'Ifx_DMU_HF_DWAIT_Bits',0,24,215,1,3
	.word	130145
	.byte	10
	.byte	'_Ifx_DMU_HF_ECCC_Bits',0,24,218,1,16,4,11
	.byte	'CLR',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	26,4,2,35,0,11
	.byte	'ECCCORDIS',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'TRAPDIS',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_ECCC_Bits',0,24,224,1,3
	.word	130285
	.byte	10
	.byte	'_Ifx_DMU_HF_ECCR_Bits',0,24,227,1,16,4,11
	.byte	'RCODE',0,4
	.word	516
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_ECCR_Bits',0,24,232,1,3
	.word	130421
	.byte	10
	.byte	'_Ifx_DMU_HF_ECCS_Bits',0,24,235,1,16,4,11
	.byte	'ERR1',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ERR2',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'ERR3',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'ERRM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	3,1,2,35,0,11
	.byte	'ERRANY',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'BLANKA',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	691
	.byte	6,0,2,35,1,11
	.byte	'AER1',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'AER2',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'AER3',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'AERM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	691
	.byte	3,1,2,35,2,11
	.byte	'AERANY',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'ABLANKA',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_ECCS_Bits',0,24,255,1,3
	.word	130543
	.byte	10
	.byte	'_Ifx_DMU_HF_ECCW_Bits',0,24,130,2,16,4,11
	.byte	'WCODE',0,4
	.word	516
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	708
	.byte	6,4,2,35,2,11
	.byte	'PECENCDIS',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'DECENCDIS',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_ECCW_Bits',0,24,136,2,3
	.word	130939
	.byte	10
	.byte	'_Ifx_DMU_HF_EER_Bits',0,24,139,2,16,4,11
	.byte	'OPERM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'SQERM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PROERM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PVERM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EVERM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,4
	.word	516
	.byte	26,1,2,35,0,11
	.byte	'EOBM',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_EER_Bits',0,24,148,2,3
	.word	131080
	.byte	10
	.byte	'_Ifx_DMU_HF_ERRSR_Bits',0,24,151,2,16,4,11
	.byte	'OPER',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'SQER',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PROER',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PVER',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EVER',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'ADER',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'ORIER',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	516
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ERRSR_Bits',0,24,162,2,3
	.word	131261
	.byte	10
	.byte	'_Ifx_DMU_HF_ID_Bits',0,24,165,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	691
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,1
	.word	691
	.byte	8,0,2,35,2,11
	.byte	'FLASH_REV',0,1
	.word	691
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_ID_Bits',0,24,171,2,3
	.word	131480
	.byte	10
	.byte	'_Ifx_DMU_HF_MARGIN_Bits',0,24,174,2,16,4,11
	.byte	'SELD0',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'HMARGIN',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	516
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_DMU_HF_MARGIN_Bits',0,24,180,2,3
	.word	131617
	.byte	10
	.byte	'_Ifx_DMU_HF_OPERATION_Bits',0,24,183,2,16,4,11
	.byte	'PROG',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ERASE',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	516
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_DMU_HF_OPERATION_Bits',0,24,191,2,3
	.word	131760
	.byte	10
	.byte	'_Ifx_DMU_HF_PCONTROL_Bits',0,24,194,2,16,4,11
	.byte	'SLEEP',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'IDLE',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'DEMAND',0,1
	.word	691
	.byte	2,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	708
	.byte	12,2,2,35,2,11
	.byte	'PR5V',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_PCONTROL_Bits',0,24,204,2,3
	.word	131951
	.byte	10
	.byte	'_Ifx_DMU_HF_PROCONDBG_Bits',0,24,207,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	691
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	4,0,2,35,0,11
	.byte	'TIC',0,1
	.word	691
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	691
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_DMU_HF_PROCONDBG_Bits',0,24,216,2,3
	.word	132171
	.byte	10
	.byte	'_Ifx_DMU_HF_PROCONDF_Bits',0,24,219,2,16,4,11
	.byte	'L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	2,5,2,35,0,11
	.byte	'HYSEN',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'HYSCTL',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'AMPCTL',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	691
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	708
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	691
	.byte	3,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_PROCONDF_Bits',0,24,236,2,3
	.word	132377
	.byte	10
	.byte	'_Ifx_DMU_HF_PROCONPF_Bits',0,24,239,2,16,4,11
	.byte	'reserved_0',0,4
	.word	516
	.byte	31,1,2,35,0,11
	.byte	'RPRO',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_PROCONPF_Bits',0,24,243,2,3
	.word	132713
	.byte	10
	.byte	'_Ifx_DMU_HF_PROCONRAM_Bits',0,24,246,2,16,4,11
	.byte	'RAMIN',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	708
	.byte	14,0,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	691
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'LMUINSEL',0,1
	.word	691
	.byte	7,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_PROCONRAM_Bits',0,24,254,2,3
	.word	132818
	.byte	10
	.byte	'_Ifx_DMU_HF_PROCONTP_Bits',0,24,129,3,16,4,11
	.byte	'TP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	691
	.byte	7,0,2,35,0,11
	.byte	'BML',0,1
	.word	691
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	691
	.byte	6,0,2,35,1,11
	.byte	'SWAPEN',0,1
	.word	691
	.byte	2,6,2,35,2,11
	.byte	'CPU0DDIS',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'CPU1DDIS',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'CPU2DDIS',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'CPU3DDIS',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'CPU4DDIS',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'CPU5DDIS',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_PROCONTP_Bits',0,24,143,3,3
	.word	133012
	.byte	10
	.byte	'_Ifx_DMU_HF_PROCONUSR_Bits',0,24,146,3,16,4,11
	.byte	'MODE',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PROCONUSR_Bits',0,24,150,3,3
	.word	133314
	.byte	10
	.byte	'_Ifx_DMU_HF_PROTECT_Bits',0,24,153,3,16,4,11
	.byte	'PRODISP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'PRODISD',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'PRODISDBG',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PRODISEC',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'PRODISBMHD',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'PRODISSWAP',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'PRODISP0',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'PRODISP1',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'PRODISP2',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'PRODISP3',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'PRODISP4',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'PRODISP5',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	516
	.byte	10,8,2,35,0,11
	.byte	'SRT',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	691
	.byte	7,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_PROTECT_Bits',0,24,171,3,3
	.word	133421
	.byte	10
	.byte	'_Ifx_DMU_HF_PSTATUS_Bits',0,24,174,3,16,4,11
	.byte	'SLEEP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'IDLE',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'DEMAND',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	516
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PSTATUS_Bits',0,24,180,3,3
	.word	133812
	.byte	10
	.byte	'_Ifx_DMU_HF_PWAIT_Bits',0,24,183,3,16,4,11
	.byte	'RFLASH',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'RECC',0,1
	.word	691
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	691
	.byte	5,0,2,35,1,11
	.byte	'CFLASH',0,1
	.word	691
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'CECC',0,1
	.word	691
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	691
	.byte	5,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_PWAIT_Bits',0,24,193,3,3
	.word	133950
	.byte	10
	.byte	'_Ifx_DMU_HF_STATUS_Bits',0,24,196,3,16,4,11
	.byte	'D0BUSY',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'D1BUSY',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'P2BUSY',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'P3BUSY',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'P4BUSY',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'P5BUSY',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'DFPAGE',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'PFPAGE',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_DMU_HF_STATUS_Bits',0,24,217,3,3
	.word	134170
	.byte	10
	.byte	'_Ifx_DMU_HF_SUSPEND_Bits',0,24,220,3,16,4,11
	.byte	'REQ',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CLR',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	708
	.byte	14,0,2,35,0,11
	.byte	'SPND',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'ERR',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	708
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_DMU_HF_SUSPEND_Bits',0,24,228,3,3
	.word	134619
	.byte	10
	.byte	'_Ifx_DMU_HP_ECPRIO_P0_Bits',0,24,231,3,16,4,11
	.byte	'S0L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S27L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S28L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S29L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S30L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S31L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P0_Bits',0,24,137,4,3
	.word	134790
	.byte	10
	.byte	'_Ifx_DMU_HP_ECPRIO_P1_Bits',0,24,140,4,16,4,11
	.byte	'S32L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S33L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S34L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S35L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S36L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S37L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S38L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S39L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S40L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S41L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S42L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S43L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S44L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S45L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S46L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S47L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S48L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S49L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S50L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S51L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S52L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S53L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S54L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S55L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S56L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S57L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S58L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S59L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S60L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S61L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S62L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S63L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P1_Bits',0,24,174,4,3
	.word	135361
	.byte	10
	.byte	'_Ifx_DMU_HP_ECPRIO_P2_Bits',0,24,177,4,16,4,11
	.byte	'S64L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S65L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S66L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S67L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S68L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S69L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S70L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S71L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S72L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S73L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S74L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S75L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S76L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S77L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S78L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S79L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S80L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S81L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S82L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S83L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S84L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S85L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S86L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S87L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S88L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S89L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S90L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S91L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S92L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S93L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S94L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S95L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P2_Bits',0,24,211,4,3
	.word	135942
	.byte	10
	.byte	'_Ifx_DMU_HP_ECPRIO_P3_Bits',0,24,214,4,16,4,11
	.byte	'S96L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S97L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S98L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S99L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S100L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S101L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S102L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S103L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S104L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S105L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S106L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S107L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S108L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S109L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S110L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S111L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S112L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S113L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S114L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S115L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S116L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S117L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S118L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S119L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S120L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S121L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S122L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S123L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S124L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S125L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S126L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S127L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P3_Bits',0,24,248,4,3
	.word	136523
	.byte	10
	.byte	'_Ifx_DMU_HP_ECPRIO_P4_Bits',0,24,251,4,16,4,11
	.byte	'S128L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S129L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S130L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S131L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S132L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S133L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S134L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S135L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S136L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S137L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S138L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S139L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S140L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S141L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S142L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S143L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S144L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S145L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S146L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S147L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S148L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S149L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S150L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S151L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S152L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S153L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S154L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S155L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S156L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S157L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S158L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S159L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P4_Bits',0,24,157,5,3
	.word	137132
	.byte	10
	.byte	'_Ifx_DMU_HP_ECPRIO_P5_Bits',0,24,160,5,16,4,11
	.byte	'S160L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S161L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S162L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S163L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S164L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S165L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S166L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S167L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S168L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S169L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S170L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S171L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S172L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S173L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S174L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S175L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S176L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S177L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S178L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S179L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S180L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S181L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S182L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S183L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S184L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S185L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S186L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S187L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S188L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S189L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S190L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S191L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P5_Bits',0,24,194,5,3
	.word	137745
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_OTP0_Bits',0,24,197,5,16,4,11
	.byte	'S0ROM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S27ROM',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S28ROM',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S29ROM',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S30ROM',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S31ROM',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP0_Bits',0,24,231,5,3
	.word	138358
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_OTP1_Bits',0,24,234,5,16,4,11
	.byte	'S32ROM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S33ROM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S34ROM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S35ROM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S36ROM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S37ROM',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S38ROM',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S39ROM',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S40ROM',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S41ROM',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S42ROM',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S43ROM',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S44ROM',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S45ROM',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S46ROM',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S47ROM',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S48ROM',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S49ROM',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S50ROM',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S51ROM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S52ROM',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S53ROM',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S54ROM',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S55ROM',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S56ROM',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S57ROM',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S58ROM',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S59ROM',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S60ROM',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S61ROM',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S62ROM',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S63ROM',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP1_Bits',0,24,140,6,3
	.word	138997
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_OTP2_Bits',0,24,143,6,16,4,11
	.byte	'S64ROM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S65ROM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S66ROM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S67ROM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S68ROM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S69ROM',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S70ROM',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S71ROM',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S72ROM',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S73ROM',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S74ROM',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S75ROM',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S76ROM',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S77ROM',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S78ROM',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S79ROM',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S80ROM',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S81ROM',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S82ROM',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S83ROM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S84ROM',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S85ROM',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S86ROM',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S87ROM',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S88ROM',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S89ROM',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S90ROM',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S91ROM',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S92ROM',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S93ROM',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S94ROM',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S95ROM',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP2_Bits',0,24,177,6,3
	.word	139646
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_OTP3_Bits',0,24,180,6,16,4,11
	.byte	'S96ROM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S97ROM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S98ROM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S99ROM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S100ROM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S101ROM',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S102ROM',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S103ROM',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S104ROM',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S105ROM',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S106ROM',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S107ROM',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S108ROM',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S109ROM',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S110ROM',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S111ROM',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S112ROM',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S113ROM',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S114ROM',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S115ROM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S116ROM',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S117ROM',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S118ROM',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S119ROM',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S120ROM',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S121ROM',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S122ROM',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S123ROM',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S124ROM',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S125ROM',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S126ROM',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S127ROM',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP3_Bits',0,24,214,6,3
	.word	140295
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_OTP4_Bits',0,24,217,6,16,4,11
	.byte	'S128ROM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S129ROM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S130ROM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S131ROM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S132ROM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S133ROM',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S134ROM',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S135ROM',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S136ROM',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S137ROM',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S138ROM',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S139ROM',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S140ROM',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S141ROM',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S142ROM',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S143ROM',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S144ROM',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S145ROM',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S146ROM',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S147ROM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S148ROM',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S149ROM',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S150ROM',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S151ROM',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S152ROM',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S153ROM',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S154ROM',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S155ROM',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S156ROM',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S157ROM',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S158ROM',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S159ROM',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP4_Bits',0,24,251,6,3
	.word	140972
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_OTP5_Bits',0,24,254,6,16,4,11
	.byte	'S160ROM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S161ROM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S162ROM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S163ROM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S164ROM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S165ROM',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S166ROM',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S167ROM',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S168ROM',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S169ROM',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S170ROM',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S171ROM',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S172ROM',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S173ROM',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S174ROM',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S175ROM',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S176ROM',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S177ROM',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S178ROM',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S179ROM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S180ROM',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S181ROM',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S182ROM',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S183ROM',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S184ROM',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S185ROM',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S186ROM',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S187ROM',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S188ROM',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S189ROM',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S190ROM',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S191ROM',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP5_Bits',0,24,160,7,3
	.word	141653
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_P0_Bits',0,24,163,7,16,4,11
	.byte	'S0L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S27L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S28L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S29L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S30L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S31L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_P0_Bits',0,24,197,7,3
	.word	142334
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_P1_Bits',0,24,200,7,16,4,11
	.byte	'S32L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S33L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S34L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S35L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S36L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S37L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S38L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S39L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S40L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S41L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S42L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S43L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S44L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S45L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S46L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S47L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S48L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S49L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S50L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S51L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S52L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S53L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S54L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S55L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S56L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S57L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S58L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S59L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S60L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S61L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S62L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S63L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_P1_Bits',0,24,234,7,3
	.word	142905
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_P2_Bits',0,24,237,7,16,4,11
	.byte	'S64L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S65L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S66L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S67L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S68L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S69L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S70L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S71L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S72L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S73L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S74L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S75L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S76L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S77L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S78L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S79L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S80L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S81L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S82L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S83L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S84L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S85L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S86L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S87L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S88L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S89L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S90L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S91L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S92L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S93L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S94L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S95L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_P2_Bits',0,24,143,8,3
	.word	143486
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_P3_Bits',0,24,146,8,16,4,11
	.byte	'S96L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S97L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S98L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S99L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S100L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S101L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S102L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S103L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S104L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S105L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S106L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S107L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S108L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S109L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S110L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S111L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S112L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S113L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S114L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S115L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S116L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S117L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S118L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S119L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S120L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S121L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S122L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S123L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S124L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S125L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S126L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S127L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_P3_Bits',0,24,180,8,3
	.word	144067
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_P4_Bits',0,24,183,8,16,4,11
	.byte	'S128L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S129L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S130L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S131L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S132L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S133L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S134L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S135L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S136L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S137L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S138L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S139L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S140L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S141L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S142L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S143L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S144L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S145L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S146L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S147L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S148L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S149L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S150L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S151L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S152L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S153L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S154L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S155L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S156L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S157L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S158L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S159L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_P4_Bits',0,24,217,8,3
	.word	144676
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_P5_Bits',0,24,220,8,16,4,11
	.byte	'S160L',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S161L',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S162L',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S163L',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S164L',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S165L',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S166L',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S167L',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S168L',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S169L',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S170L',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S171L',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S172L',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S173L',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S174L',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S175L',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S176L',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S177L',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S178L',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S179L',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S180L',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S181L',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S182L',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S183L',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S184L',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S185L',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S186L',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S187L',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S188L',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S189L',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S190L',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S191L',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_P5_Bits',0,24,254,8,3
	.word	145289
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_WOP0_Bits',0,24,129,9,16,4,11
	.byte	'S0WOP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S27WOP',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S28WOP',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S29WOP',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S30WOP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S31WOP',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP0_Bits',0,24,163,9,3
	.word	145902
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_WOP1_Bits',0,24,166,9,16,4,11
	.byte	'S32WOP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S33WOP',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S34WOP',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S35WOP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S36WOP',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S37WOP',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S38WOP',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S39WOP',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S40WOP',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S41WOP',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S42WOP',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S43WOP',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S44WOP',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S45WOP',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S46WOP',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S47WOP',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S48WOP',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S49WOP',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S50WOP',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S51WOP',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S52WOP',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S53WOP',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S54WOP',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S55WOP',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S56WOP',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S57WOP',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S58WOP',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S59WOP',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S60WOP',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S61WOP',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S62WOP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S63WOP',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP1_Bits',0,24,200,9,3
	.word	146541
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_WOP2_Bits',0,24,203,9,16,4,11
	.byte	'S64WOP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S65WOP',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S66WOP',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S67WOP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S68WOP',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S69WOP',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S70WOP',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S71WOP',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S72WOP',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S73WOP',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S74WOP',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S75WOP',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S76WOP',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S77WOP',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S78WOP',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S79WOP',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S80WOP',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S81WOP',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S82WOP',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S83WOP',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S84WOP',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S85WOP',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S86WOP',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S87WOP',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S88WOP',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S89WOP',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S90WOP',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S91WOP',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S92WOP',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S93WOP',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S94WOP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S95WOP',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP2_Bits',0,24,237,9,3
	.word	147190
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_WOP3_Bits',0,24,240,9,16,4,11
	.byte	'S96WOP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S97WOP',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S98WOP',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S99WOP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S100WOP',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S101WOP',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S102WOP',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S103WOP',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S104WOP',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S105WOP',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S106WOP',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S107WOP',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S108WOP',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S109WOP',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S110WOP',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S111WOP',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S112WOP',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S113WOP',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S114WOP',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S115WOP',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S116WOP',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S117WOP',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S118WOP',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S119WOP',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S120WOP',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S121WOP',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S122WOP',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S123WOP',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S124WOP',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S125WOP',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S126WOP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S127WOP',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP3_Bits',0,24,146,10,3
	.word	147839
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_WOP4_Bits',0,24,149,10,16,4,11
	.byte	'S128WOP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S129WOP',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S130WOP',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S131WOP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S132WOP',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S133WOP',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S134WOP',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S135WOP',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S136WOP',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S137WOP',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S138WOP',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S139WOP',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S140WOP',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S141WOP',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S142WOP',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S143WOP',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S144WOP',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S145WOP',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S146WOP',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S147WOP',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S148WOP',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S149WOP',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S150WOP',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S151WOP',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S152WOP',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S153WOP',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S154WOP',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S155WOP',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S156WOP',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S157WOP',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S158WOP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S159WOP',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP4_Bits',0,24,183,10,3
	.word	148516
	.byte	10
	.byte	'_Ifx_DMU_HP_PROCON_WOP5_Bits',0,24,186,10,16,4,11
	.byte	'S160WOP',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'S161WOP',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'S162WOP',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'S163WOP',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'S164WOP',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'S165WOP',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'S166WOP',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'S167WOP',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'S168WOP',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'S169WOP',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'S170WOP',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'S171WOP',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'S172WOP',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'S173WOP',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'S174WOP',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'S175WOP',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'S176WOP',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'S177WOP',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'S178WOP',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'S179WOP',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'S180WOP',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'S181WOP',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'S182WOP',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'S183WOP',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'S184WOP',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'S185WOP',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'S186WOP',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'S187WOP',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'S188WOP',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'S189WOP',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'S190WOP',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'S191WOP',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP5_Bits',0,24,220,10,3
	.word	149197
	.byte	10
	.byte	'_Ifx_DMU_SF_CLRE_Bits',0,24,223,10,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CSQER',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'CPVER',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'CEVER',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,4
	.word	516
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_DMU_SF_CLRE_Bits',0,24,231,10,3
	.word	149878
	.byte	10
	.byte	'_Ifx_DMU_SF_CONTROL_Bits',0,24,234,10,16,4,11
	.byte	'LCKHSMUCB',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	708
	.byte	12,0,2,35,0,11
	.byte	'CPROG',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'CERASE',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	708
	.byte	13,0,2,35,2,0,33
	.byte	'Ifx_DMU_SF_CONTROL_Bits',0,24,244,10,3
	.word	150054
	.byte	10
	.byte	'_Ifx_DMU_SF_ECCC_Bits',0,24,247,10,16,4,11
	.byte	'CLR',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	26,4,2,35,0,11
	.byte	'ECCCORDIS',0,1
	.word	691
	.byte	2,2,2,35,3,11
	.byte	'TRAPDIS',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_DMU_SF_ECCC_Bits',0,24,253,10,3
	.word	150287
	.byte	10
	.byte	'_Ifx_DMU_SF_ECCR_Bits',0,24,128,11,16,4,11
	.byte	'RCODE',0,4
	.word	516
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_DMU_SF_ECCR_Bits',0,24,133,11,3
	.word	150423
	.byte	10
	.byte	'_Ifx_DMU_SF_ECCS_Bits',0,24,136,11,16,4,11
	.byte	'ERR1',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ERR2',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'ERR3',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'ERRM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	691
	.byte	3,1,2,35,0,11
	.byte	'ERRANY',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'BLANKA',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	691
	.byte	6,0,2,35,1,11
	.byte	'AER1',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'AER2',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'AER3',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'AERM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	691
	.byte	3,1,2,35,2,11
	.byte	'AERANY',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'ABLANKA',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	691
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_DMU_SF_ECCS_Bits',0,24,156,11,3
	.word	150545
	.byte	10
	.byte	'_Ifx_DMU_SF_ECCW_Bits',0,24,159,11,16,4,11
	.byte	'WCODE',0,4
	.word	516
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	708
	.byte	8,2,2,35,2,11
	.byte	'ECCENCDIS',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_DMU_SF_ECCW_Bits',0,24,164,11,3
	.word	150941
	.byte	10
	.byte	'_Ifx_DMU_SF_EER_Bits',0,24,167,11,16,4,11
	.byte	'OPERM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'SQERM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PVERM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EVERM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,4
	.word	516
	.byte	26,1,2,35,0,11
	.byte	'EOBM',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_SF_EER_Bits',0,24,176,11,3
	.word	151061
	.byte	10
	.byte	'_Ifx_DMU_SF_ERRSR_Bits',0,24,179,11,16,4,11
	.byte	'OPER',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'SQER',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'PVER',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'EVER',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,4
	.word	516
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_DMU_SF_ERRSR_Bits',0,24,187,11,3
	.word	151246
	.byte	10
	.byte	'_Ifx_DMU_SF_MARGIN_Bits',0,24,190,11,16,4,11
	.byte	'SELD1',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	6,0,2,35,0,11
	.byte	'HMARGIN',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	516
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_DMU_SF_MARGIN_Bits',0,24,196,11,3
	.word	151415
	.byte	10
	.byte	'_Ifx_DMU_SF_OPERATION_Bits',0,24,199,11,16,4,11
	.byte	'PROG',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'ERASE',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	516
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_DMU_SF_OPERATION_Bits',0,24,205,11,3
	.word	151558
	.byte	10
	.byte	'_Ifx_DMU_SF_PROCONUSR_Bits',0,24,208,11,16,4,11
	.byte	'MODE',0,1
	.word	691
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_DMU_SF_PROCONUSR_Bits',0,24,212,11,3
	.word	151704
	.byte	10
	.byte	'_Ifx_DMU_SF_STATUS_Bits',0,24,215,11,16,4,11
	.byte	'reserved_0',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'D1BUSY',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	516
	.byte	18,12,2,35,0,11
	.byte	'DFPAGE',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	708
	.byte	11,0,2,35,2,0,33
	.byte	'Ifx_DMU_SF_STATUS_Bits',0,24,222,11,3
	.word	151811
	.byte	10
	.byte	'_Ifx_DMU_SF_SUSPEND_Bits',0,24,225,11,16,4,11
	.byte	'REQ',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'CLR',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	708
	.byte	14,0,2,35,0,11
	.byte	'SPND',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'ERR',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	708
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_DMU_SF_SUSPEND_Bits',0,24,233,11,3
	.word	151977
	.byte	10
	.byte	'_Ifx_DMU_SP_PROCONHSM_Bits',0,24,236,11,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'HSMTRDIS',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'HSMTRTYPE',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	708
	.byte	9,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_DMU_SP_PROCONHSM_Bits',0,24,246,11,3
	.word	152148
	.byte	10
	.byte	'_Ifx_DMU_SP_PROCONHSMCBS_Bits',0,24,249,11,16,4,11
	.byte	'BOOTSEL0',0,1
	.word	691
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	2,0,2,35,0,11
	.byte	'BOOTSEL1',0,1
	.word	691
	.byte	6,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'BOOTSEL2',0,1
	.word	691
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	691
	.byte	2,0,2,35,2,11
	.byte	'BOOTSEL3',0,1
	.word	691
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	691
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCBS_Bits',0,24,131,12,3
	.word	152385
	.byte	10
	.byte	'_Ifx_DMU_SP_PROCONHSMCFG_Bits',0,24,134,12,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'HSMRAMKEEP',0,1
	.word	691
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	708
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	691
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	691
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	691
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	708
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCFG_Bits',0,24,148,12,3
	.word	152631
	.byte	10
	.byte	'_Ifx_DMU_SP_PROCONHSMCOTP0_Bits',0,24,151,12,16,4,11
	.byte	'HSM0ROM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'HSM1ROM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'HSM2ROM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'HSM3ROM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'HSM4ROM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'HSM5ROM',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'HSM6ROM',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'HSM7ROM',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'HSM8ROM',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'HSM9ROM',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'HSM10ROM',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'HSM11ROM',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'HSM12ROM',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'HSM13ROM',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'HSM14ROM',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'HSM15ROM',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'HSM16ROM',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'HSM17ROM',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'HSM18ROM',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'HSM19ROM',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'HSM20ROM',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'HSM21ROM',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'HSM22ROM',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'HSM23ROM',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'HSM24ROM',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'HSM25ROM',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'HSM26ROM',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'HSM27ROM',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'HSM28ROM',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'HSM29ROM',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'HSM30ROM',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'HSM31ROM',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCOTP0_Bits',0,24,185,12,3
	.word	152954
	.byte	10
	.byte	'_Ifx_DMU_SP_PROCONHSMCOTP1_Bits',0,24,188,12,16,4,11
	.byte	'HSM32ROM',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'HSM33ROM',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'HSM34ROM',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'HSM35ROM',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'HSM36ROM',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'HSM37ROM',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'HSM38ROM',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'HSM39ROM',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	516
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCOTP1_Bits',0,24,199,12,3
	.word	153663
	.byte	10
	.byte	'_Ifx_DMU_SP_PROCONHSMCX0_Bits',0,24,202,12,16,4,11
	.byte	'HSM0X',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'HSM1X',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'HSM2X',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'HSM3X',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'HSM4X',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'HSM5X',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'HSM6X',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'HSM7X',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'HSM8X',0,1
	.word	691
	.byte	1,7,2,35,1,11
	.byte	'HSM9X',0,1
	.word	691
	.byte	1,6,2,35,1,11
	.byte	'HSM10X',0,1
	.word	691
	.byte	1,5,2,35,1,11
	.byte	'HSM11X',0,1
	.word	691
	.byte	1,4,2,35,1,11
	.byte	'HSM12X',0,1
	.word	691
	.byte	1,3,2,35,1,11
	.byte	'HSM13X',0,1
	.word	691
	.byte	1,2,2,35,1,11
	.byte	'HSM14X',0,1
	.word	691
	.byte	1,1,2,35,1,11
	.byte	'HSM15X',0,1
	.word	691
	.byte	1,0,2,35,1,11
	.byte	'HSM16X',0,1
	.word	691
	.byte	1,7,2,35,2,11
	.byte	'HSM17X',0,1
	.word	691
	.byte	1,6,2,35,2,11
	.byte	'HSM18X',0,1
	.word	691
	.byte	1,5,2,35,2,11
	.byte	'HSM19X',0,1
	.word	691
	.byte	1,4,2,35,2,11
	.byte	'HSM20X',0,1
	.word	691
	.byte	1,3,2,35,2,11
	.byte	'HSM21X',0,1
	.word	691
	.byte	1,2,2,35,2,11
	.byte	'HSM22X',0,1
	.word	691
	.byte	1,1,2,35,2,11
	.byte	'HSM23X',0,1
	.word	691
	.byte	1,0,2,35,2,11
	.byte	'HSM24X',0,1
	.word	691
	.byte	1,7,2,35,3,11
	.byte	'HSM25X',0,1
	.word	691
	.byte	1,6,2,35,3,11
	.byte	'HSM26X',0,1
	.word	691
	.byte	1,5,2,35,3,11
	.byte	'HSM27X',0,1
	.word	691
	.byte	1,4,2,35,3,11
	.byte	'HSM28X',0,1
	.word	691
	.byte	1,3,2,35,3,11
	.byte	'HSM29X',0,1
	.word	691
	.byte	1,2,2,35,3,11
	.byte	'HSM30X',0,1
	.word	691
	.byte	1,1,2,35,3,11
	.byte	'HSM31X',0,1
	.word	691
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCX0_Bits',0,24,236,12,3
	.word	153924
	.byte	10
	.byte	'_Ifx_DMU_SP_PROCONHSMCX1_Bits',0,24,239,12,16,4,11
	.byte	'HSM32X',0,1
	.word	691
	.byte	1,7,2,35,0,11
	.byte	'HSM33X',0,1
	.word	691
	.byte	1,6,2,35,0,11
	.byte	'HSM34X',0,1
	.word	691
	.byte	1,5,2,35,0,11
	.byte	'HSM35X',0,1
	.word	691
	.byte	1,4,2,35,0,11
	.byte	'HSM36X',0,1
	.word	691
	.byte	1,3,2,35,0,11
	.byte	'HSM37X',0,1
	.word	691
	.byte	1,2,2,35,0,11
	.byte	'HSM38X',0,1
	.word	691
	.byte	1,1,2,35,0,11
	.byte	'HSM39X',0,1
	.word	691
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	516
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCX1_Bits',0,24,250,12,3
	.word	154565
	.byte	12,24,130,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127661
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ACCEN0',0,24,135,13,3
	.word	154806
	.byte	12,24,138,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128224
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ACCEN1',0,24,143,13,3
	.word	154873
	.byte	12,24,146,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128307
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_CCONTROL',0,24,151,13,3
	.word	154940
	.byte	12,24,154,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128414
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_CLRE',0,24,159,13,3
	.word	155009
	.byte	12,24,162,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128601
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_CONFIRM0',0,24,167,13,3
	.word	155074
	.byte	12,24,170,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129003
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_CONFIRM1',0,24,175,13,3
	.word	155143
	.byte	12,24,178,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129420
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_CONFIRM2',0,24,183,13,3
	.word	155212
	.byte	12,24,186,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129839
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_CONTROL',0,24,191,13,3
	.word	155281
	.byte	12,24,194,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130145
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_DWAIT',0,24,199,13,3
	.word	155349
	.byte	12,24,202,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130285
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ECCC',0,24,207,13,3
	.word	155415
	.byte	12,24,210,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130421
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ECCR',0,24,215,13,3
	.word	155480
	.byte	12,24,218,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130543
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ECCS',0,24,223,13,3
	.word	155545
	.byte	12,24,226,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130939
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ECCW',0,24,231,13,3
	.word	155610
	.byte	12,24,234,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131080
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_EER',0,24,239,13,3
	.word	155675
	.byte	12,24,242,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131261
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ERRSR',0,24,247,13,3
	.word	155739
	.byte	12,24,250,13,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131480
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_ID',0,24,255,13,3
	.word	155805
	.byte	12,24,130,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131617
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_MARGIN',0,24,135,14,3
	.word	155868
	.byte	12,24,138,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131760
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_OPERATION',0,24,143,14,3
	.word	155935
	.byte	12,24,146,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131951
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PCONTROL',0,24,151,14,3
	.word	156005
	.byte	12,24,154,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132171
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PROCONDBG',0,24,159,14,3
	.word	156074
	.byte	12,24,162,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132377
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PROCONDF',0,24,167,14,3
	.word	156144
	.byte	12,24,170,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132713
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PROCONPF',0,24,175,14,3
	.word	156213
	.byte	12,24,178,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132818
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PROCONRAM',0,24,183,14,3
	.word	156282
	.byte	12,24,186,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133012
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PROCONTP',0,24,191,14,3
	.word	156352
	.byte	12,24,194,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133314
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PROCONUSR',0,24,199,14,3
	.word	156421
	.byte	12,24,202,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133421
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PROTECT',0,24,207,14,3
	.word	156491
	.byte	12,24,210,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133812
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PSTATUS',0,24,215,14,3
	.word	156559
	.byte	12,24,218,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133950
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_PWAIT',0,24,223,14,3
	.word	156627
	.byte	12,24,226,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134170
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_STATUS',0,24,231,14,3
	.word	156693
	.byte	12,24,234,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134619
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HF_SUSPEND',0,24,239,14,3
	.word	156760
	.byte	12,24,242,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134790
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P0',0,24,247,14,3
	.word	156828
	.byte	12,24,250,14,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135361
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P1',0,24,255,14,3
	.word	156898
	.byte	12,24,130,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135942
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P2',0,24,135,15,3
	.word	156968
	.byte	12,24,138,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136523
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P3',0,24,143,15,3
	.word	157038
	.byte	12,24,146,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137132
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P4',0,24,151,15,3
	.word	157108
	.byte	12,24,154,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137745
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_ECPRIO_P5',0,24,159,15,3
	.word	157178
	.byte	12,24,162,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	138358
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP0',0,24,167,15,3
	.word	157248
	.byte	12,24,170,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	138997
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP1',0,24,175,15,3
	.word	157320
	.byte	12,24,178,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	139646
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP2',0,24,183,15,3
	.word	157392
	.byte	12,24,186,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	140295
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP3',0,24,191,15,3
	.word	157464
	.byte	12,24,194,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	140972
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP4',0,24,199,15,3
	.word	157536
	.byte	12,24,202,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	141653
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_OTP5',0,24,207,15,3
	.word	157608
	.byte	12,24,210,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	142334
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_P0',0,24,215,15,3
	.word	157680
	.byte	12,24,218,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	142905
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_P1',0,24,223,15,3
	.word	157750
	.byte	12,24,226,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	143486
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_P2',0,24,231,15,3
	.word	157820
	.byte	12,24,234,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	144067
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_P3',0,24,239,15,3
	.word	157890
	.byte	12,24,242,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	144676
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_P4',0,24,247,15,3
	.word	157960
	.byte	12,24,250,15,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145289
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_P5',0,24,255,15,3
	.word	158030
	.byte	12,24,130,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145902
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP0',0,24,135,16,3
	.word	158100
	.byte	12,24,138,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	146541
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP1',0,24,143,16,3
	.word	158172
	.byte	12,24,146,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147190
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP2',0,24,151,16,3
	.word	158244
	.byte	12,24,154,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147839
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP3',0,24,159,16,3
	.word	158316
	.byte	12,24,162,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148516
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP4',0,24,167,16,3
	.word	158388
	.byte	12,24,170,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149197
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_HP_PROCON_WOP5',0,24,175,16,3
	.word	158460
	.byte	12,24,178,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149878
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_CLRE',0,24,183,16,3
	.word	158532
	.byte	12,24,186,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150054
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_CONTROL',0,24,191,16,3
	.word	158597
	.byte	12,24,194,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150287
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_ECCC',0,24,199,16,3
	.word	158665
	.byte	12,24,202,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150423
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_ECCR',0,24,207,16,3
	.word	158730
	.byte	12,24,210,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150545
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_ECCS',0,24,215,16,3
	.word	158795
	.byte	12,24,218,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150941
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_ECCW',0,24,223,16,3
	.word	158860
	.byte	12,24,226,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151061
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_EER',0,24,231,16,3
	.word	158925
	.byte	12,24,234,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151246
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_ERRSR',0,24,239,16,3
	.word	158989
	.byte	12,24,242,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151415
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_MARGIN',0,24,247,16,3
	.word	159055
	.byte	12,24,250,16,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151558
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_OPERATION',0,24,255,16,3
	.word	159122
	.byte	12,24,130,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151704
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_PROCONUSR',0,24,135,17,3
	.word	159192
	.byte	12,24,138,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151811
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_STATUS',0,24,143,17,3
	.word	159262
	.byte	12,24,146,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151977
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SF_SUSPEND',0,24,151,17,3
	.word	159329
	.byte	12,24,154,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152148
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SP_PROCONHSM',0,24,159,17,3
	.word	159397
	.byte	12,24,162,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152385
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCBS',0,24,167,17,3
	.word	159467
	.byte	12,24,170,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152631
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCFG',0,24,175,17,3
	.word	159540
	.byte	12,24,178,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152954
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCOTP0',0,24,183,17,3
	.word	159613
	.byte	12,24,186,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153663
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCOTP1',0,24,191,17,3
	.word	159688
	.byte	12,24,194,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153924
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCX0',0,24,199,17,3
	.word	159763
	.byte	12,24,202,17,9,4,13
	.byte	'U',0
	.word	516
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	532
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154565
	.byte	4,2,35,0,0,33
	.byte	'Ifx_DMU_SP_PROCONHSMCX1',0,24,207,17,3
	.word	159836
	.byte	15,40
	.word	691
	.byte	16,39,0,15,72
	.word	691
	.byte	16,71,0,10
	.byte	'_Ifx_DMU_HP',0,24,219,17,25,128,2,13
	.byte	'PROCON_P0',0
	.word	157680
	.byte	4,2,35,0,13
	.byte	'PROCON_P1',0
	.word	157750
	.byte	4,2,35,4,13
	.byte	'PROCON_P2',0
	.word	157820
	.byte	4,2,35,8,13
	.byte	'PROCON_P3',0
	.word	157890
	.byte	4,2,35,12,13
	.byte	'PROCON_P4',0
	.word	157960
	.byte	4,2,35,16,13
	.byte	'PROCON_P5',0
	.word	158030
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	159909
	.byte	40,2,35,24,13
	.byte	'PROCON_OTP0',0
	.word	157248
	.byte	4,2,35,64,13
	.byte	'PROCON_OTP1',0
	.word	157320
	.byte	4,2,35,68,13
	.byte	'PROCON_OTP2',0
	.word	157392
	.byte	4,2,35,72,13
	.byte	'PROCON_OTP3',0
	.word	157464
	.byte	4,2,35,76,13
	.byte	'PROCON_OTP4',0
	.word	157536
	.byte	4,2,35,80,13
	.byte	'PROCON_OTP5',0
	.word	157608
	.byte	4,2,35,84,13
	.byte	'reserved_58',0
	.word	159909
	.byte	40,2,35,88,13
	.byte	'PROCON_WOP0',0
	.word	158100
	.byte	4,3,35,128,1,13
	.byte	'PROCON_WOP1',0
	.word	158172
	.byte	4,3,35,132,1,13
	.byte	'PROCON_WOP2',0
	.word	158244
	.byte	4,3,35,136,1,13
	.byte	'PROCON_WOP3',0
	.word	158316
	.byte	4,3,35,140,1,13
	.byte	'PROCON_WOP4',0
	.word	158388
	.byte	4,3,35,144,1,13
	.byte	'PROCON_WOP5',0
	.word	158460
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4729
	.byte	8,3,35,152,1,13
	.byte	'ECPRIO_P0',0
	.word	156828
	.byte	4,3,35,160,1,13
	.byte	'ECPRIO_P1',0
	.word	156898
	.byte	4,3,35,164,1,13
	.byte	'ECPRIO_P2',0
	.word	156968
	.byte	4,3,35,168,1,13
	.byte	'ECPRIO_P3',0
	.word	157038
	.byte	4,3,35,172,1,13
	.byte	'ECPRIO_P4',0
	.word	157108
	.byte	4,3,35,176,1,13
	.byte	'ECPRIO_P5',0
	.word	157178
	.byte	4,3,35,180,1,13
	.byte	'reserved_B8',0
	.word	159918
	.byte	72,3,35,184,1,0,14
	.word	159927
	.byte	33
	.byte	'Ifx_DMU_HP',0,24,249,17,3
	.word	160525
	.byte	17,14,82,9,1,18
	.byte	'IfxPmsPm_BlankingFilterDelay_0ms',0,0,18
	.byte	'IfxPmsPm_BlankingFilterDelay_2_5ms',0,1,18
	.byte	'IfxPmsPm_BlankingFilterDelay_5ms',0,2,18
	.byte	'IfxPmsPm_BlankingFilterDelay_10ms',0,3,18
	.byte	'IfxPmsPm_BlankingFilterDelay_20ms',0,4,18
	.byte	'IfxPmsPm_BlankingFilterDelay_40ms',0,5,18
	.byte	'IfxPmsPm_BlankingFilterDelay_80ms',0,6,18
	.byte	'IfxPmsPm_BlankingFilterDelay_160ms',0,7,18
	.byte	'IfxPmsPm_BlankingFilterDelay_320ms',0,8,18
	.byte	'IfxPmsPm_BlankingFilterDelay_640ms',0,9,18
	.byte	'IfxPmsPm_BlankingFilterDelay_1280ms',0,10,18
	.byte	'IfxPmsPm_BlankingFilterDelay_2560ms',0,11,18
	.byte	'IfxPmsPm_BlankingFilterDelay_5120ms',0,12,18
	.byte	'IfxPmsPm_BlankingFilterDelay_10240ms',0,13,0,33
	.byte	'IfxPmsPm_BlankingFilterDelay',0,14,98,3
	.word	160550
	.byte	17,14,103,9,1,18
	.byte	'IfxPmsPm_DigitalFilter_bypassed',0,0,18
	.byte	'IfxPmsPm_DigitalFilter_used',0,1,0,33
	.byte	'IfxPmsPm_DigitalFilter',0,14,107,3
	.word	161108
	.byte	17,14,112,9,1,18
	.byte	'IfxPmsPm_EdgeDetectionControl_never',0,0,18
	.byte	'IfxPmsPm_EdgeDetectionControl_onRisingEdge',0,1,18
	.byte	'IfxPmsPm_EdgeDetectionControl_onFallingEdge',0,2,18
	.byte	'IfxPmsPm_EdgeDetectionControl_always',0,3,0,33
	.byte	'IfxPmsPm_EdgeDetectionControl',0,14,118,3
	.word	161209
	.byte	17,14,122,9,1,18
	.byte	'IfxPmsPm_Esr0PinStateRequest_resetOutput',0,0,18
	.byte	'IfxPmsPm_Esr0PinStateRequest_tristate',0,1,0,33
	.byte	'IfxPmsPm_Esr0PinStateRequest',0,14,126,3
	.word	161421
	.byte	17,14,131,1,9,1,18
	.byte	'IfxPmsPm_LoadJumpStatus_inactive',0,0,18
	.byte	'IfxPmsPm_LoadJumpStatus_swTriggeredRequestActive',0,1,18
	.byte	'IfxPmsPm_LoadJumpStatus_hwTriggeredRequestActive',0,2,0,33
	.byte	'IfxPmsPm_LoadJumpStatus',0,14,136,1,3
	.word	161547
	.byte	17,14,140,1,9,1,18
	.byte	'IfxPmsPm_PadStateRequest_inputWithWeakPullUp',0,0,18
	.byte	'IfxPmsPm_PadStateRequest_tristate',0,1,0,33
	.byte	'IfxPmsPm_PadStateRequest',0,14,144,1,3
	.word	161724
	.byte	17,14,146,1,9,1,18
	.byte	'IfxPmsPm_PinEdgeTriggerEvent_none',0,0,18
	.byte	'IfxPmsPm_PinEdgeTriggerEvent_risingEdge',0,1,18
	.byte	'IfxPmsPm_PinEdgeTriggerEvent_fallingEdge',0,2,18
	.byte	'IfxPmsPm_PinEdgeTriggerEvent_bothRisingAndFallingEdge',0,3,0,33
	.byte	'IfxPmsPm_PinEdgeTriggerEvent',0,14,152,1,3
	.word	161848
	.byte	17,14,174,1,9,1,18
	.byte	'IfxPmsPm_RequestPowerMode_run',0,0,18
	.byte	'IfxPmsPm_RequestPowerMode_idle',0,1,18
	.byte	'IfxPmsPm_RequestPowerMode_sleep',0,2,18
	.byte	'IfxPmsPm_RequestPowerMode_standby',0,3,0,33
	.byte	'IfxPmsPm_RequestPowerMode',0,14,180,1,3
	.word	162070
	.byte	17,14,184,1,9,1,18
	.byte	'IfxPmsPm_ScrClocking_100mhzOptional',0,0,18
	.byte	'IfxPmsPm_ScrClocking_bothClocksActiive',0,1,0,33
	.byte	'IfxPmsPm_ScrClocking',0,14,192,1,3
	.word	162247
	.byte	17,14,197,1,9,1,18
	.byte	'IfxPmsPm_StandbyRamSupply_never',0,0,18
	.byte	'IfxPmsPm_StandbyRamSupply_cpu0Block0',0,1,18
	.byte	'IfxPmsPm_StandbyRamSupply_cpu0Block01',0,2,18
	.byte	'IfxPmsPm_StandbyRamSupply_cpu1Block01',0,4,18
	.byte	'IfxPmsPm_StandbyRamSupply_cpu0Cpu1',0,7,0,33
	.byte	'IfxPmsPm_StandbyRamSupply',0,14,204,1,3
	.word	162363
	.byte	17,14,208,1,9,1,18
	.byte	'IfxPmsPm_StandbyTriggerMode_software',0,0,18
	.byte	'IfxPmsPm_StandbyTriggerMode_hardware_undervoltage',0,1,18
	.byte	'IfxPmsPm_StandbyTriggerMode_hardware_nmi',0,4,0,33
	.byte	'IfxPmsPm_StandbyTriggerMode',0,14,213,1,3
	.word	162595
	.byte	17,14,226,1,9,1,18
	.byte	'IfxPmsPm_VoltageDroopRequest_positive',0,1,18
	.byte	'IfxPmsPm_VoltageDroopRequest_negative',0,2,0,33
	.byte	'IfxPmsPm_VoltageDroopRequest',0,14,232,1,3
	.word	162773
	.byte	17,14,237,1,9,1,18
	.byte	'IfxPmsPm_VoltageDroopStatus_inactive',0,0,18
	.byte	'IfxPmsPm_VoltageDroopStatus_swTriggeredRequestActive',0,1,18
	.byte	'IfxPmsPm_VoltageDroopStatus_hwTriggeredRequestActive',0,2,0,33
	.byte	'IfxPmsPm_VoltageDroopStatus',0,14,244,1,3
	.word	162898
	.byte	17,14,248,1,9,1,18
	.byte	'IfxPmsPm_VoltageDroopStep_0mV',0,0,18
	.byte	'IfxPmsPm_VoltageDroopStep_5mV',0,1,18
	.byte	'IfxPmsPm_VoltageDroopStep_10mV',0,2,18
	.byte	'IfxPmsPm_VoltageDroopStep_15mV',0,3,18
	.byte	'IfxPmsPm_VoltageDroopStep_20mV',0,4,18
	.byte	'IfxPmsPm_VoltageDroopStep_25mV',0,5,18
	.byte	'IfxPmsPm_VoltageDroopStep_30mV',0,6,18
	.byte	'IfxPmsPm_VoltageDroopStep_35mV',0,7,18
	.byte	'IfxPmsPm_VoltageDroopStep_40mV',0,8,18
	.byte	'IfxPmsPm_VoltageDroopStep_45mV',0,9,18
	.byte	'IfxPmsPm_VoltageDroopStep_50mV',0,10,18
	.byte	'IfxPmsPm_VoltageDroopStep_55mV',0,11,18
	.byte	'IfxPmsPm_VoltageDroopStep_60mV',0,12,18
	.byte	'IfxPmsPm_VoltageDroopStep_65mV',0,13,18
	.byte	'IfxPmsPm_VoltageDroopStep_70mV',0,14,18
	.byte	'IfxPmsPm_VoltageDroopStep_75mV',0,15,0,33
	.byte	'IfxPmsPm_VoltageDroopStep',0,14,138,2,3
	.word	163091
	.byte	17,14,155,2,9,1,18
	.byte	'IfxPmsPm_WakeupOn_esr0',0,0,18
	.byte	'IfxPmsPm_WakeupOn_esr1',0,1,18
	.byte	'IfxPmsPm_WakeupOn_pinA',0,2,18
	.byte	'IfxPmsPm_WakeupOn_pinB',0,3,18
	.byte	'IfxPmsPm_WakeupOn_porst',0,4,18
	.byte	'IfxPmsPm_WakeupOn_timer',0,5,18
	.byte	'IfxPmsPm_WakeupOn_power',0,6,18
	.byte	'IfxPmsPm_WakeupOn_scr',0,7,0,33
	.byte	'IfxPmsPm_WakeupOn',0,14,165,2,3
	.word	163659
	.byte	17,14,170,2,9,1,18
	.byte	'IfxPmsPm_WakeupTimerMode_autoReload',0,0,18
	.byte	'IfxPmsPm_WakeupTimerMode_autoStop',0,1,0,33
	.byte	'IfxPmsPm_WakeupTimerMode',0,14,174,2,3
	.word	163895
	.byte	17,14,178,2,9,1,18
	.byte	'IfxPmsPm_WutClock_70kHz',0,0,18
	.byte	'IfxPmsPm_WutClock_68Hz',0,1,0,33
	.byte	'IfxPmsPm_WutClock',0,14,182,2,3
	.word	164010
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L283:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,0,3,8
	.byte	54,15,39,12,63,12,60,12,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,46,1,3,8,58,15,59,15,57,15,54,15,39
	.byte	12,63,12,60,12,0,0,29,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,30,29,1,49,19,0,0,31
	.byte	11,0,49,19,0,0,32,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,33,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,34,21,0,54,15,0,0,35,19,1,58,15,59,15,57,15,11,15,0,0,36,52,0,3,8,58,15,59,15,57,15,73
	.byte	19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L284:
	.word	.L803-.L802
.L802:
	.half	3
	.word	.L805-.L804
.L804:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,4,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'IfxPmsEvr.h',0,6,0,0
	.byte	'IfxSrc.h',0,7,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxPmsPm.h',0,6,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0
	.byte	'IfxPms_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,5,0,0
	.byte	'IfxDmu_regdef.h',0,3,0,0,0
.L805:
.L803:
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_info'
.L285:
	.word	341
	.half	3
	.word	.L286
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L288,.L287
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_getCoreMode',0,1,219,1,17
	.word	.L505
	.byte	1,1,1
	.word	.L204,.L506,.L203
	.byte	4
	.byte	'cpu',0,1,219,1,45
	.word	.L507,.L508
	.byte	5
	.word	.L509
	.byte	6
	.byte	'cpuMode',0,1,221,1,30
	.word	.L505,.L510
	.byte	6
	.byte	'dbgsr',0,1,222,1,30
	.word	.L511,.L512
	.byte	6
	.byte	'index',0,1,223,1,30
	.word	.L513,.L514
	.byte	7
	.word	.L515,.L516,.L517
	.byte	8
	.word	.L518,.L516,.L517
	.byte	6
	.byte	'reg',0,2,237,6,12
	.word	.L519,.L520
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_abbrev'
.L286:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_line'
.L287:
	.word	.L807-.L806
.L806:
	.half	3
	.word	.L809-.L808
.L808:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L809:
	.byte	5,17,7,0,5,2
	.word	.L204
	.byte	3,218,1,1,5,54,9
	.half	.L723-.L204
	.byte	3,4,1,5,36,9
	.half	.L722-.L723
	.byte	1,5,13,9
	.half	.L725-.L722
	.byte	3,8,1,4,2,5,17,9
	.half	.L516-.L725
	.byte	3,135,5,1,5,38,9
	.half	.L726-.L516
	.byte	3,1,1,5,12,9
	.half	.L727-.L726
	.byte	1,4,1,5,5,9
	.half	.L517-.L727
	.byte	3,252,122,1,5,20,7,9
	.half	.L810-.L517
	.byte	3,2,1,5,27,9
	.half	.L728-.L810
	.byte	1,5,25,9
	.half	.L37-.L728
	.byte	3,4,1,5,16,9
	.half	.L38-.L37
	.byte	3,4,1,5,5,9
	.half	.L729-.L38
	.byte	1,5,17,7,9
	.half	.L811-.L729
	.byte	3,2,1,5,1,3,246,0,1,5,9,7,9
	.half	.L39-.L811
	.byte	3,142,127,1,5,18,7,9
	.half	.L812-.L39
	.byte	3,4,1,7,9
	.half	.L813-.L812
	.byte	3,17,1,7,9
	.half	.L814-.L813
	.byte	3,17,1,7,9
	.half	.L815-.L814
	.byte	3,17,1,7,9
	.half	.L816-.L815
	.byte	3,17,1,7,9
	.half	.L817-.L816
	.byte	3,17,1,5,1,7,9
	.half	.L41-.L817
	.byte	3,25,1,5,34,7,9
	.half	.L42-.L41
	.byte	3,150,127,1,5,17,9
	.half	.L724-.L42
	.byte	1,5,38,7,9
	.half	.L736-.L724
	.byte	3,6,1,5,21,9
	.half	.L818-.L736
	.byte	1,5,17,7,9
	.half	.L819-.L818
	.byte	3,6,1,5,34,9
	.half	.L43-.L819
	.byte	3,5,1,5,17,9
	.half	.L731-.L43
	.byte	1,5,38,7,9
	.half	.L820-.L731
	.byte	3,6,1,5,21,9
	.half	.L821-.L820
	.byte	1,5,17,7,9
	.half	.L822-.L821
	.byte	3,6,1,5,34,9
	.half	.L44-.L822
	.byte	3,5,1,5,17,9
	.half	.L732-.L44
	.byte	1,5,38,7,9
	.half	.L823-.L732
	.byte	3,6,1,5,21,9
	.half	.L824-.L823
	.byte	1,5,17,7,9
	.half	.L825-.L824
	.byte	3,6,1,5,34,9
	.half	.L45-.L825
	.byte	3,5,1,5,17,9
	.half	.L733-.L45
	.byte	1,5,38,7,9
	.half	.L826-.L733
	.byte	3,6,1,5,21,9
	.half	.L827-.L826
	.byte	1,5,17,7,9
	.half	.L828-.L827
	.byte	3,6,1,5,34,9
	.half	.L46-.L828
	.byte	3,5,1,5,17,9
	.half	.L734-.L46
	.byte	1,5,38,7,9
	.half	.L829-.L734
	.byte	3,6,1,5,21,9
	.half	.L830-.L829
	.byte	1,5,17,7,9
	.half	.L831-.L830
	.byte	3,6,1,5,34,9
	.half	.L47-.L831
	.byte	3,5,1,5,17,9
	.half	.L735-.L47
	.byte	1,5,29,7,9
	.half	.L49-.L735
	.byte	3,2,1,5,1,9
	.half	.L50-.L49
	.byte	3,19,1,5,38,7,9
	.half	.L64-.L50
	.byte	3,113,1,5,21,9
	.half	.L832-.L64
	.byte	1,5,33,7,9
	.half	.L51-.L832
	.byte	3,2,1,5,1,9
	.half	.L66-.L51
	.byte	3,13,1,7,9
	.half	.L289-.L66
	.byte	0,1,1
.L807:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_ranges'
.L288:
	.word	-1,.L204,0,.L289-.L204,0,0
.L509:
	.word	-1,.L204,0,.L506-.L204,-1,.L206,0,.L414-.L206,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_info'
.L290:
	.word	273
	.half	3
	.word	.L291
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L293,.L292
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_getIndex',0,1,240,2,20
	.word	.L513
	.byte	1,1,1
	.word	.L208,.L521,.L207
	.byte	4
	.byte	'cpu',0,1,240,2,45
	.word	.L507,.L522
	.byte	5
	.word	.L523
	.byte	6
	.byte	'result',0,1,242,2,24
	.word	.L513,.L524
	.byte	6
	.byte	'index',0,1,243,2,24
	.word	.L519,.L525
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_abbrev'
.L291:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_line'
.L292:
	.word	.L834-.L833
.L833:
	.half	3
	.word	.L836-.L835
.L835:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L836:
	.byte	5,12,7,0,5,2
	.word	.L208
	.byte	3,243,2,1,5,13,3,4,1,5,47,9
	.half	.L837-.L208
	.byte	3,126,1,5,39,9
	.half	.L68-.L837
	.byte	3,2,1,5,9,9
	.half	.L838-.L68
	.byte	1,5,68,7,9
	.half	.L839-.L838
	.byte	3,2,1,5,22,9
	.half	.L840-.L839
	.byte	1,5,1,3,6,1,5,54,7,9
	.half	.L69-.L840
	.byte	3,118,1,5,47,1,5,1,7,9
	.half	.L841-.L69
	.byte	3,10,1,7,9
	.half	.L294-.L841
	.byte	0,1,1
.L834:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_ranges'
.L293:
	.word	-1,.L208,0,.L294-.L208,0,0
.L523:
	.word	-1,.L208,0,.L521-.L208,-1,.L210,0,.L459-.L210,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_info'
.L295:
	.word	281
	.half	3
	.word	.L296
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L298,.L297
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_setCoreMode',0,1,207,3,9
	.word	.L526
	.byte	1,1,1
	.word	.L220,.L527,.L219
	.byte	4
	.byte	'cpu',0,1,207,3,37
	.word	.L507,.L528
	.byte	4
	.byte	'mode',0,1,207,3,58
	.word	.L505,.L529
	.byte	5
	.word	.L220,.L527
	.byte	6
	.byte	'cpuIndex',0,1,209,3,24
	.word	.L513,.L530
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_abbrev'
.L296:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_line'
.L297:
	.word	.L843-.L842
.L842:
	.half	3
	.word	.L845-.L844
.L844:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L845:
	.byte	5,9,7,0,5,2
	.word	.L220
	.byte	3,206,3,1,5,32,3,3,1,5,43,9
	.half	.L743-.L220
	.byte	3,1,1,5,1,9
	.half	.L299-.L743
	.byte	3,1,0,1,1
.L843:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_ranges'
.L298:
	.word	-1,.L220,0,.L299-.L220,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_info'
.L300:
	.word	393
	.half	3
	.word	.L301
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L303,.L302
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_setProgramCounter',0,1,215,3,9
	.word	.L526
	.byte	1,1,1
	.word	.L222,.L531,.L221
	.byte	4
	.byte	'cpu',0,1,215,3,43
	.word	.L507,.L532
	.byte	4
	.byte	'programCounter',0,1,215,3,55
	.word	.L519,.L533
	.byte	5
	.word	.L222,.L531
	.byte	6
	.byte	'retVal',0,1,217,3,13
	.word	.L526,.L534
	.byte	7
	.word	.L515,.L535,.L536
	.byte	8
	.word	.L518,.L535,.L536
	.byte	6
	.byte	'reg',0,2,237,6,12
	.word	.L519,.L537
	.byte	0,0,7
	.word	.L538,.L536,.L539
	.byte	9
	.word	.L540,.L541
	.byte	10
	.word	.L542,.L543
	.byte	6
	.byte	'module',0,2,200,6,14
	.word	.L507,.L544
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_abbrev'
.L301:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,9,5,0,49
	.byte	16,2,6,0,0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_line'
.L302:
	.word	.L847-.L846
.L846:
	.half	3
	.word	.L849-.L848
.L848:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L849:
	.byte	5,20,7,0,5,2
	.word	.L222
	.byte	3,216,3,1,4,2,5,17,9
	.half	.L535-.L222
	.byte	3,149,3,1,5,38,9
	.half	.L744-.L535
	.byte	3,1,1,5,12,9
	.half	.L745-.L744
	.byte	1,5,5,9
	.half	.L536-.L745
	.byte	3,91,1,5,29,7,9
	.half	.L850-.L536
	.byte	3,2,1,5,60,9
	.half	.L748-.L850
	.byte	1,5,16,9
	.half	.L80-.L748
	.byte	3,4,1,4,1,5,5,9
	.half	.L81-.L80
	.byte	3,139,125,1,5,16,7,9
	.half	.L539-.L81
	.byte	3,2,1,5,1,3,8,1,5,18,7,9
	.half	.L82-.L539
	.byte	3,124,1,5,39,9
	.half	.L851-.L82
	.byte	1,5,18,1,5,22,9
	.half	.L749-.L851
	.byte	1,5,1,9
	.half	.L852-.L749
	.byte	3,4,1,7,9
	.half	.L304-.L852
	.byte	0,1,1
.L847:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_ranges'
.L303:
	.word	-1,.L222,0,.L304-.L222,0,0
.L543:
	.word	-1,.L222,.L536-.L222,.L539-.L222,-1,.L224,0,.L419-.L224,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_info'
.L305:
	.word	317
	.half	3
	.word	.L306
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L308,.L307
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_startCore',0,1,132,4,9
	.word	.L526
	.byte	1,1,1
	.word	.L228,.L545,.L227
	.byte	4
	.byte	'cpu',0,1,132,4,35
	.word	.L507,.L546
	.byte	4
	.byte	'programCounter',0,1,132,4,47
	.word	.L519,.L547
	.byte	5
	.word	.L228,.L545
	.byte	6
	.byte	'retVal',0,1,134,4,13
	.word	.L526,.L548
	.byte	5
	.word	.L549,.L90
	.byte	6
	.byte	'syscon',0,1,141,4,24
	.word	.L550,.L551
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_abbrev'
.L306:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_line'
.L307:
	.word	.L854-.L853
.L853:
	.half	3
	.word	.L856-.L855
.L855:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L856:
	.byte	5,9,7,0,5,2
	.word	.L228
	.byte	3,131,4,1,5,45,9
	.half	.L752-.L228
	.byte	3,5,1,5,21,9
	.half	.L549-.L752
	.byte	3,5,1,5,9,9
	.half	.L753-.L549
	.byte	3,2,1,5,28,7,9
	.half	.L857-.L753
	.byte	3,2,1,5,45,1,5,1,9
	.half	.L90-.L857
	.byte	3,5,1,7,9
	.half	.L309-.L90
	.byte	0,1,1
.L854:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_ranges'
.L308:
	.word	-1,.L228,0,.L309-.L228,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_triggerCpuReset')
	.sect	'.debug_info'
.L310:
	.word	396
	.half	3
	.word	.L311
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L313,.L312
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_triggerCpuReset',0,1,191,4,6,1,1,1
	.word	.L234,.L552,.L233
	.byte	4
	.byte	'coreIndex',0,1,191,4,48
	.word	.L513,.L553
	.byte	5
	.word	.L234,.L552
	.byte	6
	.word	.L515,.L554,.L555
	.byte	7
	.word	.L518,.L554,.L555
	.byte	8
	.byte	'reg',0,2,237,6,12
	.word	.L519,.L556
	.byte	0,0,9
	.word	.L557
	.byte	8
	.byte	'password',0,1,195,4,18
	.word	.L559,.L560
	.byte	6
	.word	.L538,.L561,.L99
	.byte	10
	.word	.L540,.L562
	.byte	11
	.word	.L542,.L563
	.byte	8
	.byte	'module',0,2,200,6,14
	.word	.L507,.L564
	.byte	0,0,6
	.word	.L538,.L100,.L101
	.byte	10
	.word	.L540,.L562
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_triggerCpuReset')
	.sect	'.debug_abbrev'
.L311:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,11,1,85,6,0,0
	.byte	10,5,0,49,16,2,6,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_triggerCpuReset')
	.sect	'.debug_line'
.L312:
	.word	.L859-.L858
.L858:
	.half	3
	.word	.L861-.L860
.L860:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L861:
	.byte	5,6,7,0,5,2
	.word	.L234
	.byte	3,190,4,1,4,2,5,17,9
	.half	.L554-.L234
	.byte	3,175,2,1,5,38,9
	.half	.L761-.L554
	.byte	3,1,1,5,12,9
	.half	.L762-.L761
	.byte	1,4,1,5,5,9
	.half	.L555-.L762
	.byte	3,210,125,1,5,63,7,9
	.half	.L558-.L555
	.byte	3,2,1,5,27,9
	.half	.L760-.L558
	.byte	1,4,2,5,5,9
	.half	.L561-.L760
	.byte	3,135,2,1,5,29,7,9
	.half	.L862-.L561
	.byte	3,2,1,5,60,9
	.half	.L764-.L862
	.byte	1,4,1,5,1,9
	.half	.L99-.L764
	.byte	3,132,126,1,4,2,5,16,7,9
	.half	.L100-.L99
	.byte	3,128,2,1,4,1,5,38,9
	.half	.L101-.L100
	.byte	3,245,125,1,5,21,9
	.half	.L763-.L101
	.byte	3,1,1,5,26,9
	.half	.L766-.L763
	.byte	1,5,21,9
	.half	.L863-.L766
	.byte	3,1,1,5,36,9
	.half	.L864-.L863
	.byte	3,1,1,5,26,3,127,1,5,36,9
	.half	.L865-.L864
	.byte	3,1,1,5,1,7,9
	.half	.L314-.L865
	.byte	3,8,0,1,1
.L859:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_triggerCpuReset')
	.sect	'.debug_ranges'
.L313:
	.word	-1,.L234,0,.L314-.L234,0,0
.L557:
	.word	-1,.L234,.L558-.L234,.L99-.L234,.L100-.L234,.L552-.L234,-1,.L236,0,.L409-.L236,0,0
.L563:
	.word	-1,.L234,.L561-.L234,.L99-.L234,.L100-.L234,.L101-.L234,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getCpuResetStatus')
	.sect	'.debug_info'
.L315:
	.word	330
	.half	3
	.word	.L316
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L318,.L317
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_getCpuResetStatus',0,1,211,4,20
	.word	.L565
	.byte	1,1,1
	.word	.L238,.L566,.L237
	.byte	4
	.byte	'coreIndex',0,1,211,4,64
	.word	.L513,.L567
	.byte	5
	.word	.L238,.L566
	.byte	6
	.byte	'status',0,1,214,4,24
	.word	.L565,.L568
	.byte	7
	.word	.L538,.L238,.L103
	.byte	8
	.word	.L540,.L569
	.byte	9
	.word	.L542,.L238,.L103
	.byte	6
	.byte	'module',0,2,200,6,14
	.word	.L507,.L570
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getCpuResetStatus')
	.sect	'.debug_abbrev'
.L316:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getCpuResetStatus')
	.sect	'.debug_line'
.L317:
	.word	.L867-.L866
.L866:
	.half	3
	.word	.L869-.L868
.L868:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L869:
	.byte	4,2,5,5,7,0,5,2
	.word	.L238
	.byte	3,201,6,1,5,29,7,9
	.half	.L870-.L238
	.byte	3,2,1,5,48,9
	.half	.L871-.L870
	.byte	1,5,53,9
	.half	.L872-.L871
	.byte	1,5,60,9
	.half	.L770-.L872
	.byte	1,5,16,9
	.half	.L102-.L770
	.byte	3,4,1,4,1,5,65,9
	.half	.L103-.L102
	.byte	3,134,126,1,5,19,9
	.half	.L772-.L103
	.byte	3,1,1,5,24,9
	.half	.L873-.L772
	.byte	1,5,1,9
	.half	.L874-.L873
	.byte	3,2,1,7,9
	.half	.L319-.L874
	.byte	0,1,1
.L867:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getCpuResetStatus')
	.sect	'.debug_ranges'
.L318:
	.word	-1,.L238,0,.L319-.L238,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_info'
.L320:
	.word	284
	.half	3
	.word	.L321
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L323,.L322
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_acquireMutex',0,1,54,9
	.word	.L526
	.byte	1,1,1
	.word	.L194,.L571,.L193
	.byte	4
	.byte	'lock',0,1,54,47
	.word	.L572,.L573
	.byte	5
	.word	.L194,.L571
	.byte	6
	.byte	'retVal',0,1,56,21
	.word	.L526,.L574
	.byte	6
	.byte	'spinLockVal',0,1,57,21
	.word	.L575,.L576
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_abbrev'
.L321:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_line'
.L322:
	.word	.L876-.L875
.L875:
	.half	3
	.word	.L878-.L877
.L877:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L878:
	.byte	5,19,7,0,5,2
	.word	.L194
	.byte	3,60,1,5,9,3,121,1,5,17,9
	.half	.L684-.L194
	.byte	3,7,1,9
	.half	.L879-.L684
	.byte	3,126,1,9
	.half	.L685-.L879
	.byte	3,4,1,9
	.half	.L880-.L685
	.byte	3,127,1,5,9,9
	.half	.L881-.L880
	.byte	3,4,1,5,16,9
	.half	.L882-.L881
	.byte	3,2,1,5,1,3,4,1,7,9
	.half	.L324-.L882
	.byte	0,1,1
.L876:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_ranges'
.L323:
	.word	-1,.L194,0,.L324-.L194,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_info'
.L325:
	.word	238
	.half	3
	.word	.L326
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L328,.L327
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_releaseMutex',0,1,193,3,6,1,1,1
	.word	.L216,.L577,.L215
	.byte	4
	.byte	'lock',0,1,193,3,44
	.word	.L572,.L578
	.byte	5
	.word	.L216,.L577
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_abbrev'
.L326:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_line'
.L327:
	.word	.L884-.L883
.L883:
	.half	3
	.word	.L886-.L885
.L885:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L886:
	.byte	5,13,7,0,5,2
	.word	.L216
	.byte	3,195,3,1,5,11,1,5,1,9
	.half	.L887-.L216
	.byte	3,1,1,7,9
	.half	.L329-.L887
	.byte	0,1,1
.L884:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_ranges'
.L328:
	.word	-1,.L216,0,.L329-.L216,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_info'
.L330:
	.word	239
	.half	3
	.word	.L331
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L333,.L332
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_resetSpinLock',0,1,200,3,6,1,1,1
	.word	.L218,.L579,.L217
	.byte	4
	.byte	'lock',0,1,200,3,44
	.word	.L580,.L581
	.byte	5
	.word	.L218,.L579
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_abbrev'
.L331:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_line'
.L332:
	.word	.L889-.L888
.L888:
	.half	3
	.word	.L891-.L890
.L890:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L891:
	.byte	5,13,7,0,5,2
	.word	.L218
	.byte	3,202,3,1,5,11,1,5,1,9
	.half	.L892-.L218
	.byte	3,1,1,7,9
	.half	.L334-.L892
	.byte	0,1,1
.L889:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_ranges'
.L333:
	.word	-1,.L218,0,.L334-.L218,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_info'
.L335:
	.word	313
	.half	3
	.word	.L336
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L338,.L337
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_setSpinLock',0,1,232,3,9
	.word	.L526
	.byte	1,1,1
	.word	.L226,.L582,.L225
	.byte	4
	.byte	'lock',0,1,232,3,45
	.word	.L580,.L583
	.byte	4
	.byte	'timeoutCount',0,1,232,3,58
	.word	.L519,.L584
	.byte	5
	.word	.L226,.L582
	.byte	6
	.byte	'retVal',0,1,234,3,21
	.word	.L526,.L585
	.byte	6
	.byte	'spinLockVal',0,1,235,3,21
	.word	.L586,.L587
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_abbrev'
.L336:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_line'
.L337:
	.word	.L894-.L893
.L893:
	.half	3
	.word	.L896-.L895
.L895:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L896:
	.byte	5,12,7,0,5,2
	.word	.L226
	.byte	3,236,3,1,5,9,3,123,1,5,23,9
	.half	.L750-.L226
	.byte	3,9,1,5,21,9
	.half	.L85-.L750
	.byte	1,9
	.half	.L897-.L85
	.byte	3,2,1,9
	.half	.L898-.L897
	.byte	3,127,1,5,13,9
	.half	.L899-.L898
	.byte	3,4,1,5,9,9
	.half	.L900-.L899
	.byte	1,5,20,7,9
	.half	.L901-.L900
	.byte	3,2,1,5,26,1,5,25,9
	.half	.L86-.L901
	.byte	3,4,1,5,14,9
	.half	.L87-.L86
	.byte	3,2,1,5,49,7,9
	.half	.L751-.L87
	.byte	1,5,1,7,9
	.half	.L88-.L751
	.byte	3,3,1,7,9
	.half	.L339-.L88
	.byte	0,1,1
.L894:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_ranges'
.L338:
	.word	-1,.L226,0,.L339-.L226,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_disableOverlayBlock')
	.sect	'.debug_info'
.L340:
	.word	352
	.half	3
	.word	.L341
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L343,.L342
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_disableOverlayBlock',0,1,75,6,1,1,1
	.word	.L196,.L588,.L195
	.byte	4
	.byte	'cpu',0,1,75,52
	.word	.L513,.L589
	.byte	4
	.byte	'overlayBlock',0,1,75,64
	.word	.L559,.L590
	.byte	5
	.word	.L591
	.byte	6
	.byte	'ovcSfrBase',0,1,77,23
	.word	.L507,.L592
	.byte	6
	.byte	'ovccon',0,1,79,23
	.word	.L593,.L594
	.byte	6
	.byte	'ovcenable',0,1,80,23
	.word	.L595,.L596
	.byte	6
	.byte	'safetyWdtPw',0,1,81,23
	.word	.L559,.L597
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_disableOverlayBlock')
	.sect	'.debug_abbrev'
.L341:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_disableOverlayBlock')
	.sect	'.debug_line'
.L342:
	.word	.L903-.L902
.L902:
	.half	3
	.word	.L905-.L904
.L904:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L905:
	.byte	5,6,7,0,5,2
	.word	.L196
	.byte	3,202,0,1,5,72,9
	.half	.L687-.L196
	.byte	3,6,1,5,35,9
	.half	.L686-.L687
	.byte	1,5,34,9
	.half	.L699-.L686
	.byte	3,1,1,5,36,9
	.half	.L689-.L699
	.byte	3,1,1,5,39,9
	.half	.L906-.L689
	.byte	3,1,1,5,36,9
	.half	.L907-.L906
	.byte	3,127,1,5,39,9
	.half	.L908-.L907
	.byte	3,1,1,5,36,9
	.half	.L909-.L908
	.byte	3,127,1,5,39,9
	.half	.L690-.L909
	.byte	3,1,1,5,17,9
	.half	.L692-.L690
	.byte	3,8,1,5,20,9
	.half	.L910-.L692
	.byte	3,127,1,5,10,9
	.half	.L911-.L910
	.byte	3,126,1,7,9
	.half	.L912-.L911
	.byte	3,5,1,7,9
	.half	.L913-.L912
	.byte	3,6,1,7,9
	.half	.L914-.L913
	.byte	3,5,1,7,9
	.half	.L915-.L914
	.byte	3,5,1,7,9
	.half	.L916-.L915
	.byte	1,5,27,9
	.half	.L4-.L916
	.byte	3,109,1,5,30,3,127,1,5,27,9
	.half	.L688-.L4
	.byte	3,2,1,5,9,3,1,1,5,27,9
	.half	.L5-.L688
	.byte	3,3,1,5,30,3,127,1,5,27,9
	.half	.L693-.L5
	.byte	3,2,1,5,9,3,1,1,5,27,9
	.half	.L6-.L693
	.byte	3,4,1,5,30,3,127,1,5,27,9
	.half	.L694-.L6
	.byte	3,2,1,5,9,3,1,1,5,27,9
	.half	.L7-.L694
	.byte	3,3,1,5,30,3,127,1,5,27,9
	.half	.L695-.L7
	.byte	3,2,1,5,9,3,1,1,5,27,9
	.half	.L8-.L695
	.byte	3,3,1,5,30,3,127,1,5,27,9
	.half	.L696-.L8
	.byte	3,2,1,5,9,3,1,1,5,27,9
	.half	.L9-.L696
	.byte	3,3,1,5,30,3,127,1,5,27,9
	.half	.L697-.L9
	.byte	3,2,1,5,31,9
	.half	.L10-.L697
	.byte	3,5,1,5,32,9
	.half	.L917-.L10
	.byte	3,3,1,5,13,9
	.half	.L698-.L917
	.byte	3,124,1,5,28,9
	.half	.L918-.L698
	.byte	1,9
	.half	.L919-.L918
	.byte	3,1,1,9
	.half	.L920-.L919
	.byte	3,1,1,9
	.half	.L921-.L920
	.byte	3,1,1,5,32,9
	.half	.L922-.L921
	.byte	3,1,1,5,20,9
	.half	.L691-.L922
	.byte	3,2,1,5,45,9
	.half	.L923-.L691
	.byte	1,5,43,1,9
	.half	.L924-.L923
	.byte	3,1,1,9
	.half	.L925-.L924
	.byte	3,1,1,5,1,9
	.half	.L926-.L925
	.byte	3,1,1,7,9
	.half	.L344-.L926
	.byte	0,1,1
.L903:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_disableOverlayBlock')
	.sect	'.debug_ranges'
.L343:
	.word	-1,.L196,0,.L344-.L196,0,0
.L591:
	.word	-1,.L196,0,.L588-.L196,-1,.L198,0,.L439-.L198,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_enableOverlayBlock')
	.sect	'.debug_info'
.L345:
	.word	532
	.half	3
	.word	.L346
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L348,.L347
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_enableOverlayBlock',0,1,134,1,6,1,1,1
	.word	.L200,.L598,.L199
	.byte	4
	.byte	'cpu',0,1,134,1,51
	.word	.L513,.L599
	.byte	4
	.byte	'overlayBlock',0,1,134,1,63
	.word	.L559,.L600
	.byte	4
	.byte	'overlayMemorySelect',0,1,134,1,104
	.word	.L601,.L602
	.byte	4
	.byte	'overlayAddressMask',0,1,134,1,151,1
	.word	.L603,.L604
	.byte	4
	.byte	'targetBaseAddress',0,1,134,1,178,1
	.word	.L519,.L605
	.byte	4
	.byte	'overlayBaseAddress',0,1,134,1,204,1
	.word	.L519,.L606
	.byte	5
	.word	.L200,.L598
	.byte	6
	.byte	'ovcSfrBase',0,1,136,1,14
	.word	.L507,.L607
	.byte	5
	.word	.L608,.L598
	.byte	6
	.byte	'rabr',0,1,166,1,22
	.word	.L609,.L610
	.byte	6
	.byte	'otar',0,1,167,1,22
	.word	.L611,.L612
	.byte	5
	.word	.L613,.L598
	.byte	6
	.byte	'safetyWdtPw',0,1,180,1,20
	.word	.L559,.L614
	.byte	7
	.word	.L615
	.byte	6
	.byte	'ovccon',0,1,182,1,20
	.word	.L593,.L617
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_enableOverlayBlock')
	.sect	'.debug_abbrev'
.L346:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_enableOverlayBlock')
	.sect	'.debug_line'
.L347:
	.word	.L928-.L927
.L927:
	.half	3
	.word	.L930-.L929
.L929:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L930:
	.byte	5,6,7,0,5,2
	.word	.L200
	.byte	3,133,1,1,5,10,9
	.half	.L706-.L200
	.byte	3,6,1,7,9
	.half	.L931-.L706
	.byte	3,3,1,7,9
	.half	.L932-.L931
	.byte	3,4,1,7,9
	.half	.L933-.L932
	.byte	3,4,1,7,9
	.half	.L934-.L933
	.byte	3,3,1,7,9
	.half	.L935-.L934
	.byte	1,5,23,9
	.half	.L15-.L935
	.byte	3,115,1,5,9,9
	.half	.L700-.L15
	.byte	3,1,1,5,23,9
	.half	.L16-.L700
	.byte	3,2,1,5,9,9
	.half	.L701-.L16
	.byte	3,1,1,5,23,9
	.half	.L17-.L701
	.byte	3,3,1,5,9,9
	.half	.L702-.L17
	.byte	3,1,1,5,23,9
	.half	.L18-.L702
	.byte	3,3,1,5,9,9
	.half	.L703-.L18
	.byte	3,1,1,5,23,9
	.half	.L19-.L703
	.byte	3,2,1,5,9,9
	.half	.L704-.L19
	.byte	3,1,1,5,23,9
	.half	.L20-.L704
	.byte	3,2,1,5,21,9
	.half	.L21-.L20
	.byte	3,5,1,5,27,9
	.half	.L936-.L21
	.byte	1,5,21,1,5,29,9
	.half	.L937-.L936
	.byte	1,5,21,1,5,24,9
	.half	.L938-.L937
	.byte	1,5,43,9
	.half	.L608-.L938
	.byte	3,5,1,9
	.half	.L710-.L608
	.byte	3,1,1,5,64,9
	.half	.L939-.L710
	.byte	3,1,1,5,63,9
	.half	.L707-.L939
	.byte	3,3,1,5,43,9
	.half	.L709-.L707
	.byte	3,125,1,5,20,9
	.half	.L711-.L709
	.byte	3,5,1,5,43,9
	.half	.L712-.L711
	.byte	3,126,1,5,20,9
	.half	.L713-.L712
	.byte	3,2,1,5,43,9
	.half	.L940-.L713
	.byte	1,9
	.half	.L941-.L940
	.byte	3,1,1,5,66,9
	.half	.L942-.L941
	.byte	3,1,1,5,74,9
	.half	.L715-.L942
	.byte	1,5,72,9
	.half	.L943-.L715
	.byte	1,5,43,1,5,69,9
	.half	.L613-.L943
	.byte	3,3,1,5,32,9
	.half	.L714-.L613
	.byte	1,5,34,9
	.half	.L717-.L714
	.byte	3,1,1,5,33,9
	.half	.L616-.L717
	.byte	3,2,1,5,17,9
	.half	.L716-.L616
	.byte	3,6,1,5,10,9
	.half	.L944-.L716
	.byte	3,126,1,7,9
	.half	.L945-.L944
	.byte	3,4,1,7,9
	.half	.L946-.L945
	.byte	3,4,1,7,9
	.half	.L947-.L946
	.byte	3,4,1,7,9
	.half	.L948-.L947
	.byte	3,4,1,7,9
	.half	.L949-.L948
	.byte	1,5,31,9
	.half	.L26-.L949
	.byte	3,113,1,5,38,9
	.half	.L950-.L26
	.byte	1,9
	.half	.L951-.L950
	.byte	3,1,1,5,9,3,1,1,5,31,9
	.half	.L27-.L951
	.byte	3,2,1,5,38,9
	.half	.L718-.L27
	.byte	1,9
	.half	.L952-.L718
	.byte	3,1,1,5,9,3,1,1,5,31,9
	.half	.L28-.L952
	.byte	3,2,1,5,38,9
	.half	.L719-.L28
	.byte	1,9
	.half	.L953-.L719
	.byte	3,1,1,5,9,3,1,1,5,31,9
	.half	.L29-.L953
	.byte	3,2,1,5,38,9
	.half	.L720-.L29
	.byte	1,9
	.half	.L954-.L720
	.byte	3,1,1,5,9,3,1,1,5,31,9
	.half	.L30-.L954
	.byte	3,2,1,5,38,9
	.half	.L955-.L30
	.byte	1,9
	.half	.L956-.L955
	.byte	3,1,1,5,9,3,1,1,5,31,9
	.half	.L31-.L956
	.byte	3,2,1,5,38,9
	.half	.L957-.L31
	.byte	1,9
	.half	.L958-.L957
	.byte	3,1,1,5,28,9
	.half	.L32-.L958
	.byte	3,4,1,5,32,9
	.half	.L959-.L32
	.byte	3,2,1,5,25,9
	.half	.L721-.L959
	.byte	3,126,1,3,1,1,5,32,9
	.half	.L960-.L721
	.byte	3,1,1,5,1,7,9
	.half	.L349-.L960
	.byte	3,1,0,1,1
.L928:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_enableOverlayBlock')
	.sect	'.debug_ranges'
.L348:
	.word	-1,.L200,0,.L349-.L200,0,0
.L615:
	.word	-1,.L200,.L616-.L200,.L598-.L200,-1,.L202,0,.L404-.L202,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_info'
.L350:
	.word	378
	.half	3
	.word	.L351
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L353,.L352
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_getRandomValue',0,1,131,3,8
	.word	.L519
	.byte	1,1,1
	.word	.L212,.L618,.L211
	.byte	4
	.byte	'seed',0,1,131,3,38
	.word	.L619,.L620
	.byte	5
	.word	.L212,.L618
	.byte	6
	.byte	'x',0,1,143,3,12
	.word	.L519,.L621
	.byte	7
	.word	.L622
	.byte	8
	.word	.L626,.L623,.L624
	.byte	9
	.word	.L627,.L628
	.byte	9
	.word	.L629,.L630
	.byte	9
	.word	.L631,.L632
	.byte	10
	.word	.L633,.L634
	.byte	6
	.byte	'result',0,2,246,2,9
	.word	.L519,.L636
	.byte	0,0,8
	.word	.L626,.L625,.L635
	.byte	9
	.word	.L627,.L628
	.byte	9
	.word	.L629,.L630
	.byte	9
	.word	.L631,.L632
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_abbrev'
.L351:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2,6,0
	.byte	0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_line'
.L352:
	.word	.L962-.L961
.L961:
	.half	3
	.word	.L964-.L963
.L963:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0,0
.L964:
	.byte	5,16,7,0,5,2
	.word	.L212
	.byte	3,142,3,1,4,2,5,46,9
	.half	.L623-.L212
	.byte	3,114,1,5,30,1,4,1,5,11,9
	.half	.L624-.L623
	.byte	3,19,1,4,2,5,5,9
	.half	.L625-.L624
	.byte	3,99,1,4,1,5,12,9
	.half	.L965-.L625
	.byte	3,45,1,5,1,9
	.half	.L635-.L965
	.byte	3,3,1,7,9
	.half	.L354-.L635
	.byte	0,1,1
.L962:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_ranges'
.L353:
	.word	-1,.L212,0,.L354-.L212,0,0
.L622:
	.word	-1,.L212,.L623-.L212,.L624-.L212,.L625-.L212,.L618-.L212,0,0
.L634:
	.word	-1,.L212,.L623-.L212,.L624-.L212,.L625-.L212,.L635-.L212,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_info'
.L355:
	.word	341
	.half	3
	.word	.L356
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L358,.L357
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_getRandomValueWithinRange',0,1,170,3,8
	.word	.L519
	.byte	1,1,1
	.word	.L214,.L637,.L213
	.byte	4
	.byte	'seed',0,1,170,3,49
	.word	.L619,.L638
	.byte	4
	.byte	'min',0,1,170,3,62
	.word	.L519,.L639
	.byte	4
	.byte	'max',0,1,170,3,74
	.word	.L519,.L640
	.byte	5
	.word	.L214,.L637
	.byte	6
	.byte	'new_value',0,1,172,3,12
	.word	.L519,.L641
	.byte	5
	.word	.L642,.L74
	.byte	6
	.byte	'swap',0,1,177,3,18
	.word	.L643,.L644
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_abbrev'
.L356:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_line'
.L357:
	.word	.L967-.L966
.L966:
	.half	3
	.word	.L969-.L968
.L968:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L969:
	.byte	5,8,7,0,5,2
	.word	.L214
	.byte	3,169,3,1,5,46,9
	.half	.L740-.L214
	.byte	3,2,1,5,5,9
	.half	.L739-.L740
	.byte	3,3,1,5,23,7,9
	.half	.L642-.L739
	.byte	3,2,1,5,13,9
	.half	.L742-.L642
	.byte	3,1,1,9
	.half	.L970-.L742
	.byte	3,1,1,5,9,9
	.half	.L74-.L970
	.byte	3,4,1,5,28,7,9
	.half	.L971-.L74
	.byte	1,5,26,7,9
	.half	.L75-.L971
	.byte	3,6,1,5,23,9
	.half	.L972-.L75
	.byte	1,5,42,9
	.half	.L973-.L972
	.byte	1,5,1,9
	.half	.L77-.L973
	.byte	3,1,1,7,9
	.half	.L359-.L77
	.byte	0,1,1
.L967:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_ranges'
.L358:
	.word	-1,.L214,0,.L359-.L214,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_waitEvent')
	.sect	'.debug_info'
.L360:
	.word	395
	.half	3
	.word	.L361
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L363,.L362
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_waitEvent',0,1,154,4,9
	.word	.L526
	.byte	1,1,1
	.word	.L230,.L645,.L229
	.byte	4
	.byte	'event',0,1,154,4,44
	.word	.L646,.L647
	.byte	4
	.byte	'timeoutMilliSec',0,1,154,4,58
	.word	.L519,.L648
	.byte	5
	.word	.L230,.L645
	.byte	6
	.byte	'sync',0,1,156,4,22
	.word	.L649,.L650
	.byte	6
	.byte	'errorcnt',0,1,158,4,22
	.word	.L526,.L651
	.byte	6
	.byte	'stmCount',0,1,160,4,22
	.word	.L519,.L652
	.byte	6
	.byte	'stmCountBegin',0,1,161,4,22
	.word	.L519,.L653
	.byte	7
	.word	.L654,.L655,.L656
	.byte	8
	.word	.L657,.L658
	.byte	0,9
	.word	.L654,.L659,.L660
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_waitEvent')
	.sect	'.debug_abbrev'
.L361:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,0,49,16,85,6,0,0,9,29,0,49,16
	.byte	17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_waitEvent')
	.sect	'.debug_line'
.L362:
	.word	.L975-.L974
.L974:
	.half	3
	.word	.L977-.L976
.L976:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'IfxScuCcu.h',0,1,0,0,0
.L977:
	.byte	5,57,7,0,5,2
	.word	.L230
	.byte	3,155,4,1,5,9,9
	.half	.L978-.L230
	.byte	3,126,1,5,57,9
	.half	.L757-.L978
	.byte	3,2,1,7,9
	.half	.L979-.L757
	.byte	1,5,36,9
	.half	.L93-.L979
	.byte	1,9
	.half	.L758-.L93
	.byte	3,2,1,4,2,5,41,9
	.half	.L655-.L758
	.byte	3,160,9,1,5,77,9
	.half	.L754-.L655
	.byte	1,4,1,5,78,9
	.half	.L656-.L754
	.byte	3,226,118,1,5,47,3,1,1,4,2,5,77,9
	.half	.L659-.L656
	.byte	3,157,9,1,4,1,5,47,3,227,118,1,4,2,5,77,9
	.half	.L759-.L659
	.byte	3,157,9,1,5,62,9
	.half	.L980-.L759
	.byte	1,4,1,5,49,9
	.half	.L660-.L980
	.byte	3,229,118,1,5,76,9
	.half	.L981-.L660
	.byte	3,125,1,5,86,9
	.half	.L982-.L981
	.byte	1,5,84,9
	.half	.L983-.L982
	.byte	1,5,38,9
	.half	.L984-.L983
	.byte	1,5,72,3,3,1,5,14,9
	.half	.L95-.L984
	.byte	3,2,1,5,31,9
	.half	.L985-.L95
	.byte	3,2,1,5,34,9
	.half	.L986-.L985
	.byte	1,5,9,9
	.half	.L987-.L986
	.byte	1,5,22,7,9
	.half	.L988-.L987
	.byte	3,2,1,5,13,3,1,1,9
	.half	.L94-.L988
	.byte	3,121,1,5,19,9
	.half	.L989-.L94
	.byte	1,5,72,9
	.half	.L990-.L989
	.byte	1,5,5,7,9
	.half	.L97-.L990
	.byte	3,18,1,5,1,3,1,1,7,9
	.half	.L364-.L97
	.byte	0,1,1
.L975:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_waitEvent')
	.sect	'.debug_ranges'
.L363:
	.word	-1,.L230,0,.L364-.L230,0,0
.L658:
	.word	-1,.L230,.L655-.L230,.L656-.L230,.L659-.L230,.L660-.L230,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_emitEvent')
	.sect	'.debug_info'
.L365:
	.word	236
	.half	3
	.word	.L366
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L368,.L367
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_emitEvent',0,1,185,4,6,1,1,1
	.word	.L232,.L661,.L231
	.byte	4
	.byte	'event',0,1,185,4,41
	.word	.L646,.L662
	.byte	5
	.word	.L232,.L661
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_emitEvent')
	.sect	'.debug_abbrev'
.L366:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_emitEvent')
	.sect	'.debug_line'
.L367:
	.word	.L992-.L991
.L991:
	.half	3
	.word	.L994-.L993
.L993:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L994:
	.byte	5,5,7,0,5,2
	.word	.L232
	.byte	3,186,4,1,5,1,9
	.half	.L995-.L232
	.byte	3,1,1,7,9
	.half	.L369-.L995
	.byte	0,1,1
.L992:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_emitEvent')
	.sect	'.debug_ranges'
.L368:
	.word	-1,.L232,0,.L369-.L232,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_setAllIdleExceptMasterCpu')
	.sect	'.debug_info'
.L370:
	.word	375
	.half	3
	.word	.L371
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L373,.L372
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_setAllIdleExceptMasterCpu',0,1,220,4,6,1,1,1
	.word	.L240,.L663,.L239
	.byte	4
	.byte	'masterCpu',0,1,220,4,58
	.word	.L513,.L664
	.byte	5
	.word	.L665
	.byte	6
	.word	.L666,.L240,.L667
	.byte	7
	.word	.L668,.L240,.L667
	.byte	8
	.byte	'password',0,2,131,5,19
	.word	.L559,.L669
	.byte	0,0,6
	.word	.L670,.L667,.L671
	.byte	9
	.word	.L672,.L673
	.byte	10
	.word	.L674,.L667,.L671
	.byte	0,6
	.word	.L675,.L113,.L676
	.byte	9
	.word	.L677,.L678
	.byte	10
	.word	.L679,.L113,.L676
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_setAllIdleExceptMasterCpu')
	.sect	'.debug_abbrev'
.L371:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,29,1,49,16
	.byte	17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,5,0,49,16,2,6,0
	.byte	0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_setAllIdleExceptMasterCpu')
	.sect	'.debug_line'
.L372:
	.word	.L997-.L996
.L996:
	.half	3
	.word	.L999-.L998
.L998:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L999:
	.byte	4,2,5,33,7,0,5,2
	.word	.L240
	.byte	3,136,5,1,5,24,9
	.half	.L1000-.L240
	.byte	3,190,127,1,5,14,9
	.half	.L1001-.L1000
	.byte	3,195,0,1,5,5,9
	.half	.L667-.L1001
	.byte	3,189,127,1,5,43,7,9
	.half	.L1002-.L667
	.byte	3,6,1,5,37,9
	.half	.L1003-.L1002
	.byte	3,127,1,5,43,9
	.half	.L1004-.L1003
	.byte	3,1,1,5,37,9
	.half	.L1005-.L1004
	.byte	3,127,1,5,66,9
	.half	.L1006-.L1005
	.byte	1,5,25,3,126,1,5,37,9
	.half	.L105-.L1006
	.byte	3,2,1,5,22,3,126,1,5,33,9
	.half	.L773-.L105
	.byte	3,9,1,5,5,9
	.half	.L1007-.L773
	.byte	3,116,1,5,39,9
	.half	.L1008-.L1007
	.byte	3,13,1,5,62,9
	.half	.L1009-.L1008
	.byte	3,127,1,5,21,3,126,1,5,27,9
	.half	.L106-.L1009
	.byte	3,6,1,5,40,9
	.half	.L1010-.L106
	.byte	1,4,1,5,10,7,9
	.half	.L671-.L1010
	.byte	3,13,1,7,9
	.half	.L1011-.L671
	.byte	3,28,1,7,9
	.half	.L1012-.L1011
	.byte	3,28,1,7,9
	.half	.L1013-.L1012
	.byte	3,28,1,7,9
	.half	.L1014-.L1013
	.byte	3,28,1,7,9
	.half	.L1015-.L1014
	.byte	3,28,1,7,9
	.half	.L1016-.L1015
	.byte	1,5,21,9
	.half	.L107-.L1016
	.byte	3,245,126,1,5,29,9
	.half	.L1017-.L107
	.byte	1,9
	.half	.L1018-.L1017
	.byte	3,2,1,5,34,9
	.half	.L1019-.L1018
	.byte	3,126,1,5,29,9
	.half	.L114-.L1019
	.byte	3,2,1,5,34,9
	.half	.L1020-.L114
	.byte	1,5,21,7,9
	.half	.L1021-.L1020
	.byte	3,3,1,5,29,9
	.half	.L1022-.L1021
	.byte	1,9
	.half	.L115-.L1022
	.byte	3,2,1,5,34,9
	.half	.L1023-.L115
	.byte	1,5,21,7,9
	.half	.L1024-.L1023
	.byte	3,3,1,5,9,9
	.half	.L1025-.L1024
	.byte	3,15,1,5,21,9
	.half	.L108-.L1025
	.byte	3,3,1,9
	.half	.L774-.L108
	.byte	3,5,1,9
	.half	.L1026-.L774
	.byte	3,5,1,5,9,9
	.half	.L775-.L1026
	.byte	3,15,1,5,21,9
	.half	.L109-.L775
	.byte	3,3,1,9
	.half	.L776-.L109
	.byte	3,10,1,5,9,9
	.half	.L778-.L776
	.byte	3,15,1,5,21,9
	.half	.L110-.L778
	.byte	3,3,1,9
	.half	.L779-.L110
	.byte	3,15,1,5,9,9
	.half	.L780-.L779
	.byte	3,10,1,5,21,9
	.half	.L111-.L780
	.byte	3,3,1,9
	.half	.L781-.L111
	.byte	3,20,1,5,9,9
	.half	.L782-.L781
	.byte	3,5,1,5,21,9
	.half	.L112-.L782
	.byte	3,3,1,9
	.half	.L783-.L112
	.byte	3,20,1,4,2,5,24,9
	.half	.L113-.L783
	.byte	3,174,127,1,5,5,9
	.half	.L1027-.L113
	.byte	1,5,43,7,9
	.half	.L1028-.L1027
	.byte	3,6,1,5,37,9
	.half	.L1029-.L1028
	.byte	3,127,1,5,43,9
	.half	.L1030-.L1029
	.byte	3,1,1,5,66,9
	.half	.L1031-.L1030
	.byte	3,127,1,5,25,3,126,1,5,39,9
	.half	.L149-.L1031
	.byte	3,10,1,5,33,9
	.half	.L1032-.L149
	.byte	3,127,1,5,39,9
	.half	.L1033-.L1032
	.byte	3,1,1,5,62,9
	.half	.L1034-.L1033
	.byte	3,127,1,5,21,3,126,1,5,27,9
	.half	.L150-.L1034
	.byte	3,6,1,5,40,9
	.half	.L1035-.L150
	.byte	1,4,1,5,1,7,9
	.half	.L676-.L1035
	.byte	3,206,0,1,7,9
	.half	.L374-.L676
	.byte	0,1,1
.L997:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_setAllIdleExceptMasterCpu')
	.sect	'.debug_ranges'
.L373:
	.word	-1,.L240,0,.L374-.L240,0,0
.L665:
	.word	-1,.L240,0,.L663-.L240,-1,.L242,0,.L494-.L242,-1,.L244,0,.L484-.L244,-1,.L246,0,.L489-.L246,-1,.L248,0
	.word	.L479-.L248,-1,.L250,0,.L474-.L250,-1,.L252,0,.L464-.L252,-1,.L254,0,.L434-.L254,-1,.L256,0,.L429-.L256
	.word	-1,.L258,0,.L394-.L258,-1,.L260,0,.L444-.L260,-1,.L262,0,.L389-.L262,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_disableInterruptsAllExceptMaster')
	.sect	'.debug_info'
.L375:
	.word	282
	.half	3
	.word	.L376
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L378,.L377
	.byte	2
	.word	.L281
	.byte	3
	.byte	'IfxCpu_disableInterruptsAllExceptMaster',0,1,148,6,6,1,1,1
	.word	.L264,.L680,.L263
	.byte	4
	.byte	'masterCpu',0,1,148,6,65
	.word	.L513,.L681
	.byte	5
	.word	.L682
	.byte	6
	.byte	'password',0,1,150,6,12
	.word	.L559,.L683
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_disableInterruptsAllExceptMaster')
	.sect	'.debug_abbrev'
.L376:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_disableInterruptsAllExceptMaster')
	.sect	'.debug_line'
.L377:
	.word	.L1037-.L1036
.L1036:
	.half	3
	.word	.L1039-.L1038
.L1038:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1039:
	.byte	5,6,7,0,5,2
	.word	.L264
	.byte	3,147,6,1,5,57,3,2,1,5,21,9
	.half	.L785-.L264
	.byte	1,5,34,9
	.half	.L788-.L785
	.byte	3,1,1,5,10,9
	.half	.L787-.L788
	.byte	3,4,1,7,9
	.half	.L1040-.L787
	.byte	3,28,1,7,9
	.half	.L1041-.L1040
	.byte	3,28,1,7,9
	.half	.L1042-.L1041
	.byte	3,28,1,7,9
	.half	.L1043-.L1042
	.byte	3,28,1,7,9
	.half	.L1044-.L1043
	.byte	3,28,1,7,9
	.half	.L1045-.L1044
	.byte	1,5,19,9
	.half	.L151-.L1045
	.byte	3,245,126,1,9
	.half	.L786-.L151
	.byte	3,10,1,5,9,9
	.half	.L792-.L786
	.byte	3,15,1,5,19,9
	.half	.L152-.L792
	.byte	3,3,1,9
	.half	.L793-.L152
	.byte	3,10,1,5,9,9
	.half	.L797-.L793
	.byte	3,15,1,5,19,9
	.half	.L153-.L797
	.byte	3,3,1,9
	.half	.L794-.L153
	.byte	3,10,1,5,9,9
	.half	.L1046-.L794
	.byte	3,15,1,5,19,9
	.half	.L154-.L1046
	.byte	3,3,1,9
	.half	.L796-.L154
	.byte	3,10,1,5,9,9
	.half	.L1047-.L796
	.byte	3,15,1,5,19,9
	.half	.L155-.L1047
	.byte	3,3,1,9
	.half	.L798-.L155
	.byte	3,20,1,5,9,9
	.half	.L799-.L798
	.byte	3,5,1,5,19,9
	.half	.L156-.L799
	.byte	3,3,1,9
	.half	.L800-.L156
	.byte	3,20,1,5,32,9
	.half	.L157-.L800
	.byte	3,11,1,5,1,9
	.half	.L379-.L157
	.byte	3,1,0,1,1
.L1037:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_disableInterruptsAllExceptMaster')
	.sect	'.debug_ranges'
.L378:
	.word	-1,.L264,0,.L379-.L264,0,0
.L682:
	.word	-1,.L264,0,.L680-.L264,-1,.L266,0,.L469-.L266,-1,.L268,0,.L504-.L268,-1,.L270,0,.L499-.L270,-1,.L272,0
	.word	.L454-.L272,-1,.L274,0,.L449-.L274,-1,.L276,0,.L424-.L276,-1,.L278,0,.L399-.L278,-1,.L280,0,.L384-.L280
	.word	0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_28')
	.sect	'.debug_info'
.L380:
	.word	200
	.half	3
	.word	.L381
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L383,.L382
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_28',0,1,148,6,6,1
	.word	.L280,.L384,.L279
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_28')
	.sect	'.debug_abbrev'
.L381:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_28')
	.sect	'.debug_line'
.L382:
	.word	.L1049-.L1048
.L1048:
	.half	3
	.word	.L1051-.L1050
.L1050:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1051:
	.byte	5,19,7,0,5,2
	.word	.L280
	.byte	3,165,6,1,9
	.half	.L1052-.L280
	.byte	3,5,1,9
	.half	.L1053-.L1052
	.byte	3,5,1,5,29,9
	.half	.L1054-.L1053
	.byte	3,2,1,7,9
	.half	.L384-.L1054
	.byte	0,1,1
.L1049:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_28')
	.sect	'.debug_ranges'
.L383:
	.word	-1,.L280,0,.L384-.L280,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_29')
	.sect	'.debug_info'
.L385:
	.word	200
	.half	3
	.word	.L386
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L388,.L387
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_29',0,1,220,4,6,1
	.word	.L262,.L389,.L261
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_29')
	.sect	'.debug_abbrev'
.L386:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_29')
	.sect	'.debug_line'
.L387:
	.word	.L1056-.L1055
.L1055:
	.half	3
	.word	.L1058-.L1057
.L1057:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1058:
	.byte	5,21,7,0,5,2
	.word	.L262
	.byte	3,238,4,1,9
	.half	.L1059-.L262
	.byte	3,5,1,5,34,9
	.half	.L1060-.L1059
	.byte	3,7,1,7,9
	.half	.L389-.L1060
	.byte	0,1,1
.L1056:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_29')
	.sect	'.debug_ranges'
.L388:
	.word	-1,.L262,0,.L389-.L262,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_30')
	.sect	'.debug_info'
.L390:
	.word	200
	.half	3
	.word	.L391
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L393,.L392
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_30',0,1,220,4,6,1
	.word	.L258,.L394,.L257
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_30')
	.sect	'.debug_abbrev'
.L391:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_30')
	.sect	'.debug_line'
.L392:
	.word	.L1062-.L1061
.L1061:
	.half	3
	.word	.L1064-.L1063
.L1063:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1064:
	.byte	5,21,7,0,5,2
	.word	.L258
	.byte	3,212,5,1,9
	.half	.L1065-.L258
	.byte	3,15,1,5,34,9
	.half	.L1066-.L1065
	.byte	3,2,1,7,9
	.half	.L394-.L1066
	.byte	0,1,1
.L1062:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_30')
	.sect	'.debug_ranges'
.L393:
	.word	-1,.L258,0,.L394-.L258,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_31')
	.sect	'.debug_info'
.L395:
	.word	200
	.half	3
	.word	.L396
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L398,.L397
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_31',0,1,148,6,6,1
	.word	.L278,.L399,.L277
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_31')
	.sect	'.debug_abbrev'
.L396:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_31')
	.sect	'.debug_line'
.L397:
	.word	.L1068-.L1067
.L1067:
	.half	3
	.word	.L1070-.L1069
.L1069:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1070:
	.byte	5,19,7,0,5,2
	.word	.L278
	.byte	3,139,7,1,9
	.half	.L1071-.L278
	.byte	3,5,1,9
	.half	.L1072-.L1071
	.byte	3,10,1,5,29,9
	.half	.L1073-.L1072
	.byte	3,2,1,7,9
	.half	.L399-.L1073
	.byte	0,1,1
.L1068:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_31')
	.sect	'.debug_ranges'
.L398:
	.word	-1,.L278,0,.L399-.L278,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_32')
	.sect	'.debug_info'
.L400:
	.word	200
	.half	3
	.word	.L401
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L403,.L402
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_32',0,1,134,1,6,1
	.word	.L202,.L404,.L201
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_32')
	.sect	'.debug_abbrev'
.L401:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_32')
	.sect	'.debug_line'
.L402:
	.word	.L1075-.L1074
.L1074:
	.half	3
	.word	.L1077-.L1076
.L1076:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1077:
	.byte	5,31,7,0,5,2
	.word	.L202
	.byte	3,187,1,1,9
	.half	.L404-.L202
	.byte	0,1,1,5,31,0,5,2
	.word	.L202
	.byte	3,191,1,1,9
	.half	.L1078-.L202
	.byte	3,124,1,7,9
	.half	.L404-.L1078
	.byte	0,1,1,5,31,0,5,2
	.word	.L202
	.byte	3,195,1,1,9
	.half	.L1078-.L202
	.byte	3,120,1,7,9
	.half	.L404-.L1078
	.byte	0,1,1,5,31,0,5,2
	.word	.L202
	.byte	3,199,1,1,9
	.half	.L1078-.L202
	.byte	3,116,1,7,9
	.half	.L404-.L1078
	.byte	0,1,1
.L1075:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_32')
	.sect	'.debug_ranges'
.L403:
	.word	-1,.L202,0,.L404-.L202,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_33')
	.sect	'.debug_info'
.L405:
	.word	200
	.half	3
	.word	.L406
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L408,.L407
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_33',0,1,191,4,6,1
	.word	.L236,.L409,.L235
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_33')
	.sect	'.debug_abbrev'
.L406:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_33')
	.sect	'.debug_line'
.L407:
	.word	.L1080-.L1079
.L1079:
	.half	3
	.word	.L1082-.L1081
.L1081:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1082:
	.byte	5,21,7,0,5,2
	.word	.L236
	.byte	3,197,4,1,5,26,9
	.half	.L767-.L236
	.byte	1,9
	.half	.L409-.L767
	.byte	0,1,1,5,21,0,5,2
	.word	.L236
	.byte	3,198,4,1,5,26,9
	.half	.L767-.L236
	.byte	1,3,127,1,9
	.half	.L409-.L767
	.byte	0,1,1,5,19,0,5,2
	.word	.L236
	.byte	3,214,4,1,5,24,9
	.half	.L767-.L236
	.byte	1,5,26,3,111,1,9
	.half	.L409-.L767
	.byte	0,1,1
.L1080:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_33')
	.sect	'.debug_ranges'
.L408:
	.word	-1,.L236,0,.L409-.L236,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_34')
	.sect	'.debug_info'
.L410:
	.word	200
	.half	3
	.word	.L411
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L413,.L412
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_34',0,1,219,1,17,1
	.word	.L206,.L414,.L205
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_34')
	.sect	'.debug_abbrev'
.L411:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_34')
	.sect	'.debug_line'
.L412:
	.word	.L1084-.L1083
.L1083:
	.half	3
	.word	.L1086-.L1085
.L1085:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1086:
	.byte	5,34,7,0,5,2
	.word	.L206
	.byte	3,130,2,1,9
	.half	.L414-.L206
	.byte	0,1,1,5,34,0,5,2
	.word	.L206
	.byte	3,147,2,1,9
	.half	.L1087-.L206
	.byte	3,111,1,7,9
	.half	.L414-.L1087
	.byte	0,1,1,5,34,0,5,2
	.word	.L206
	.byte	3,164,2,1,9
	.half	.L1087-.L206
	.byte	3,94,1,7,9
	.half	.L414-.L1087
	.byte	0,1,1,5,34,0,5,2
	.word	.L206
	.byte	3,181,2,1,9
	.half	.L1087-.L206
	.byte	3,77,1,7,9
	.half	.L414-.L1087
	.byte	0,1,1,5,34,0,5,2
	.word	.L206
	.byte	3,198,2,1,9
	.half	.L1087-.L206
	.byte	3,188,127,1,7,9
	.half	.L414-.L1087
	.byte	0,1,1,5,34,0,5,2
	.word	.L206
	.byte	3,215,2,1,9
	.half	.L1087-.L206
	.byte	3,171,127,1,7,9
	.half	.L414-.L1087
	.byte	0,1,1
.L1084:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_34')
	.sect	'.debug_ranges'
.L413:
	.word	-1,.L206,0,.L414-.L206,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_35')
	.sect	'.debug_info'
.L415:
	.word	200
	.half	3
	.word	.L416
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L418,.L417
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_35',0,1,215,3,9,1
	.word	.L224,.L419,.L223
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_35')
	.sect	'.debug_abbrev'
.L416:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_35')
	.sect	'.debug_line'
.L417:
	.word	.L1089-.L1088
.L1088:
	.half	3
	.word	.L1091-.L1090
.L1090:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L1091:
	.byte	4,2,5,29,7,0,5,2
	.word	.L224
	.byte	3,203,6,1,5,48,9
	.half	.L746-.L224
	.byte	1,5,53,9
	.half	.L1092-.L746
	.byte	1,9
	.half	.L419-.L1092
	.byte	0,1,1,4,2,5,29,0,5,2
	.word	.L224
	.byte	3,203,6,1,5,48,9
	.half	.L746-.L224
	.byte	1,5,53,9
	.half	.L1092-.L746
	.byte	1,9
	.half	.L419-.L1092
	.byte	0,1,1
.L1089:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_35')
	.sect	'.debug_ranges'
.L418:
	.word	-1,.L224,0,.L419-.L224,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_36')
	.sect	'.debug_info'
.L420:
	.word	200
	.half	3
	.word	.L421
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L423,.L422
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_36',0,1,148,6,6,1
	.word	.L276,.L424,.L275
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_36')
	.sect	'.debug_abbrev'
.L421:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_36')
	.sect	'.debug_line'
.L422:
	.word	.L1094-.L1093
.L1093:
	.half	3
	.word	.L1096-.L1095
.L1095:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1096:
	.byte	5,19,7,0,5,2
	.word	.L276
	.byte	3,155,6,1,9
	.half	.L789-.L276
	.byte	3,5,1,9
	.half	.L1097-.L789
	.byte	3,5,1,9
	.half	.L424-.L1097
	.byte	0,1,1,5,19,0,5,2
	.word	.L276
	.byte	3,155,6,1,9
	.half	.L789-.L276
	.byte	3,33,1,9
	.half	.L1098-.L789
	.byte	3,100,1,9
	.half	.L1097-.L1098
	.byte	3,33,1,9
	.half	.L1099-.L1097
	.byte	3,100,1,7,9
	.half	.L424-.L1099
	.byte	0,1,1,5,19,0,5,2
	.word	.L276
	.byte	3,155,6,1,9
	.half	.L789-.L276
	.byte	3,250,0,1,9
	.half	.L1098-.L789
	.byte	3,139,127,1,9
	.half	.L1097-.L1098
	.byte	3,250,0,1,9
	.half	.L1099-.L1097
	.byte	3,139,127,1,7,9
	.half	.L424-.L1099
	.byte	0,1,1,5,19,0,5,2
	.word	.L276
	.byte	3,155,6,1,9
	.half	.L789-.L276
	.byte	3,150,1,1,9
	.half	.L1098-.L789
	.byte	3,239,126,1,9
	.half	.L1097-.L1098
	.byte	3,150,1,1,9
	.half	.L1099-.L1097
	.byte	3,239,126,1,7,9
	.half	.L424-.L1099
	.byte	0,1,1
.L1094:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_36')
	.sect	'.debug_ranges'
.L423:
	.word	-1,.L276,0,.L424-.L276,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_37')
	.sect	'.debug_info'
.L425:
	.word	200
	.half	3
	.word	.L426
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L428,.L427
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_37',0,1,220,4,6,1
	.word	.L256,.L429,.L255
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_37')
	.sect	'.debug_abbrev'
.L426:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_37')
	.sect	'.debug_line'
.L427:
	.word	.L1101-.L1100
.L1100:
	.half	3
	.word	.L1103-.L1102
.L1102:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1103:
	.byte	5,21,7,0,5,2
	.word	.L256
	.byte	3,184,5,1,9
	.half	.L1104-.L256
	.byte	3,10,1,5,34,9
	.half	.L1105-.L1104
	.byte	3,2,1,7,9
	.half	.L429-.L1105
	.byte	0,1,1
.L1101:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_37')
	.sect	'.debug_ranges'
.L428:
	.word	-1,.L256,0,.L429-.L256,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_38')
	.sect	'.debug_info'
.L430:
	.word	200
	.half	3
	.word	.L431
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L433,.L432
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_38',0,1,220,4,6,1
	.word	.L254,.L434,.L253
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_38')
	.sect	'.debug_abbrev'
.L431:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_38')
	.sect	'.debug_line'
.L432:
	.word	.L1107-.L1106
.L1106:
	.half	3
	.word	.L1109-.L1108
.L1108:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1109:
	.byte	5,21,7,0,5,2
	.word	.L254
	.byte	3,199,5,1,9
	.half	.L1110-.L254
	.byte	3,5,1,5,34,9
	.half	.L1111-.L1110
	.byte	3,2,1,7,9
	.half	.L434-.L1111
	.byte	0,1,1
.L1107:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_38')
	.sect	'.debug_ranges'
.L433:
	.word	-1,.L254,0,.L434-.L254,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_39')
	.sect	'.debug_info'
.L435:
	.word	199
	.half	3
	.word	.L436
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L438,.L437
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_39',0,1,75,6,1
	.word	.L198,.L439,.L197
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_39')
	.sect	'.debug_abbrev'
.L436:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_39')
	.sect	'.debug_line'
.L437:
	.word	.L1113-.L1112
.L1112:
	.half	3
	.word	.L1115-.L1114
.L1114:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1115:
	.byte	5,20,7,0,5,2
	.word	.L198
	.byte	3,255,0,1,9
	.half	.L439-.L198
	.byte	0,1,1,5,21,0,5,2
	.word	.L198
	.byte	3,162,1,1,5,20,9
	.half	.L1116-.L198
	.byte	3,93,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1,5,24,0,5,2
	.word	.L198
	.byte	3,162,1,1,5,20,9
	.half	.L1116-.L198
	.byte	3,93,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1,5,20,0,5,2
	.word	.L198
	.byte	3,174,1,1,9
	.half	.L1116-.L198
	.byte	3,81,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1,5,21,0,5,2
	.word	.L198
	.byte	3,197,4,1,5,20,9
	.half	.L1116-.L198
	.byte	3,186,124,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1,5,21,0,5,2
	.word	.L198
	.byte	3,198,4,1,5,20,9
	.half	.L1116-.L198
	.byte	3,185,124,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1,5,26,0,5,2
	.word	.L198
	.byte	3,197,4,1,5,20,9
	.half	.L1116-.L198
	.byte	3,186,124,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1,5,26,0,5,2
	.word	.L198
	.byte	3,198,4,1,5,20,9
	.half	.L1116-.L198
	.byte	3,185,124,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1,5,24,0,5,2
	.word	.L198
	.byte	3,214,4,1,5,20,9
	.half	.L1116-.L198
	.byte	3,169,124,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1,5,65,0,5,2
	.word	.L198
	.byte	3,213,4,1,5,20,9
	.half	.L1116-.L198
	.byte	3,170,124,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1,5,19,0,5,2
	.word	.L198
	.byte	3,214,4,1,5,20,9
	.half	.L1116-.L198
	.byte	3,169,124,1,7,9
	.half	.L439-.L1116
	.byte	0,1,1
.L1113:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_39')
	.sect	'.debug_ranges'
.L438:
	.word	-1,.L198,0,.L439-.L198,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_40')
	.sect	'.debug_info'
.L440:
	.word	200
	.half	3
	.word	.L441
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L443,.L442
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_40',0,1,220,4,6,1
	.word	.L260,.L444,.L259
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_40')
	.sect	'.debug_abbrev'
.L441:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_40')
	.sect	'.debug_line'
.L442:
	.word	.L1118-.L1117
.L1117:
	.half	3
	.word	.L1120-.L1119
.L1119:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1120:
	.byte	5,21,7,0,5,2
	.word	.L260
	.byte	3,227,5,1,5,29,9
	.half	.L141-.L260
	.byte	3,2,1,5,34,9
	.half	.L1121-.L141
	.byte	1,7,9
	.half	.L1122-.L1121
	.byte	1,7,9
	.half	.L444-.L1122
	.byte	0,1,1,5,21,0,5,2
	.word	.L260
	.byte	3,255,5,1,9
	.half	.L1123-.L260
	.byte	3,100,1,5,29,9
	.half	.L141-.L1123
	.byte	3,30,1,5,34,9
	.half	.L1121-.L141
	.byte	1,7,9
	.half	.L1122-.L1121
	.byte	3,100,1,7,9
	.half	.L444-.L1122
	.byte	0,1,1,5,21,0,5,2
	.word	.L260
	.byte	3,238,4,1,9
	.half	.L1123-.L260
	.byte	3,245,0,1,5,29,9
	.half	.L141-.L1123
	.byte	3,141,127,1,5,34,9
	.half	.L1121-.L141
	.byte	1,7,9
	.half	.L1122-.L1121
	.byte	3,245,0,1,7,9
	.half	.L444-.L1122
	.byte	0,1,1,5,21,0,5,2
	.word	.L260
	.byte	3,138,5,1,9
	.half	.L1123-.L260
	.byte	3,217,0,1,5,29,9
	.half	.L141-.L1123
	.byte	3,169,127,1,5,34,9
	.half	.L1121-.L141
	.byte	1,7,9
	.half	.L1122-.L1121
	.byte	3,217,0,1,7,9
	.half	.L444-.L1122
	.byte	0,1,1,5,21,0,5,2
	.word	.L260
	.byte	3,166,5,1,9
	.half	.L1123-.L260
	.byte	3,61,1,5,29,9
	.half	.L141-.L1123
	.byte	3,69,1,5,34,9
	.half	.L1121-.L141
	.byte	1,7,9
	.half	.L1122-.L1121
	.byte	3,61,1,7,9
	.half	.L444-.L1122
	.byte	0,1,1
.L1118:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_40')
	.sect	'.debug_ranges'
.L443:
	.word	-1,.L260,0,.L444-.L260,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_41')
	.sect	'.debug_info'
.L445:
	.word	200
	.half	3
	.word	.L446
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L448,.L447
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_41',0,1,148,6,6,1
	.word	.L274,.L449,.L273
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_41')
	.sect	'.debug_abbrev'
.L446:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_41')
	.sect	'.debug_line'
.L447:
	.word	.L1125-.L1124
.L1124:
	.half	3
	.word	.L1127-.L1126
.L1126:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1127:
	.byte	5,19,7,0,5,2
	.word	.L274
	.byte	3,159,7,1,5,29,9
	.half	.L791-.L274
	.byte	3,2,1,7,9
	.half	.L449-.L791
	.byte	0,1,1,5,19,0,5,2
	.word	.L274
	.byte	3,175,6,1,9
	.half	.L1128-.L274
	.byte	3,240,0,1,5,29,9
	.half	.L791-.L1128
	.byte	3,2,1,7,9
	.half	.L449-.L791
	.byte	0,1,1,5,19,0,5,2
	.word	.L274
	.byte	3,203,6,1,9
	.half	.L1128-.L274
	.byte	3,212,0,1,5,29,9
	.half	.L791-.L1128
	.byte	3,2,1,7,9
	.half	.L449-.L791
	.byte	0,1,1,5,19,0,5,2
	.word	.L274
	.byte	3,231,6,1,9
	.half	.L1128-.L274
	.byte	3,56,1,5,29,9
	.half	.L791-.L1128
	.byte	3,2,1,7,9
	.half	.L449-.L791
	.byte	0,1,1,5,19,0,5,2
	.word	.L274
	.byte	3,131,7,1,9
	.half	.L1128-.L274
	.byte	3,28,1,5,29,9
	.half	.L791-.L1128
	.byte	3,2,1,7,9
	.half	.L449-.L791
	.byte	0,1,1
.L1125:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_41')
	.sect	'.debug_ranges'
.L448:
	.word	-1,.L274,0,.L449-.L274,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_42')
	.sect	'.debug_info'
.L450:
	.word	200
	.half	3
	.word	.L451
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L453,.L452
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_42',0,1,148,6,6,1
	.word	.L272,.L454,.L271
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_42')
	.sect	'.debug_abbrev'
.L451:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_42')
	.sect	'.debug_line'
.L452:
	.word	.L1130-.L1129
.L1129:
	.half	3
	.word	.L1132-.L1131
.L1131:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1132:
	.byte	5,19,7,0,5,2
	.word	.L272
	.byte	3,187,7,1,5,29,9
	.half	.L790-.L272
	.byte	3,2,1,7,9
	.half	.L454-.L790
	.byte	0,1,1,5,19,0,5,2
	.word	.L272
	.byte	3,170,6,1,9
	.half	.L1133-.L272
	.byte	3,145,1,1,5,29,9
	.half	.L790-.L1133
	.byte	3,2,1,7,9
	.half	.L454-.L790
	.byte	0,1,1,5,19,0,5,2
	.word	.L272
	.byte	3,198,6,1,9
	.half	.L1133-.L272
	.byte	3,245,0,1,5,29,9
	.half	.L790-.L1133
	.byte	3,2,1,7,9
	.half	.L454-.L790
	.byte	0,1,1,5,19,0,5,2
	.word	.L272
	.byte	3,226,6,1,9
	.half	.L1133-.L272
	.byte	3,217,0,1,5,29,9
	.half	.L790-.L1133
	.byte	3,2,1,7,9
	.half	.L454-.L790
	.byte	0,1,1,5,19,0,5,2
	.word	.L272
	.byte	3,254,6,1,9
	.half	.L1133-.L272
	.byte	3,61,1,5,29,9
	.half	.L790-.L1133
	.byte	3,2,1,7,9
	.half	.L454-.L790
	.byte	0,1,1
.L1130:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_42')
	.sect	'.debug_ranges'
.L453:
	.word	-1,.L272,0,.L454-.L272,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_43')
	.sect	'.debug_info'
.L455:
	.word	200
	.half	3
	.word	.L456
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L458,.L457
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_43',0,1,240,2,20,1
	.word	.L210,.L459,.L209
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_43')
	.sect	'.debug_abbrev'
.L456:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_43')
	.sect	'.debug_line'
.L457:
	.word	.L1135-.L1134
.L1134:
	.half	3
	.word	.L1137-.L1136
.L1136:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.h',0,0,0,0,0
.L1137:
	.byte	5,13,7,0,5,2
	.word	.L210
	.byte	3,247,2,1,9
	.half	.L459-.L210
	.byte	0,1,1,4,2,5,29,0,5,2
	.word	.L210
	.byte	3,203,6,1,4,1,5,13,9
	.half	.L1138-.L210
	.byte	3,172,124,1,7,9
	.half	.L459-.L1138
	.byte	0,1,1,4,2,5,29,0,5,2
	.word	.L210
	.byte	3,203,6,1,4,1,5,13,9
	.half	.L1138-.L210
	.byte	3,172,124,1,7,9
	.half	.L459-.L1138
	.byte	0,1,1,4,2,5,29,0,5,2
	.word	.L210
	.byte	3,203,6,1,4,1,5,13,9
	.half	.L1138-.L210
	.byte	3,172,124,1,7,9
	.half	.L459-.L1138
	.byte	0,1,1
.L1135:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_43')
	.sect	'.debug_ranges'
.L458:
	.word	-1,.L210,0,.L459-.L210,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_44')
	.sect	'.debug_info'
.L460:
	.word	200
	.half	3
	.word	.L461
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L463,.L462
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_44',0,1,220,4,6,1
	.word	.L252,.L464,.L251
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_44')
	.sect	'.debug_abbrev'
.L461:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_44')
	.sect	'.debug_line'
.L462:
	.word	.L1140-.L1139
.L1139:
	.half	3
	.word	.L1142-.L1141
.L1141:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1142:
	.byte	5,21,7,0,5,2
	.word	.L252
	.byte	3,156,5,1,9
	.half	.L777-.L252
	.byte	3,5,1,5,29,9
	.half	.L127-.L777
	.byte	3,2,1,5,34,9
	.half	.L1143-.L127
	.byte	1,7,9
	.half	.L1144-.L1143
	.byte	1,7,9
	.half	.L464-.L1144
	.byte	0,1,1,5,21,0,5,2
	.word	.L252
	.byte	3,156,5,1,9
	.half	.L777-.L252
	.byte	3,33,1,9
	.half	.L1145-.L777
	.byte	3,100,1,5,29,9
	.half	.L127-.L1145
	.byte	3,30,1,5,34,9
	.half	.L1143-.L127
	.byte	1,7,9
	.half	.L1144-.L1143
	.byte	3,100,1,7,9
	.half	.L464-.L1144
	.byte	0,1,1,5,21,0,5,2
	.word	.L252
	.byte	3,156,5,1,9
	.half	.L777-.L252
	.byte	3,61,1,9
	.half	.L1145-.L777
	.byte	3,72,1,5,29,9
	.half	.L127-.L1145
	.byte	3,58,1,5,34,9
	.half	.L1143-.L127
	.byte	1,7,9
	.half	.L1144-.L1143
	.byte	3,72,1,7,9
	.half	.L464-.L1144
	.byte	0,1,1,5,21,0,5,2
	.word	.L252
	.byte	3,156,5,1,9
	.half	.L777-.L252
	.byte	3,217,0,1,9
	.half	.L1145-.L777
	.byte	3,172,127,1,5,29,9
	.half	.L127-.L1145
	.byte	3,214,0,1,5,34,9
	.half	.L1143-.L127
	.byte	1,7,9
	.half	.L1144-.L1143
	.byte	3,172,127,1,7,9
	.half	.L464-.L1144
	.byte	0,1,1
.L1140:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_44')
	.sect	'.debug_ranges'
.L463:
	.word	-1,.L252,0,.L464-.L252,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_45')
	.sect	'.debug_info'
.L465:
	.word	200
	.half	3
	.word	.L466
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L468,.L467
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_45',0,1,148,6,6,1
	.word	.L266,.L469,.L265
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_45')
	.sect	'.debug_abbrev'
.L466:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_45')
	.sect	'.debug_line'
.L467:
	.word	.L1147-.L1146
.L1146:
	.half	3
	.word	.L1149-.L1148
.L1148:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1149:
	.byte	5,19,7,0,5,2
	.word	.L266
	.byte	3,211,6,1,9
	.half	.L1150-.L266
	.byte	3,5,1,5,29,9
	.half	.L1151-.L1150
	.byte	3,2,1,7,9
	.half	.L469-.L1151
	.byte	0,1,1
.L1147:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_45')
	.sect	'.debug_ranges'
.L468:
	.word	-1,.L266,0,.L469-.L266,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_46')
	.sect	'.debug_info'
.L470:
	.word	200
	.half	3
	.word	.L471
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L473,.L472
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_46',0,1,220,4,6,1
	.word	.L250,.L474,.L249
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_46')
	.sect	'.debug_abbrev'
.L471:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_46')
	.sect	'.debug_line'
.L472:
	.word	.L1153-.L1152
.L1152:
	.half	3
	.word	.L1155-.L1154
.L1154:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1155:
	.byte	5,21,7,0,5,2
	.word	.L250
	.byte	3,133,5,1,5,29,9
	.half	.L121-.L250
	.byte	3,2,1,5,34,9
	.half	.L1156-.L121
	.byte	1,7,9
	.half	.L1157-.L1156
	.byte	1,7,9
	.half	.L474-.L1157
	.byte	0,1,1,5,21,0,5,2
	.word	.L250
	.byte	3,194,5,1,9
	.half	.L1158-.L250
	.byte	3,67,1,5,29,9
	.half	.L121-.L1158
	.byte	3,63,1,5,34,9
	.half	.L1156-.L121
	.byte	1,7,9
	.half	.L1157-.L1156
	.byte	3,67,1,7,9
	.half	.L474-.L1157
	.byte	0,1,1,5,21,0,5,2
	.word	.L250
	.byte	3,222,5,1,9
	.half	.L1158-.L250
	.byte	3,167,127,1,5,29,9
	.half	.L121-.L1158
	.byte	3,219,0,1,5,34,9
	.half	.L1156-.L121
	.byte	1,7,9
	.half	.L1157-.L1156
	.byte	3,167,127,1,7,9
	.half	.L474-.L1157
	.byte	0,1,1,5,21,0,5,2
	.word	.L250
	.byte	3,250,5,1,9
	.half	.L1158-.L250
	.byte	3,139,127,1,5,29,9
	.half	.L121-.L1158
	.byte	3,247,0,1,5,34,9
	.half	.L1156-.L121
	.byte	1,7,9
	.half	.L1157-.L1156
	.byte	3,139,127,1,7,9
	.half	.L474-.L1157
	.byte	0,1,1
.L1153:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_46')
	.sect	'.debug_ranges'
.L473:
	.word	-1,.L250,0,.L474-.L250,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_47')
	.sect	'.debug_info'
.L475:
	.word	200
	.half	3
	.word	.L476
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L478,.L477
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_47',0,1,220,4,6,1
	.word	.L248,.L479,.L247
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_47')
	.sect	'.debug_abbrev'
.L476:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_47')
	.sect	'.debug_line'
.L477:
	.word	.L1160-.L1159
.L1159:
	.half	3
	.word	.L1162-.L1161
.L1161:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1162:
	.byte	5,21,7,0,5,2
	.word	.L248
	.byte	3,232,5,1,5,29,9
	.half	.L142-.L248
	.byte	3,2,1,5,34,9
	.half	.L1163-.L142
	.byte	1,7,9
	.half	.L1164-.L1163
	.byte	1,7,9
	.half	.L479-.L1164
	.byte	0,1,1,5,21,0,5,2
	.word	.L248
	.byte	3,204,5,1,9
	.half	.L1165-.L248
	.byte	3,28,1,5,29,9
	.half	.L142-.L1165
	.byte	3,102,1,5,34,9
	.half	.L1163-.L142
	.byte	1,7,9
	.half	.L1164-.L1163
	.byte	3,28,1,7,9
	.half	.L479-.L1164
	.byte	0,1,1,5,21,0,5,2
	.word	.L248
	.byte	3,248,4,1,9
	.half	.L1165-.L248
	.byte	3,240,0,1,5,29,9
	.half	.L142-.L1165
	.byte	3,146,127,1,5,34,9
	.half	.L1163-.L142
	.byte	1,7,9
	.half	.L1164-.L1163
	.byte	3,240,0,1,7,9
	.half	.L479-.L1164
	.byte	0,1,1,5,21,0,5,2
	.word	.L248
	.byte	3,148,5,1,9
	.half	.L1165-.L248
	.byte	3,212,0,1,5,29,9
	.half	.L142-.L1165
	.byte	3,174,127,1,5,34,9
	.half	.L1163-.L142
	.byte	1,7,9
	.half	.L1164-.L1163
	.byte	3,212,0,1,7,9
	.half	.L479-.L1164
	.byte	0,1,1,5,21,0,5,2
	.word	.L248
	.byte	3,176,5,1,9
	.half	.L1165-.L248
	.byte	3,56,1,5,29,9
	.half	.L142-.L1165
	.byte	3,74,1,5,34,9
	.half	.L1163-.L142
	.byte	1,7,9
	.half	.L1164-.L1163
	.byte	3,56,1,7,9
	.half	.L479-.L1164
	.byte	0,1,1
.L1160:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_47')
	.sect	'.debug_ranges'
.L478:
	.word	-1,.L248,0,.L479-.L248,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_48')
	.sect	'.debug_info'
.L480:
	.word	200
	.half	3
	.word	.L481
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L483,.L482
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_48',0,1,220,4,6,1
	.word	.L244,.L484,.L243
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_48')
	.sect	'.debug_abbrev'
.L481:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_48')
	.sect	'.debug_line'
.L482:
	.word	.L1167-.L1166
.L1166:
	.half	3
	.word	.L1169-.L1168
.L1168:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1169:
	.byte	5,21,7,0,5,2
	.word	.L244
	.byte	3,132,6,1,5,29,9
	.half	.L148-.L244
	.byte	3,2,1,5,34,9
	.half	.L1170-.L148
	.byte	1,7,9
	.half	.L1171-.L1170
	.byte	1,7,9
	.half	.L484-.L1171
	.byte	0,1,1,5,21,0,5,2
	.word	.L244
	.byte	3,199,5,1,9
	.half	.L1172-.L244
	.byte	3,61,1,5,29,9
	.half	.L148-.L1172
	.byte	3,69,1,5,34,9
	.half	.L1170-.L148
	.byte	1,7,9
	.half	.L1171-.L1170
	.byte	3,61,1,7,9
	.half	.L484-.L1171
	.byte	0,1,1,5,21,0,5,2
	.word	.L244
	.byte	3,243,4,1,9
	.half	.L1172-.L244
	.byte	3,145,1,1,5,29,9
	.half	.L148-.L1172
	.byte	3,241,126,1,5,34,9
	.half	.L1170-.L148
	.byte	1,7,9
	.half	.L1171-.L1170
	.byte	3,145,1,1,7,9
	.half	.L484-.L1171
	.byte	0,1,1,5,21,0,5,2
	.word	.L244
	.byte	3,143,5,1,9
	.half	.L1172-.L244
	.byte	3,245,0,1,5,29,9
	.half	.L148-.L1172
	.byte	3,141,127,1,5,34,9
	.half	.L1170-.L148
	.byte	1,7,9
	.half	.L1171-.L1170
	.byte	3,245,0,1,7,9
	.half	.L484-.L1171
	.byte	0,1,1,5,21,0,5,2
	.word	.L244
	.byte	3,171,5,1,9
	.half	.L1172-.L244
	.byte	3,217,0,1,5,29,9
	.half	.L148-.L1172
	.byte	3,169,127,1,5,34,9
	.half	.L1170-.L148
	.byte	1,7,9
	.half	.L1171-.L1170
	.byte	3,217,0,1,7,9
	.half	.L484-.L1171
	.byte	0,1,1
.L1167:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_48')
	.sect	'.debug_ranges'
.L483:
	.word	-1,.L244,0,.L484-.L244,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_49')
	.sect	'.debug_info'
.L485:
	.word	200
	.half	3
	.word	.L486
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L488,.L487
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_49',0,1,220,4,6,1
	.word	.L246,.L489,.L245
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_49')
	.sect	'.debug_abbrev'
.L486:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_49')
	.sect	'.debug_line'
.L487:
	.word	.L1174-.L1173
.L1173:
	.half	3
	.word	.L1176-.L1175
.L1175:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1176:
	.byte	5,21,7,0,5,2
	.word	.L246
	.byte	3,132,6,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L489-.L1177
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,199,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,61,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,243,4,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,145,1,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,143,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,245,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,171,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,217,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,232,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,28,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,204,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,56,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,248,4,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,140,1,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,148,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,240,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,176,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,212,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,133,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,255,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,194,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,194,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,222,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,38,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,250,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,10,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,161,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,227,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,189,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,199,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,217,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,43,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,245,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,15,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,227,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,33,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,255,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,5,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,238,4,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,150,1,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,138,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,250,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1,5,21,0,5,2
	.word	.L246
	.byte	3,166,5,1,5,29,9
	.half	.L1177-.L246
	.byte	1,9
	.half	.L784-.L1177
	.byte	3,222,0,1,7,9
	.half	.L489-.L784
	.byte	0,1,1
.L1174:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_49')
	.sect	'.debug_ranges'
.L488:
	.word	-1,.L246,0,.L489-.L246,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_50')
	.sect	'.debug_info'
.L490:
	.word	200
	.half	3
	.word	.L491
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L493,.L492
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_50',0,1,220,4,6,1
	.word	.L242,.L494,.L241
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_50')
	.sect	'.debug_abbrev'
.L491:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_50')
	.sect	'.debug_line'
.L492:
	.word	.L1179-.L1178
.L1178:
	.half	3
	.word	.L1181-.L1180
.L1180:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1181:
	.byte	5,21,7,0,5,2
	.word	.L242
	.byte	3,128,5,1,5,29,9
	.half	.L1182-.L242
	.byte	1,9
	.half	.L1183-.L1182
	.byte	3,102,1,5,34,9
	.half	.L1184-.L1183
	.byte	3,26,1,5,29,9
	.half	.L120-.L1184
	.byte	3,2,1,5,34,9
	.half	.L1185-.L120
	.byte	1,7,9
	.half	.L1186-.L1185
	.byte	1,7,9
	.half	.L494-.L1186
	.byte	0,1,1,5,21,0,5,2
	.word	.L242
	.byte	3,156,5,1,5,29,9
	.half	.L1182-.L242
	.byte	1,9
	.half	.L1183-.L1182
	.byte	3,74,1,5,34,9
	.half	.L1184-.L1183
	.byte	3,54,1,5,29,9
	.half	.L120-.L1184
	.byte	3,2,1,5,34,9
	.half	.L1185-.L120
	.byte	1,7,9
	.half	.L1186-.L1185
	.byte	3,100,1,7,9
	.half	.L494-.L1186
	.byte	0,1,1,5,21,0,5,2
	.word	.L242
	.byte	3,184,5,1,5,29,9
	.half	.L1182-.L242
	.byte	1,9
	.half	.L1183-.L1182
	.byte	3,174,127,1,5,34,9
	.half	.L1184-.L1183
	.byte	3,210,0,1,5,29,9
	.half	.L120-.L1184
	.byte	3,2,1,5,34,9
	.half	.L1185-.L120
	.byte	1,7,9
	.half	.L1186-.L1185
	.byte	3,72,1,7,9
	.half	.L494-.L1186
	.byte	0,1,1,5,21,0,5,2
	.word	.L242
	.byte	3,212,5,1,5,29,9
	.half	.L1182-.L242
	.byte	1,9
	.half	.L1183-.L1182
	.byte	3,146,127,1,5,34,9
	.half	.L1184-.L1183
	.byte	3,238,0,1,5,29,9
	.half	.L120-.L1184
	.byte	3,2,1,5,34,9
	.half	.L1185-.L120
	.byte	1,7,9
	.half	.L1186-.L1185
	.byte	3,172,127,1,7,9
	.half	.L494-.L1186
	.byte	0,1,1,5,21,0,5,2
	.word	.L242
	.byte	3,240,5,1,5,29,9
	.half	.L1182-.L242
	.byte	1,9
	.half	.L1183-.L1182
	.byte	3,246,126,1,5,34,9
	.half	.L1184-.L1183
	.byte	3,138,1,1,5,29,9
	.half	.L120-.L1184
	.byte	3,2,1,5,34,9
	.half	.L1185-.L120
	.byte	1,7,9
	.half	.L1186-.L1185
	.byte	3,144,127,1,7,9
	.half	.L494-.L1186
	.byte	0,1,1
.L1179:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_50')
	.sect	'.debug_ranges'
.L493:
	.word	-1,.L242,0,.L494-.L242,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_51')
	.sect	'.debug_info'
.L495:
	.word	200
	.half	3
	.word	.L496
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L498,.L497
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_51',0,1,148,6,6,1
	.word	.L270,.L499,.L269
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_51')
	.sect	'.debug_abbrev'
.L496:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_51')
	.sect	'.debug_line'
.L497:
	.word	.L1188-.L1187
.L1187:
	.half	3
	.word	.L1190-.L1189
.L1189:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1190:
	.byte	5,19,7,0,5,2
	.word	.L270
	.byte	3,211,6,1,9
	.half	.L795-.L270
	.byte	3,5,1,9
	.half	.L499-.L795
	.byte	0,1,1,5,19,0,5,2
	.word	.L270
	.byte	3,239,6,1,9
	.half	.L1191-.L270
	.byte	3,100,1,9
	.half	.L795-.L1191
	.byte	3,33,1,9
	.half	.L1192-.L795
	.byte	3,100,1,7,9
	.half	.L499-.L1192
	.byte	0,1,1,5,19,0,5,2
	.word	.L270
	.byte	3,139,7,1,9
	.half	.L1191-.L270
	.byte	3,72,1,9
	.half	.L795-.L1191
	.byte	3,61,1,9
	.half	.L1192-.L795
	.byte	3,72,1,7,9
	.half	.L499-.L1192
	.byte	0,1,1,5,19,0,5,2
	.word	.L270
	.byte	3,167,7,1,9
	.half	.L1191-.L270
	.byte	3,172,127,1,9
	.half	.L795-.L1191
	.byte	3,217,0,1,9
	.half	.L1192-.L795
	.byte	3,172,127,1,7,9
	.half	.L499-.L1192
	.byte	0,1,1
.L1188:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_51')
	.sect	'.debug_ranges'
.L498:
	.word	-1,.L270,0,.L499-.L270,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_52')
	.sect	'.debug_info'
.L500:
	.word	200
	.half	3
	.word	.L501
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L503,.L502
	.byte	2
	.word	.L281
	.byte	3
	.byte	'.cocofun_52',0,1,148,6,6,1
	.word	.L268,.L504,.L267
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_52')
	.sect	'.debug_abbrev'
.L501:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_52')
	.sect	'.debug_line'
.L502:
	.word	.L1194-.L1193
.L1193:
	.half	3
	.word	.L1196-.L1195
.L1195:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Std\\IfxCpu.c',0,0,0,0,0
.L1196:
	.byte	5,19,7,0,5,2
	.word	.L268
	.byte	3,216,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,244,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,100,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,211,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,5,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,239,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,105,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,139,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,77,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,167,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,177,127,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,187,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,157,127,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,170,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,46,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,198,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,18,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,226,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,118,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,254,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,90,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,159,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,185,127,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,175,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,41,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,203,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,13,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,231,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,113,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,131,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,85,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,155,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,61,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,183,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,33,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,144,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,72,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,172,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,172,127,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,160,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,56,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,188,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,28,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,149,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,67,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,177,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,167,127,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,154,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,190,127,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,182,7,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,162,127,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,165,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,51,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,193,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,23,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,221,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,123,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1,5,19,0,5,2
	.word	.L268
	.byte	3,249,6,1,5,23,9
	.half	.L1197-.L268
	.byte	1,5,26,9
	.half	.L171-.L1197
	.byte	3,2,1,5,29,9
	.half	.L1198-.L171
	.byte	1,7,9
	.half	.L1199-.L1198
	.byte	3,95,1,7,9
	.half	.L504-.L1199
	.byte	0,1,1
.L1194:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_52')
	.sect	'.debug_ranges'
.L503:
	.word	-1,.L268,0,.L504-.L268,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_28')
	.sect	'.debug_loc'
.L279:
	.word	-1,.L280,0,.L384-.L280
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_29')
	.sect	'.debug_loc'
.L261:
	.word	-1,.L262,0,.L389-.L262
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_30')
	.sect	'.debug_loc'
.L257:
	.word	-1,.L258,0,.L394-.L258
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_31')
	.sect	'.debug_loc'
.L277:
	.word	-1,.L278,0,.L399-.L278
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_32')
	.sect	'.debug_loc'
.L201:
	.word	-1,.L202,0,.L404-.L202
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_33')
	.sect	'.debug_loc'
.L235:
	.word	-1,.L236,0,.L409-.L236
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_34')
	.sect	'.debug_loc'
.L205:
	.word	-1,.L206,0,.L414-.L206
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_35')
	.sect	'.debug_loc'
.L223:
	.word	-1,.L224,0,.L419-.L224
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_36')
	.sect	'.debug_loc'
.L275:
	.word	-1,.L276,0,.L424-.L276
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_37')
	.sect	'.debug_loc'
.L255:
	.word	-1,.L256,0,.L429-.L256
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_38')
	.sect	'.debug_loc'
.L253:
	.word	-1,.L254,0,.L434-.L254
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_39')
	.sect	'.debug_loc'
.L197:
	.word	-1,.L198,0,.L439-.L198
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_40')
	.sect	'.debug_loc'
.L259:
	.word	-1,.L260,0,.L444-.L260
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_41')
	.sect	'.debug_loc'
.L273:
	.word	-1,.L274,0,.L449-.L274
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_42')
	.sect	'.debug_loc'
.L271:
	.word	-1,.L272,0,.L454-.L272
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_43')
	.sect	'.debug_loc'
.L209:
	.word	-1,.L210,0,.L459-.L210
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_44')
	.sect	'.debug_loc'
.L251:
	.word	-1,.L252,0,.L464-.L252
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_45')
	.sect	'.debug_loc'
.L265:
	.word	-1,.L266,0,.L469-.L266
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_46')
	.sect	'.debug_loc'
.L249:
	.word	-1,.L250,0,.L474-.L250
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_47')
	.sect	'.debug_loc'
.L247:
	.word	-1,.L248,0,.L479-.L248
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_48')
	.sect	'.debug_loc'
.L243:
	.word	-1,.L244,0,.L484-.L244
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_49')
	.sect	'.debug_loc'
.L245:
	.word	-1,.L246,0,.L489-.L246
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_50')
	.sect	'.debug_loc'
.L241:
	.word	-1,.L242,0,.L494-.L242
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_51')
	.sect	'.debug_loc'
.L269:
	.word	-1,.L270,0,.L499-.L270
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_52')
	.sect	'.debug_loc'
.L267:
	.word	-1,.L268,0,.L504-.L268
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_loc'
.L193:
	.word	-1,.L194,0,.L684-.L194
	.half	2
	.byte	138,0
	.word	.L684-.L194,.L571-.L194
	.half	2
	.byte	138,8
	.word	.L571-.L194,.L571-.L194
	.half	2
	.byte	138,0
	.word	0,0
.L573:
	.word	-1,.L194,0,.L571-.L194
	.half	1
	.byte	100
	.word	0,0
.L574:
	.word	-1,.L194,.L685-.L194,.L571-.L194
	.half	1
	.byte	82
	.word	0,0
.L576:
	.word	-1,.L194,0,.L571-.L194
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_disableInterruptsAllExceptMaster')
	.sect	'.debug_loc'
.L263:
	.word	-1,.L264,0,.L680-.L264
	.half	2
	.byte	138,0
	.word	0,0
.L681:
	.word	-1,.L264,0,.L785-.L264
	.half	1
	.byte	84
	.word	.L785-.L264,.L786-.L264
	.half	1
	.byte	95
	.word	.L152-.L264,.L793-.L264
	.half	1
	.byte	95
	.word	.L153-.L264,.L794-.L264
	.half	1
	.byte	95
	.word	.L270-.L264,.L795-.L264
	.half	1
	.byte	95
	.word	.L154-.L264,.L796-.L264
	.half	1
	.byte	95
	.word	.L155-.L264,.L798-.L264
	.half	1
	.byte	95
	.word	.L156-.L264,.L800-.L264
	.half	1
	.byte	95
	.word	0,0
.L683:
	.word	-1,.L264,.L785-.L264,.L787-.L264
	.half	1
	.byte	82
	.word	.L788-.L264,.L786-.L264
	.half	1
	.byte	88
	.word	.L268-.L264,.L504-.L264
	.half	1
	.byte	88
	.word	.L789-.L264,.L424-.L264
	.half	1
	.byte	88
	.word	.L272-.L264,.L790-.L264
	.half	1
	.byte	88
	.word	.L274-.L264,.L791-.L264
	.half	1
	.byte	88
	.word	.L792-.L264,.L793-.L264
	.half	1
	.byte	88
	.word	.L270-.L264,.L499-.L264
	.half	1
	.byte	88
	.word	.L797-.L264,.L798-.L264
	.half	1
	.byte	88
	.word	.L799-.L264,.L800-.L264
	.half	1
	.byte	88
	.word	.L157-.L264,.L680-.L264
	.half	1
	.byte	88
	.word	.L801-.L264,.L680-.L264
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_disableOverlayBlock')
	.sect	'.debug_loc'
.L195:
	.word	-1,.L196,0,.L588-.L196
	.half	2
	.byte	138,0
	.word	0,0
.L589:
	.word	-1,.L196,0,.L686-.L196
	.half	1
	.byte	84
	.word	.L687-.L196,.L688-.L196
	.half	1
	.byte	95
	.word	.L5-.L196,.L693-.L196
	.half	1
	.byte	95
	.word	.L6-.L196,.L694-.L196
	.half	1
	.byte	95
	.word	.L7-.L196,.L695-.L196
	.half	1
	.byte	95
	.word	.L8-.L196,.L696-.L196
	.half	1
	.byte	95
	.word	.L9-.L196,.L697-.L196
	.half	1
	.byte	95
	.word	0,0
.L592:
	.word	-1,.L196,.L688-.L196,.L5-.L196
	.half	1
	.byte	108
	.word	.L693-.L196,.L6-.L196
	.half	1
	.byte	108
	.word	.L694-.L196,.L7-.L196
	.half	1
	.byte	108
	.word	.L695-.L196,.L8-.L196
	.half	1
	.byte	108
	.word	.L696-.L196,.L9-.L196
	.half	1
	.byte	108
	.word	.L198-.L196,.L439-.L196
	.half	1
	.byte	108
	.word	.L697-.L196,.L588-.L196
	.half	1
	.byte	108
	.word	0,0
.L594:
	.word	-1,.L196,.L690-.L196,.L691-.L196
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L596:
	.word	-1,.L196,.L692-.L196,.L691-.L196
	.half	1
	.byte	81
	.word	0,0
.L590:
	.word	-1,.L196,0,.L686-.L196
	.half	1
	.byte	85
	.word	.L198-.L196,.L439-.L196
	.half	1
	.byte	88
	.word	.L686-.L196,.L588-.L196
	.half	1
	.byte	88
	.word	0,0
.L597:
	.word	-1,.L196,.L686-.L196,.L689-.L196
	.half	1
	.byte	82
	.word	.L698-.L196,.L691-.L196
	.half	1
	.byte	84
	.word	.L198-.L196,.L439-.L196
	.half	1
	.byte	89
	.word	.L699-.L196,.L588-.L196
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_emitEvent')
	.sect	'.debug_loc'
.L231:
	.word	-1,.L232,0,.L661-.L232
	.half	2
	.byte	138,0
	.word	0,0
.L662:
	.word	-1,.L232,0,.L661-.L232
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_enableOverlayBlock')
	.sect	'.debug_loc'
.L199:
	.word	-1,.L200,0,.L598-.L200
	.half	2
	.byte	138,0
	.word	0,0
.L599:
	.word	-1,.L200,.L198-.L200,.L439-.L200
	.half	1
	.byte	84
	.word	.L198-.L200,.L439-.L200
	.half	1
	.byte	88
	.word	0,.L714-.L200
	.half	1
	.byte	84
	.word	.L202-.L200,.L404-.L200
	.half	1
	.byte	88
	.word	.L708-.L200,.L27-.L200
	.half	1
	.byte	88
	.word	.L718-.L200,.L28-.L200
	.half	1
	.byte	88
	.word	.L719-.L200,.L29-.L200
	.half	1
	.byte	88
	.word	.L720-.L200,.L598-.L200
	.half	1
	.byte	88
	.word	0,0
.L612:
	.word	-1,.L200,.L198-.L200,.L439-.L200
	.half	5
	.byte	144,32,157,32,0
	.word	.L713-.L200,.L714-.L200
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L607:
	.word	-1,.L200,.L700-.L200,.L16-.L200
	.half	1
	.byte	111
	.word	.L701-.L200,.L17-.L200
	.half	1
	.byte	111
	.word	.L702-.L200,.L18-.L200
	.half	1
	.byte	111
	.word	.L703-.L200,.L19-.L200
	.half	1
	.byte	111
	.word	.L704-.L200,.L20-.L200
	.half	1
	.byte	111
	.word	.L198-.L200,.L439-.L200
	.half	1
	.byte	111
	.word	.L25-.L200,.L705-.L200
	.half	1
	.byte	111
	.word	0,0
.L617:
	.word	-1,.L200,.L202-.L200,.L404-.L200
	.half	1
	.byte	81
	.word	.L716-.L200,.L27-.L200
	.half	1
	.byte	81
	.word	.L718-.L200,.L28-.L200
	.half	1
	.byte	81
	.word	.L719-.L200,.L29-.L200
	.half	1
	.byte	81
	.word	.L720-.L200,.L598-.L200
	.half	1
	.byte	81
	.word	0,0
.L604:
	.word	-1,.L200,.L198-.L200,.L439-.L200
	.half	1
	.byte	87
	.word	0,.L715-.L200
	.half	1
	.byte	87
	.word	0,0
.L606:
	.word	-1,.L200,.L198-.L200,.L439-.L200
	.half	2
	.byte	145,4
	.word	.L198-.L200,.L439-.L200
	.half	2
	.byte	145,4
	.word	.L198-.L200,.L439-.L200
	.half	1
	.byte	81
	.word	.L706-.L200,.L707-.L200
	.half	1
	.byte	81
	.word	.L202-.L200,.L404-.L200
	.half	2
	.byte	145,4
	.word	.L202-.L200,.L404-.L200
	.half	2
	.byte	145,4
	.word	0,.L27-.L200
	.half	2
	.byte	145,4
	.word	0,.L27-.L200
	.half	2
	.byte	145,4
	.word	.L718-.L200,.L28-.L200
	.half	2
	.byte	145,4
	.word	.L718-.L200,.L28-.L200
	.half	2
	.byte	145,4
	.word	.L719-.L200,.L29-.L200
	.half	2
	.byte	145,4
	.word	.L719-.L200,.L29-.L200
	.half	2
	.byte	145,4
	.word	.L720-.L200,.L598-.L200
	.half	2
	.byte	145,4
	.word	.L720-.L200,.L598-.L200
	.half	2
	.byte	145,4
	.word	0,0
.L600:
	.word	-1,.L200,.L198-.L200,.L439-.L200
	.half	1
	.byte	85
	.word	0,.L714-.L200
	.half	1
	.byte	85
	.word	0,0
.L602:
	.word	-1,.L200,.L198-.L200,.L439-.L200
	.half	1
	.byte	86
	.word	0,.L714-.L200
	.half	1
	.byte	86
	.word	0,0
.L610:
	.word	-1,.L200,.L710-.L200,.L711-.L200
	.half	1
	.byte	82
	.word	.L712-.L200,.L713-.L200
	.half	1
	.byte	82
	.word	.L198-.L200,.L439-.L200
	.half	1
	.byte	81
	.word	.L711-.L200,.L714-.L200
	.half	1
	.byte	81
	.word	0,0
.L614:
	.word	-1,.L200,.L714-.L200,.L616-.L200
	.half	1
	.byte	82
	.word	.L202-.L200,.L404-.L200
	.half	1
	.byte	89
	.word	.L717-.L200,.L27-.L200
	.half	1
	.byte	89
	.word	.L718-.L200,.L28-.L200
	.half	1
	.byte	89
	.word	.L719-.L200,.L29-.L200
	.half	1
	.byte	89
	.word	.L720-.L200,.L598-.L200
	.half	1
	.byte	89
	.word	.L721-.L200,.L598-.L200
	.half	1
	.byte	84
	.word	0,0
.L605:
	.word	-1,.L200,.L198-.L200,.L439-.L200
	.half	2
	.byte	145,0
	.word	.L198-.L200,.L439-.L200
	.half	5
	.byte	144,32,157,32,0
	.word	.L198-.L200,.L439-.L200
	.half	2
	.byte	145,0
	.word	.L708-.L200,.L709-.L200
	.half	5
	.byte	144,32,157,32,0
	.word	.L202-.L200,.L404-.L200
	.half	2
	.byte	145,0
	.word	.L202-.L200,.L404-.L200
	.half	2
	.byte	145,0
	.word	0,.L27-.L200
	.half	2
	.byte	145,0
	.word	0,.L27-.L200
	.half	2
	.byte	145,0
	.word	.L718-.L200,.L28-.L200
	.half	2
	.byte	145,0
	.word	.L718-.L200,.L28-.L200
	.half	2
	.byte	145,0
	.word	.L719-.L200,.L29-.L200
	.half	2
	.byte	145,0
	.word	.L719-.L200,.L29-.L200
	.half	2
	.byte	145,0
	.word	.L720-.L200,.L598-.L200
	.half	2
	.byte	145,0
	.word	.L720-.L200,.L598-.L200
	.half	2
	.byte	145,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_loc'
.L203:
	.word	-1,.L204,0,.L506-.L204
	.half	2
	.byte	138,0
	.word	0,0
.L508:
	.word	-1,.L204,0,.L722-.L204
	.half	1
	.byte	100
	.word	.L723-.L204,.L724-.L204
	.half	1
	.byte	111
	.word	.L206-.L204,.L730-.L204
	.half	1
	.byte	111
	.word	.L43-.L204,.L731-.L204
	.half	1
	.byte	111
	.word	.L44-.L204,.L732-.L204
	.half	1
	.byte	111
	.word	.L45-.L204,.L733-.L204
	.half	1
	.byte	111
	.word	.L46-.L204,.L734-.L204
	.half	1
	.byte	111
	.word	.L47-.L204,.L735-.L204
	.half	1
	.byte	111
	.word	0,0
.L510:
	.word	-1,.L204,.L516-.L204,.L724-.L204
	.half	1
	.byte	82
	.word	.L206-.L204,.L414-.L204
	.half	1
	.byte	82
	.word	.L736-.L204,.L506-.L204
	.half	1
	.byte	82
	.word	0,0
.L512:
	.word	-1,.L204,.L728-.L204,.L37-.L204
	.half	5
	.byte	144,32,157,32,0
	.word	.L38-.L204,.L729-.L204
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L514:
	.word	-1,.L204,.L722-.L204,.L516-.L204
	.half	1
	.byte	82
	.word	.L725-.L204,.L724-.L204
	.half	1
	.byte	95
	.word	.L43-.L204,.L731-.L204
	.half	1
	.byte	95
	.word	.L44-.L204,.L732-.L204
	.half	1
	.byte	95
	.word	.L45-.L204,.L733-.L204
	.half	1
	.byte	95
	.word	.L46-.L204,.L734-.L204
	.half	1
	.byte	95
	.word	.L47-.L204,.L735-.L204
	.half	1
	.byte	95
	.word	0,0
.L520:
	.word	-1,.L204,.L726-.L204,.L727-.L204
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getCpuResetStatus')
	.sect	'.debug_loc'
.L237:
	.word	-1,.L238,0,.L566-.L238
	.half	2
	.byte	138,0
	.word	0,0
.L567:
	.word	-1,.L238,.L210-.L238,.L459-.L238
	.half	1
	.byte	84
	.word	.L198-.L238,.L439-.L238
	.half	1
	.byte	84
	.word	.L236-.L238,.L768-.L238
	.half	1
	.byte	84
	.word	0,.L566-.L238
	.half	1
	.byte	84
	.word	0,0
.L569:
	.word	0,0
.L570:
	.word	-1,.L238,.L770-.L238,.L102-.L238
	.half	1
	.byte	111
	.word	.L198-.L238,.L439-.L238
	.half	1
	.byte	111
	.word	.L236-.L238,.L768-.L238
	.half	1
	.byte	111
	.word	.L103-.L238,.L566-.L238
	.half	1
	.byte	111
	.word	0,0
.L568:
	.word	-1,.L238,.L771-.L238,.L439-.L238
	.half	1
	.byte	82
	.word	.L236-.L238,.L768-.L238
	.half	1
	.byte	82
	.word	.L772-.L238,.L566-.L238
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_loc'
.L207:
	.word	-1,.L208,0,.L521-.L208
	.half	2
	.byte	138,0
	.word	0,0
.L522:
	.word	-1,.L208,.L737-.L208,.L459-.L208
	.half	1
	.byte	100
	.word	0,.L521-.L208
	.half	1
	.byte	100
	.word	0,0
.L525:
	.word	0,0
.L524:
	.word	-1,.L208,.L737-.L208,.L459-.L208
	.half	1
	.byte	82
	.word	0,.L521-.L208
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_loc'
.L211:
	.word	-1,.L212,0,.L618-.L212
	.half	2
	.byte	138,0
	.word	0,0
.L628:
	.word	0,0
.L632:
	.word	0,0
.L636:
	.word	-1,.L212,.L738-.L212,.L618-.L212
	.half	1
	.byte	82
	.word	0,0
.L620:
	.word	-1,.L212,0,.L618-.L212
	.half	1
	.byte	100
	.word	0,0
.L630:
	.word	0,0
.L621:
	.word	-1,.L212,.L623-.L212,.L618-.L212
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_loc'
.L213:
	.word	-1,.L214,0,.L637-.L214
	.half	2
	.byte	138,0
	.word	0,0
.L640:
	.word	-1,.L214,0,.L739-.L214
	.half	1
	.byte	85
	.word	.L739-.L214,.L741-.L214
	.half	1
	.byte	95
	.word	0,0
.L639:
	.word	-1,.L214,0,.L739-.L214
	.half	1
	.byte	84
	.word	.L740-.L214,.L637-.L214
	.half	1
	.byte	88
	.word	0,0
.L641:
	.word	-1,.L214,.L739-.L214,.L77-.L214
	.half	1
	.byte	82
	.word	0,0
.L638:
	.word	-1,.L214,0,.L739-.L214
	.half	1
	.byte	100
	.word	0,0
.L644:
	.word	-1,.L214,.L742-.L214,.L74-.L214
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_loc'
.L215:
	.word	-1,.L216,0,.L577-.L216
	.half	2
	.byte	138,0
	.word	0,0
.L578:
	.word	-1,.L216,0,.L577-.L216
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_loc'
.L217:
	.word	-1,.L218,0,.L579-.L218
	.half	2
	.byte	138,0
	.word	0,0
.L581:
	.word	-1,.L218,0,.L579-.L218
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setAllIdleExceptMasterCpu')
	.sect	'.debug_loc'
.L239:
	.word	-1,.L240,0,.L663-.L240
	.half	2
	.byte	138,0
	.word	0,0
.L664:
	.word	-1,.L240,.L246-.L240,.L489-.L240
	.half	1
	.byte	84
	.word	.L260-.L240,.L444-.L240
	.half	1
	.byte	84
	.word	.L244-.L240,.L484-.L240
	.half	1
	.byte	84
	.word	.L248-.L240,.L479-.L240
	.half	1
	.byte	84
	.word	0,.L774-.L240
	.half	1
	.byte	84
	.word	.L242-.L240,.L494-.L240
	.half	1
	.byte	84
	.word	.L250-.L240,.L474-.L240
	.half	1
	.byte	84
	.word	.L775-.L240,.L776-.L240
	.half	1
	.byte	84
	.word	.L777-.L240,.L464-.L240
	.half	1
	.byte	84
	.word	.L778-.L240,.L779-.L240
	.half	1
	.byte	84
	.word	.L780-.L240,.L781-.L240
	.half	1
	.byte	84
	.word	.L782-.L240,.L783-.L240
	.half	1
	.byte	84
	.word	.L246-.L240,.L784-.L240
	.half	1
	.byte	84
	.word	.L113-.L240,.L663-.L240
	.half	1
	.byte	84
	.word	0,0
.L673:
	.word	0,0
.L669:
	.word	-1,.L240,.L667-.L240,.L773-.L240
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L678:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_loc'
.L219:
	.word	-1,.L220,0,.L527-.L220
	.half	2
	.byte	138,0
	.word	0,0
.L528:
	.word	-1,.L220,0,.L743-.L220
	.half	1
	.byte	100
	.word	0,0
.L530:
	.word	-1,.L220,.L743-.L220,.L527-.L220
	.half	1
	.byte	82
	.word	0,0
.L529:
	.word	-1,.L220,0,.L743-.L220
	.half	1
	.byte	84
	.word	.L743-.L220,.L527-.L220
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_loc'
.L221:
	.word	-1,.L222,0,.L531-.L222
	.half	2
	.byte	138,0
	.word	0,0
.L532:
	.word	-1,.L222,.L210-.L222,.L459-.L222
	.half	1
	.byte	100
	.word	.L746-.L222,.L419-.L222
	.half	1
	.byte	100
	.word	0,.L531-.L222
	.half	1
	.byte	100
	.word	0,0
.L541:
	.word	0,0
.L544:
	.word	-1,.L222,.L747-.L222,.L419-.L222
	.half	1
	.byte	111
	.word	.L748-.L222,.L80-.L222
	.half	1
	.byte	111
	.word	.L81-.L222,.L531-.L222
	.half	1
	.byte	111
	.word	0,0
.L533:
	.word	-1,.L222,.L210-.L222,.L459-.L222
	.half	1
	.byte	84
	.word	.L746-.L222,.L419-.L222
	.half	1
	.byte	84
	.word	0,.L749-.L222
	.half	1
	.byte	84
	.word	0,0
.L537:
	.word	-1,.L222,.L744-.L222,.L745-.L222
	.half	1
	.byte	95
	.word	0,0
.L534:
	.word	-1,.L222,.L210-.L222,.L459-.L222
	.half	1
	.byte	82
	.word	.L746-.L222,.L419-.L222
	.half	1
	.byte	82
	.word	.L535-.L222,.L531-.L222
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_loc'
.L225:
	.word	-1,.L226,0,.L750-.L226
	.half	2
	.byte	138,0
	.word	.L750-.L226,.L582-.L226
	.half	2
	.byte	138,8
	.word	.L582-.L226,.L582-.L226
	.half	2
	.byte	138,0
	.word	0,0
.L583:
	.word	-1,.L226,0,.L582-.L226
	.half	1
	.byte	100
	.word	0,0
.L585:
	.word	-1,.L226,.L750-.L226,.L85-.L226
	.half	1
	.byte	82
	.word	.L85-.L226,.L582-.L226
	.half	5
	.byte	144,32,157,32,0
	.word	.L87-.L226,.L751-.L226
	.half	1
	.byte	82
	.word	0,0
.L587:
	.word	-1,.L226,0,.L582-.L226
	.half	2
	.byte	145,120
	.word	0,0
.L584:
	.word	-1,.L226,0,.L582-.L226
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_loc'
.L227:
	.word	-1,.L228,0,.L545-.L228
	.half	2
	.byte	138,0
	.word	0,0
.L546:
	.word	-1,.L228,0,.L549-.L228
	.half	1
	.byte	100
	.word	.L752-.L228,.L545-.L228
	.half	1
	.byte	111
	.word	0,0
.L547:
	.word	-1,.L228,0,.L549-.L228
	.half	1
	.byte	84
	.word	0,0
.L548:
	.word	-1,.L228,.L549-.L228,.L545-.L228
	.half	1
	.byte	82
	.word	0,0
.L551:
	.word	-1,.L228,.L753-.L228,.L90-.L228
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_triggerCpuReset')
	.sect	'.debug_loc'
.L233:
	.word	-1,.L234,0,.L552-.L234
	.half	2
	.byte	138,0
	.word	0,0
.L553:
	.word	-1,.L234,0,.L760-.L234
	.half	1
	.byte	84
	.word	.L210-.L234,.L459-.L234
	.half	1
	.byte	95
	.word	.L746-.L234,.L419-.L234
	.half	1
	.byte	95
	.word	.L554-.L234,.L763-.L234
	.half	1
	.byte	95
	.word	.L99-.L234,.L100-.L234
	.half	1
	.byte	84
	.word	.L198-.L234,.L439-.L234
	.half	1
	.byte	95
	.word	.L765-.L234,.L766-.L234
	.half	1
	.byte	95
	.word	.L236-.L234,.L767-.L234
	.half	1
	.byte	95
	.word	0,0
.L562:
	.word	0,0
.L564:
	.word	-1,.L234,.L747-.L234,.L419-.L234
	.half	1
	.byte	111
	.word	.L764-.L234,.L99-.L234
	.half	1
	.byte	111
	.word	.L101-.L234,.L763-.L234
	.half	1
	.byte	111
	.word	.L198-.L234,.L439-.L234
	.half	1
	.byte	111
	.word	.L236-.L234,.L768-.L234
	.half	1
	.byte	111
	.word	.L765-.L234,.L552-.L234
	.half	1
	.byte	111
	.word	0,0
.L560:
	.word	-1,.L234,.L210-.L234,.L459-.L234
	.half	1
	.byte	88
	.word	.L210-.L234,.L459-.L234
	.half	1
	.byte	82
	.word	.L746-.L234,.L419-.L234
	.half	1
	.byte	88
	.word	.L746-.L234,.L419-.L234
	.half	1
	.byte	82
	.word	.L561-.L234,.L99-.L234
	.half	1
	.byte	88
	.word	.L760-.L234,.L99-.L234
	.half	1
	.byte	82
	.word	.L100-.L234,.L763-.L234
	.half	1
	.byte	88
	.word	.L100-.L234,.L763-.L234
	.half	1
	.byte	82
	.word	.L198-.L234,.L439-.L234
	.half	1
	.byte	88
	.word	.L236-.L234,.L768-.L234
	.half	1
	.byte	88
	.word	.L765-.L234,.L552-.L234
	.half	1
	.byte	88
	.word	.L769-.L234,.L552-.L234
	.half	1
	.byte	84
	.word	0,0
.L556:
	.word	-1,.L234,.L761-.L234,.L762-.L234
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_waitEvent')
	.sect	'.debug_loc'
.L229:
	.word	-1,.L230,0,.L645-.L230
	.half	2
	.byte	138,0
	.word	0,0
.L651:
	.word	-1,.L230,.L655-.L230,.L645-.L230
	.half	1
	.byte	89
	.word	0,0
.L647:
	.word	-1,.L230,0,.L754-.L230
	.half	1
	.byte	100
	.word	.L755-.L230,.L756-.L230
	.half	5
	.byte	144,32,157,32,0
	.word	.L92-.L230,.L93-.L230
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L652:
	.word	-1,.L230,.L95-.L230,.L645-.L230
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L653:
	.word	-1,.L230,.L759-.L230,.L645-.L230
	.half	1
	.byte	81
	.word	0,0
.L650:
	.word	-1,.L230,.L758-.L230,.L645-.L230
	.half	1
	.byte	111
	.word	0,0
.L648:
	.word	-1,.L230,0,.L754-.L230
	.half	1
	.byte	84
	.word	.L757-.L230,.L645-.L230
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1200:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_acquireMutex')
	.sect	'.debug_frame'
	.word	44
	.word	.L1200,.L194,.L571-.L194
	.byte	8,18,8,19,8,21,8,22,8,23,4
	.word	(.L684-.L194)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L571-.L684)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_disableOverlayBlock')
	.sect	'.debug_frame'
	.word	12
	.word	.L1200,.L196,.L588-.L196
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_enableOverlayBlock')
	.sect	'.debug_frame'
	.word	12
	.word	.L1200,.L200,.L598-.L200
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getCoreMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L1200,.L204,.L506-.L204
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L1200,.L208,.L521-.L208
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getRandomValue')
	.sect	'.debug_frame'
	.word	24
	.word	.L1200,.L212,.L618-.L212
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getRandomValueWithinRange')
	.sect	'.debug_frame'
	.word	12
	.word	.L1200,.L214,.L637-.L214
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_releaseMutex')
	.sect	'.debug_frame'
	.word	24
	.word	.L1200,.L216,.L577-.L216
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_resetSpinLock')
	.sect	'.debug_frame'
	.word	24
	.word	.L1200,.L218,.L579-.L218
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setCoreMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L1200,.L220,.L527-.L220
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setProgramCounter')
	.sect	'.debug_frame'
	.word	24
	.word	.L1200,.L222,.L531-.L222
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setSpinLock')
	.sect	'.debug_frame'
	.word	44
	.word	.L1200,.L226,.L582-.L226
	.byte	8,18,8,19,8,21,8,22,8,23,4
	.word	(.L750-.L226)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L582-.L750)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_startCore')
	.sect	'.debug_frame'
	.word	12
	.word	.L1200,.L228,.L545-.L228
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_waitEvent')
	.sect	'.debug_frame'
	.word	12
	.word	.L1200,.L230,.L645-.L230
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_emitEvent')
	.sect	'.debug_frame'
	.word	24
	.word	.L1200,.L232,.L661-.L232
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_triggerCpuReset')
	.sect	'.debug_frame'
	.word	12
	.word	.L1200,.L234,.L552-.L234
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_getCpuResetStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L1200,.L238,.L566-.L238
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_setAllIdleExceptMasterCpu')
	.sect	'.debug_frame'
	.word	20
	.word	.L1200,.L240,.L663-.L240
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_disableInterruptsAllExceptMaster')
	.sect	'.debug_frame'
	.word	12
	.word	.L1200,.L264,.L680-.L264
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1201:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_39')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L198,.L439-.L198
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_32')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L202,.L404-.L202
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_34')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L206,.L414-.L206
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_43')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L210,.L459-.L210
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_35')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L224,.L419-.L224
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_33')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L236,.L409-.L236
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_50')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L242,.L494-.L242
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_48')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L244,.L484-.L244
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_49')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L246,.L489-.L246
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_47')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L248,.L479-.L248
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_46')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L250,.L474-.L250
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_44')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L252,.L464-.L252
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_38')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L254,.L434-.L254
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_37')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L256,.L429-.L256
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_30')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L258,.L394-.L258
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_40')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L260,.L444-.L260
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_29')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L262,.L389-.L262
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_45')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L266,.L469-.L266
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_52')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L268,.L504-.L268
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_51')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L270,.L499-.L270
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_42')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L272,.L454-.L272
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_41')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L274,.L449-.L274
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_36')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L276,.L424-.L276
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_31')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L278,.L399-.L278
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_28')
	.sect	'.debug_frame'
	.word	24
	.word	.L1201,.L280,.L384-.L280
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.c	   968  }

	; Module end
